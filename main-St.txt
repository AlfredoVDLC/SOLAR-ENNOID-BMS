
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000800 l    d  .fill	00000000 .fill
08001800 l    d  .text	00000000 .text
080133d8 l    d  .rodata	00000000 .rodata
08017c00 l    d  .init_array	00000000 .init_array
08017c04 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000200 l    d  .bss	00000000 .bss
20006cdc l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 EBMS-startup.c
00000000 l    df *ABS*	00000000 crtstuff.c
080133c0 l     O .text	00000000 __EH_FRAME_BEGIN__
08001800 l     F .text	00000000 __do_global_dtors_aux
20000200 l       .bss	00000001 completed.1
08017c04 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08001824 l     F .text	00000000 frame_dummy
20000204 l       .bss	00000018 object.0
08017c00 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 modCAN.c
20001984 l     O .bss	000023dc modCANRxFrames
080030a4 l     F .text	00000014 modCANSendPacketWrapper
200014d4 l     O .bss	00000024 RxMessage.6
200014f8 l     O .bss	0000001c TxMessage.7
20001516 l     O .bss	00000001 commands_send.3
20001517 l     O .bss	00000001 crc_high.1
20001518 l     O .bss	00000001 crc_low.0
2000151c l     O .bss	00000004 ind.4
20001580 l     O .bss	00000400 modCANRxBuffer
20001980 l     O .bss	00000001 modCANRxBufferLastID
20001981 l     O .bss	00000001 modCANRxFrameRead
20001982 l     O .bss	00000001 modCANRxFrameWrite
20003d70 l     O .bss	00000004 rxbuf_len.2
20003d74 l     O .bss	000000c8 stat_msgs
20003e3c l     O .bss	000000a0 stat_msgs_2
20003edc l     O .bss	000000a0 stat_msgs_3
20003f7c l     O .bss	000000f0 stat_msgs_4
2000406c l     O .bss	000000a0 stat_msgs_5
00000000 l    df *ABS*	00000000 modCommands.c
0800350c l     F .text	00000024 NVIC_SystemReset
20004250 l     O .bss	00000400 modCommandsSendBuffer
20004650 l     O .bss	00000004 modCommandsSendFunction
20004658 l     O .bss	000000ff print_buffer.0
00000000 l    df *ABS*	00000000 modConfig.c
00000000 l    df *ABS*	00000000 modDelay.c
20004890 l     O .bss	00000004 hmsCnt
20004894 l     O .bss	00000004 msTicks.1
00000000 l    df *ABS*	00000000 modDisplay.c
20004898 l     O .bss	00000004 displayRefreshLastTick.0
200048a0 l     O .bss	00000038 modDisplayDataLast.1
00000000 l    df *ABS*	00000000 modEffect.c
200048f1 l     O .bss	00000001 LEDOnState.11
200048f2 l     O .bss	00000001 LEDOnState.2
200048f3 l     O .bss	00000001 LEDOnState.4
200048f4 l     O .bss	00000001 LEDOnState.6
200048f5 l     O .bss	00000001 LEDOnState.8
200048f6 l     O .bss	00000001 LEDOnState.9
200048f8 l     O .bss	00000004 error.13
200048fc l     O .bss	00000001 errorCounter.0
20004900 l     O .bss	00000004 lastTick.1
20004904 l     O .bss	00000004 lastTick.10
20004908 l     O .bss	00000004 lastTick.12
2000490c l     O .bss	00000004 lastTick.3
20004910 l     O .bss	00000004 lastTick.5
20004914 l     O .bss	00000004 lastTick.7
00000000 l    df *ABS*	00000000 modFlash.c
20004918 l     O .bss	00000001 highLowByte.3
2000491c l     O .bss	00000004 newAddressOffset.2
20004920 l     O .bss	00000004 newData.1
20004924 l     O .bss	00000001 newStoredData.0
08013414 l     O .rodata	00000190 flash_addr
00000000 l    df *ABS*	00000000 modOperationalState.c
00000000 l    df *ABS*	00000000 modPowerElectronics.c
200049a8 l     O .bss	00000001 chargeLastState.13
200049a9 l     O .bss	00000001 chargePFETLastState.12
200049aa l     O .bss	00000001 coolingLastState.11
200049b1 l     O .bss	00000001 delaytoggle.9
200049b2 l     O .bss	00000001 dischargeLastState.14
200049b4 l     O .bss	00000002 filteredChargeThrottle.6
200049b6 l     O .bss	00000002 filteredDisChargeThrottle.5
200049b8 l     O .bss	00000001 lastChargeAllowed.8
200049b9 l     O .bss	00000001 lastdisChargeLCAllowed.7
20004a04 l     O .bss	00000001 preChargeLastState.15
20000018 l     O .data	00000004 delayTimeHolder.10
2000001c l     O .data	00000004 hysteresysBMS.4
20000020 l     O .data	00000004 hysteresysCharge.2
20000024 l     O .data	00000004 hysteresysDischarge.3
20000028 l     O .data	00000001 lastPackInSOACharge.0
20000029 l     O .data	00000001 lastPackInSOADisCharge.1
00000000 l    df *ABS*	00000000 modPowerState.c
2000002a l     O .data	00000001 firstTrigger.0
00000000 l    df *ABS*	00000000 modStateOfCharge.c
00000000 l    df *ABS*	00000000 modTerminal.c
20004a50 l     O .bss	00000004 callback_write
20004a54 l     O .bss	00000190 callbacks
00000000 l    df *ABS*	00000000 modUART.c
00000000 l    df *ABS*	00000000 driverSWStorageManager.c
00000000 l    df *ABS*	00000000 driverSWSSD1306.c
200053f4 l     O .bss	00000002 pixelByte.2
200053f6 l     O .bss	00000011 writeData.3
00000000 l    df *ABS*	00000000 driverSWLTC6804.c
2000542c l     O .bss	00000004 steinhart.0
08014730 l     O .rodata	00000400 crc15Table
00000000 l    df *ABS*	00000000 driverSWISL28022.c
00000000 l    df *ABS*	00000000 driverSWADC128D818.c
20005438 l     O .bss	00000004 steinhart.0
08014b30 l     O .rodata	00000009 ADC128Address
00000000 l    df *ABS*	00000000 driverSWUART2.c
00000000 l    df *ABS*	00000000 driverHWADC.c
00000000 l    df *ABS*	00000000 driverHWEEPROM.c
0800a354 l     F .text	00000024 driverHWEEPROMVerifyPageFullyErased
0800a378 l     F .text	00000078 driverHWEEPROMVerifyPageFullWriteVariable
0800a3f0 l     F .text	00000058 driverHWEEPROMFormat
00000000 l    df *ABS*	00000000 driverHWI2C1.c
00000000 l    df *ABS*	00000000 driverHWI2C2.c
00000000 l    df *ABS*	00000000 driverHWPowerState.c
00000000 l    df *ABS*	00000000 driverHWSPI1.c
00000000 l    df *ABS*	00000000 driverHWSwitches.c
00000000 l    df *ABS*	00000000 driverHWStatus.c
00000000 l    df *ABS*	00000000 driverHWUART2.c
20005594 l     O .bss	00000004 bufferTail.0
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_adc_ex.c
0800ade2 l     F .text	0000006e ADC_Disable
0800ae50 l     F .text	0000005c ADC_Enable
00000000 l    df *ABS*	00000000 stm32f3xx_hal_can.c
0800ba62 l     F .text	000000f2 CAN_Receive_IT.isra.0
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_dma.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_flash.c
0800c3cc l     F .text	00000038 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f3xx_hal_flash_ex.c
0800c514 l     F .text	00000024 FLASH_MassErase
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800c8d0 l     F .text	0000001c I2C_Flush_TXDR
0800c8ec l     F .text	0000002a I2C_TransferConfig
0800c916 l     F .text	0000004c I2C_WaitOnFlagUntilTimeout
0800c962 l     F .text	0000007c I2C_IsAcknowledgeFailed
0800c9de l     F .text	00000052 I2C_WaitOnTXISFlagUntilTimeout
0800ca30 l     F .text	00000078 I2C_WaitOnRXNEFlagUntilTimeout
0800caa8 l     F .text	0000004e I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800d78c l     F .text	000000a0 SPI_WaitFifoStateUntilTimeout
0800d82c l     F .text	0000008a SPI_WaitFlagStateUntilTimeout
0800d8b6 l     F .text	00000034 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 stm32f3xx_hal_uart.c
0800dcda l     F .text	00000026 UART_DMAError
0800dca2 l     F .text	0000002a UART_DMAReceiveCplt
0800dcce l     F .text	0000000a UART_DMARxHalfCplt
08014c34 l     O .rodata	00000003 CSWTCH.33
00000000 l    df *ABS*	00000000 stm32f3xx_it.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_msp.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 libBuffer.c
00000000 l    df *ABS*	00000000 libCRC.c
00000000 l    df *ABS*	00000000 libGraphics.c
00000000 l    df *ABS*	00000000 libPacket.c
20005a84 l     O .bss	00001040 libPacketHandlerStates
00000000 l    df *ABS*	00000000 libRingBuffer.c
00000000 l    df *ABS*	00000000 libMempools.c
20006ac4 l     O .bss	00000004 m_conf_highest
20006ac8 l     O .bss	000001fe m_confs
00000000 l    df *ABS*	00000000 confparser.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
0800f490 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sf_frexp.c
00000000 l    df *ABS*	00000000 sf_ldexp.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
080102c8 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08017a58 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08011dc0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 strtol.c
080123c8 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
080124d0 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08012940 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20006cd8 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 libLogos.c
00000000 l    df *ABS*	00000000 libGLCDFont.c
00000000 l    df *ABS*	00000000 confxml.c
00000000 l    df *ABS*	00000000 impure.c
20000034 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08017c04 l       .init_array	00000000 __init_array_end
08017c00 l       .init_array	00000000 __preinit_array_end
08017c00 l       .init_array	00000000 __init_array_start
08017c00 l       .init_array	00000000 __preinit_array_start
0800f300  w    F .text	00000002 RTC_Alarm_IRQHandler
08012d9c g     F .text	00000010 _malloc_usable_size_r
0800f5b8 g     F .text	000000c4 __cvt
0800e234 g     F .text	00000040 HAL_ADC_MspInit
08012074 g     F .text	000000b4 _scanf_chars
08003674 g     F .text	00001180 modCommandsProcessPacket
0800f300  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08006ea0 g     F .text	00000034 modPowerElectronicsHCSafetyCANAndPowerButtonCheck
08014c47 g     O .rodata	00000008 APBPrescTable
20004a21 g     O .bss	00000001 modPowerStatePulsePowerDownDesired
08002294 g     F .text	0000002c .hidden __aeabi_dcmpun
0800f300  w    F .text	00000002 TIM8_CC_IRQHandler
08012d7c g     F .text	00000020 _isatty_r
08002258 g     F .text	00000012 .hidden __aeabi_dcmple
0801010a g     F .text	00000010 strcpy
20004986 g     O .bss	00000001 modOperationalStateNewFaultState
08012dcc g     F .text	00000010 _getpid
0800f300  w    F .text	00000002 SVCall_Handler
08002194 g     F .text	0000007a .hidden __cmpdf2
08010ff4 g     F .text	00000024 _lseek_r
0800f300  w    F .text	00000002 DebugMon_Handler
08012ef0 g     F .text	00000084 log
200049a0 g     O .bss	00000004 modOperationalStateWatchDogCountdownLastTick
08002194 g     F .text	0000007a .hidden __eqdf2
08002708 g     F .text	00000098 modCANSendStatusSlow
0800bdc4 g     F .text	0000004a HAL_DMA_Init
200049f4 g     O .bss	00000004 modPowerElectronicsSOAChargeChangeLastTick
0800fef8 g     F .text	0000004c ldexpf
08001b5c g     F .text	0000005a .hidden __floatdidf
08014e50 g     O .rodata	00001c00 libLogos
08012d14 g     F .text	00000024 _kill_r
0800eb50 g     F .text	00000148 libGraphicsWrite
0800a0f8 g     F .text	00000024 driverSWUART2Init
08009124 g     F .text	0000001a driverSWLTC6804DelayMS
08004d2c g     F .text	00000044 modDisplay0_01ConvertValueToASCII
0800d524 g     F .text	00000030 HAL_RCC_GetPCLK1Freq
08004b20 g     F .text	00000020 modDelayTick1ms
0800f300  w    F .text	00000002 TIM1_CC_IRQHandler
0800bd00 g     F .text	00000064 HAL_NVIC_SetPriority
0800d554 g     F .text	00000030 HAL_RCC_GetPCLK2Freq
200049f8 g     O .bss	00000004 modPowerElectronicsSOADisChargeChangeLastTick
20004a00 g     O .bss	00000001 modPowerElectronicsUnderAndOverTemperatureErrorCount
080100de g     F .text	00000024 __sseek
080129f0 g     F .text	00000070 __sinit
0801262c g     F .text	000000a4 __swbuf_r
0800a288 g     F .text	000000cc driverHWADCGetNTCValue
0800f300  w    F .text	00000002 HardFault_Handler
20004930 g     O .bss	00000004 modOperationalStateChargerDisconnectDetectDelay
0800eb2c g     F .text	00000014 libGraphicsSetTextColor_0
08004db4 g     F .text	00000090 modDisplayWrite
08004c30 g     F .text	00000034 modDisplay100ConvertValueToASCII
08012994 g     F .text	0000002c __sfmoreglue
20001528 g     O .bss	00000004 modCANErrorLastTick
0800ecd4 g     F .text	0000008c libPacketSendPacket
08011024 g     F .text	0000000c __malloc_unlock
08012e4c g     F .text	000000a0 round
08008e7c g     F .text	00000028 driverSWSSD1306Command
2000499c g     O .bss	00000004 modOperationalStateStartupDelay
00000400 g       *ABS*	00000000 _Min_Stack_Size
200049dc g     O .bss	00000004 modPowerElectronicsChargeRetryLastTick
080054a4 g     F .text	0000002c modEffectChangeStateError
0800f300  w    F .text	00000002 USB_HP_IRQHandler
0800916c g     F .text	0000000a driverSWLTC6804Write
20005498 g     O .bss	0000004c driverHWI2C1
08008da8 g     F .text	00000018 driverSWStorageManagerGetOffsetFromLocation
08005520 g     F .text	00000064 modEffectTaskBlinkShort
20000000 g     O .data	00000018 STATStatuses
0800e1aa g     F .text	0000000e SysTick_Handler
0800c78c g     F .text	0000000a HAL_GPIO_WritePin
08008f70 g     F .text	00000010 driverSWSSD1306ClearDisplayBuffers
20004a18 g     O .bss	00000001 modPowerStateLastButtonFirstPress
08008d28 g     F .text	00000070 driverSWStorageManagerInit
0800f300  w    F .text	00000002 PVD_IRQHandler
0800a4c0 g     F .text	000001a8 driverHWEEPROMInit
20004994 g     O .bss	00000004 modOperationalStatePackStatehandle
080059e8 g     F .text	00000028 modOperationalStatePowerDownDelayCheck
20004bea g     O .bss	00000002 driverSWStorageManagerConfigStructSize
08012c20 g     F .text	00000034 memmove
08007328 g     F .text	0000001e modPowerElectronicsCellMonitorsStartLoadedCellConversion
0800f300  w    F .text	00000002 TAMP_STAMP_IRQHandler
08017c08 g       *ABS*	00000000 _sidata
0800d518 g     F .text	0000000c HAL_RCC_GetHCLKFreq
0800e1a8 g     F .text	00000002 PendSV_Handler
08004cb4 g     F .text	00000038 modDisplay1ConvertValueToASCII
200049ec g     O .bss	00000004 modPowerElectronicsMeasureIntervalLastTick
0800f300  w    F .text	00000002 NMI_Handler
08007b10 g     F .text	0000005c modPowerElectronicsLCSenseSample
0800bd64 g     F .text	00000018 HAL_NVIC_EnableIRQ
08011030 g     F .text	00000080 _Balloc
08017c00 g       .init_array	00000000 __exidx_end
08010184 g     F .text	00000050 __strtok_r
0800f300  w    F .text	00000002 EXTI3_IRQHandler
0800eeb4 g     F .text	00000014 libRingBufferIncrStart
08005708 g     F .text	00000012 modEffectInit
0800918c g     F .text	00000080 driverSWLTC6804ReadConfigRegister
080035a4 g     F .text	00000068 modCommandsVESCToEBMS
0800d350 g     F .text	00000064 HAL_RCC_GetSysClockFreq
080082b4 g     F .text	0000098c modTerminalProcessString
0800dccc  w    F .text	00000002 HAL_UART_RxHalfCpltCallback
08002184 g     F .text	0000008a .hidden __gtdf2
080059a0 g     F .text	00000010 modOperationalStateTerminateOperation
08007924 g     F .text	00000028 modPowerElectronicsCellMonitorsEnableBalanceResistorsArray
08010fbc g     F .text	0000000c __errno
08003334 g     F .text	00000118 modCANHandleSubTaskCharger
0800f300  w    F .text	00000002 SPI4
080070c8 g     F .text	00000020 modPowerElectronicsCellMonitorsCheckAndSolveInitState
0800c798 g     F .text	00000092 HAL_IWDG_Init
20004ff4 g     O .bss	00000400 displayBufferReal
20001515 g     O .bss	00000001 chargerOpStateNew
0800caf6 g     F .text	0000009c HAL_I2C_Init
20000220 g     O .bss	00000004 generalStateOfCharge
20004bee g     O .bss	00000001 driverSWStorageManagerStateOfChargeEmpty
0800e1b8 g     F .text	0000007c HAL_MspInit
0800bdba  w    F .text	00000002 HAL_SYSTICK_Callback
08012d58 g     F .text	00000024 _fstat_r
080094f4 g     F .text	000000b0 driverSWLTC6804ReadCellVoltagesArray
20006cd0 g     O .bss	00000004 errno
08012128 g     F .text	000001f0 _scanf_i
080100a2 g     F .text	00000004 __seofread
080133d8 g       .text	00000000 _etext
20000200 g       .bss	00000000 _sbss
200055d4 g     O .bss	00000070 driverHWUART2Handle
08002220 g     F .text	00000010 .hidden __aeabi_cdcmple
200048e0 g     O .bss	00000001 modDisplayPresent
08007a90 g     F .text	00000080 modPowerElectronicsCalcPackCurrent
20004980 g     O .bss	00000004 modOperationalStateGeneralStateOfCharge
20004a03 g     O .bss	00000001 modPowerElectronicsVoltageSenseError
0800e69e g     F .text	00000014 libBufferGet_int16
0800ce4c g     F .text	00000048 HAL_RCC_DeInit
0800f300  w    F .text	00000002 I2C3_ER_IRQHandler
0800e694 g     F .text	0000000a libBufferGet_uint8
08007fe0 g     F .text	0000000c modPowerStateGetButtonPressedState
20001524 g     O .bss	00000004 modCANChargerTaskIntervalLastTick
08002f50 g     F .text	0000002c modCANTransmitStandardID
0800be0e g     F .text	00000052 HAL_DMA_Start_IT
20003d60 g     O .bss	00000004 modCANSafetyCANMessageTimeout
20004a05 g     O .bss	00000001 modPowerStateButtonActuated
20001514 g     O .bss	00000001 chargerOpState
2000021c g     O .bss	00000004 generalConfig
0800258c g     F .text	00000024 modCANGetDestinationID
20004a12 g     O .bss	00000001 modPowerStateForceOnDesired
08006844 g     F .text	0000026c modPowerElectronicsSubTaskVoltageWatch
0800c5f8 g     F .text	00000188 HAL_GPIO_Init
08006ce8 g     F .text	000001b8 modPowerElectronicsCheckPackSOA
200048e8 g     O .bss	00000001 toggleButtonPressed
080032cc g     F .text	00000068 modCANOpenChargerSetCurrentVoltageReady
0800c886 g     F .text	0000004a HAL_IWDG_Refresh
08016a50 g     O .rodata	00000500 font
20004758 g     O .bss	00000138 modConfigGeneralConfig
2000152c g     O .bss	00000004 modCANGeneralConfigHandle
0800f3cc g     F .text	0000001c memcpy
08002210 g     F .text	00000020 .hidden __aeabi_cdrcmple
0800acfc g     F .text	00000020 driverHWUART2SendChar
0800933a g     F .text	00000046 driverSWLTC6804StartAuxVoltageConversion
0800b230 g     F .text	0000013c HAL_ADC_PollForConversion
20005a74 g     O .bss	00000002 cursor_y
0800abe4 g     F .text	00000048 driverHWStatusInit
08012988 g     F .text	0000000c _cleanup_r
0801181c g     F .text	00000200 _svfprintf_r
08001ae4 g     F .text	00000022 .hidden __floatsidf
0800218c g     F .text	00000082 .hidden __ltdf2
0800aa74 g     F .text	0000005c driverHWSPI1Write
0800f300  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800f300  w    F .text	00000002 EXTI0_IRQHandler
200049d8 g     O .bss	00000004 modPowerElectronicsChargeIncreaseLastTick
0800f300  w    F .text	00000002 I2C2_EV_IRQHandler
0800a9f8 g     F .text	00000020 driverHWPowerStateReadInput
0800829c g     F .text	00000018 modStateOfChargeVoltageEvent
08009044 g     F .text	000000e0 driverSWSSD1306DrawPixel
200048e9 g     O .bss	00000001 toggleButtonPressedCounter
0800ab7c g     F .text	00000048 driverHWSwitchesInit
0800f300  w    F .text	00000002 FPU_IRQHandler
0800adc8  w    F .text	0000001a HAL_Delay
08002b1c g     F .text	00000434 modCANSubTaskHandleCommunication
0800739c g     F .text	00000588 modPowerElectronicsTerminalCellConnectionTest
2000002c g     O .data	00000004 SystemCoreClock
0800f300  w    F .text	00000002 EXTI2_TS_IRQHandler
08008e30 g     F .text	0000004c driverSWStorageManagerGetStruct
20004934 g     O .bss	00000004 modOperationalStateChargerTimeout
080057e4 g     F .text	00000090 modFlashJumpToBootloader
0800f300  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800a11c g     F .text	00000034 driverSWUART2Task
0800f38c g     F .text	00000010 malloc
0800e620 g     F .text	00000074 libBufferAppend_float32_auto
08012cb2 g     F .text	00000050 _raise_r
08012dbc g     F .text	00000010 _fstat
08007150 g     F .text	00000018 modPowerElectronicsCellMonitorsStartCellConversion
2000157c g     O .bss	00000004 modCANPackStateHandle
0801026c g     F .text	0000003c __assert_func
08017990 g     O .rodata	000000c8 __mprec_tens
0800a174 g     F .text	000000a4 driverHWADCInit
0800f280 g     F .text	00000080 confparser_set_defaults_main_config_t
20004a10 g     O .bss	00000001 modPowerStateButtonPressedVar
08005a10 g     F .text	00000028 modOperationalStateUpdateFaultStates
0800f300  w    F .text	00000002 UsageFault_Handler
0800eb18 g     F .text	00000014 libGraphicsSetCursor
0801022c g     F .text	0000001c vsnprintf
0800e564 g     F .text	0000002a libBufferAppend_int32
08001bb8 g     F .text	00000040 .hidden __fixunsdfsi
080070e8 g     F .text	00000068 modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData
08009d0c g     F .text	000000ac driverSWISL28022GetBusVoltage
08004bf4 g     F .text	0000003c modDisplayTask
0800f300  w    F .text	00000002 ADC1_2_IRQHandler
08005584 g     F .text	00000064 modEffectTaskBlinkLong
08008c40 g     F .text	00000064 modTerminalRegisterCommandCallBack
08011a96 g     F .text	0000003a __ssrefill_r
08012d38 g     F .text	00000004 _getpid_r
20000200 g       .bss	00000000 __bss_start__
08009270 g     F .text	00000034 driverSWLTC6804ResetAuxRegisters
0800c780 g     F .text	0000000c HAL_GPIO_ReadPin
08001ac4 g     F .text	0000001e .hidden __aeabi_ui2d
08010fec g     F .text	00000008 _localeconv_r
080092a4 g     F .text	0000004a driverSWLTC6804StartCellVoltageConversion
20004a44 g     O .bss	00000004 modStateOfChargePackStatehandle
08011220 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
0800f300  w    F .text	00000002 SPI1_IRQHandler
0800c55c g     F .text	0000009c HAL_FLASHEx_Erase
0800f300  w    F .text	00000002 CAN_SCE_IRQHandler
20004988 g     O .bss	00000004 modOperationalStateNotUsedResetDelay
08001840 g     F .text	00000000 .hidden __aeabi_drsub
080123ac g     F .text	0000001a finitef
0800fe8c g     F .text	00000020 _sbrk_r
0800b6a4 g     F .text	000000c6 HAL_CAN_ConfigFilter
0800b9e0 g     F .text	00000080 HAL_CAN_Receive_IT
0800b374 g     F .text	00000330 HAL_ADC_ConfigChannel
08009728 g     F .text	00000150 driverSWLTC6804WriteConfigRegister
0800dca0  w    F .text	00000002 HAL_UART_RxCpltCallback
08005938 g     F .text	00000068 modOperationalStateHandleChargerDisconnect
080034f8 g     F .text	00000014 comm_can_get_status_msg_4_index
08006ed4 g     F .text	00000010 modPowerElectronicsResetBalanceModeActiveTimeout
080059b0 g     F .text	00000038 modOperationalStateDelayedDisable
0800f300  w    F .text	00000002 TIM6_DAC_IRQHandler
08006ab0 g     F .text	000001dc modPowerElectronicsCalcTempStats
0800dd00 g     F .text	0000022c UART_SetConfig
200049ba g     O .bss	00000001 modPowerElectronicsAllowForcedOnState
0800a74c g     F .text	000000ac driverHWI2C1Init
08012318 g     F .text	00000024 _read_r
0800923c g     F .text	00000034 driverSWLTC6804ResetCellVoltageRegisters
2000497c g     O .bss	00000004 modOperationalStateGeneralConfigHandle
08007ff4 g     F .text	00000028 modPowerStatePowerdownRequest
08002244 g     F .text	00000012 .hidden __aeabi_dcmplt
20005a44 g     O .bss	00000004 uwTick
08002310 g     F .text	00000092 SystemClock_Config
0800aa18 g     F .text	0000005c driverHWSPI1Init
08008f90 g     F .text	00000010 driverSWSSD1306FillBuffer
0800bd7c g     F .text	00000028 HAL_SYSTICK_Config
08001b08 g     F .text	00000042 .hidden __extendsfdf2
08011ad0 g     F .text	000002f0 __ssvfscanf_r
08001fb4 g     F .text	000001d0 .hidden __aeabi_ddiv
0800f300  w    F .text	00000002 TIM8_UP_IRQHandler
20001574 g     O .bss	00000004 modCANLastRXDifferLastTick
0800184c g     F .text	00000276 .hidden __adddf3
0800e5f8 g     F .text	00000014 libBufferAppend_float16
20005a48 g     O .bss	00000020 pFlash
0800f300  w    F .text	00000002 USBWakeUP_IRQHandler
0800aeac g     F .text	00000234 HAL_ADC_Init
20004bf2 g     O .bss	00000001 _i2caddr
08017c00 g       .init_array	00000000 __exidx_start
20005430 g     O .bss	00000001 driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard
08001d60 g     F .text	00000254 .hidden __aeabi_dmul
08004b74 g     F .text	00000018 modDelayTick1msNoRST
0800eb40 g     F .text	00000010 libGraphicsSetTextSize
08012ddc g     F .text	00000010 _isatty
08009176 g     F .text	00000016 driverSWLTC6804WriteRead
20006cd6 g     O .bss	00000001 __lock___sinit_recursive_mutex
08017740 g     O .rodata	00000004 _global_impure_ptr
08012c54 g     F .text	0000005e _realloc_r
0800f344 g     F .text	00000048 __libc_init_array
20005428 g     O .bss	00000001 driverSWLTC6804MaxNoOfCellPerModule
080080ec g     F .text	0000000c modPowerStateGetLongButtonPressState
0800f300  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800f300  w    F .text	00000002 DMA1_Channel4_IRQHandler
08005758 g     F .text	00000060 modFlashWriteByte
08017968 g     O .rodata	00000028 __mprec_bigtens
080127ac g     F .text	0000000e abort
08001ac4 g     F .text	0000001e .hidden __floatunsidf
0800e274 g     F .text	0000005c HAL_CAN_MspInit
08006ee4 g     F .text	00000078 modPowerElectronicsCellMonitorsInit
20004a20 g     O .bss	00000001 modPowerStatePowerModeDirectHCDelay
08012e1c g     F .text	0000001c _sbrk
08011534 g     F .text	00000038 __mcmp
0800e8f8 g     F .text	00000220 libGraphicsDrawChar
0800794c g     F .text	000000ec modPowerElectronicsSubTaskBalancing
20004a0c g     O .bss	00000004 modPowerStateButtonPressedTimeStamp
08007e98 g     F .text	00000014 modPowerElectronicsResetCurrentOffset
0800d8ea g     F .text	000000b0 HAL_SPI_Init
2000424c g     O .bss	00000004 modCommandsGeneralState
080133c0 g     F .text	00000000 _init
08006508 g     F .text	00000034 modPowerElectronicsDisableAll
08008cac g     F .text	00000020 modUARTProcessPacket
0800f300  w    F .text	00000002 TIM20_TRG_COM_IRQHandler
0800e360 g     F .text	000000bc HAL_SPI_MspInit
0800a9dc g     F .text	0000001c driverHWPowerStateSetOutput
20004987 g     O .bss	00000001 modOperationalStateNewState
08001bf8 g     F .text	0000009e .hidden __aeabi_d2f
0800f300  w    F .text	00000002 USART3_IRQHandler
08014c24 g     O .rodata	00000010 aPredivFactorTable
20006cdc g       .bss	00000000 _ebss
20001530 g     O .bss	00000040 modCANHandle
0800cb92 g     F .text	00000136 HAL_I2C_Master_Transmit
08008d04 g     F .text	00000024 modUARTTask
200049ac g     O .bss	00000004 currentOffset
0800f300  w    F .text	00000002 DMA1_Channel7_IRQHandler
080047f4 g     F .text	00000014 modConfigInit
0800f304 g     F .text	00000040 Reset_Handler
0801022c g     F .text	0000001c vsniprintf
08011180 g     F .text	00000040 __hi0bits
08006760 g     F .text	00000084 modPowerElectronicsSetDisCharge
080022c0 g     F .text	0000004e .hidden __fixdfsi
0800dcd8  w    F .text	00000002 HAL_UART_ErrorCallback
08008ce4 g     F .text	00000020 modUARTInit
20003d6c g     O .bss	00000004 modCANSendStatusVESCLastTisk
0800f300  w    F .text	00000002 UART5_IRQHandler
0800e6e6 g     F .text	00000020 libBufferGet_uint32
20004a24 g     O .bss	00000004 modPowerStateStartupDelay
20006cd4 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800eed8 g     F .text	0000000a libRingBufferIsEmpty
20001520 g     O .bss	00000001 modCANChargerCANOpenState
0800706c g     F .text	0000005c modPowerElectronicsExpMonitorsArrayTranslate
0800f300  w    F .text	00000002 ADC3_IRQHandler
200049c8 g     O .bss	00000001 modPowerElectronicsCellMonitorsTypeActive
0800ad88 g     F .text	00000024 HAL_Init
0800dfd4 g     F .text	0000008a UART_WaitOnFlagUntilTimeout
20004984 g     O .bss	00000001 modOperationalStateLastFaultState
2000542a g     O .bss	00000001 driverSWLTC6804TotalNumberOfICs
200054e4 g     O .bss	0000004c driverHWI2C2
20004a30 g     O .bss	00000010 modStateOfChargeGeneralStateOfCharge
20004978 g     O .bss	00000001 modOperationalStateForceOn
08010fc8 g     F .text	00000024 fprintf
08007bf0 g     F .text	00000012 modPowerElectronicsLowestInThree
0800f300  w    F .text	00000002 TIM4_IRQHandler
0800184c g     F .text	00000276 .hidden __aeabi_dadd
0800218c g     F .text	00000082 .hidden __ledf2
200049a4 g     O .bss	00000001 packOperationalCellStateLastErrorState
20004be8 g     O .bss	00000001 driverSWStorageManagerConfigEmpty
20000224 g     O .bss	00000014 handleIWDG
20005440 g     O .bss	00000054 hadc1
2000498c g     O .bss	00000004 modOperationalStateNotUsedTime
0800f300  w    F .text	00000002 CAN_RX1_IRQHandler
0800f300  w    F .text	00000002 DMA2_Channel1_IRQHandler
080113a0 g     F .text	000000b4 __pow5mult
0800df2c g     F .text	000000a8 UART_AdvFeatureConfig
08001b4c g     F .text	0000006a .hidden __aeabi_ul2d
08008dc0 g     F .text	00000024 driverSWStorageManagerGetStructSize
0800822c g     F .text	0000000c modStateOfChargeLoadStateOfCharge
08009380 g     F .text	00000048 driverSWLTC6804ReadCellVoltageGroups
08017b94 g     O .rodata	00000020 __sf_fake_stderr
0800c474 g     F .text	000000a0 HAL_FLASH_Program
080080e0 g     F .text	0000000c modPowerStateButtonPressedOnTurnon
20004998 g     O .bss	00000004 modOperationalStatePreChargeTimeout
20006cdc g       ._user_heap_stack	00000000 end
0800f300  w    F .text	00000002 I2C1_EV_IRQHandler
0800ba60  w    F .text	00000002 HAL_CAN_TxCpltCallback
20005494 g     O .bss	00000002 DataVar
08009878 g     F .text	0000010c driverSWLTC6804WriteConfigRegisterB
0800e60c g     F .text	00000012 libBufferAppend_float32
20005a78 g     O .bss	00000004 gfxFont
08012b2e g     F .text	00000002 __retarget_lock_release_recursive
08004d70 g     F .text	00000044 modDisplay0_001ConvertValueToASCII
0800668c g     F .text	000000a0 modPowerElectronicsUpdateSwitches
0800f300  w    F .text	00000002 COMP_4_5_6_IRQHandler
2000410c g     O .bss	00000001 jumpBootloaderTrue
20005431 g     O .bss	00000001 driverSWADC128D818TotalNoOfExpansionBoard
08011764 g     F .text	000000b6 __ssputs_r
0800b898 g     F .text	00000148 HAL_CAN_Transmit
0800a46c g     F .text	00000054 driverHWEEPROMReadVariable
080025b0 g     F .text	0000001c modCANGetCANID
200048f0 g     O .bss	00000001 toggleButtonReleased
08002280 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800ad50 g     F .text	0000000c DMA1_Channel6_IRQHandler
0800344c g     F .text	000000ac modCANTask
08011dee g     F .text	00000024 __sfputs_r
0800f300  w    F .text	00000002 UART4_IRQHandler
0800f300  w    F .text	00000002 DMA2_Channel4_IRQHandler
080129c0 g     F .text	0000000c __sfp_lock_acquire
08001cc0 g     F .text	00000000 memchr
0800f6f8  w    F .text	0000046c _printf_float
20006cdc g       .bss	00000000 __bss_end__
200048dc g     O .bss	00000004 modDisplayLastRefresh
0800f3f8 g     F .text	00000098 _free_r
08008038 g     F .text	00000008 modPowerStateSetState
0800f300  w    F .text	00000002 TIM3_IRQHandler
0800f300  w    F .text	00000002 RCC_IRQHandler
08004820 g     F .text	000000be modconfigHardwareLimitsApply
0800226c g     F .text	00000012 .hidden __aeabi_dcmpge
0800735c g     F .text	00000040 modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest
08009ed8 g     F .text	00000078 driverSWADC128D818ReadExpVoltages
0800f300  w    F .text	00000002 TIM20_UP_IRQHandler
20004a02 g     O .bss	00000001 modPowerElectronicsVinErrorCount
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800f300  w    F .text	00000002 DMA1_Channel1_IRQHandler
08011a1c g     F .text	0000007a _sungetc_r
08001848 g     F .text	0000027a .hidden __aeabi_dsub
0800f300 g     F .text	00000002 Default_Handler
080025d8 g     F .text	0000002c modCANTransmitExtID
0800c538 g     F .text	00000024 FLASH_PageErase
20005a6a g     O .bss	00000002 WIDTH
08009c04 g     F .text	0000006a driverSWISL28022Init
08014c37 g     O .rodata	00000010 AHBPrescTable
0800f300  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08003258 g     F .text	00000024 modCANOpenChargerCheckPresent
0800672c g     F .text	00000034 modPowerElectronicsSetPreCharge
200049c0 g     O .bss	00000004 modPowerElectronicsCANCurrentVESCLastTick
08006824 g     F .text	00000020 modPowerElectronicsSetCooling
08001b4c g     F .text	0000006a .hidden __floatundidf
08012dfc g     F .text	00000010 _lseek
08011454 g     F .text	000000e0 __lshift
0800c428 g     F .text	0000004c FLASH_WaitForLastOperation
200049cc g     O .bss	00000004 modPowerElectronicsChargeCurrentDetectionLastTick
0800e0f4 g     F .text	00000050 UART_CheckIdleState
08008140 g     F .text	000000ec modStateOfChargeProcess
20004a28 g     O .bss	00000001 tempButtonPressed
0800f300  w    F .text	00000002 EXTI15_10_IRQHandler
08003558 g     F .text	00000010 modCommandsSendPacket
0800b0e0 g     F .text	00000150 HAL_ADC_Start
080064fc g     F .text	0000000c modPowerElectronicsAllowForcedOn
0800360c g     F .text	00000068 modCommandsEBMSToVESC
0800f07c g     F .text	00000028 libMempools_free_conf
20005434 g     O .bss	00000004 driverSWADC128StartupDelayLastTick
200049a6 g     O .bss	00000002 calculatedChargeThrottle
0801124c g     F .text	00000154 __multiply
080023d8 g     F .text	0000000c mainWatchDogReset
0800d3b4 g     F .text	00000164 HAL_RCC_ClockConfig
0800bcdc g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
08011680 g     F .text	000000b8 __d2b
08009b1c g     F .text	000000e8 driverSWLTC6804ReadAuxVoltagesArray
0800571c g     F .text	0000003c modFlashEraseNewAppData
080054f8 g     F .text	00000028 modEffectTaskFlashFast
0800c796  w    F .text	00000002 HAL_IWDG_MspInit
200049e8 g     O .bss	00000004 modPowerElectronicsGeneralConfigHandle
080125b4 g     F .text	00000004 _strtoul_r
0800f300  w    F .text	00000002 TIM7_IRQHandler
20004985 g     O .bss	00000001 modOperationalStateLastState
0800f030 g     F .text	0000004c libMempools_alloc_conf
080102a8 g     F .text	00000020 _close_r
08014c14 g     O .rodata	00000010 aPLLMULFactorTable
0800547c g     F .text	00000028 modEffectChangeState
08001ae4 g     F .text	00000022 .hidden __aeabi_i2d
08002484 g     F .text	00000108 modCANInit
0801011c g     F .text	00000068 strtok
0800ec98 g     F .text	0000000c libGraphicsHeight
0800f3ac g     F .text	00000020 memcmp
08004abc g     F .text	00000020 modConfigStoreDefaultConfig
0800f300  w    F .text	00000002 I2C3_EV_IRQHandler
080027a0 g     F .text	0000037a modCANSendStatusVESC
20005a7c g     O .bss	00000001 rotation
0800ef80 g     F .text	0000007c libRingBufferInit
080048e0 g     F .text	000001dc modConfigLoadDefaultConfig
0800f0a4 g     F .text	000000ec confparser_serialize_main_config_t
08010028 g     F .text	00000058 sscanf
080126d0 g     F .text	000000dc __swsetup_r
0800f300  w    F .text	00000002 EXTI9_5_IRQHandler
08007fec g     F .text	00000006 modPowerStateChargerDetected
08001fb4 g     F .text	000001d0 .hidden __divdf3
200049f0 g     O .bss	00000004 modPowerElectronicsPackStateHandle
200048ec g     O .bss	00000004 toggleButtonPressedLastTick
08005a38 g     F .text	00000ac4 modOperationalStateTask
08012a60 g     F .text	0000008c __sfp
0800ccc8 g     F .text	00000136 HAL_I2C_Master_Receive
0800a448 g     F .text	00000022 driverHWEEPROMEraseFlash
0800e05e g     F .text	00000096 HAL_UART_Transmit
0800f300  w    F .text	00000002 RTC_WKUP_IRQHandler
080129e4 g     F .text	0000000c __sinit_lock_release
0800eecc g     F .text	0000000c libRingBufferIsFull
08005690 g     F .text	00000078 modEffectTask
080101d4 g     F .text	00000056 _vsnprintf_r
0800801c g     F .text	0000001c modPowerStateForceOnRequest
08001d60 g     F .text	00000254 .hidden __muldf3
08010080 g     F .text	00000022 __sread
0800e8b8 g     F .text	00000016 libGraphicsDrawFastVLine
08014b78 g     O .rodata	00000078 driverHWSwitchesPorts
20004a11 g     O .bss	00000001 modPowerStateButtonPulsToggleMode
0800adbc  w    F .text	0000000c HAL_GetTick
08011018 g     F .text	0000000c __malloc_lock
20001522 g     O .bss	00000001 modCANChargerPresentOnBus
08008280 g     F .text	0000001c modStateOfChargePowerDownSave
0800ff44 g     F .text	000000e4 scalbnf
20004938 g     O .bss	00000001 modOperationalStateCurrentFaultState
080128c8 g     F .text	00000078 _fflush_r
08011738 g     F .text	0000002c _calloc_r
200049d4 g     O .bss	00000004 modPowerElectronicsChargeDiodeBypassHysteresis
0800f300  w    F .text	00000002 SPI2_IRQHandler
0800e6b2 g     F .text	00000014 libBufferGet_uint16
08017bb4 g     O .rodata	00000020 __sf_fake_stdin
200049b0 g     O .bss	00000001 currentOffsetCounter
20005a6c g     O .bss	00000001 _cp437
08012b2c g     F .text	00000002 __retarget_lock_acquire_recursive
0800ee74 g     F .text	0000002c libRingBufferNextEndIndex
08004c64 g     F .text	00000050 modDisplay10ConvertValueToASCII
080025cc g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
0800a010 g     F .text	000000e8 driverSWADC128D818ReadExpVoltagesArray
0800f3e8 g     F .text	00000010 memset
0800f300  w    F .text	00000002 MemManage_Handler
080023e4 g     F .text	000000a0 main
08008f80 g     F .text	00000010 driverSWSSD1306ClearDisplay
20005a68 g     O .bss	00000002 HEIGHT
08012b2a g     F .text	00000002 __retarget_lock_init_recursive
0800d99a g     F .text	00000294 HAL_SPI_TransmitReceive
20004a1c g     O .bss	00000004 modPowerStatePowerDownTimeout
08017e08 g       *ABS*	00000000 _siccmram
20003d64 g     O .bss	00000004 modCANSendStatusFastLastTisk
2000543c g     O .bss	00000004 driverSWUART2OutputBuffer
0800ad1c g     F .text	00000034 driverHWUART2GetChar
08004e44 g     F .text	00000638 modDisplayShowInfo
0800e6c6 g     F .text	00000020 libBufferGet_int32
08010102 g     F .text	00000008 __sclose
0800f300  w    F .text	00000002 DMA2_Channel5_IRQHandler
2000492c g     O .bss	00000004 modOperationalStateChargedTimeout
080124cc g     F .text	00000004 _strtol_r
08001bf8 g     F .text	0000009e .hidden __truncdfsf2
08007a38 g     F .text	00000058 modPowerElectronicsSamplePackVoltage
080103e0 g     F .text	00000bdc _dtoa_r
0800f4d0 g     F .text	000000e8 _malloc_r
08012d3c g     F .text	0000001a __ascii_wctomb
0800f300  w    F .text	00000002 COMP_1_2_3_IRQHandler
08001b5c g     F .text	0000005a .hidden __aeabi_l2d
08004adc g     F .text	0000001c modConfigStoreAndLoadDefaultConfig
08003174 g     F .text	00000098 HAL_CAN_RxCpltCallback
080125b8 g     F .text	00000074 __submore
0800e52c g     F .text	0000000c libBufferAppend_uint8
0800a81c g     F .text	00000028 driverHWI2C1Read
20004248 g     O .bss	00000004 modCommandsGeneralConfig
08014bf0 g     O .rodata	00000024 STATPorts
0800bb54  w    F .text	00000002 HAL_CAN_ErrorCallback
0800f300  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800f300  w    F .text	00000002 USB_LP_IRQHandler
0800ab60 g     F .text	0000001c driverHWSwitchesSetSwitchState
0800f300  w    F .text	00000002 EXTI4_IRQHandler
0800ef18 g     F .text	00000030 libRingBufferPeek
0800aad0 g     F .text	00000090 driverHWSPI1WriteRead
0800a8f4 g     F .text	00000020 driverHWI2C2Write
08004b40 g     F .text	00000034 modDelayTick100ms
08008d98 g     F .text	0000000e driverSWStorageManagerEraseData
08008238 g     F .text	00000048 modStateOfChargeStoreAndLoadDefaultStateOfCharge
08001c98 g     F .text	00000014 strcmp
2000493c g     O .bss	00000038 modOperationalStateDisplayData
200048e4 g     O .bss	00000004 modDisplayStartupDelay
08010028 g     F .text	00000058 siscanf
08004b8c g     F .text	00000068 modDisplayInit
20004974 g     O .bss	00000004 modOperationalStateErrorDisplayTime
0800e538 g     F .text	00000016 libBufferAppend_int16
0800e464 g     F .text	00000068 SystemInit
08007b6c g     F .text	00000084 modPowerElectronicsSamplePackAndLCData
08002194 g     F .text	0000007a .hidden __nedf2
080099b0 g     F .text	000000b0 driverSWLTC6804Init
08004cec g     F .text	00000040 modDisplay0_1ConvertValueToASCII
080133cc g     F .text	00000000 _fini
20004a19 g     O .bss	00000001 modPowerStateLastButtonPressedVar
0800f300  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800e41c g     F .text	00000048 HAL_UART_MspInit
0800312c g     F .text	00000048 modCANHandleCANOpenMessage
0800cdfe g     F .text	0000004c HAL_I2CEx_ConfigAnalogFilter
0800eec8 g     F .text	00000004 libRingBufferNumElements
0800f67c g     F .text	0000007c __exponent
08009140 g     F .text	0000002c driverSWLTC6804CalcPEC15
08010248 g     F .text	00000024 _write_r
10000000 g       .ccmram	00000000 _eccmram
20005408 g     O .bss	00000020 driverSWLTC6804ConfigStruct
20004a48 g     O .bss	00000001 modStateOfChargePowerDownSavedFlag
0800f190 g     F .text	000000f0 confparser_deserialize_main_config_t
0800f300  w    F .text	00000002 DMA1_Channel3_IRQHandler
20004a4c g     O .bss	00000004 modStateOfChargeStoreSoCTick
0800ad5c  w    F .text	0000002c HAL_InitTick
200049e4 g     O .bss	00000001 modPowerElectronicsFirstDischarge
080092ee g     F .text	0000004c driverSWLTC6804StartLoadedCellVoltageConversion
0800fb64 g     F .text	000000da _printf_common
20000030 g     O .data	00000004 _impure_ptr
080095a4 g     F .text	00000058 driverSWLTC6804ReadAuxGroups
080127bc g     F .text	0000010c __sflush_r
0800adac  w    F .text	00000010 HAL_IncTick
20005496 g     O .bss	00000002 driverHWEEPROMNumberOfVars
200049e0 g     O .bss	00000004 modPowerElectronicsDisChargeLCRetryLastTick
08008de4 g     F .text	0000004c driverSWStorageManagerStoreStruct
0800f300  w    F .text	00000002 ADC4_IRQHandler
0800be60 g     F .text	0000056c HAL_DMA_IRQHandler
0800e768 g     F .text	00000028 libCRCCalcCRC16
08012f78 g     F .text	00000438 __ieee754_log
08006658 g     F .text	00000034 modPowerElectronicsSubTaskCurrentWatch
0800a150 g     F .text	00000024 driverHWADCSetInputChannel
0801181c g     F .text	00000200 _svfiprintf_r
08004808 g     F .text	0000000c modConfigStoreConfig
0800eea0 g     F .text	00000014 libRingBufferIncrEnd
20005a70 g     O .bss	00000002 _width
20005530 g     O .bss	00000064 driverHWSPI1Handle
0800f300  w    F .text	00000002 WWDG_IRQHandler
08002604 g     F .text	00000104 modCANSendStatusFast
08007edc g     F .text	00000104 modPowerStateTask
0800a914 g     F .text	00000024 driverHWI2C2Read
08006ff4 g     F .text	00000078 modPowerElectronicsAuxMonitorsArrayTranslate
0800ed60 g     F .text	00000114 libPacketProcessByte
0800e2d0 g     F .text	00000090 HAL_I2C_MspInit
0800920c g     F .text	00000030 driverSWLTC6804WakeIC
08012bfc g     F .text	00000024 __ascii_mbtowc
080054d0 g     F .text	00000028 modEffectTaskFlash
08009db8 g     F .text	00000120 driverSWADC128D818Init
080032a0 g     F .text	0000002a modCANOpenChargerStartNode
0800354c g     F .text	0000000c modCommandsSetSendFunction
20004a40 g     O .bss	00000004 modStateOfChargeLargeCoulombTick
080080f8 g     F .text	0000003c modStateOfChargeInit
0800f300  w    F .text	00000002 TIM2_IRQHandler
08014b3c g     O .rodata	0000003c driverHWPorts
0800ef48 g     F .text	00000038 libRingBufferPull
20004a01 g     O .bss	00000001 modPowerElectronicsUnderAndOverVoltageErrorCount
2000489c g     O .bss	00000001 modDisplayCurrentState
080101d4 g     F .text	00000056 _vsniprintf_r
080058c0 g     F .text	00000078 modOperationalStateInit
0800c82a g     F .text	0000005c HAL_IWDG_Start
08007168 g     F .text	000001c0 modPowerElectronicsInit
08001bb8 g     F .text	00000040 .hidden __aeabi_d2uiz
20004a1a g     O .bss	00000001 modPowerStateLongStartupButtonPress
080133b0 g     F .text	00000010 nan
080030b8 g     F .text	00000074 modCANHandleKeepAliveSafetyMessage
0800bb58 g     F .text	00000184 HAL_CAN_IRQHandler
08011ad0 g     F .text	000002f0 __ssvfiscanf_r
200049bc g     O .bss	00000004 modPowerElectronicsBalanceModeActiveLastTick
080065c0 g     F .text	00000098 modPowerElectronicsCallMonitorsCalcBalanceResistorArray
20004928 g     O .bss	00000004 modOperationalStateBatteryDeadDisplayTime
0800a218 g     F .text	00000070 driverHWADCGetLoadVoltage
080057b8 g     F .text	0000002a modFlashWriteNewAppData
08008040 g     F .text	000000a0 modPowerStateInit
0800bda4 g     F .text	00000016 HAL_SYSTICK_CLKSourceConfig
0800b76a g     F .text	0000012c HAL_CAN_Init
0800f300  w    F .text	00000002 COMP7_IRQHandler
20003d68 g     O .bss	00000004 modCANSendStatusSlowLastTisk
08012b30 g     F .text	0000004a __swhatbuf_r
2000a000 g       *ABS*	00000000 _estack
20005429 g     O .bss	00000001 driverSWLTC6804MaxNoOfTempSensorPerModule
08016f50 g     O .rodata	000007ef data_main_config_t_
08007eac g     F .text	00000030 modPowerStateSetConfigHandle
0800f300  w    F .text	00000002 EXTI1_IRQHandler
20005644 g     O .bss	00000400 driverHWUART2ReceiveBuffer
08008ca4 g     F .text	00000006 modUARTSendPacketWrapper
08002230 g     F .text	00000012 .hidden __aeabi_dcmpeq
080095fc g     F .text	0000012c driverSWLTC6804ReadAuxVoltageRegisters
0800dc30 g     F .text	00000070 HAL_UART_Receive_DMA
0800a7f8 g     F .text	00000024 driverHWI2C1Write
20005a72 g     O .bss	00000002 cursor_x
08012e38 g     F .text	00000010 _write
0800e5ce g     F .text	0000002a libBufferAppend_uint32_LSBFirst
20000200 g       .data	00000000 _edata
20001521 g     O .bss	00000001 modCANChargerChargingState
20004bec g     O .bss	00000002 driverSWStorageManagerDataSize
0800e5b8 g     F .text	00000016 libBufferAppend_uint16_LSBFirst
08014c50 g     O .rodata	00000200 libCRCLookupTable
20004a14 g     O .bss	00000004 modPowerStateGeneralConfigHandle
0800653c g     F .text	00000084 modPowerElectronicsCalculateCellStats
0800a668 g     F .text	000000e4 driverHWEEPROMWriteVariable
10000000 g       .ccmram	00000000 _sccmram
20005a83 g     O .bss	00000001 wrap
20005a82 g     O .bss	00000001 textsize
0800c404 g     F .text	00000024 HAL_FLASH_Unlock
0800e8ce g     F .text	0000002a libGraphicsFillRect
0800e804 g     F .text	000000b4 libGraphicsDrawLine
20004654 g     O .bss	00000004 modCommandsToBeSendConfig
0800f300  w    F .text	00000002 USART2_IRQHandler
20005a6e g     O .bss	00000002 _height
080100a6 g     F .text	00000038 __swrite
0800ce94 g     F .text	000004bc HAL_RCC_OscConfig
08010fc8 g     F .text	00000024 fiprintf
08011e14 g     F .text	00000260 _vfiprintf_r
20004a2c g     O .bss	00000004 modStateOfChargeGeneralConfigHandle
08012aec g     F .text	0000003e _fwalk_reent
08008ccc g     F .text	00000016 modUARTSendPacket
08004af8 g     F .text	00000028 modDelayInit
0800e4cc g     F .text	00000060 SystemCoreClockUpdate
0801156c g     F .text	00000114 __mdiff
08003530 g     F .text	0000001c modCommandsInit
080022c0 g     F .text	0000004e .hidden __aeabi_d2iz
08006cc2 g     F .text	00000024 modPowerElectronicsInitISL
0800d584 g     F .text	00000208 HAL_RCCEx_PeriphCLKConfig
08002f7c g     F .text	00000128 modCANSendBuffer
08012dec g     F .text	00000010 _kill
0800f300  w    F .text	00000002 TIM20_BRK_IRQHandler
0800a938 g     F .text	000000a4 driverHWPowerStateInit
08005624 g     F .text	0000006c modEffectTaskError
0800feac g     F .text	0000004c frexpf
0800f300  w    F .text	00000002 I2C2_ER_IRQHandler
0800f300  w    F .text	00000002 DMA1_Channel2_IRQHandler
080129cc g     F .text	0000000c __sfp_lock_release
20004bf0 g     O .bss	00000002 driverSWStorageManagerStateOfChargeStructSize
08017bd4 g     O .rodata	00000020 __sf_fake_stdout
0801233c g     F .text	00000070 __sccl
08008fa0 g     F .text	000000a4 driverSWSSD1306DisplayAsync
0800ac48 g     F .text	000000b4 driverHWUART2Init
0800f300  w    F .text	00000002 TIM8_BRK_IRQHandler
08017a90 g     O .rodata	00000101 _ctype_
080055e8 g     F .text	0000003c modEffectTaskBlinkShortLong
08012e0c g     F .text	00000010 _read
08002294 g     F .text	0000002c .hidden __unorddf2
0800f300  w    F .text	00000002 FLASH_IRQHandler
08007dd4 g     F .text	000000c4 modPowerElectronicsTask
08012e48 g     F .text	00000002 _exit
0800ecb0 g     F .text	0000000c libGraphicsGetRotation
0800f300  w    F .text	00000002 TIM20_CC_IRQHandler
08000000 g     O .isr_vector	00000188 vectors
0800eca4 g     F .text	0000000c libGraphicsWidth
20001570 g     O .bss	00000004 modCANLastChargerHeartBeatTick
0800f300  w    F .text	00000002 BusFault_Handler
0800f300  w    F .text	00000002 USART1_IRQHandler
08012b7c g     F .text	00000080 __smakebuf_r
0800bdbc g     F .text	00000008 HAL_SYSTICK_IRQHandler
0800e706 g     F .text	00000014 libBufferGet_float16
08001cac g     F .text	00000010 strlen
0800fc40 g     F .text	0000024c _printf_i
0800a844 g     F .text	000000b0 driverHWI2C2Init
0800f300  w    F .text	00000002 SPI3_IRQHandler
08006804 g     F .text	00000020 modPowerElectronicsSetChargePFET
08009a60 g     F .text	000000bc driverSWLTC6804ConvertTemperatureExt
08002220 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08002184 g     F .text	0000008a .hidden __gedf2
20006ccc g     O .bss	00000004 __malloc_sbrk_start
08008ea4 g     F .text	000000cc driverSWSSD1306Init
0800e144 g     F .text	00000064 HAL_UART_Init
08005874 g     F .text	00000028 modOperationalStateUpdateStates
20001578 g     O .bss	00000004 modCANLastRXID
0800f300  w    F .text	00000002 I2C1_ER_IRQHandler
0800f300  w    F .text	00000002 FMC_IRQHandler
08001b08 g     F .text	00000042 .hidden __aeabi_f2d
20004bf4 g     O .bss	00000400 displayBufferDesired
08006f5c g     F .text	00000098 modPowerElectronicsCellMonitorsArrayTranslate
200049fc g     O .bss	00000004 modPowerElectronicsTempMeasureDelayLastTick
08008134 g     F .text	0000000c modStateOfChargeStoreStateOfCharge
20006cc8 g     O .bss	00000004 __malloc_free_list
0800effc g     F .text	00000032 libRingBufferNew
08009c70 g     F .text	0000009c driverSWISL28022GetBusCurrent
080023a4 g     F .text	00000034 mainWatchDogInitAndStart
20004bf3 g     O .bss	00000001 _vccstate
20005598 g     O .bss	0000003c driverHWUART2HDMAHandleRX
20004990 g     O .bss	00000004 modOperationalStatePSPDisableDelay
20004a08 g     O .bss	00000004 modPowerStateButtonPressedDuration
20000238 g     O .bss	0000129c packState
08001848 g     F .text	0000027a .hidden __subdf3
08011e14 g     F .text	00000260 _vfprintf_r
0800ac2c g     F .text	0000001c driverHWSetOutput
0800ecbc g     F .text	00000018 libPacketInit
20004be4 g     O .bss	00000004 driverHWEEPROMVirtAddVarTab
0800e71c g     F .text	0000004c libBufferGet_float32_auto
08004814 g     F .text	0000000c modConfigLoadConfig
0800327c g     F .text	00000024 modCANOpenBMSSendHeartBeat
20004939 g     O .bss	00000001 modOperationalStateCurrentState
080111c0 g     F .text	0000005e __lo0bits
08007c04 g     F .text	000001d0 modPowerElectronicsCalcThrottle
0800589c g     F .text	00000024 modOperationalStateSetAllStates
200049c4 g     O .bss	00000004 modPowerElectronicsCellBalanceUpdateLastTick
0800e790 g     F .text	00000074 libGraphicsInit
08006c8c g     F .text	00000036 modPowerElectronicsMapVariableFloat
20005a7e g     O .bss	00000002 textbgcolor
080093c8 g     F .text	0000012c driverSWLTC6804ReadCellVoltageRegisters
0800eee2 g     F .text	00000036 libRingBufferAdd
0800abc4 g     F .text	00000020 driverHWSwitchesDisableAll
20000094 g     O .data	0000016c __global_locale
20005a80 g     O .bss	00000002 textcolor
200049d0 g     O .bss	00000001 modPowerElectronicsChargeDeratingActive
200048d8 g     O .bss	00000001 modDisplayDispLoadShuffle
08003568 g     F .text	0000003c modCommandsPrintf
0800320c g     F .text	0000004c modCANRXWatchDog
20006cd5 g     O .bss	00000001 __lock___sfp_recursive_mutex
0800e54e g     F .text	00000016 libBufferAppend_uint16
0800e58e g     F .text	0000002a libBufferAppend_uint32
08009f50 g     F .text	000000c0 driverSWADC128D818ConvertTemperatureExt
08012d04 g     F .text	00000010 raise
08012dac g     F .text	00000010 _close
08009984 g     F .text	0000002c driverSWLTC6804EnableBalanceResistorsArray
0800f39c g     F .text	00000010 free
080129d8 g     F .text	0000000c __sinit_lock_acquire
0800f300  w    F .text	00000002 DMA2_Channel3_IRQHandler
080110f4 g     F .text	0000008c __multadd
08007346 g     F .text	00000016 modPowerElectronicsCellMonitorsStartTemperatureConversion
080110b0 g     F .text	00000044 _Bfree
0800b36c g     F .text	00000006 HAL_ADC_GetValue
080067e4 g     F .text	00000020 modPowerElectronicsSetCharge
0800f300  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
20004110 g     O .bss	00000138 modCommandsConfigStorage



Disassembly of section .text:

08001800 <__do_global_dtors_aux>:
 8001800:	b510      	push	{r4, lr}
 8001802:	4c05      	ldr	r4, [pc, #20]	; (8001818 <__do_global_dtors_aux+0x18>)
 8001804:	7823      	ldrb	r3, [r4, #0]
 8001806:	b933      	cbnz	r3, 8001816 <__do_global_dtors_aux+0x16>
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__do_global_dtors_aux+0x1c>)
 800180a:	b113      	cbz	r3, 8001812 <__do_global_dtors_aux+0x12>
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <__do_global_dtors_aux+0x20>)
 800180e:	f3af 8000 	nop.w
 8001812:	2301      	movs	r3, #1
 8001814:	7023      	strb	r3, [r4, #0]
 8001816:	bd10      	pop	{r4, pc}
 8001818:	20000200 	.word	0x20000200
 800181c:	00000000 	.word	0x00000000
 8001820:	080133c0 	.word	0x080133c0

08001824 <frame_dummy>:
 8001824:	b508      	push	{r3, lr}
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <frame_dummy+0x10>)
 8001828:	b11b      	cbz	r3, 8001832 <frame_dummy+0xe>
 800182a:	4903      	ldr	r1, [pc, #12]	; (8001838 <frame_dummy+0x14>)
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <frame_dummy+0x18>)
 800182e:	f3af 8000 	nop.w
 8001832:	bd08      	pop	{r3, pc}
 8001834:	00000000 	.word	0x00000000
 8001838:	20000204 	.word	0x20000204
 800183c:	080133c0 	.word	0x080133c0

08001840 <__aeabi_drsub>:
 8001840:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001844:	e002      	b.n	800184c <__adddf3>
 8001846:	bf00      	nop

08001848 <__aeabi_dsub>:
 8001848:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800184c <__adddf3>:
 800184c:	b530      	push	{r4, r5, lr}
 800184e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001852:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001856:	ea94 0f05 	teq	r4, r5
 800185a:	bf08      	it	eq
 800185c:	ea90 0f02 	teqeq	r0, r2
 8001860:	bf1f      	itttt	ne
 8001862:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001866:	ea55 0c02 	orrsne.w	ip, r5, r2
 800186a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800186e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001872:	f000 80e2 	beq.w	8001a3a <__adddf3+0x1ee>
 8001876:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800187a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800187e:	bfb8      	it	lt
 8001880:	426d      	neglt	r5, r5
 8001882:	dd0c      	ble.n	800189e <__adddf3+0x52>
 8001884:	442c      	add	r4, r5
 8001886:	ea80 0202 	eor.w	r2, r0, r2
 800188a:	ea81 0303 	eor.w	r3, r1, r3
 800188e:	ea82 0000 	eor.w	r0, r2, r0
 8001892:	ea83 0101 	eor.w	r1, r3, r1
 8001896:	ea80 0202 	eor.w	r2, r0, r2
 800189a:	ea81 0303 	eor.w	r3, r1, r3
 800189e:	2d36      	cmp	r5, #54	; 0x36
 80018a0:	bf88      	it	hi
 80018a2:	bd30      	pophi	{r4, r5, pc}
 80018a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80018a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80018ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80018b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80018b4:	d002      	beq.n	80018bc <__adddf3+0x70>
 80018b6:	4240      	negs	r0, r0
 80018b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80018bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80018c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80018c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80018c8:	d002      	beq.n	80018d0 <__adddf3+0x84>
 80018ca:	4252      	negs	r2, r2
 80018cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80018d0:	ea94 0f05 	teq	r4, r5
 80018d4:	f000 80a7 	beq.w	8001a26 <__adddf3+0x1da>
 80018d8:	f1a4 0401 	sub.w	r4, r4, #1
 80018dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80018e0:	db0d      	blt.n	80018fe <__adddf3+0xb2>
 80018e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80018e6:	fa22 f205 	lsr.w	r2, r2, r5
 80018ea:	1880      	adds	r0, r0, r2
 80018ec:	f141 0100 	adc.w	r1, r1, #0
 80018f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80018f4:	1880      	adds	r0, r0, r2
 80018f6:	fa43 f305 	asr.w	r3, r3, r5
 80018fa:	4159      	adcs	r1, r3
 80018fc:	e00e      	b.n	800191c <__adddf3+0xd0>
 80018fe:	f1a5 0520 	sub.w	r5, r5, #32
 8001902:	f10e 0e20 	add.w	lr, lr, #32
 8001906:	2a01      	cmp	r2, #1
 8001908:	fa03 fc0e 	lsl.w	ip, r3, lr
 800190c:	bf28      	it	cs
 800190e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001912:	fa43 f305 	asr.w	r3, r3, r5
 8001916:	18c0      	adds	r0, r0, r3
 8001918:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800191c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001920:	d507      	bpl.n	8001932 <__adddf3+0xe6>
 8001922:	f04f 0e00 	mov.w	lr, #0
 8001926:	f1dc 0c00 	rsbs	ip, ip, #0
 800192a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800192e:	eb6e 0101 	sbc.w	r1, lr, r1
 8001932:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001936:	d31b      	bcc.n	8001970 <__adddf3+0x124>
 8001938:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800193c:	d30c      	bcc.n	8001958 <__adddf3+0x10c>
 800193e:	0849      	lsrs	r1, r1, #1
 8001940:	ea5f 0030 	movs.w	r0, r0, rrx
 8001944:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001948:	f104 0401 	add.w	r4, r4, #1
 800194c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001950:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001954:	f080 809a 	bcs.w	8001a8c <__adddf3+0x240>
 8001958:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800195c:	bf08      	it	eq
 800195e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001962:	f150 0000 	adcs.w	r0, r0, #0
 8001966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800196a:	ea41 0105 	orr.w	r1, r1, r5
 800196e:	bd30      	pop	{r4, r5, pc}
 8001970:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001974:	4140      	adcs	r0, r0
 8001976:	eb41 0101 	adc.w	r1, r1, r1
 800197a:	3c01      	subs	r4, #1
 800197c:	bf28      	it	cs
 800197e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8001982:	d2e9      	bcs.n	8001958 <__adddf3+0x10c>
 8001984:	f091 0f00 	teq	r1, #0
 8001988:	bf04      	itt	eq
 800198a:	4601      	moveq	r1, r0
 800198c:	2000      	moveq	r0, #0
 800198e:	fab1 f381 	clz	r3, r1
 8001992:	bf08      	it	eq
 8001994:	3320      	addeq	r3, #32
 8001996:	f1a3 030b 	sub.w	r3, r3, #11
 800199a:	f1b3 0220 	subs.w	r2, r3, #32
 800199e:	da0c      	bge.n	80019ba <__adddf3+0x16e>
 80019a0:	320c      	adds	r2, #12
 80019a2:	dd08      	ble.n	80019b6 <__adddf3+0x16a>
 80019a4:	f102 0c14 	add.w	ip, r2, #20
 80019a8:	f1c2 020c 	rsb	r2, r2, #12
 80019ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80019b0:	fa21 f102 	lsr.w	r1, r1, r2
 80019b4:	e00c      	b.n	80019d0 <__adddf3+0x184>
 80019b6:	f102 0214 	add.w	r2, r2, #20
 80019ba:	bfd8      	it	le
 80019bc:	f1c2 0c20 	rsble	ip, r2, #32
 80019c0:	fa01 f102 	lsl.w	r1, r1, r2
 80019c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80019c8:	bfdc      	itt	le
 80019ca:	ea41 010c 	orrle.w	r1, r1, ip
 80019ce:	4090      	lslle	r0, r2
 80019d0:	1ae4      	subs	r4, r4, r3
 80019d2:	bfa2      	ittt	ge
 80019d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80019d8:	4329      	orrge	r1, r5
 80019da:	bd30      	popge	{r4, r5, pc}
 80019dc:	ea6f 0404 	mvn.w	r4, r4
 80019e0:	3c1f      	subs	r4, #31
 80019e2:	da1c      	bge.n	8001a1e <__adddf3+0x1d2>
 80019e4:	340c      	adds	r4, #12
 80019e6:	dc0e      	bgt.n	8001a06 <__adddf3+0x1ba>
 80019e8:	f104 0414 	add.w	r4, r4, #20
 80019ec:	f1c4 0220 	rsb	r2, r4, #32
 80019f0:	fa20 f004 	lsr.w	r0, r0, r4
 80019f4:	fa01 f302 	lsl.w	r3, r1, r2
 80019f8:	ea40 0003 	orr.w	r0, r0, r3
 80019fc:	fa21 f304 	lsr.w	r3, r1, r4
 8001a00:	ea45 0103 	orr.w	r1, r5, r3
 8001a04:	bd30      	pop	{r4, r5, pc}
 8001a06:	f1c4 040c 	rsb	r4, r4, #12
 8001a0a:	f1c4 0220 	rsb	r2, r4, #32
 8001a0e:	fa20 f002 	lsr.w	r0, r0, r2
 8001a12:	fa01 f304 	lsl.w	r3, r1, r4
 8001a16:	ea40 0003 	orr.w	r0, r0, r3
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	bd30      	pop	{r4, r5, pc}
 8001a1e:	fa21 f004 	lsr.w	r0, r1, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	bd30      	pop	{r4, r5, pc}
 8001a26:	f094 0f00 	teq	r4, #0
 8001a2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8001a2e:	bf06      	itte	eq
 8001a30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8001a34:	3401      	addeq	r4, #1
 8001a36:	3d01      	subne	r5, #1
 8001a38:	e74e      	b.n	80018d8 <__adddf3+0x8c>
 8001a3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001a3e:	bf18      	it	ne
 8001a40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001a44:	d029      	beq.n	8001a9a <__adddf3+0x24e>
 8001a46:	ea94 0f05 	teq	r4, r5
 8001a4a:	bf08      	it	eq
 8001a4c:	ea90 0f02 	teqeq	r0, r2
 8001a50:	d005      	beq.n	8001a5e <__adddf3+0x212>
 8001a52:	ea54 0c00 	orrs.w	ip, r4, r0
 8001a56:	bf04      	itt	eq
 8001a58:	4619      	moveq	r1, r3
 8001a5a:	4610      	moveq	r0, r2
 8001a5c:	bd30      	pop	{r4, r5, pc}
 8001a5e:	ea91 0f03 	teq	r1, r3
 8001a62:	bf1e      	ittt	ne
 8001a64:	2100      	movne	r1, #0
 8001a66:	2000      	movne	r0, #0
 8001a68:	bd30      	popne	{r4, r5, pc}
 8001a6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001a6e:	d105      	bne.n	8001a7c <__adddf3+0x230>
 8001a70:	0040      	lsls	r0, r0, #1
 8001a72:	4149      	adcs	r1, r1
 8001a74:	bf28      	it	cs
 8001a76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001a7a:	bd30      	pop	{r4, r5, pc}
 8001a7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001a80:	bf3c      	itt	cc
 8001a82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001a86:	bd30      	popcc	{r4, r5, pc}
 8001a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001a8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001a90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	bd30      	pop	{r4, r5, pc}
 8001a9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001a9e:	bf1a      	itte	ne
 8001aa0:	4619      	movne	r1, r3
 8001aa2:	4610      	movne	r0, r2
 8001aa4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001aa8:	bf1c      	itt	ne
 8001aaa:	460b      	movne	r3, r1
 8001aac:	4602      	movne	r2, r0
 8001aae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001ab2:	bf06      	itte	eq
 8001ab4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001ab8:	ea91 0f03 	teqeq	r1, r3
 8001abc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001ac0:	bd30      	pop	{r4, r5, pc}
 8001ac2:	bf00      	nop

08001ac4 <__aeabi_ui2d>:
 8001ac4:	f090 0f00 	teq	r0, #0
 8001ac8:	bf04      	itt	eq
 8001aca:	2100      	moveq	r1, #0
 8001acc:	4770      	bxeq	lr
 8001ace:	b530      	push	{r4, r5, lr}
 8001ad0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001ad4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001ad8:	f04f 0500 	mov.w	r5, #0
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	e750      	b.n	8001984 <__adddf3+0x138>
 8001ae2:	bf00      	nop

08001ae4 <__aeabi_i2d>:
 8001ae4:	f090 0f00 	teq	r0, #0
 8001ae8:	bf04      	itt	eq
 8001aea:	2100      	moveq	r1, #0
 8001aec:	4770      	bxeq	lr
 8001aee:	b530      	push	{r4, r5, lr}
 8001af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001af8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8001afc:	bf48      	it	mi
 8001afe:	4240      	negmi	r0, r0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	e73e      	b.n	8001984 <__adddf3+0x138>
 8001b06:	bf00      	nop

08001b08 <__aeabi_f2d>:
 8001b08:	0042      	lsls	r2, r0, #1
 8001b0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001b0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8001b12:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8001b16:	bf1f      	itttt	ne
 8001b18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001b1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001b20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001b24:	4770      	bxne	lr
 8001b26:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8001b2a:	bf08      	it	eq
 8001b2c:	4770      	bxeq	lr
 8001b2e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8001b32:	bf04      	itt	eq
 8001b34:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001b38:	4770      	bxeq	lr
 8001b3a:	b530      	push	{r4, r5, lr}
 8001b3c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001b44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001b48:	e71c      	b.n	8001984 <__adddf3+0x138>
 8001b4a:	bf00      	nop

08001b4c <__aeabi_ul2d>:
 8001b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8001b50:	bf08      	it	eq
 8001b52:	4770      	bxeq	lr
 8001b54:	b530      	push	{r4, r5, lr}
 8001b56:	f04f 0500 	mov.w	r5, #0
 8001b5a:	e00a      	b.n	8001b72 <__aeabi_l2d+0x16>

08001b5c <__aeabi_l2d>:
 8001b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8001b60:	bf08      	it	eq
 8001b62:	4770      	bxeq	lr
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001b6a:	d502      	bpl.n	8001b72 <__aeabi_l2d+0x16>
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001b72:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001b76:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001b7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001b7e:	f43f aed8 	beq.w	8001932 <__adddf3+0xe6>
 8001b82:	f04f 0203 	mov.w	r2, #3
 8001b86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001b8a:	bf18      	it	ne
 8001b8c:	3203      	addne	r2, #3
 8001b8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001b92:	bf18      	it	ne
 8001b94:	3203      	addne	r2, #3
 8001b96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001b9a:	f1c2 0320 	rsb	r3, r2, #32
 8001b9e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001ba2:	fa20 f002 	lsr.w	r0, r0, r2
 8001ba6:	fa01 fe03 	lsl.w	lr, r1, r3
 8001baa:	ea40 000e 	orr.w	r0, r0, lr
 8001bae:	fa21 f102 	lsr.w	r1, r1, r2
 8001bb2:	4414      	add	r4, r2
 8001bb4:	e6bd      	b.n	8001932 <__adddf3+0xe6>
 8001bb6:	bf00      	nop

08001bb8 <__aeabi_d2uiz>:
 8001bb8:	004a      	lsls	r2, r1, #1
 8001bba:	d211      	bcs.n	8001be0 <__aeabi_d2uiz+0x28>
 8001bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001bc0:	d211      	bcs.n	8001be6 <__aeabi_d2uiz+0x2e>
 8001bc2:	d50d      	bpl.n	8001be0 <__aeabi_d2uiz+0x28>
 8001bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001bcc:	d40e      	bmi.n	8001bec <__aeabi_d2uiz+0x34>
 8001bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001bda:	fa23 f002 	lsr.w	r0, r3, r2
 8001bde:	4770      	bx	lr
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	4770      	bx	lr
 8001be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001bea:	d102      	bne.n	8001bf2 <__aeabi_d2uiz+0x3a>
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	4770      	bx	lr
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	4770      	bx	lr

08001bf8 <__aeabi_d2f>:
 8001bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001c00:	bf24      	itt	cs
 8001c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8001c0a:	d90d      	bls.n	8001c28 <__aeabi_d2f+0x30>
 8001c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001c20:	bf08      	it	eq
 8001c22:	f020 0001 	biceq.w	r0, r0, #1
 8001c26:	4770      	bx	lr
 8001c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8001c2c:	d121      	bne.n	8001c72 <__aeabi_d2f+0x7a>
 8001c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001c32:	bfbc      	itt	lt
 8001c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001c38:	4770      	bxlt	lr
 8001c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001c42:	f1c2 0218 	rsb	r2, r2, #24
 8001c46:	f1c2 0c20 	rsb	ip, r2, #32
 8001c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8001c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8001c52:	bf18      	it	ne
 8001c54:	f040 0001 	orrne.w	r0, r0, #1
 8001c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001c64:	ea40 000c 	orr.w	r0, r0, ip
 8001c68:	fa23 f302 	lsr.w	r3, r3, r2
 8001c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c70:	e7cc      	b.n	8001c0c <__aeabi_d2f+0x14>
 8001c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001c76:	d107      	bne.n	8001c88 <__aeabi_d2f+0x90>
 8001c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001c7c:	bf1e      	ittt	ne
 8001c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001c86:	4770      	bxne	lr
 8001c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8001c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <strcmp>:
 8001c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca0:	2a01      	cmp	r2, #1
 8001ca2:	bf28      	it	cs
 8001ca4:	429a      	cmpcs	r2, r3
 8001ca6:	d0f7      	beq.n	8001c98 <strcmp>
 8001ca8:	1ad0      	subs	r0, r2, r3
 8001caa:	4770      	bx	lr

08001cac <strlen>:
 8001cac:	4603      	mov	r3, r0
 8001cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	d1fb      	bne.n	8001cae <strlen+0x2>
 8001cb6:	1a18      	subs	r0, r3, r0
 8001cb8:	3801      	subs	r0, #1
 8001cba:	4770      	bx	lr
 8001cbc:	0000      	movs	r0, r0
	...

08001cc0 <memchr>:
 8001cc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001cc4:	2a10      	cmp	r2, #16
 8001cc6:	db2b      	blt.n	8001d20 <memchr+0x60>
 8001cc8:	f010 0f07 	tst.w	r0, #7
 8001ccc:	d008      	beq.n	8001ce0 <memchr+0x20>
 8001cce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d02d      	beq.n	8001d34 <memchr+0x74>
 8001cd8:	f010 0f07 	tst.w	r0, #7
 8001cdc:	b342      	cbz	r2, 8001d30 <memchr+0x70>
 8001cde:	d1f6      	bne.n	8001cce <memchr+0xe>
 8001ce0:	b4f0      	push	{r4, r5, r6, r7}
 8001ce2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001ce6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001cea:	f022 0407 	bic.w	r4, r2, #7
 8001cee:	f07f 0700 	mvns.w	r7, #0
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001cf8:	3c08      	subs	r4, #8
 8001cfa:	ea85 0501 	eor.w	r5, r5, r1
 8001cfe:	ea86 0601 	eor.w	r6, r6, r1
 8001d02:	fa85 f547 	uadd8	r5, r5, r7
 8001d06:	faa3 f587 	sel	r5, r3, r7
 8001d0a:	fa86 f647 	uadd8	r6, r6, r7
 8001d0e:	faa5 f687 	sel	r6, r5, r7
 8001d12:	b98e      	cbnz	r6, 8001d38 <memchr+0x78>
 8001d14:	d1ee      	bne.n	8001cf4 <memchr+0x34>
 8001d16:	bcf0      	pop	{r4, r5, r6, r7}
 8001d18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001d1c:	f002 0207 	and.w	r2, r2, #7
 8001d20:	b132      	cbz	r2, 8001d30 <memchr+0x70>
 8001d22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	ea83 0301 	eor.w	r3, r3, r1
 8001d2c:	b113      	cbz	r3, 8001d34 <memchr+0x74>
 8001d2e:	d1f8      	bne.n	8001d22 <memchr+0x62>
 8001d30:	2000      	movs	r0, #0
 8001d32:	4770      	bx	lr
 8001d34:	3801      	subs	r0, #1
 8001d36:	4770      	bx	lr
 8001d38:	2d00      	cmp	r5, #0
 8001d3a:	bf06      	itte	eq
 8001d3c:	4635      	moveq	r5, r6
 8001d3e:	3803      	subeq	r0, #3
 8001d40:	3807      	subne	r0, #7
 8001d42:	f015 0f01 	tst.w	r5, #1
 8001d46:	d107      	bne.n	8001d58 <memchr+0x98>
 8001d48:	3001      	adds	r0, #1
 8001d4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001d4e:	bf02      	ittt	eq
 8001d50:	3001      	addeq	r0, #1
 8001d52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001d56:	3001      	addeq	r0, #1
 8001d58:	bcf0      	pop	{r4, r5, r6, r7}
 8001d5a:	3801      	subs	r0, #1
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <__aeabi_dmul>:
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001d66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001d6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001d6e:	bf1d      	ittte	ne
 8001d70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001d74:	ea94 0f0c 	teqne	r4, ip
 8001d78:	ea95 0f0c 	teqne	r5, ip
 8001d7c:	f000 f8de 	bleq	8001f3c <__aeabi_dmul+0x1dc>
 8001d80:	442c      	add	r4, r5
 8001d82:	ea81 0603 	eor.w	r6, r1, r3
 8001d86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001d8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001d8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001d92:	bf18      	it	ne
 8001d94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001d98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da0:	d038      	beq.n	8001e14 <__aeabi_dmul+0xb4>
 8001da2:	fba0 ce02 	umull	ip, lr, r0, r2
 8001da6:	f04f 0500 	mov.w	r5, #0
 8001daa:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001dae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001db2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001db6:	f04f 0600 	mov.w	r6, #0
 8001dba:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001dbe:	f09c 0f00 	teq	ip, #0
 8001dc2:	bf18      	it	ne
 8001dc4:	f04e 0e01 	orrne.w	lr, lr, #1
 8001dc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001dcc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001dd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001dd4:	d204      	bcs.n	8001de0 <__aeabi_dmul+0x80>
 8001dd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001dda:	416d      	adcs	r5, r5
 8001ddc:	eb46 0606 	adc.w	r6, r6, r6
 8001de0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001de4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001de8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001dec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001df0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001df4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001df8:	bf88      	it	hi
 8001dfa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001dfe:	d81e      	bhi.n	8001e3e <__aeabi_dmul+0xde>
 8001e00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001e04:	bf08      	it	eq
 8001e06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001e0a:	f150 0000 	adcs.w	r0, r0, #0
 8001e0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001e18:	ea46 0101 	orr.w	r1, r6, r1
 8001e1c:	ea40 0002 	orr.w	r0, r0, r2
 8001e20:	ea81 0103 	eor.w	r1, r1, r3
 8001e24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001e28:	bfc2      	ittt	gt
 8001e2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001e2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001e32:	bd70      	popgt	{r4, r5, r6, pc}
 8001e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001e38:	f04f 0e00 	mov.w	lr, #0
 8001e3c:	3c01      	subs	r4, #1
 8001e3e:	f300 80ab 	bgt.w	8001f98 <__aeabi_dmul+0x238>
 8001e42:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001e46:	bfde      	ittt	le
 8001e48:	2000      	movle	r0, #0
 8001e4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001e4e:	bd70      	pople	{r4, r5, r6, pc}
 8001e50:	f1c4 0400 	rsb	r4, r4, #0
 8001e54:	3c20      	subs	r4, #32
 8001e56:	da35      	bge.n	8001ec4 <__aeabi_dmul+0x164>
 8001e58:	340c      	adds	r4, #12
 8001e5a:	dc1b      	bgt.n	8001e94 <__aeabi_dmul+0x134>
 8001e5c:	f104 0414 	add.w	r4, r4, #20
 8001e60:	f1c4 0520 	rsb	r5, r4, #32
 8001e64:	fa00 f305 	lsl.w	r3, r0, r5
 8001e68:	fa20 f004 	lsr.w	r0, r0, r4
 8001e6c:	fa01 f205 	lsl.w	r2, r1, r5
 8001e70:	ea40 0002 	orr.w	r0, r0, r2
 8001e74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001e78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001e7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001e80:	fa21 f604 	lsr.w	r6, r1, r4
 8001e84:	eb42 0106 	adc.w	r1, r2, r6
 8001e88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001e8c:	bf08      	it	eq
 8001e8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	f1c4 040c 	rsb	r4, r4, #12
 8001e98:	f1c4 0520 	rsb	r5, r4, #32
 8001e9c:	fa00 f304 	lsl.w	r3, r0, r4
 8001ea0:	fa20 f005 	lsr.w	r0, r0, r5
 8001ea4:	fa01 f204 	lsl.w	r2, r1, r4
 8001ea8:	ea40 0002 	orr.w	r0, r0, r2
 8001eac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001eb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001eb4:	f141 0100 	adc.w	r1, r1, #0
 8001eb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001ebc:	bf08      	it	eq
 8001ebe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f1c4 0520 	rsb	r5, r4, #32
 8001ec8:	fa00 f205 	lsl.w	r2, r0, r5
 8001ecc:	ea4e 0e02 	orr.w	lr, lr, r2
 8001ed0:	fa20 f304 	lsr.w	r3, r0, r4
 8001ed4:	fa01 f205 	lsl.w	r2, r1, r5
 8001ed8:	ea43 0302 	orr.w	r3, r3, r2
 8001edc:	fa21 f004 	lsr.w	r0, r1, r4
 8001ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001ee4:	fa21 f204 	lsr.w	r2, r1, r4
 8001ee8:	ea20 0002 	bic.w	r0, r0, r2
 8001eec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001ef4:	bf08      	it	eq
 8001ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f094 0f00 	teq	r4, #0
 8001f00:	d10f      	bne.n	8001f22 <__aeabi_dmul+0x1c2>
 8001f02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001f06:	0040      	lsls	r0, r0, #1
 8001f08:	eb41 0101 	adc.w	r1, r1, r1
 8001f0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001f10:	bf08      	it	eq
 8001f12:	3c01      	subeq	r4, #1
 8001f14:	d0f7      	beq.n	8001f06 <__aeabi_dmul+0x1a6>
 8001f16:	ea41 0106 	orr.w	r1, r1, r6
 8001f1a:	f095 0f00 	teq	r5, #0
 8001f1e:	bf18      	it	ne
 8001f20:	4770      	bxne	lr
 8001f22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001f26:	0052      	lsls	r2, r2, #1
 8001f28:	eb43 0303 	adc.w	r3, r3, r3
 8001f2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001f30:	bf08      	it	eq
 8001f32:	3d01      	subeq	r5, #1
 8001f34:	d0f7      	beq.n	8001f26 <__aeabi_dmul+0x1c6>
 8001f36:	ea43 0306 	orr.w	r3, r3, r6
 8001f3a:	4770      	bx	lr
 8001f3c:	ea94 0f0c 	teq	r4, ip
 8001f40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001f44:	bf18      	it	ne
 8001f46:	ea95 0f0c 	teqne	r5, ip
 8001f4a:	d00c      	beq.n	8001f66 <__aeabi_dmul+0x206>
 8001f4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001f50:	bf18      	it	ne
 8001f52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001f56:	d1d1      	bne.n	8001efc <__aeabi_dmul+0x19c>
 8001f58:	ea81 0103 	eor.w	r1, r1, r3
 8001f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001f6a:	bf06      	itte	eq
 8001f6c:	4610      	moveq	r0, r2
 8001f6e:	4619      	moveq	r1, r3
 8001f70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x24a>
 8001f76:	ea94 0f0c 	teq	r4, ip
 8001f7a:	d102      	bne.n	8001f82 <__aeabi_dmul+0x222>
 8001f7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001f80:	d113      	bne.n	8001faa <__aeabi_dmul+0x24a>
 8001f82:	ea95 0f0c 	teq	r5, ip
 8001f86:	d105      	bne.n	8001f94 <__aeabi_dmul+0x234>
 8001f88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001f8c:	bf1c      	itt	ne
 8001f8e:	4610      	movne	r0, r2
 8001f90:	4619      	movne	r1, r3
 8001f92:	d10a      	bne.n	8001faa <__aeabi_dmul+0x24a>
 8001f94:	ea81 0103 	eor.w	r1, r1, r3
 8001f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001f9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001fa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001fae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}

08001fb4 <__aeabi_ddiv>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001fba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001fbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001fc2:	bf1d      	ittte	ne
 8001fc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001fc8:	ea94 0f0c 	teqne	r4, ip
 8001fcc:	ea95 0f0c 	teqne	r5, ip
 8001fd0:	f000 f8a7 	bleq	8002122 <__aeabi_ddiv+0x16e>
 8001fd4:	eba4 0405 	sub.w	r4, r4, r5
 8001fd8:	ea81 0e03 	eor.w	lr, r1, r3
 8001fdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001fe0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001fe4:	f000 8088 	beq.w	80020f8 <__aeabi_ddiv+0x144>
 8001fe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001fec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001ff0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001ff4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001ff8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001ffc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002000:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002004:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002008:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800200c:	429d      	cmp	r5, r3
 800200e:	bf08      	it	eq
 8002010:	4296      	cmpeq	r6, r2
 8002012:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002016:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800201a:	d202      	bcs.n	8002022 <__aeabi_ddiv+0x6e>
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002022:	1ab6      	subs	r6, r6, r2
 8002024:	eb65 0503 	sbc.w	r5, r5, r3
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	ea4f 0232 	mov.w	r2, r2, rrx
 800202e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002032:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002036:	ebb6 0e02 	subs.w	lr, r6, r2
 800203a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800203e:	bf22      	ittt	cs
 8002040:	1ab6      	subcs	r6, r6, r2
 8002042:	4675      	movcs	r5, lr
 8002044:	ea40 000c 	orrcs.w	r0, r0, ip
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	ea4f 0232 	mov.w	r2, r2, rrx
 800204e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002052:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002056:	bf22      	ittt	cs
 8002058:	1ab6      	subcs	r6, r6, r2
 800205a:	4675      	movcs	r5, lr
 800205c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	ea4f 0232 	mov.w	r2, r2, rrx
 8002066:	ebb6 0e02 	subs.w	lr, r6, r2
 800206a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800206e:	bf22      	ittt	cs
 8002070:	1ab6      	subcs	r6, r6, r2
 8002072:	4675      	movcs	r5, lr
 8002074:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	ea4f 0232 	mov.w	r2, r2, rrx
 800207e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002082:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002086:	bf22      	ittt	cs
 8002088:	1ab6      	subcs	r6, r6, r2
 800208a:	4675      	movcs	r5, lr
 800208c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002090:	ea55 0e06 	orrs.w	lr, r5, r6
 8002094:	d018      	beq.n	80020c8 <__aeabi_ddiv+0x114>
 8002096:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800209a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800209e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80020a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80020a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80020aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80020ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80020b2:	d1c0      	bne.n	8002036 <__aeabi_ddiv+0x82>
 80020b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80020b8:	d10b      	bne.n	80020d2 <__aeabi_ddiv+0x11e>
 80020ba:	ea41 0100 	orr.w	r1, r1, r0
 80020be:	f04f 0000 	mov.w	r0, #0
 80020c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80020c6:	e7b6      	b.n	8002036 <__aeabi_ddiv+0x82>
 80020c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80020cc:	bf04      	itt	eq
 80020ce:	4301      	orreq	r1, r0
 80020d0:	2000      	moveq	r0, #0
 80020d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80020d6:	bf88      	it	hi
 80020d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80020dc:	f63f aeaf 	bhi.w	8001e3e <__aeabi_dmul+0xde>
 80020e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80020e4:	bf04      	itt	eq
 80020e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80020ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80020ee:	f150 0000 	adcs.w	r0, r0, #0
 80020f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80020fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002100:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002104:	bfc2      	ittt	gt
 8002106:	ebd4 050c 	rsbsgt	r5, r4, ip
 800210a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800210e:	bd70      	popgt	{r4, r5, r6, pc}
 8002110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002114:	f04f 0e00 	mov.w	lr, #0
 8002118:	3c01      	subs	r4, #1
 800211a:	e690      	b.n	8001e3e <__aeabi_dmul+0xde>
 800211c:	ea45 0e06 	orr.w	lr, r5, r6
 8002120:	e68d      	b.n	8001e3e <__aeabi_dmul+0xde>
 8002122:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002126:	ea94 0f0c 	teq	r4, ip
 800212a:	bf08      	it	eq
 800212c:	ea95 0f0c 	teqeq	r5, ip
 8002130:	f43f af3b 	beq.w	8001faa <__aeabi_dmul+0x24a>
 8002134:	ea94 0f0c 	teq	r4, ip
 8002138:	d10a      	bne.n	8002150 <__aeabi_ddiv+0x19c>
 800213a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800213e:	f47f af34 	bne.w	8001faa <__aeabi_dmul+0x24a>
 8002142:	ea95 0f0c 	teq	r5, ip
 8002146:	f47f af25 	bne.w	8001f94 <__aeabi_dmul+0x234>
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	e72c      	b.n	8001faa <__aeabi_dmul+0x24a>
 8002150:	ea95 0f0c 	teq	r5, ip
 8002154:	d106      	bne.n	8002164 <__aeabi_ddiv+0x1b0>
 8002156:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800215a:	f43f aefd 	beq.w	8001f58 <__aeabi_dmul+0x1f8>
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	e722      	b.n	8001faa <__aeabi_dmul+0x24a>
 8002164:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002168:	bf18      	it	ne
 800216a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800216e:	f47f aec5 	bne.w	8001efc <__aeabi_dmul+0x19c>
 8002172:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002176:	f47f af0d 	bne.w	8001f94 <__aeabi_dmul+0x234>
 800217a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800217e:	f47f aeeb 	bne.w	8001f58 <__aeabi_dmul+0x1f8>
 8002182:	e712      	b.n	8001faa <__aeabi_dmul+0x24a>

08002184 <__gedf2>:
 8002184:	f04f 3cff 	mov.w	ip, #4294967295
 8002188:	e006      	b.n	8002198 <__cmpdf2+0x4>
 800218a:	bf00      	nop

0800218c <__ledf2>:
 800218c:	f04f 0c01 	mov.w	ip, #1
 8002190:	e002      	b.n	8002198 <__cmpdf2+0x4>
 8002192:	bf00      	nop

08002194 <__cmpdf2>:
 8002194:	f04f 0c01 	mov.w	ip, #1
 8002198:	f84d cd04 	str.w	ip, [sp, #-4]!
 800219c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80021a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80021a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80021a8:	bf18      	it	ne
 80021aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80021ae:	d01b      	beq.n	80021e8 <__cmpdf2+0x54>
 80021b0:	b001      	add	sp, #4
 80021b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80021b6:	bf0c      	ite	eq
 80021b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80021bc:	ea91 0f03 	teqne	r1, r3
 80021c0:	bf02      	ittt	eq
 80021c2:	ea90 0f02 	teqeq	r0, r2
 80021c6:	2000      	moveq	r0, #0
 80021c8:	4770      	bxeq	lr
 80021ca:	f110 0f00 	cmn.w	r0, #0
 80021ce:	ea91 0f03 	teq	r1, r3
 80021d2:	bf58      	it	pl
 80021d4:	4299      	cmppl	r1, r3
 80021d6:	bf08      	it	eq
 80021d8:	4290      	cmpeq	r0, r2
 80021da:	bf2c      	ite	cs
 80021dc:	17d8      	asrcs	r0, r3, #31
 80021de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80021e2:	f040 0001 	orr.w	r0, r0, #1
 80021e6:	4770      	bx	lr
 80021e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80021ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80021f0:	d102      	bne.n	80021f8 <__cmpdf2+0x64>
 80021f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80021f6:	d107      	bne.n	8002208 <__cmpdf2+0x74>
 80021f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80021fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002200:	d1d6      	bne.n	80021b0 <__cmpdf2+0x1c>
 8002202:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002206:	d0d3      	beq.n	80021b0 <__cmpdf2+0x1c>
 8002208:	f85d 0b04 	ldr.w	r0, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <__aeabi_cdrcmple>:
 8002210:	4684      	mov	ip, r0
 8002212:	4610      	mov	r0, r2
 8002214:	4662      	mov	r2, ip
 8002216:	468c      	mov	ip, r1
 8002218:	4619      	mov	r1, r3
 800221a:	4663      	mov	r3, ip
 800221c:	e000      	b.n	8002220 <__aeabi_cdcmpeq>
 800221e:	bf00      	nop

08002220 <__aeabi_cdcmpeq>:
 8002220:	b501      	push	{r0, lr}
 8002222:	f7ff ffb7 	bl	8002194 <__cmpdf2>
 8002226:	2800      	cmp	r0, #0
 8002228:	bf48      	it	mi
 800222a:	f110 0f00 	cmnmi.w	r0, #0
 800222e:	bd01      	pop	{r0, pc}

08002230 <__aeabi_dcmpeq>:
 8002230:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002234:	f7ff fff4 	bl	8002220 <__aeabi_cdcmpeq>
 8002238:	bf0c      	ite	eq
 800223a:	2001      	moveq	r0, #1
 800223c:	2000      	movne	r0, #0
 800223e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002242:	bf00      	nop

08002244 <__aeabi_dcmplt>:
 8002244:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002248:	f7ff ffea 	bl	8002220 <__aeabi_cdcmpeq>
 800224c:	bf34      	ite	cc
 800224e:	2001      	movcc	r0, #1
 8002250:	2000      	movcs	r0, #0
 8002252:	f85d fb08 	ldr.w	pc, [sp], #8
 8002256:	bf00      	nop

08002258 <__aeabi_dcmple>:
 8002258:	f84d ed08 	str.w	lr, [sp, #-8]!
 800225c:	f7ff ffe0 	bl	8002220 <__aeabi_cdcmpeq>
 8002260:	bf94      	ite	ls
 8002262:	2001      	movls	r0, #1
 8002264:	2000      	movhi	r0, #0
 8002266:	f85d fb08 	ldr.w	pc, [sp], #8
 800226a:	bf00      	nop

0800226c <__aeabi_dcmpge>:
 800226c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002270:	f7ff ffce 	bl	8002210 <__aeabi_cdrcmple>
 8002274:	bf94      	ite	ls
 8002276:	2001      	movls	r0, #1
 8002278:	2000      	movhi	r0, #0
 800227a:	f85d fb08 	ldr.w	pc, [sp], #8
 800227e:	bf00      	nop

08002280 <__aeabi_dcmpgt>:
 8002280:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002284:	f7ff ffc4 	bl	8002210 <__aeabi_cdrcmple>
 8002288:	bf34      	ite	cc
 800228a:	2001      	movcc	r0, #1
 800228c:	2000      	movcs	r0, #0
 800228e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002292:	bf00      	nop

08002294 <__aeabi_dcmpun>:
 8002294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800229c:	d102      	bne.n	80022a4 <__aeabi_dcmpun+0x10>
 800229e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80022a2:	d10a      	bne.n	80022ba <__aeabi_dcmpun+0x26>
 80022a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80022a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80022ac:	d102      	bne.n	80022b4 <__aeabi_dcmpun+0x20>
 80022ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80022b2:	d102      	bne.n	80022ba <__aeabi_dcmpun+0x26>
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	4770      	bx	lr
 80022ba:	f04f 0001 	mov.w	r0, #1
 80022be:	4770      	bx	lr

080022c0 <__aeabi_d2iz>:
 80022c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80022c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80022c8:	d215      	bcs.n	80022f6 <__aeabi_d2iz+0x36>
 80022ca:	d511      	bpl.n	80022f0 <__aeabi_d2iz+0x30>
 80022cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80022d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80022d4:	d912      	bls.n	80022fc <__aeabi_d2iz+0x3c>
 80022d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80022e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80022e6:	fa23 f002 	lsr.w	r0, r3, r2
 80022ea:	bf18      	it	ne
 80022ec:	4240      	negne	r0, r0
 80022ee:	4770      	bx	lr
 80022f0:	f04f 0000 	mov.w	r0, #0
 80022f4:	4770      	bx	lr
 80022f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80022fa:	d105      	bne.n	8002308 <__aeabi_d2iz+0x48>
 80022fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002300:	bf08      	it	eq
 8002302:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002306:	4770      	bx	lr
 8002308:	f04f 0000 	mov.w	r0, #0
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <SystemClock_Config>:
    //safety_check_task(); 
    //report_status_task();																						// If there is new data handle SoC estimation
  }
}

void SystemClock_Config(void) {
 8002310:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
void SystemClock_Config(void) {
 8002316:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002318:	220b      	movs	r2, #11
 800231a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002320:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002322:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002326:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002328:	2510      	movs	r5, #16
 800232a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800232c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002330:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002332:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002336:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002338:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233a:	f00a fdab 	bl	800ce94 <HAL_RCC_OscConfig>
 800233e:	b100      	cbz	r0, 8002342 <SystemClock_Config+0x32>
}

void Error_Handler(void){
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8002340:	e7fe      	b.n	8002340 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002348:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800234c:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002352:	4621      	mov	r1, r4
 8002354:	4668      	mov	r0, sp
 8002356:	f00b f82d 	bl	800d3b4 <HAL_RCC_ClockConfig>
 800235a:	b100      	cbz	r0, 800235e <SystemClock_Config+0x4e>
  while(1) 
 800235c:	e7fe      	b.n	800235c <SystemClock_Config+0x4c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800235e:	23e2      	movs	r3, #226	; 0xe2
 8002360:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002362:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002366:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002368:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800236c:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800236e:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8002370:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002372:	f00b f907 	bl	800d584 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4604      	mov	r4, r0
 8002378:	b100      	cbz	r0, 800237c <SystemClock_Config+0x6c>
  while(1) 
 800237a:	e7fe      	b.n	800237a <SystemClock_Config+0x6a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800237c:	f00b f8cc 	bl	800d518 <HAL_RCC_GetHCLKFreq>
 8002380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002384:	fbb0 f0f3 	udiv	r0, r0, r3
 8002388:	f009 fcf8 	bl	800bd7c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800238c:	2004      	movs	r0, #4
 800238e:	f009 fd09 	bl	800bda4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002392:	4622      	mov	r2, r4
 8002394:	4621      	mov	r1, r4
 8002396:	f04f 30ff 	mov.w	r0, #4294967295
 800239a:	f009 fcb1 	bl	800bd00 <HAL_NVIC_SetPriority>
}
 800239e:	b01f      	add	sp, #124	; 0x7c
 80023a0:	bd30      	pop	{r4, r5, pc}
	...

080023a4 <mainWatchDogInitAndStart>:
void mainWatchDogInitAndStart(void) {
 80023a4:	b510      	push	{r4, lr}
  handleIWDG.Init.Prescaler = IWDG_PRESCALER_256;
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <mainWatchDogInitAndStart+0x2c>)
  handleIWDG.Instance = IWDG;
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <mainWatchDogInitAndStart+0x30>)
  handleIWDG.Init.Prescaler = IWDG_PRESCALER_256;
 80023aa:	2306      	movs	r3, #6
 80023ac:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_IWDG_Init(&handleIWDG) != HAL_OK) {
 80023b0:	4620      	mov	r0, r4
  handleIWDG.Init.Window = 4095;
 80023b2:	f640 73ff 	movw	r3, #4095	; 0xfff
  handleIWDG.Init.Reload = 4095;
 80023b6:	e9c4 3302 	strd	r3, r3, [r4, #8]
  if (HAL_IWDG_Init(&handleIWDG) != HAL_OK) {
 80023ba:	f00a f9ed 	bl	800c798 <HAL_IWDG_Init>
 80023be:	b100      	cbz	r0, 80023c2 <mainWatchDogInitAndStart+0x1e>
  while(1) 
 80023c0:	e7fe      	b.n	80023c0 <mainWatchDogInitAndStart+0x1c>
  if(HAL_IWDG_Start(&handleIWDG) != HAL_OK) {
 80023c2:	4620      	mov	r0, r4
 80023c4:	f00a fa31 	bl	800c82a <HAL_IWDG_Start>
 80023c8:	b100      	cbz	r0, 80023cc <mainWatchDogInitAndStart+0x28>
  while(1) 
 80023ca:	e7fe      	b.n	80023ca <mainWatchDogInitAndStart+0x26>
}
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	bf00      	nop
 80023d0:	40003000 	.word	0x40003000
 80023d4:	20000224 	.word	0x20000224

080023d8 <mainWatchDogReset>:
	HAL_IWDG_Refresh(&handleIWDG);
 80023d8:	4801      	ldr	r0, [pc, #4]	; (80023e0 <mainWatchDogReset+0x8>)
 80023da:	f00a ba54 	b.w	800c886 <HAL_IWDG_Refresh>
 80023de:	bf00      	nop
 80023e0:	20000224 	.word	0x20000224

080023e4 <main>:
int main(void) {			
 80023e4:	b508      	push	{r3, lr}
  HAL_Init();
 80023e6:	f008 fccf 	bl	800ad88 <HAL_Init>
  SystemClock_Config();
 80023ea:	f7ff ff91 	bl	8002310 <SystemClock_Config>
	modPowerStateInit(P_STAT_SET);																						// Enable power supply to keep operational
 80023ee:	2001      	movs	r0, #1
 80023f0:	f005 fe26 	bl	8008040 <modPowerStateInit>
	mainWatchDogInitAndStart();
 80023f4:	f7ff ffd6 	bl	80023a4 <mainWatchDogInitAndStart>
	generalConfig            = modConfigInit();																// Tell EEPROM the needed size for ConfigStruct
 80023f8:	f002 f9fc 	bl	80047f4 <modConfigInit>
 80023fc:	4c1e      	ldr	r4, [pc, #120]	; (8002478 <main+0x94>)
	generalStateOfCharge     = modStateOfChargeInit(&packState,generalConfig);// Tell EEPROM the needed size for StatOfChargeStruct
 80023fe:	4d1f      	ldr	r5, [pc, #124]	; (800247c <main+0x98>)
	generalConfig            = modConfigInit();																// Tell EEPROM the needed size for ConfigStruct
 8002400:	6020      	str	r0, [r4, #0]
 8002402:	4601      	mov	r1, r0
	generalStateOfCharge     = modStateOfChargeInit(&packState,generalConfig);// Tell EEPROM the needed size for StatOfChargeStruct
 8002404:	481e      	ldr	r0, [pc, #120]	; (8002480 <main+0x9c>)
 8002406:	f005 fe77 	bl	80080f8 <modStateOfChargeInit>
 800240a:	6028      	str	r0, [r5, #0]
	driverSWStorageManagerInit();																							// Initializes EEPROM Memory
 800240c:	f006 fc8c 	bl	8008d28 <driverSWStorageManagerInit>
	modConfigStoreAndLoadDefaultConfig();																			// Store default config if needed -> load config from EEPROM
 8002410:	f002 fb64 	bl	8004adc <modConfigStoreAndLoadDefaultConfig>
	modStateOfChargeStoreAndLoadDefaultStateOfCharge();												// Determin SoC from cell voltage if needed -> load StateOfCharge from EEPROM
 8002414:	f005 ff10 	bl	8008238 <modStateOfChargeStoreAndLoadDefaultStateOfCharge>
	modPowerStateSetConfigHandle(generalConfig);                              // Tell the power state what input method is used en power on mode.
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	f005 fd47 	bl	8007eac <modPowerStateSetConfigHandle>
	modCommandsInit(&packState,generalConfig);
 800241e:	6821      	ldr	r1, [r4, #0]
 8002420:	4817      	ldr	r0, [pc, #92]	; (8002480 <main+0x9c>)
 8002422:	f001 f885 	bl	8003530 <modCommandsInit>
	modUARTInit();																	  												// Will act on UART message requests
 8002426:	f006 fc5d 	bl	8008ce4 <modUARTInit>
	modCANInit(&packState,generalConfig);																			// Will act on CAN message requests
 800242a:	6821      	ldr	r1, [r4, #0]
 800242c:	4814      	ldr	r0, [pc, #80]	; (8002480 <main+0x9c>)
 800242e:	f000 f829 	bl	8002484 <modCANInit>
	modEffectInit();																													// Controls the effects on LEDs + buzzer
 8002432:	f003 f969 	bl	8005708 <modEffectInit>
	modEffectChangeState(STAT_LED_DEBUG,STAT_FLASH);													// Set Debug LED to blinking mode	
 8002436:	2102      	movs	r1, #2
 8002438:	2000      	movs	r0, #0
 800243a:	f003 f81f 	bl	800547c <modEffectChangeState>
	modPowerElectronicsInit(&packState,generalConfig);												// Will measure all voltages and store them in packState	
 800243e:	6821      	ldr	r1, [r4, #0]
 8002440:	480f      	ldr	r0, [pc, #60]	; (8002480 <main+0x9c>)
 8002442:	f004 fe91 	bl	8007168 <modPowerElectronicsInit>
	modOperationalStateInit(&packState,generalConfig,generalStateOfCharge);		// Will keep track of and control operational state (eg. normal use / charging / balancing / power down)
 8002446:	682a      	ldr	r2, [r5, #0]
 8002448:	6821      	ldr	r1, [r4, #0]
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <main+0x9c>)
 800244c:	f003 fa38 	bl	80058c0 <modOperationalStateInit>
		modEffectTask();
 8002450:	f003 f91e 	bl	8005690 <modEffectTask>
		modPowerStateTask();
 8002454:	f005 fd42 	bl	8007edc <modPowerStateTask>
		modOperationalStateTask();
 8002458:	f003 faee 	bl	8005a38 <modOperationalStateTask>
		modUARTTask();
 800245c:	f006 fc52 	bl	8008d04 <modUARTTask>
		modCANTask();
 8002460:	f000 fff4 	bl	800344c <modCANTask>
		mainWatchDogReset();
 8002464:	f7ff ffb8 	bl	80023d8 <mainWatchDogReset>
		if(modPowerElectronicsTask())																						// Handle power electronics task
 8002468:	f005 fcb4 	bl	8007dd4 <modPowerElectronicsTask>
 800246c:	2800      	cmp	r0, #0
 800246e:	d0ef      	beq.n	8002450 <main+0x6c>
			modStateOfChargeProcess();
 8002470:	f005 fe66 	bl	8008140 <modStateOfChargeProcess>
 8002474:	e7ec      	b.n	8002450 <main+0x6c>
 8002476:	bf00      	nop
 8002478:	2000021c 	.word	0x2000021c
 800247c:	20000220 	.word	0x20000220
 8002480:	20000238 	.word	0x20000238

08002484 <modCANInit>:

void modCANInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer){
  static CanTxMsgTypeDef        TxMessage;
  static CanRxMsgTypeDef        RxMessage;
	
	modCANPackStateHandle = packState;
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <modCANInit+0xd0>)
void modCANInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer){
 8002486:	b530      	push	{r4, r5, lr}
	modCANPackStateHandle = packState;
 8002488:	6018      	str	r0, [r3, #0]
	modCANGeneralConfigHandle = generalConfigPointer;
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <modCANInit+0xd4>)
 800248c:	6019      	str	r1, [r3, #0]
	
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	4b33      	ldr	r3, [pc, #204]	; (800255c <modCANInit+0xd8>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	695b      	ldr	r3, [r3, #20]
	
  modCANHandle.Instance = CAN;
 800249a:	4a31      	ldr	r2, [pc, #196]	; (8002560 <modCANInit+0xdc>)
void modCANInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer){
 800249c:	b08d      	sub	sp, #52	; 0x34
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	9b01      	ldr	r3, [sp, #4]
  modCANHandle.Instance = CAN;
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <modCANInit+0xe0>)
 80024a8:	601a      	str	r2, [r3, #0]
  modCANHandle.pTxMsg = &TxMessage;
 80024aa:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <modCANInit+0xe4>)
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
  modCANHandle.pRxMsg = &RxMessage;
 80024ae:	4a2f      	ldr	r2, [pc, #188]	; (800256c <modCANInit+0xe8>)
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
	
	switch(modCANGeneralConfigHandle->canBusSpeed) {
 80024b2:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 80024b6:	b12a      	cbz	r2, 80024c4 <modCANInit+0x40>
 80024b8:	2a01      	cmp	r2, #1
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	d019      	beq.n	80024f4 <modCANInit+0x70>
			modCANHandle.Init.BS1 = CAN_BS1_5TQ;
			modCANHandle.Init.BS2 = CAN_BS2_2TQ;
			break;
		case canSpeedBaud500k:
		default:
			modCANHandle.Init.Prescaler = 9;
 80024c0:	2109      	movs	r1, #9
 80024c2:	e000      	b.n	80024c6 <modCANInit+0x42>
			modCANHandle.Init.Prescaler = 36;
 80024c4:	2124      	movs	r1, #36	; 0x24
			modCANHandle.Init.Mode = CAN_MODE_NORMAL;
 80024c6:	e9c3 1201 	strd	r1, r2, [r3, #4]
			modCANHandle.Init.SJW = CAN_SJW_1TQ;
 80024ca:	60da      	str	r2, [r3, #12]
			modCANHandle.Init.BS1 = CAN_BS1_5TQ;
			modCANHandle.Init.BS2 = CAN_BS2_2TQ;
 80024cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80024d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024d4:	e9c3 1204 	strd	r1, r2, [r3, #16]
	modCANHandle.Init.AWUM = DISABLE;
	modCANHandle.Init.NART = DISABLE;
	modCANHandle.Init.RFLM = DISABLE;
	modCANHandle.Init.TXFP = DISABLE;
	
  if(HAL_CAN_Init(&modCANHandle) != HAL_OK)
 80024d8:	4822      	ldr	r0, [pc, #136]	; (8002564 <modCANInit+0xe0>)
	modCANHandle.Init.ABOM = ENABLE; // Enable this for automatic recovery?
 80024da:	2200      	movs	r2, #0
 80024dc:	2501      	movs	r5, #1
 80024de:	e9c3 2506 	strd	r2, r5, [r3, #24]
	modCANHandle.Init.NART = DISABLE;
 80024e2:	e9c3 2208 	strd	r2, r2, [r3, #32]
	modCANHandle.Init.TXFP = DISABLE;
 80024e6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if(HAL_CAN_Init(&modCANHandle) != HAL_OK)
 80024ea:	f009 f93e 	bl	800b76a <HAL_CAN_Init>
 80024ee:	4604      	mov	r4, r0
 80024f0:	b110      	cbz	r0, 80024f8 <modCANInit+0x74>
    while(true){};
 80024f2:	e7fe      	b.n	80024f2 <modCANInit+0x6e>
			modCANHandle.Init.Prescaler = 18;
 80024f4:	2112      	movs	r1, #18
 80024f6:	e7e6      	b.n	80024c6 <modCANInit+0x42>
			
  CAN_FilterConfTypeDef canFilterConfig;
  canFilterConfig.FilterNumber = 0;
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80024f8:	e9cd 0007 	strd	r0, r0, [sp, #28]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  canFilterConfig.FilterIdHigh = 0x0000;
  canFilterConfig.FilterIdLow = 0x0000;
 80024fc:	e9cd 0002 	strd	r0, r0, [sp, #8]
  canFilterConfig.FilterMaskIdHigh = 0x0000 << 5;
  canFilterConfig.FilterMaskIdLow = 0x0000;
 8002500:	e9cd 0004 	strd	r0, r0, [sp, #16]
  canFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
  canFilterConfig.FilterActivation = ENABLE;
  canFilterConfig.BankNumber = 0;
 8002504:	e9cd 500a 	strd	r5, r0, [sp, #40]	; 0x28
  canFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
 8002508:	9006      	str	r0, [sp, #24]
  HAL_CAN_ConfigFilter(&modCANHandle, &canFilterConfig);
 800250a:	a902      	add	r1, sp, #8
 800250c:	4815      	ldr	r0, [pc, #84]	; (8002564 <modCANInit+0xe0>)
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800250e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_CAN_ConfigFilter(&modCANHandle, &canFilterConfig);
 8002510:	f009 f8c8 	bl	800b6a4 <HAL_CAN_ConfigFilter>

  if(HAL_CAN_Receive_IT(&modCANHandle, CAN_FIFO0) != HAL_OK)
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <modCANInit+0xe0>)
 8002516:	4621      	mov	r1, r4
 8002518:	f009 fa62 	bl	800b9e0 <HAL_CAN_Receive_IT>
 800251c:	b100      	cbz	r0, 8002520 <modCANInit+0x9c>
    while(true){};
 800251e:	e7fe      	b.n	800251e <modCANInit+0x9a>

	modCANRxFrameRead = 0;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <modCANInit+0xec>)
 8002522:	7018      	strb	r0, [r3, #0]
	modCANRxFrameWrite = 0;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <modCANInit+0xf0>)
 8002526:	7018      	strb	r0, [r3, #0]
			
	modCANSendStatusFastLastTisk = HAL_GetTick();
 8002528:	f008 fc48 	bl	800adbc <HAL_GetTick>
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <modCANInit+0xf4>)
 800252e:	6018      	str	r0, [r3, #0]
	modCANSendStatusSlowLastTisk = HAL_GetTick();
 8002530:	f008 fc44 	bl	800adbc <HAL_GetTick>
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <modCANInit+0xf8>)
 8002536:	6018      	str	r0, [r3, #0]
	modCANSendStatusVESCLastTisk = HAL_GetTick();
 8002538:	f008 fc40 	bl	800adbc <HAL_GetTick>
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <modCANInit+0xfc>)
 800253e:	6018      	str	r0, [r3, #0]
	modCANSafetyCANMessageTimeout = HAL_GetTick();
 8002540:	f008 fc3c 	bl	800adbc <HAL_GetTick>
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <modCANInit+0x100>)
 8002546:	6018      	str	r0, [r3, #0]
	modCANErrorLastTick = HAL_GetTick();
 8002548:	f008 fc38 	bl	800adbc <HAL_GetTick>
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <modCANInit+0x104>)
 800254e:	6018      	str	r0, [r3, #0]
}
 8002550:	b00d      	add	sp, #52	; 0x34
 8002552:	bd30      	pop	{r4, r5, pc}
 8002554:	2000157c 	.word	0x2000157c
 8002558:	2000152c 	.word	0x2000152c
 800255c:	40021000 	.word	0x40021000
 8002560:	40006400 	.word	0x40006400
 8002564:	20001530 	.word	0x20001530
 8002568:	200014f8 	.word	0x200014f8
 800256c:	200014d4 	.word	0x200014d4
 8002570:	20001981 	.word	0x20001981
 8002574:	20001982 	.word	0x20001982
 8002578:	20003d64 	.word	0x20003d64
 800257c:	20003d68 	.word	0x20003d68
 8002580:	20003d6c 	.word	0x20003d6c
 8002584:	20003d60 	.word	0x20003d60
 8002588:	20001528 	.word	0x20001528

0800258c <modCANGetDestinationID>:
	
	// Control the charger
	modCANHandleSubTaskCharger();
}

uint32_t modCANGetDestinationID(CanRxMsgTypeDef canMsg) {
 800258c:	b084      	sub	sp, #16
 800258e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	uint32_t destinationID;
	
	switch(modCANGeneralConfigHandle->CANIDStyle) {
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <modCANGetDestinationID+0x20>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800259a:	4608      	mov	r0, r1
 800259c:	2b01      	cmp	r3, #1
		default:																																					// Default to VESC style ID
	  case CANIDStyleVESC:
			destinationID = canMsg.ExtId & 0xFF;
 800259e:	bf14      	ite	ne
 80025a0:	b2c8      	uxtbne	r0, r1
			break;
		case CANIDStyleFoiler:
			destinationID = (canMsg.ExtId >> 8) & 0xFF;
 80025a2:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
			break;
	}
	
	return destinationID;
}
 80025a6:	b004      	add	sp, #16
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000152c 	.word	0x2000152c

080025b0 <modCANGetCANID>:
}

uint32_t modCANGetCANID(uint32_t destinationID, CAN_PACKET_ID packetID) {
	uint32_t returnCANID;
	
	switch(modCANGeneralConfigHandle->CANIDStyle) {
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <modCANGetCANID+0x18>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 80025b8:	2b01      	cmp	r3, #1
		default:																																					// Default to VESC style ID
	  case CANIDStyleVESC:
			returnCANID = ((uint32_t) destinationID) | ((uint32_t)packetID << 8);
 80025ba:	bf14      	ite	ne
 80025bc:	ea40 2001 	orrne.w	r0, r0, r1, lsl #8
			break;
		case CANIDStyleFoiler:
			returnCANID = ((uint32_t) destinationID << 8) | ((uint32_t)packetID);
 80025c0:	ea41 2000 	orreq.w	r0, r1, r0, lsl #8
			break;
	}
	
  return returnCANID;
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000152c 	.word	0x2000152c

080025cc <USB_LP_CAN_RX0_IRQHandler>:


}

void CAN_RX0_IRQHandler(void) {
  HAL_CAN_IRQHandler(&modCANHandle);
 80025cc:	4801      	ldr	r0, [pc, #4]	; (80025d4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 80025ce:	f009 bac3 	b.w	800bb58 <HAL_CAN_IRQHandler>
 80025d2:	bf00      	nop
 80025d4:	20001530 	.word	0x20001530

080025d8 <modCANTransmitExtID>:
		if(modCANRxFrameRead >= RX_CAN_FRAMES_SIZE)
			modCANRxFrameRead = 0;
	}
}

void modCANTransmitExtID(uint32_t id, uint8_t *data, uint8_t len) {
 80025d8:	b500      	push	{lr}
	CanTxMsgTypeDef txmsg;
	txmsg.IDE = CAN_ID_EXT;
 80025da:	2304      	movs	r3, #4
void modCANTransmitExtID(uint32_t id, uint8_t *data, uint8_t len) {
 80025dc:	b089      	sub	sp, #36	; 0x24
	txmsg.ExtId = id;
 80025de:	e9cd 0302 	strd	r0, r3, [sp, #8]
	txmsg.RTR = CAN_RTR_DATA;
 80025e2:	2300      	movs	r3, #0
	txmsg.DLC = len;
	memcpy(txmsg.Data, data, len);
 80025e4:	a806      	add	r0, sp, #24
	txmsg.DLC = len;
 80025e6:	e9cd 3204 	strd	r3, r2, [sp, #16]
	memcpy(txmsg.Data, data, len);
 80025ea:	f00c feef 	bl	800f3cc <memcpy>
	
	modCANHandle.pTxMsg = &txmsg;
 80025ee:	4804      	ldr	r0, [pc, #16]	; (8002600 <modCANTransmitExtID+0x28>)
 80025f0:	ab01      	add	r3, sp, #4
	HAL_CAN_Transmit(&modCANHandle,1);
 80025f2:	2101      	movs	r1, #1
	modCANHandle.pTxMsg = &txmsg;
 80025f4:	6303      	str	r3, [r0, #48]	; 0x30
	HAL_CAN_Transmit(&modCANHandle,1);
 80025f6:	f009 f94f 	bl	800b898 <HAL_CAN_Transmit>
}
 80025fa:	b009      	add	sp, #36	; 0x24
 80025fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002600:	20001530 	.word	0x20001530

08002604 <modCANSendStatusFast>:
void modCANSendStatusFast(void) {
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(modCANGeneralConfigHandle->togglePowerModeDirectHCDelay || modCANGeneralConfigHandle->pulseToggleButton){
 8002606:	4d3d      	ldr	r5, [pc, #244]	; (80026fc <modCANSendStatusFast+0xf8>)
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 8002608:	4c3d      	ldr	r4, [pc, #244]	; (8002700 <modCANSendStatusFast+0xfc>)
	if(modCANGeneralConfigHandle->togglePowerModeDirectHCDelay || modCANGeneralConfigHandle->pulseToggleButton){
 800260a:	682a      	ldr	r2, [r5, #0]
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 800260c:	6823      	ldr	r3, [r4, #0]
	if(modCANGeneralConfigHandle->togglePowerModeDirectHCDelay || modCANGeneralConfigHandle->pulseToggleButton){
 800260e:	f892 10ec 	ldrb.w	r1, [r2, #236]	; 0xec
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 8002612:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
void modCANSendStatusFast(void) {
 8002616:	b087      	sub	sp, #28
	if(modCANGeneralConfigHandle->togglePowerModeDirectHCDelay || modCANGeneralConfigHandle->pulseToggleButton){
 8002618:	b919      	cbnz	r1, 8002622 <modCANSendStatusFast+0x1e>
 800261a:	f892 20eb 	ldrb.w	r2, [r2, #235]	; 0xeb
 800261e:	2a00      	cmp	r2, #0
 8002620:	d066      	beq.n	80026f0 <modCANSendStatusFast+0xec>
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 8002622:	b108      	cbz	r0, 8002628 <modCANSendStatusFast+0x24>
 8002624:	f004 fc3c 	bl	8006ea0 <modPowerElectronicsHCSafetyCANAndPowerButtonCheck>
	flagHolder |= (modCANPackStateHandle->chargeAllowed		<< 0);
 8002628:	6823      	ldr	r3, [r4, #0]
	libBufferAppend_float16(buffer, modCANPackStateHandle->loCurrentLoadVoltage,1e2,&sendIndex);
 800262a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8002704 <modCANSendStatusFast+0x100>
	flagHolder |= (modCANPackStateHandle->disChargeLCAllowed	<< 2);
 800262e:	f893 609e 	ldrb.w	r6, [r3, #158]	; 0x9e
	flagHolder |= (modCANPackStateHandle->chargeDesired		<< 1);
 8002632:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
	libBufferAppend_float16(buffer, modCANPackStateHandle->loCurrentLoadVoltage,1e2,&sendIndex);
 8002636:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
	flagHolder |= (modCANPackStateHandle->disChargeLCAllowed	<< 2);
 800263a:	00b6      	lsls	r6, r6, #2
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 800263c:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
 8002640:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8002644:	4316      	orrs	r6, r2
	flagHolder |= (modCANPackStateHandle->balanceActive		<< 4);
 8002646:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 800264a:	ea46 1602 	orr.w	r6, r6, r2, lsl #4
	flagHolder |= (modCANPackStateHandle->packInSOADischarge	<< 5);
 800264e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 8002652:	ea46 1642 	orr.w	r6, r6, r2, lsl #5
	flagHolder |= (modCANPackStateHandle->chargePFETDesired		<< 6);
 8002656:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 800265a:	ea46 1682 	orr.w	r6, r6, r2, lsl #6
 800265e:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 8002662:	b2c0      	uxtb	r0, r0
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 8002664:	ea46 16c2 	orr.w	r6, r6, r2, lsl #7
 8002668:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
	sendIndex = 0;
 800266c:	2200      	movs	r2, #0
	flagHolder |= (modCANPackStateHandle->powerButtonActuated	<< 7);
 800266e:	b2c6      	uxtb	r6, r0
	libBufferAppend_float16(buffer, modCANPackStateHandle->loCurrentLoadVoltage,1e2,&sendIndex);
 8002670:	a903      	add	r1, sp, #12
 8002672:	a804      	add	r0, sp, #16
	sendIndex = 0;
 8002674:	9203      	str	r2, [sp, #12]
	libBufferAppend_float16(buffer, modCANPackStateHandle->loCurrentLoadVoltage,1e2,&sendIndex);
 8002676:	f00b ffbf 	bl	800e5f8 <libBufferAppend_float16>
	libBufferAppend_float16(buffer, modCANPackStateHandle->SoCCapacityAh,1e2,&sendIndex);
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002704 <modCANSendStatusFast+0x100>
 8002680:	ed93 0a05 	vldr	s0, [r3, #20]
 8002684:	a903      	add	r1, sp, #12
 8002686:	a804      	add	r0, sp, #16
 8002688:	f00b ffb6 	bl	800e5f8 <libBufferAppend_float16>
	libBufferAppend_uint8(buffer, (uint8_t)modCANPackStateHandle->SoC,&sendIndex);
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002696:	aa03      	add	r2, sp, #12
 8002698:	edcd 7a01 	vstr	s15, [sp, #4]
 800269c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80026a0:	a804      	add	r0, sp, #16
 80026a2:	f00b ff43 	bl	800e52c <libBufferAppend_uint8>
	libBufferAppend_uint8(buffer, modCANPackStateHandle->throttleDutyCharge/10,&sendIndex);
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	270a      	movs	r7, #10
 80026aa:	88d9      	ldrh	r1, [r3, #6]
 80026ac:	fbb1 f1f7 	udiv	r1, r1, r7
 80026b0:	aa03      	add	r2, sp, #12
 80026b2:	a804      	add	r0, sp, #16
 80026b4:	b2c9      	uxtb	r1, r1
 80026b6:	f00b ff39 	bl	800e52c <libBufferAppend_uint8>
	libBufferAppend_uint8(buffer, modCANPackStateHandle->throttleDutyDischarge/10,&sendIndex);
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	aa03      	add	r2, sp, #12
 80026be:	8999      	ldrh	r1, [r3, #12]
 80026c0:	fbb1 f1f7 	udiv	r1, r1, r7
 80026c4:	a804      	add	r0, sp, #16
 80026c6:	b2c9      	uxtb	r1, r1
 80026c8:	f00b ff30 	bl	800e52c <libBufferAppend_uint8>
	libBufferAppend_uint8(buffer,flagHolder,&sendIndex);
 80026cc:	aa03      	add	r2, sp, #12
 80026ce:	4631      	mov	r1, r6
 80026d0:	a804      	add	r0, sp, #16
 80026d2:	f00b ff2b 	bl	800e52c <libBufferAppend_uint8>
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_EBMS_STATUS_THROTTLE_CH_DISCH_BOOL), buffer, sendIndex);
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	2148      	movs	r1, #72	; 0x48
 80026da:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 80026de:	f7ff ff67 	bl	80025b0 <modCANGetCANID>
 80026e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80026e6:	a904      	add	r1, sp, #16
 80026e8:	f7ff ff76 	bl	80025d8 <modCANTransmitExtID>
}
 80026ec:	b007      	add	sp, #28
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		disChargeDesiredMask = modCANPackStateHandle->disChargeDesired && modCANPackStateHandle->powerButtonActuated && modPowerElectronicsHCSafetyCANAndPowerButtonCheck();
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d099      	beq.n	8002628 <modCANSendStatusFast+0x24>
 80026f4:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80026f8:	e793      	b.n	8002622 <modCANSendStatusFast+0x1e>
 80026fa:	bf00      	nop
 80026fc:	2000152c 	.word	0x2000152c
 8002700:	2000157c 	.word	0x2000157c
 8002704:	42c80000 	.word	0x42c80000

08002708 <modCANSendStatusSlow>:
void modCANSendStatusSlow(void) {
 8002708:	b570      	push	{r4, r5, r6, lr}
	libBufferAppend_float32(buffer, modCANPackStateHandle->packVoltage,1e5,&sendIndex);
 800270a:	4c22      	ldr	r4, [pc, #136]	; (8002794 <modCANSendStatusSlow+0x8c>)
 800270c:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002798 <modCANSendStatusSlow+0x90>
 8002710:	6823      	ldr	r3, [r4, #0]
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_EBMS_STATUS_MAIN_IV), buffer, sendIndex);
 8002712:	4d22      	ldr	r5, [pc, #136]	; (800279c <modCANSendStatusSlow+0x94>)
	libBufferAppend_float32(buffer, modCANPackStateHandle->packVoltage,1e5,&sendIndex);
 8002714:	ed93 0a07 	vldr	s0, [r3, #28]
void modCANSendStatusSlow(void) {
 8002718:	b086      	sub	sp, #24
	sendIndex = 0;
 800271a:	2600      	movs	r6, #0
	libBufferAppend_float32(buffer, modCANPackStateHandle->packVoltage,1e5,&sendIndex);
 800271c:	a903      	add	r1, sp, #12
 800271e:	a804      	add	r0, sp, #16
 8002720:	edcd 0a01 	vstr	s1, [sp, #4]
	sendIndex = 0;
 8002724:	9603      	str	r6, [sp, #12]
	libBufferAppend_float32(buffer, modCANPackStateHandle->packVoltage,1e5,&sendIndex);
 8002726:	f00b ff71 	bl	800e60c <libBufferAppend_float32>
	libBufferAppend_float32(buffer, modCANPackStateHandle->packCurrent,1e5,&sendIndex);
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002730:	ed93 0a08 	vldr	s0, [r3, #32]
 8002734:	a903      	add	r1, sp, #12
 8002736:	a804      	add	r0, sp, #16
 8002738:	f00b ff68 	bl	800e60c <libBufferAppend_float32>
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_EBMS_STATUS_MAIN_IV), buffer, sendIndex);
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	2146      	movs	r1, #70	; 0x46
 8002740:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002744:	f7ff ff34 	bl	80025b0 <modCANGetCANID>
 8002748:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800274c:	a904      	add	r1, sp, #16
 800274e:	f7ff ff43 	bl	80025d8 <modCANTransmitExtID>
	libBufferAppend_float32(buffer, modCANPackStateHandle->cellVoltageLow,1e5,&sendIndex);
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	eddd 0a01 	vldr	s1, [sp, #4]
 8002758:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
	sendIndex = 0;
 800275c:	9603      	str	r6, [sp, #12]
	libBufferAppend_float32(buffer, modCANPackStateHandle->cellVoltageLow,1e5,&sendIndex);
 800275e:	a903      	add	r1, sp, #12
 8002760:	a804      	add	r0, sp, #16
 8002762:	f00b ff53 	bl	800e60c <libBufferAppend_float32>
	libBufferAppend_float32(buffer, modCANPackStateHandle->cellVoltageHigh,1e5,&sendIndex);
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	eddd 0a01 	vldr	s1, [sp, #4]
 800276c:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 8002770:	a903      	add	r1, sp, #12
 8002772:	a804      	add	r0, sp, #16
 8002774:	f00b ff4a 	bl	800e60c <libBufferAppend_float32>
	modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_EBMS_STATUS_CELLVOLTAGE), buffer, sendIndex);
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	2147      	movs	r1, #71	; 0x47
 800277c:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002780:	f7ff ff16 	bl	80025b0 <modCANGetCANID>
 8002784:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002788:	a904      	add	r1, sp, #16
 800278a:	f7ff ff25 	bl	80025d8 <modCANTransmitExtID>
}
 800278e:	b006      	add	sp, #24
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	bf00      	nop
 8002794:	2000157c 	.word	0x2000157c
 8002798:	47c35000 	.word	0x47c35000
 800279c:	2000152c 	.word	0x2000152c

080027a0 <modCANSendStatusVESC>:
void modCANSendStatusVESC(void){
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
 80027a4:	4cb4      	ldr	r4, [pc, #720]	; (8002a78 <modCANSendStatusVESC+0x2d8>)
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_V_TOT), buffer, send_index);
 80027a6:	4eb5      	ldr	r6, [pc, #724]	; (8002a7c <modCANSendStatusVESC+0x2dc>)
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
 80027a8:	6823      	ldr	r3, [r4, #0]
void modCANSendStatusVESC(void){
 80027aa:	ed2d 8b02 	vpush	{d8}
 80027ae:	b084      	sub	sp, #16
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
 80027b0:	ed93 0a07 	vldr	s0, [r3, #28]
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 80027b4:	ed9f 8ab2 	vldr	s16, [pc, #712]	; 8002a80 <modCANSendStatusVESC+0x2e0>
		int32_t send_index = 0;
 80027b8:	2500      	movs	r5, #0
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
 80027ba:	a901      	add	r1, sp, #4
 80027bc:	a802      	add	r0, sp, #8
		int32_t send_index = 0;
 80027be:	9501      	str	r5, [sp, #4]
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index);
 80027c0:	f00b ff2e 	bl	800e620 <libBufferAppend_float32_auto>
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->chargerVoltage, &send_index);
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	a901      	add	r1, sp, #4
 80027c8:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 80027cc:	a802      	add	r0, sp, #8
 80027ce:	f00b ff27 	bl	800e620 <libBufferAppend_float32_auto>
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_V_TOT), buffer, send_index);
 80027d2:	6833      	ldr	r3, [r6, #0]
 80027d4:	2126      	movs	r1, #38	; 0x26
 80027d6:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 80027da:	f7ff fee9 	bl	80025b0 <modCANGetCANID>
 80027de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80027e2:	a902      	add	r1, sp, #8
 80027e4:	f7ff fef8 	bl	80025d8 <modCANTransmitExtID>
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index);
 80027e8:	6823      	ldr	r3, [r4, #0]
		send_index = 0;
 80027ea:	9501      	str	r5, [sp, #4]
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index);
 80027ec:	ed93 0a08 	vldr	s0, [r3, #32]
 80027f0:	a901      	add	r1, sp, #4
 80027f2:	a802      	add	r0, sp, #8
 80027f4:	f00b ff14 	bl	800e620 <libBufferAppend_float32_auto>
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index);
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	a901      	add	r1, sp, #4
 80027fc:	ed93 0a08 	vldr	s0, [r3, #32]
 8002800:	a802      	add	r0, sp, #8
 8002802:	f00b ff0d 	bl	800e620 <libBufferAppend_float32_auto>
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_I), buffer, send_index);
 8002806:	6833      	ldr	r3, [r6, #0]
 8002808:	2127      	movs	r1, #39	; 0x27
 800280a:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 800280e:	f7ff fecf 	bl	80025b0 <modCANGetCANID>
 8002812:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002816:	a902      	add	r1, sp, #8
 8002818:	f7ff fede 	bl	80025d8 <modCANTransmitExtID>
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index); //To do : define AhCounter
 800281c:	6823      	ldr	r3, [r4, #0]
		send_index = 0;
 800281e:	9501      	str	r5, [sp, #4]
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packCurrent, &send_index); //To do : define AhCounter
 8002820:	ed93 0a08 	vldr	s0, [r3, #32]
 8002824:	a901      	add	r1, sp, #4
 8002826:	a802      	add	r0, sp, #8
 8002828:	f00b fefa 	bl	800e620 <libBufferAppend_float32_auto>
		libBufferAppend_float32_auto(buffer, modCANPackStateHandle->packVoltage, &send_index); //To do : define WhCounter
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	a901      	add	r1, sp, #4
 8002830:	ed93 0a07 	vldr	s0, [r3, #28]
 8002834:	a802      	add	r0, sp, #8
 8002836:	f00b fef3 	bl	800e620 <libBufferAppend_float32_auto>
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_AH_WH), buffer, send_index);
 800283a:	6833      	ldr	r3, [r6, #0]
 800283c:	2128      	movs	r1, #40	; 0x28
 800283e:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002842:	f7ff feb5 	bl	80025b0 <modCANGetCANID>
 8002846:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800284a:	a902      	add	r1, sp, #8
 800284c:	f7ff fec4 	bl	80025d8 <modCANTransmitExtID>
		uint8_t totalNoOfCells = modCANGeneralConfigHandle->noOfCellsSeries*modCANGeneralConfigHandle->noOfParallelModules;
 8002850:	6833      	ldr	r3, [r6, #0]
 8002852:	781f      	ldrb	r7, [r3, #0]
 8002854:	78db      	ldrb	r3, [r3, #3]
 8002856:	fb17 f703 	smulbb	r7, r7, r3
 800285a:	b2ff      	uxtb	r7, r7
			buffer[send_index++] = totalNoOfCells;
 800285c:	f04f 0902 	mov.w	r9, #2
		while(cellPointer < totalNoOfCells){
 8002860:	42bd      	cmp	r5, r7
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 8002862:	6821      	ldr	r1, [r4, #0]
		while(cellPointer < totalNoOfCells){
 8002864:	f0c0 80b1 	bcc.w	80029ca <modCANSendStatusVESC+0x22a>
		for (int i = 0; i < totalNoOfCells; i++) {
 8002868:	2300      	movs	r3, #0
		buffer[send_index++] = totalNoOfCells;
 800286a:	f88d 7008 	strb.w	r7, [sp, #8]
		uint64_t bal_state = 0;
 800286e:	461a      	mov	r2, r3
 8002870:	4618      	mov	r0, r3
			bal_state |= (uint64_t)modCANPackStateHandle->cellVoltagesIndividual[i].cellBleedActive << i;
 8002872:	31b5      	adds	r1, #181	; 0xb5
		for (int i = 0; i < totalNoOfCells; i++) {
 8002874:	429f      	cmp	r7, r3
 8002876:	f300 80ec 	bgt.w	8002a52 <modCANSendStatusVESC+0x2b2>
		buffer[send_index++] = (bal_state >> 48) & 0xFF;
 800287a:	0c03      	lsrs	r3, r0, #16
 800287c:	f88d 3009 	strb.w	r3, [sp, #9]
		buffer[send_index++] = (bal_state >> 40) & 0xFF;
 8002880:	0a03      	lsrs	r3, r0, #8
 8002882:	f88d 300a 	strb.w	r3, [sp, #10]
		buffer[send_index++] = (bal_state >> 24) & 0xFF;
 8002886:	0e13      	lsrs	r3, r2, #24
 8002888:	f88d 300c 	strb.w	r3, [sp, #12]
		buffer[send_index++] = (bal_state >> 16) & 0xFF;
 800288c:	0c13      	lsrs	r3, r2, #16
 800288e:	f88d 300d 	strb.w	r3, [sp, #13]
		buffer[send_index++] = (bal_state >> 8) & 0xFF;
 8002892:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002896:	f88d 300e 	strb.w	r3, [sp, #14]
		buffer[send_index++] = (bal_state >> 8) & 0xFF;
 800289a:	f88d 300f 	strb.w	r3, [sp, #15]
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_BAL), buffer, send_index);
 800289e:	6833      	ldr	r3, [r6, #0]
		buffer[send_index++] = (bal_state >> 32) & 0xFF;
 80028a0:	f88d 000b 	strb.w	r0, [sp, #11]
		buffer[send_index++] = (bal_state >> 8) & 0xFF;
 80028a4:	2208      	movs	r2, #8
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_BAL), buffer, send_index);
 80028a6:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
		buffer[send_index++] = (bal_state >> 8) & 0xFF;
 80028aa:	9201      	str	r2, [sp, #4]
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_BAL), buffer, send_index);
 80028ac:	212a      	movs	r1, #42	; 0x2a
 80028ae:	f7ff fe7f 	bl	80025b0 <modCANGetCANID>
 80028b2:	eb0d 0102 	add.w	r1, sp, r2
 80028b6:	f7ff fe8f 	bl	80025d8 <modCANTransmitExtID>
		uint8_t totalNoOfAux =modCANGeneralConfigHandle->cellMonitorICCount*modCANGeneralConfigHandle->noOfTempSensorPerModule;
 80028ba:	6833      	ldr	r3, [r6, #0]
 80028bc:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8002a84 <modCANSendStatusVESC+0x2e4>
 80028c0:	f893 80f0 	ldrb.w	r8, [r3, #240]	; 0xf0
 80028c4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80028c8:	fb18 f803 	smulbb	r8, r8, r3
 80028cc:	fa5f f888 	uxtb.w	r8, r8
		uint8_t auxPointer = 0;
 80028d0:	2700      	movs	r7, #0
			buffer[send_index++] = totalNoOfAux;
 80028d2:	f04f 0902 	mov.w	r9, #2
		while (auxPointer < totalNoOfAux ) {
 80028d6:	4547      	cmp	r7, r8
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 80028d8:	6823      	ldr	r3, [r4, #0]
		while (auxPointer < totalNoOfAux ) {
 80028da:	f0c0 80d7 	bcc.w	8002a8c <modCANSendStatusVESC+0x2ec>
		libBufferAppend_float16(buffer, modCANPackStateHandle->temperatures[0], 1e2, &send_index);
 80028de:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 80028e2:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002a84 <modCANSendStatusVESC+0x2e4>
		send_index = 0;
 80028e6:	2500      	movs	r5, #0
		libBufferAppend_float16(buffer, modCANPackStateHandle->temperatures[0], 1e2, &send_index);
 80028e8:	a901      	add	r1, sp, #4
 80028ea:	a802      	add	r0, sp, #8
		send_index = 0;
 80028ec:	9501      	str	r5, [sp, #4]
		libBufferAppend_float16(buffer, modCANPackStateHandle->temperatures[0], 1e2, &send_index);
 80028ee:	f00b fe83 	bl	800e5f8 <libBufferAppend_float16>
		libBufferAppend_float16(buffer, modCANPackStateHandle->humidity, 1e2, &send_index);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	eddf 0a63 	vldr	s1, [pc, #396]	; 8002a84 <modCANSendStatusVESC+0x2e4>
 80028f8:	ed93 0a26 	vldr	s0, [r3, #152]	; 0x98
 80028fc:	a901      	add	r1, sp, #4
 80028fe:	a802      	add	r0, sp, #8
 8002900:	f00b fe7a 	bl	800e5f8 <libBufferAppend_float16>
		libBufferAppend_float16(buffer, modCANPackStateHandle->temperatures[1], 1e2, &send_index);
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8002a84 <modCANSendStatusVESC+0x2e4>
 800290a:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
 800290e:	a901      	add	r1, sp, #4
 8002910:	a802      	add	r0, sp, #8
 8002912:	f00b fe71 	bl	800e5f8 <libBufferAppend_float16>
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_HUM), buffer, send_index);
 8002916:	6833      	ldr	r3, [r6, #0]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 800291e:	f7ff fe47 	bl	80025b0 <modCANGetCANID>
 8002922:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002926:	a902      	add	r1, sp, #8
 8002928:	f7ff fe56 	bl	80025d8 <modCANTransmitExtID>
		libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageLow, 1e3, &send_index);
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002a80 <modCANSendStatusVESC+0x2e0>
 8002932:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
		send_index = 0;
 8002936:	9501      	str	r5, [sp, #4]
		libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageLow, 1e3, &send_index);
 8002938:	a901      	add	r1, sp, #4
 800293a:	a802      	add	r0, sp, #8
 800293c:	f00b fe5c 	bl	800e5f8 <libBufferAppend_float16>
		libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltageHigh, 1e3, &send_index);
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8002a80 <modCANSendStatusVESC+0x2e0>
 8002946:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 800294a:	a901      	add	r1, sp, #4
 800294c:	a802      	add	r0, sp, #8
 800294e:	f00b fe53 	bl	800e5f8 <libBufferAppend_float16>
		buffer[send_index++] = (uint8_t) ((modCANPackStateHandle->SoC/100) * 255.0);
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	9a01      	ldr	r2, [sp, #4]
 8002956:	ed91 7a04 	vldr	s14, [r1, #16]
				(modCANPackStateHandle->balanceActive << 1) |
 800295a:	f891 40a7 	ldrb.w	r4, [r1, #167]	; 0xa7
		buffer[send_index++] = (uint8_t) ((modCANPackStateHandle->SoC/100) * 255.0);
 800295e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8002962:	f102 0310 	add.w	r3, r2, #16
 8002966:	eb0d 0003 	add.w	r0, sp, r3
		buffer[send_index++] =
 800296a:	3204      	adds	r2, #4
 800296c:	9201      	str	r2, [sp, #4]
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_SOC_SOH_TEMP_STAT), buffer, send_index);
 800296e:	b2d2      	uxtb	r2, r2
		buffer[send_index++] = (uint8_t) ((modCANPackStateHandle->SoC/100) * 255.0);
 8002970:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002a88 <modCANSendStatusVESC+0x2e8>
 8002974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297c:	ee17 3a90 	vmov	r3, s15
		buffer[send_index++] = (int8_t) modCANPackStateHandle->tempBatteryHigh;
 8002980:	edd1 7a20 	vldr	s15, [r1, #128]	; 0x80
		buffer[send_index++] = (uint8_t) ((modCANPackStateHandle->SoC/100) * 255.0);
 8002984:	f800 3c08 	strb.w	r3, [r0, #-8]
		buffer[send_index++] = (int8_t) modCANPackStateHandle->tempBatteryHigh;
 8002988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		buffer[send_index++] = (uint8_t) (1 * 255.0);
 800298c:	23ff      	movs	r3, #255	; 0xff
 800298e:	f800 3c07 	strb.w	r3, [r0, #-7]
		buffer[send_index++] = (int8_t) modCANPackStateHandle->tempBatteryHigh;
 8002992:	ee17 3a90 	vmov	r3, s15
 8002996:	f800 3c06 	strb.w	r3, [r0, #-6]
				(modCANPackStateHandle->chargeAllowed << 2);
 800299a:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
				(modCANPackStateHandle->balanceActive << 1) |
 800299e:	f891 109f 	ldrb.w	r1, [r1, #159]	; 0x9f
				(modCANPackStateHandle->chargeAllowed << 2);
 80029a2:	009b      	lsls	r3, r3, #2
				(modCANPackStateHandle->balanceActive << 1) |
 80029a4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80029a8:	430b      	orrs	r3, r1
		buffer[send_index++] =
 80029aa:	f800 3c05 	strb.w	r3, [r0, #-5]
		modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_SOC_SOH_TEMP_STAT), buffer, send_index);
 80029ae:	6833      	ldr	r3, [r6, #0]
 80029b0:	212d      	movs	r1, #45	; 0x2d
 80029b2:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 80029b6:	f7ff fdfb 	bl	80025b0 <modCANGetCANID>
 80029ba:	a902      	add	r1, sp, #8
 80029bc:	f7ff fe0c 	bl	80025d8 <modCANTransmitExtID>
}
 80029c0:	b004      	add	sp, #16
 80029c2:	ecbd 8b02 	vpop	{d8}
 80029c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 80029ca:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 80029ce:	f105 0a01 	add.w	sl, r5, #1
 80029d2:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
			buffer[send_index++] = cellPointer;
 80029d6:	f88d 5008 	strb.w	r5, [sp, #8]
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 80029da:	fa5f fa8a 	uxtb.w	sl, sl
 80029de:	a901      	add	r1, sp, #4
 80029e0:	eef0 0a48 	vmov.f32	s1, s16
 80029e4:	a802      	add	r0, sp, #8
			buffer[send_index++] = totalNoOfCells;
 80029e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80029ea:	f88d 7009 	strb.w	r7, [sp, #9]
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 80029ee:	f00b fe03 	bl	800e5f8 <libBufferAppend_float16>
			if (cellPointer < totalNoOfCells) {
 80029f2:	4557      	cmp	r7, sl
 80029f4:	d91e      	bls.n	8002a34 <modCANSendStatusVESC+0x294>
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	f105 0802 	add.w	r8, r5, #2
 80029fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002a00:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
 8002a04:	fa5f f888 	uxtb.w	r8, r8
 8002a08:	a901      	add	r1, sp, #4
 8002a0a:	eef0 0a48 	vmov.f32	s1, s16
 8002a0e:	a802      	add	r0, sp, #8
 8002a10:	f00b fdf2 	bl	800e5f8 <libBufferAppend_float16>
			if (cellPointer < totalNoOfCells) {
 8002a14:	4547      	cmp	r7, r8
 8002a16:	d91a      	bls.n	8002a4e <modCANSendStatusVESC+0x2ae>
				libBufferAppend_float16(buffer, modCANPackStateHandle->cellVoltagesIndividual[cellPointer++].cellVoltage, 1e3, &send_index);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8002a1e:	3503      	adds	r5, #3
 8002a20:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
 8002a24:	a901      	add	r1, sp, #4
 8002a26:	eef0 0a48 	vmov.f32	s1, s16
 8002a2a:	a802      	add	r0, sp, #8
 8002a2c:	fa5f fa85 	uxtb.w	sl, r5
 8002a30:	f00b fde2 	bl	800e5f8 <libBufferAppend_float16>
			modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_V_CELL), buffer, send_index);
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	2129      	movs	r1, #41	; 0x29
 8002a38:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002a3c:	f7ff fdb8 	bl	80025b0 <modCANGetCANID>
 8002a40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002a44:	a902      	add	r1, sp, #8
 8002a46:	f7ff fdc7 	bl	80025d8 <modCANTransmitExtID>
 8002a4a:	4655      	mov	r5, sl
 8002a4c:	e708      	b.n	8002860 <modCANSendStatusVESC+0xc0>
 8002a4e:	46c2      	mov	sl, r8
 8002a50:	e7f0      	b.n	8002a34 <modCANSendStatusVESC+0x294>
			bal_state |= (uint64_t)modCANPackStateHandle->cellVoltagesIndividual[i].cellBleedActive << i;
 8002a52:	f811 c033 	ldrb.w	ip, [r1, r3, lsl #3]
 8002a56:	f1a3 0520 	sub.w	r5, r3, #32
 8002a5a:	f1c3 0e20 	rsb	lr, r3, #32
 8002a5e:	fa0c f505 	lsl.w	r5, ip, r5
 8002a62:	fa2c fe0e 	lsr.w	lr, ip, lr
 8002a66:	ea45 050e 	orr.w	r5, r5, lr
 8002a6a:	fa0c fc03 	lsl.w	ip, ip, r3
 8002a6e:	ea4c 0202 	orr.w	r2, ip, r2
 8002a72:	4328      	orrs	r0, r5
		for (int i = 0; i < totalNoOfCells; i++) {
 8002a74:	3301      	adds	r3, #1
 8002a76:	e6fd      	b.n	8002874 <modCANSendStatusVESC+0xd4>
 8002a78:	2000157c 	.word	0x2000157c
 8002a7c:	2000152c 	.word	0x2000152c
 8002a80:	447a0000 	.word	0x447a0000
 8002a84:	42c80000 	.word	0x42c80000
 8002a88:	437f0000 	.word	0x437f0000
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 8002a8c:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8002a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a94:	f107 0a01 	add.w	sl, r7, #1
 8002a98:	ed93 0a00 	vldr	s0, [r3]
			buffer[send_index++] = auxPointer;
 8002a9c:	f88d 7008 	strb.w	r7, [sp, #8]
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 8002aa0:	fa5f fa8a 	uxtb.w	sl, sl
 8002aa4:	a901      	add	r1, sp, #4
 8002aa6:	eef0 0a48 	vmov.f32	s1, s16
 8002aaa:	a802      	add	r0, sp, #8
			buffer[send_index++] = totalNoOfAux;
 8002aac:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ab0:	f88d 8009 	strb.w	r8, [sp, #9]
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 8002ab4:	f00b fda0 	bl	800e5f8 <libBufferAppend_float16>
			if (auxPointer < totalNoOfAux) {
 8002ab8:	45d0      	cmp	r8, sl
 8002aba:	d91f      	bls.n	8002afc <modCANSendStatusVESC+0x35c>
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	f10a 0aca 	add.w	sl, sl, #202	; 0xca
 8002ac2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002ac6:	1cbd      	adds	r5, r7, #2
 8002ac8:	ed93 0a00 	vldr	s0, [r3]
 8002acc:	b2ed      	uxtb	r5, r5
 8002ace:	a901      	add	r1, sp, #4
 8002ad0:	eef0 0a48 	vmov.f32	s1, s16
 8002ad4:	a802      	add	r0, sp, #8
 8002ad6:	f00b fd8f 	bl	800e5f8 <libBufferAppend_float16>
			if (auxPointer < totalNoOfAux) {
 8002ada:	45a8      	cmp	r8, r5
 8002adc:	d91b      	bls.n	8002b16 <modCANSendStatusVESC+0x376>
				libBufferAppend_float16(buffer, modCANPackStateHandle->auxVoltagesIndividual[auxPointer++].auxVoltage, 1e2, &send_index);
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	35ca      	adds	r5, #202	; 0xca
 8002ae2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002ae6:	3703      	adds	r7, #3
 8002ae8:	ed93 0a00 	vldr	s0, [r3]
 8002aec:	a901      	add	r1, sp, #4
 8002aee:	eef0 0a48 	vmov.f32	s1, s16
 8002af2:	a802      	add	r0, sp, #8
 8002af4:	fa5f fa87 	uxtb.w	sl, r7
 8002af8:	f00b fd7e 	bl	800e5f8 <libBufferAppend_float16>
			modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_BMS_TEMPS), buffer, send_index);
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	212b      	movs	r1, #43	; 0x2b
 8002b00:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002b04:	f7ff fd54 	bl	80025b0 <modCANGetCANID>
 8002b08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b0c:	a902      	add	r1, sp, #8
 8002b0e:	f7ff fd63 	bl	80025d8 <modCANTransmitExtID>
 8002b12:	4657      	mov	r7, sl
 8002b14:	e6df      	b.n	80028d6 <modCANSendStatusVESC+0x136>
 8002b16:	46aa      	mov	sl, r5
 8002b18:	e7f0      	b.n	8002afc <modCANSendStatusVESC+0x35c>
 8002b1a:	bf00      	nop

08002b1c <modCANSubTaskHandleCommunication>:
void modCANSubTaskHandleCommunication(void) {
 8002b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b20:	ed2d 8b02 	vpush	{d8}
	while(modCANRxFrameRead != modCANRxFrameWrite) {
 8002b24:	4ead      	ldr	r6, [pc, #692]	; (8002ddc <modCANSubTaskHandleCommunication+0x2c0>)
 8002b26:	4fae      	ldr	r7, [pc, #696]	; (8002de0 <modCANSubTaskHandleCommunication+0x2c4>)
void modCANSubTaskHandleCommunication(void) {
 8002b28:	b091      	sub	sp, #68	; 0x44
	while(modCANRxFrameRead != modCANRxFrameWrite) {
 8002b2a:	7833      	ldrb	r3, [r6, #0]
 8002b2c:	783a      	ldrb	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d104      	bne.n	8002b3c <modCANSubTaskHandleCommunication+0x20>
}
 8002b32:	b011      	add	sp, #68	; 0x44
 8002b34:	ecbd 8b02 	vpop	{d8}
 8002b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		CanRxMsgTypeDef rxmsg = modCANRxFrames[modCANRxFrameRead++];
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	4ca9      	ldr	r4, [pc, #676]	; (8002de4 <modCANSubTaskHandleCommunication+0x2c8>)
 8002b40:	7032      	strb	r2, [r6, #0]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	fb02 4403 	mla	r4, r2, r3, r4
 8002b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4a:	ad07      	add	r5, sp, #28
 8002b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	602b      	str	r3, [r5, #0]
		if(rxmsg.IDE == CAN_ID_EXT) {
 8002b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	f10d 0c1c 	add.w	ip, sp, #28
 8002b5e:	d134      	bne.n	8002bca <modCANSubTaskHandleCommunication+0xae>
			uint8_t destinationID = modCANGetDestinationID(rxmsg);
 8002b60:	ad0b      	add	r5, sp, #44	; 0x2c
 8002b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b64:	466c      	mov	r4, sp
 8002b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	6023      	str	r3, [r4, #0]
	switch(modCANGeneralConfigHandle->CANIDStyle) {
 8002b6c:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8002e0c <modCANSubTaskHandleCommunication+0x2f0>
			uint8_t destinationID = modCANGetDestinationID(rxmsg);
 8002b70:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002b74:	f7ff fd0a 	bl	800258c <modCANGetDestinationID>
	switch(modCANGeneralConfigHandle->CANIDStyle) {
 8002b78:	f8d8 3000 	ldr.w	r3, [r8]
 8002b7c:	9d08      	ldr	r5, [sp, #32]
 8002b7e:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
			uint8_t destinationID = modCANGetDestinationID(rxmsg);
 8002b82:	b2c4      	uxtb	r4, r0
	switch(modCANGeneralConfigHandle->CANIDStyle) {
 8002b84:	2a01      	cmp	r2, #1
			packetID = (CAN_PACKET_ID)((canMsg.ExtId >> 8) & 0xFF);
 8002b86:	bf14      	ite	ne
 8002b88:	f3c5 2507 	ubfxne	r5, r5, #8, #8
			packetID = (CAN_PACKET_ID)((canMsg.ExtId) & 0xFF);
 8002b8c:	b2ed      	uxtbeq	r5, r5
			if(destinationID == 255 || destinationID == modCANGeneralConfigHandle->CANID) {
 8002b8e:	2cff      	cmp	r4, #255	; 0xff
 8002b90:	d004      	beq.n	8002b9c <modCANSubTaskHandleCommunication+0x80>
 8002b92:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	f040 8092 	bne.w	8002cc0 <modCANSubTaskHandleCommunication+0x1a4>
				switch(cmd) {
 8002b9c:	1f6b      	subs	r3, r5, #5
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	f200 808e 	bhi.w	8002cc0 <modCANSubTaskHandleCommunication+0x1a4>
 8002ba4:	e8df f003 	tbb	[pc, r3]
 8002ba8:	64231707 	.word	0x64231707
 8002bac:	8c8c8c8c 	.word	0x8c8c8c8c
 8002bb0:	8c8c8c8c 	.word	0x8c8c8c8c
 8002bb4:	7c          	.byte	0x7c
 8002bb5:	00          	.byte	0x00
  					memcpy(modCANRxBuffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.DLC - 1);
 8002bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bb8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	f10d 0131 	add.w	r1, sp, #49	; 0x31
							memcpy(modCANRxBuffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.DLC - 2);
 8002bc2:	4889      	ldr	r0, [pc, #548]	; (8002de8 <modCANSubTaskHandleCommunication+0x2cc>)
 8002bc4:	4418      	add	r0, r3
 8002bc6:	f00c fc01 	bl	800f3cc <memcpy>
		if(modCANRxFrameRead >= RX_CAN_FRAMES_SIZE)
 8002bca:	7833      	ldrb	r3, [r6, #0]
 8002bcc:	2bff      	cmp	r3, #255	; 0xff
			modCANRxFrameRead = 0;
 8002bce:	bf04      	itt	eq
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	7033      	strbeq	r3, [r6, #0]
 8002bd4:	e7a9      	b.n	8002b2a <modCANSubTaskHandleCommunication+0xe>
						rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 8002bd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8002bda:	ba5b      	rev16	r3, r3
 8002bdc:	b29b      	uxth	r3, r3
						if(rxbuf_ind < RX_CAN_BUFFER_SIZE) {
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d2f2      	bcs.n	8002bca <modCANSubTaskHandleCommunication+0xae>
							memcpy(modCANRxBuffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.DLC - 2);
 8002be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002be6:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8002bea:	3a02      	subs	r2, #2
 8002bec:	e7e9      	b.n	8002bc2 <modCANSubTaskHandleCommunication+0xa6>
						modCANRxBufferLastID = rxmsg.Data[ind++];
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <modCANSubTaskHandleCommunication+0x2d0>)
 8002bf0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8002bf4:	701a      	strb	r2, [r3, #0]
						commands_send = rxmsg.Data[ind++];
 8002bf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002bfa:	4d7d      	ldr	r5, [pc, #500]	; (8002df0 <modCANSubTaskHandleCommunication+0x2d4>)
						rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 8002bfc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
						rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8002c00:	4c7c      	ldr	r4, [pc, #496]	; (8002df4 <modCANSubTaskHandleCommunication+0x2d8>)
						commands_send = rxmsg.Data[ind++];
 8002c02:	3b00      	subs	r3, #0
 8002c04:	bf18      	it	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	702b      	strb	r3, [r5, #0]
						rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	6019      	str	r1, [r3, #0]
 8002c10:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
 8002c14:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
						if(rxbuf_len > RX_CAN_BUFFER_SIZE) {
 8002c18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
						rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8002c1c:	6021      	str	r1, [r4, #0]
						if(rxbuf_len > RX_CAN_BUFFER_SIZE) {
 8002c1e:	d8d4      	bhi.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						crc_high = rxmsg.Data[ind++];
 8002c20:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002e10 <modCANSubTaskHandleCommunication+0x2f4>
 8002c24:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
						crc_low = rxmsg.Data[ind++];
 8002c28:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002e14 <modCANSubTaskHandleCommunication+0x2f8>
						crc_high = rxmsg.Data[ind++];
 8002c2c:	f889 2000 	strb.w	r2, [r9]
						crc_low = rxmsg.Data[ind++];
 8002c30:	2206      	movs	r2, #6
 8002c32:	601a      	str	r2, [r3, #0]
						if(libCRCCalcCRC16(modCANRxBuffer, rxbuf_len) == ((unsigned short) crc_high << 8 | (unsigned short) crc_low)) {
 8002c34:	486c      	ldr	r0, [pc, #432]	; (8002de8 <modCANSubTaskHandleCommunication+0x2cc>)
						crc_low = rxmsg.Data[ind++];
 8002c36:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8002c3a:	f888 3000 	strb.w	r3, [r8]
						if(libCRCCalcCRC16(modCANRxBuffer, rxbuf_len) == ((unsigned short) crc_high << 8 | (unsigned short) crc_low)) {
 8002c3e:	f00b fd93 	bl	800e768 <libCRCCalcCRC16>
 8002c42:	f899 2000 	ldrb.w	r2, [r9]
 8002c46:	f898 3000 	ldrb.w	r3, [r8]
 8002c4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c4e:	4298      	cmp	r0, r3
 8002c50:	d1bb      	bne.n	8002bca <modCANSubTaskHandleCommunication+0xae>
							if(commands_send) {
 8002c52:	782b      	ldrb	r3, [r5, #0]
 8002c54:	b123      	cbz	r3, 8002c60 <modCANSubTaskHandleCommunication+0x144>
								modCommandsSendPacket(modCANRxBuffer, rxbuf_len);
 8002c56:	6821      	ldr	r1, [r4, #0]
 8002c58:	4863      	ldr	r0, [pc, #396]	; (8002de8 <modCANSubTaskHandleCommunication+0x2cc>)
 8002c5a:	f000 fc7d 	bl	8003558 <modCommandsSendPacket>
 8002c5e:	e7b4      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
								modCommandsSetSendFunction(modCANSendPacketWrapper);
 8002c60:	4866      	ldr	r0, [pc, #408]	; (8002dfc <modCANSubTaskHandleCommunication+0x2e0>)
 8002c62:	f000 fc73 	bl	800354c <modCommandsSetSendFunction>
								modCommandsProcessPacket(modCANRxBuffer, rxbuf_len);
 8002c66:	6821      	ldr	r1, [r4, #0]
 8002c68:	485f      	ldr	r0, [pc, #380]	; (8002de8 <modCANSubTaskHandleCommunication+0x2cc>)
 8002c6a:	f000 fd03 	bl	8003674 <modCommandsProcessPacket>
 8002c6e:	e7ac      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						modCANRxBufferLastID = rxmsg.Data[ind++];
 8002c70:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <modCANSubTaskHandleCommunication+0x2d0>)
 8002c72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
						commands_send = rxmsg.Data[ind++];
 8002c76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002df8 <modCANSubTaskHandleCommunication+0x2dc>
						modCANRxBufferLastID = rxmsg.Data[ind++];
 8002c7a:	701a      	strb	r2, [r3, #0]
						commands_send = rxmsg.Data[ind++];
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c9 3000 	str.w	r3, [r9]
 8002c82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <modCANSubTaskHandleCommunication+0x2d4>)
 8002c8a:	bf14      	ite	ne
 8002c8c:	2201      	movne	r2, #1
 8002c8e:	2200      	moveq	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
						if(commands_send) {
 8002c92:	d031      	beq.n	8002cf8 <modCANSubTaskHandleCommunication+0x1dc>
							modCommandsSendPacket(rxmsg.Data + ind, rxmsg.DLC - ind);
 8002c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c96:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 8002c9a:	3902      	subs	r1, #2
 8002c9c:	f000 fc5c 	bl	8003558 <modCommandsSendPacket>
						buffer[0] = modCANGeneralConfigHandle->CANID;
 8002ca0:	f8d8 3000 	ldr.w	r3, [r8]
						modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_PONG), buffer, 2);
 8002ca4:	2112      	movs	r1, #18
						buffer[0] = modCANGeneralConfigHandle->CANID;
 8002ca6:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
 8002caa:	f88d 0018 	strb.w	r0, [sp, #24]
						buffer[1] = HW_TYPE_VESC_BMS;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f88d 3019 	strb.w	r3, [sp, #25]
						modCANTransmitExtID(modCANGetCANID(modCANGeneralConfigHandle->CANID,CAN_PACKET_PONG), buffer, 2);
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f7ff fc7b 	bl	80025b0 <modCANGetCANID>
 8002cba:	a906      	add	r1, sp, #24
 8002cbc:	f7ff fc8c 	bl	80025d8 <modCANTransmitExtID>
				switch (cmd) {
 8002cc0:	2d10      	cmp	r5, #16
 8002cc2:	d825      	bhi.n	8002d10 <modCANSubTaskHandleCommunication+0x1f4>
 8002cc4:	2d08      	cmp	r5, #8
 8002cc6:	d980      	bls.n	8002bca <modCANSubTaskHandleCommunication+0xae>
 8002cc8:	3d09      	subs	r5, #9
 8002cca:	2d07      	cmp	r5, #7
 8002ccc:	f63f af7d 	bhi.w	8002bca <modCANSubTaskHandleCommunication+0xae>
 8002cd0:	a301      	add	r3, pc, #4	; (adr r3, 8002cd8 <modCANSubTaskHandleCommunication+0x1bc>)
 8002cd2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002d5d 	.word	0x08002d5d
 8002cdc:	08002bcb 	.word	0x08002bcb
 8002ce0:	08002bcb 	.word	0x08002bcb
 8002ce4:	08002bcb 	.word	0x08002bcb
 8002ce8:	08002bcb 	.word	0x08002bcb
 8002cec:	08002e19 	.word	0x08002e19
 8002cf0:	08002e77 	.word	0x08002e77
 8002cf4:	08002e8f 	.word	0x08002e8f
							modCommandsSetSendFunction(modCANSendPacketWrapper);
 8002cf8:	4840      	ldr	r0, [pc, #256]	; (8002dfc <modCANSubTaskHandleCommunication+0x2e0>)
 8002cfa:	f000 fc27 	bl	800354c <modCommandsSetSendFunction>
							modCommandsProcessPacket(rxmsg.Data + ind, rxmsg.DLC - ind);
 8002cfe:	f8d9 0000 	ldr.w	r0, [r9]
 8002d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d04:	ab0c      	add	r3, sp, #48	; 0x30
 8002d06:	1a09      	subs	r1, r1, r0
 8002d08:	4418      	add	r0, r3
 8002d0a:	f000 fcb3 	bl	8003674 <modCommandsProcessPacket>
 8002d0e:	e7c7      	b.n	8002ca0 <modCANSubTaskHandleCommunication+0x184>
				switch (cmd) {
 8002d10:	2d1b      	cmp	r5, #27
 8002d12:	f47f af5a 	bne.w	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_5->id == destinationID || stat_tmp_5->id == -1) {
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <modCANSubTaskHandleCommunication+0x2e4>)
				switch (cmd) {
 8002d18:	2300      	movs	r3, #0
						if (stat_tmp_5->id == destinationID || stat_tmp_5->id == -1) {
 8002d1a:	0118      	lsls	r0, r3, #4
 8002d1c:	5881      	ldr	r1, [r0, r2]
 8002d1e:	42a1      	cmp	r1, r4
 8002d20:	f040 8102 	bne.w	8002f28 <modCANSubTaskHandleCommunication+0x40c>
							ind = 0;
 8002d24:	4934      	ldr	r1, [pc, #208]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
							stat_tmp_5->id = destinationID;
 8002d26:	5014      	str	r4, [r2, r0]
							ind = 0;
 8002d28:	2300      	movs	r3, #0
							stat_tmp_5->id = destinationID;
 8002d2a:	1815      	adds	r5, r2, r0
							ind = 0;
 8002d2c:	600b      	str	r3, [r1, #0]
							stat_tmp_5->rx_time = HAL_GetTick();
 8002d2e:	f008 f845 	bl	800adbc <HAL_GetTick>
							stat_tmp_5->tacho_value = libBufferGet_int32(rxmsg.Data, &ind);
 8002d32:	4931      	ldr	r1, [pc, #196]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
							stat_tmp_5->rx_time = HAL_GetTick();
 8002d34:	6068      	str	r0, [r5, #4]
							stat_tmp_5->tacho_value = libBufferGet_int32(rxmsg.Data, &ind);
 8002d36:	a80c      	add	r0, sp, #48	; 0x30
 8002d38:	f00b fcc5 	bl	800e6c6 <libBufferGet_int32>
							stat_tmp_5->v_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 1e1;
 8002d3c:	492e      	ldr	r1, [pc, #184]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
							stat_tmp_5->tacho_value = libBufferGet_int32(rxmsg.Data, &ind);
 8002d3e:	60e8      	str	r0, [r5, #12]
							stat_tmp_5->v_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 1e1;
 8002d40:	a80c      	add	r0, sp, #48	; 0x30
 8002d42:	f00b fcac 	bl	800e69e <libBufferGet_int16>
 8002d46:	ee07 0a90 	vmov	s15, r0
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002d52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d56:	ed85 7a02 	vstr	s14, [r5, #8]
							break;
 8002d5a:	e736      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp->id == destinationID || stat_tmp->id == -1) {
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <modCANSubTaskHandleCommunication+0x2e8>)
				switch (cmd) {
 8002d5e:	2300      	movs	r3, #0
						if (stat_tmp->id == destinationID || stat_tmp->id == -1) {
 8002d60:	2014      	movs	r0, #20
 8002d62:	fb00 f103 	mul.w	r1, r0, r3
 8002d66:	5889      	ldr	r1, [r1, r2]
 8002d68:	42a1      	cmp	r1, r4
 8002d6a:	d130      	bne.n	8002dce <modCANSubTaskHandleCommunication+0x2b2>
							ind = 0;
 8002d6c:	4922      	ldr	r1, [pc, #136]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
 8002d6e:	2000      	movs	r0, #0
 8002d70:	6008      	str	r0, [r1, #0]
							stat_tmp->id = destinationID;
 8002d72:	2014      	movs	r0, #20
 8002d74:	4343      	muls	r3, r0
 8002d76:	18d5      	adds	r5, r2, r3
 8002d78:	50d4      	str	r4, [r2, r3]
							stat_tmp->rx_time = HAL_GetTick();
 8002d7a:	f008 f81f 	bl	800adbc <HAL_GetTick>
							stat_tmp->rpm = (float)libBufferGet_int32(rxmsg.Data, &ind);
 8002d7e:	491e      	ldr	r1, [pc, #120]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
							stat_tmp->rx_time = HAL_GetTick();
 8002d80:	6068      	str	r0, [r5, #4]
							stat_tmp->rpm = (float)libBufferGet_int32(rxmsg.Data, &ind);
 8002d82:	a80c      	add	r0, sp, #48	; 0x30
 8002d84:	f00b fc9f 	bl	800e6c6 <libBufferGet_int32>
 8002d88:	ee07 0a90 	vmov	s15, r0
 8002d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							stat_tmp->current = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002d90:	4919      	ldr	r1, [pc, #100]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
							stat_tmp->rpm = (float)libBufferGet_int32(rxmsg.Data, &ind);
 8002d92:	edc5 7a02 	vstr	s15, [r5, #8]
							stat_tmp->current = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002d96:	a80c      	add	r0, sp, #48	; 0x30
 8002d98:	f00b fc81 	bl	800e69e <libBufferGet_int16>
 8002d9c:	ee07 0a90 	vmov	s15, r0
 8002da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002da8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							stat_tmp->duty = (float)libBufferGet_int16(rxmsg.Data, &ind) / 1000.0;
 8002dac:	4912      	ldr	r1, [pc, #72]	; (8002df8 <modCANSubTaskHandleCommunication+0x2dc>)
 8002dae:	a80c      	add	r0, sp, #48	; 0x30
							stat_tmp->current = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002db0:	ed85 7a03 	vstr	s14, [r5, #12]
							stat_tmp->duty = (float)libBufferGet_int16(rxmsg.Data, &ind) / 1000.0;
 8002db4:	f00b fc73 	bl	800e69e <libBufferGet_int16>
 8002db8:	ee07 0a90 	vmov	s15, r0
 8002dbc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002e08 <modCANSubTaskHandleCommunication+0x2ec>
 8002dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dc8:	ed85 7a04 	vstr	s14, [r5, #16]
							break;
 8002dcc:	e6fd      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp->id == destinationID || stat_tmp->id == -1) {
 8002dce:	3101      	adds	r1, #1
 8002dd0:	d0cc      	beq.n	8002d6c <modCANSubTaskHandleCommunication+0x250>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	2b0a      	cmp	r3, #10
 8002dd6:	d1c4      	bne.n	8002d62 <modCANSubTaskHandleCommunication+0x246>
 8002dd8:	e6f7      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
 8002dda:	bf00      	nop
 8002ddc:	20001981 	.word	0x20001981
 8002de0:	20001982 	.word	0x20001982
 8002de4:	20001984 	.word	0x20001984
 8002de8:	20001580 	.word	0x20001580
 8002dec:	20001980 	.word	0x20001980
 8002df0:	20001516 	.word	0x20001516
 8002df4:	20003d70 	.word	0x20003d70
 8002df8:	2000151c 	.word	0x2000151c
 8002dfc:	080030a5 	.word	0x080030a5
 8002e00:	2000406c 	.word	0x2000406c
 8002e04:	20003d74 	.word	0x20003d74
 8002e08:	447a0000 	.word	0x447a0000
 8002e0c:	2000152c 	.word	0x2000152c
 8002e10:	20001517 	.word	0x20001517
 8002e14:	20001518 	.word	0x20001518
						if (stat_tmp_2->id == destinationID || stat_tmp_2->id == -1) {
 8002e18:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <modCANSubTaskHandleCommunication+0x41c>)
				switch (cmd) {
 8002e1a:	2300      	movs	r3, #0
						if (stat_tmp_2->id == destinationID || stat_tmp_2->id == -1) {
 8002e1c:	0118      	lsls	r0, r3, #4
 8002e1e:	5881      	ldr	r1, [r0, r2]
 8002e20:	42a1      	cmp	r1, r4
 8002e22:	d122      	bne.n	8002e6a <modCANSubTaskHandleCommunication+0x34e>
							ind = 0;
 8002e24:	4945      	ldr	r1, [pc, #276]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_3->watt_hours = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e26:	ed9f 8a46 	vldr	s16, [pc, #280]	; 8002f40 <modCANSubTaskHandleCommunication+0x424>
							ind = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	600b      	str	r3, [r1, #0]
							stat_tmp_3->id = destinationID;
 8002e2e:	5014      	str	r4, [r2, r0]
 8002e30:	1815      	adds	r5, r2, r0
							stat_tmp_3->rx_time = HAL_GetTick();
 8002e32:	f007 ffc3 	bl	800adbc <HAL_GetTick>
							stat_tmp_3->watt_hours = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e36:	4941      	ldr	r1, [pc, #260]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_3->rx_time = HAL_GetTick();
 8002e38:	6068      	str	r0, [r5, #4]
							stat_tmp_3->watt_hours = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e3a:	a80c      	add	r0, sp, #48	; 0x30
 8002e3c:	f00b fc43 	bl	800e6c6 <libBufferGet_int32>
 8002e40:	ee07 0a90 	vmov	s15, r0
 8002e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							stat_tmp_3->watt_hours_charged = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e48:	493c      	ldr	r1, [pc, #240]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_3->watt_hours = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
							stat_tmp_3->watt_hours_charged = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e4e:	a80c      	add	r0, sp, #48	; 0x30
							stat_tmp_3->watt_hours = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e50:	ed85 7a02 	vstr	s14, [r5, #8]
							stat_tmp_3->watt_hours_charged = (float)libBufferGet_int32(rxmsg.Data, &ind) / 1e4;
 8002e54:	f00b fc37 	bl	800e6c6 <libBufferGet_int32>
 8002e58:	ee07 0a90 	vmov	s15, r0
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e60:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8002e64:	ed85 7a03 	vstr	s14, [r5, #12]
							break;
 8002e68:	e6af      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_2->id == destinationID || stat_tmp_2->id == -1) {
 8002e6a:	3101      	adds	r1, #1
 8002e6c:	d0da      	beq.n	8002e24 <modCANSubTaskHandleCommunication+0x308>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8002e6e:	3301      	adds	r3, #1
 8002e70:	2b0a      	cmp	r3, #10
 8002e72:	d1d3      	bne.n	8002e1c <modCANSubTaskHandleCommunication+0x300>
 8002e74:	e6a9      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_3->id == destinationID || stat_tmp_3->id == -1) {
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <modCANSubTaskHandleCommunication+0x428>)
				switch (cmd) {
 8002e78:	2300      	movs	r3, #0
						if (stat_tmp_3->id == destinationID || stat_tmp_3->id == -1) {
 8002e7a:	0118      	lsls	r0, r3, #4
 8002e7c:	5881      	ldr	r1, [r0, r2]
 8002e7e:	42a1      	cmp	r1, r4
 8002e80:	d0d0      	beq.n	8002e24 <modCANSubTaskHandleCommunication+0x308>
 8002e82:	3101      	adds	r1, #1
 8002e84:	d0ce      	beq.n	8002e24 <modCANSubTaskHandleCommunication+0x308>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8002e86:	3301      	adds	r3, #1
 8002e88:	2b0a      	cmp	r3, #10
 8002e8a:	d1f6      	bne.n	8002e7a <modCANSubTaskHandleCommunication+0x35e>
 8002e8c:	e69d      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_4->id == destinationID || stat_tmp_4->id == -1) {
 8002e8e:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <modCANSubTaskHandleCommunication+0x42c>)
				switch (cmd) {
 8002e90:	2300      	movs	r3, #0
						if (stat_tmp_4->id == destinationID || stat_tmp_4->id == -1) {
 8002e92:	2018      	movs	r0, #24
 8002e94:	fb00 f103 	mul.w	r1, r0, r3
 8002e98:	5889      	ldr	r1, [r1, r2]
 8002e9a:	42a1      	cmp	r1, r4
 8002e9c:	d13e      	bne.n	8002f1c <modCANSubTaskHandleCommunication+0x400>
							ind = 0;
 8002e9e:	4927      	ldr	r1, [pc, #156]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	6008      	str	r0, [r1, #0]
							stat_tmp_4->id = destinationID;
 8002ea4:	2018      	movs	r0, #24
 8002ea6:	4343      	muls	r3, r0
 8002ea8:	18d5      	adds	r5, r2, r3
 8002eaa:	50d4      	str	r4, [r2, r3]
							stat_tmp_4->rx_time = HAL_GetTick();
 8002eac:	f007 ff86 	bl	800adbc <HAL_GetTick>
							stat_tmp_4->temp_fet = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002eb0:	4922      	ldr	r1, [pc, #136]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_4->rx_time = HAL_GetTick();
 8002eb2:	6068      	str	r0, [r5, #4]
							stat_tmp_4->temp_fet = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002eb4:	a80c      	add	r0, sp, #48	; 0x30
 8002eb6:	f00b fbf2 	bl	800e69e <libBufferGet_int16>
 8002eba:	ee07 0a90 	vmov	s15, r0
 8002ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec2:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 8002ec6:	ee87 7a88 	vdiv.f32	s14, s15, s16
							stat_tmp_4->temp_motor = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002eca:	491c      	ldr	r1, [pc, #112]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
 8002ecc:	a80c      	add	r0, sp, #48	; 0x30
							stat_tmp_4->temp_fet = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ece:	ed85 7a02 	vstr	s14, [r5, #8]
							stat_tmp_4->temp_motor = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ed2:	f00b fbe4 	bl	800e69e <libBufferGet_int16>
 8002ed6:	ee07 0a90 	vmov	s15, r0
 8002eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							stat_tmp_4->current_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ede:	4917      	ldr	r1, [pc, #92]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_4->temp_motor = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ee0:	ee87 7a88 	vdiv.f32	s14, s15, s16
							stat_tmp_4->current_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ee4:	a80c      	add	r0, sp, #48	; 0x30
							stat_tmp_4->temp_motor = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ee6:	ed85 7a03 	vstr	s14, [r5, #12]
							stat_tmp_4->current_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002eea:	f00b fbd8 	bl	800e69e <libBufferGet_int16>
 8002eee:	ee07 0a90 	vmov	s15, r0
 8002ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							stat_tmp_4->pid_pos_now = (float)libBufferGet_int16(rxmsg.Data, &ind) / 50.0;
 8002ef6:	4911      	ldr	r1, [pc, #68]	; (8002f3c <modCANSubTaskHandleCommunication+0x420>)
							stat_tmp_4->current_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002ef8:	ee87 7a88 	vdiv.f32	s14, s15, s16
							stat_tmp_4->pid_pos_now = (float)libBufferGet_int16(rxmsg.Data, &ind) / 50.0;
 8002efc:	a80c      	add	r0, sp, #48	; 0x30
							stat_tmp_4->current_in = (float)libBufferGet_int16(rxmsg.Data, &ind) / 10.0;
 8002efe:	ed85 7a04 	vstr	s14, [r5, #16]
							stat_tmp_4->pid_pos_now = (float)libBufferGet_int16(rxmsg.Data, &ind) / 50.0;
 8002f02:	f00b fbcc 	bl	800e69e <libBufferGet_int16>
 8002f06:	ee07 0a90 	vmov	s15, r0
 8002f0a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002f4c <modCANSubTaskHandleCommunication+0x430>
 8002f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f16:	ed85 7a05 	vstr	s14, [r5, #20]
							break;
 8002f1a:	e656      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_4->id == destinationID || stat_tmp_4->id == -1) {
 8002f1c:	3101      	adds	r1, #1
 8002f1e:	d0be      	beq.n	8002e9e <modCANSubTaskHandleCommunication+0x382>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8002f20:	3301      	adds	r3, #1
 8002f22:	2b0a      	cmp	r3, #10
 8002f24:	d1b6      	bne.n	8002e94 <modCANSubTaskHandleCommunication+0x378>
 8002f26:	e650      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
						if (stat_tmp_5->id == destinationID || stat_tmp_5->id == -1) {
 8002f28:	3101      	adds	r1, #1
 8002f2a:	f43f aefb 	beq.w	8002d24 <modCANSubTaskHandleCommunication+0x208>
					for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8002f2e:	3301      	adds	r3, #1
 8002f30:	2b0a      	cmp	r3, #10
 8002f32:	f47f aef2 	bne.w	8002d1a <modCANSubTaskHandleCommunication+0x1fe>
 8002f36:	e648      	b.n	8002bca <modCANSubTaskHandleCommunication+0xae>
 8002f38:	20003e3c 	.word	0x20003e3c
 8002f3c:	2000151c 	.word	0x2000151c
 8002f40:	461c4000 	.word	0x461c4000
 8002f44:	20003edc 	.word	0x20003edc
 8002f48:	20003f7c 	.word	0x20003f7c
 8002f4c:	42480000 	.word	0x42480000

08002f50 <modCANTransmitStandardID>:

void modCANTransmitStandardID(uint32_t id, uint8_t *data, uint8_t len) {
 8002f50:	b500      	push	{lr}
 8002f52:	b089      	sub	sp, #36	; 0x24
	CanTxMsgTypeDef txmsg;
	txmsg.IDE = CAN_ID_STD;
 8002f54:	2300      	movs	r3, #0
	txmsg.StdId = id;
 8002f56:	9001      	str	r0, [sp, #4]
	txmsg.RTR = CAN_RTR_DATA;
	txmsg.DLC = len;
	memcpy(txmsg.Data, data, len);
 8002f58:	a806      	add	r0, sp, #24
	txmsg.DLC = len;
 8002f5a:	e9cd 3204 	strd	r3, r2, [sp, #16]
	txmsg.IDE = CAN_ID_STD;
 8002f5e:	9303      	str	r3, [sp, #12]
	memcpy(txmsg.Data, data, len);
 8002f60:	f00c fa34 	bl	800f3cc <memcpy>
	
	modCANHandle.pTxMsg = &txmsg;
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <modCANTransmitStandardID+0x28>)
 8002f66:	ab01      	add	r3, sp, #4
	HAL_CAN_Transmit(&modCANHandle,1);
 8002f68:	2101      	movs	r1, #1
	modCANHandle.pTxMsg = &txmsg;
 8002f6a:	6303      	str	r3, [r0, #48]	; 0x30
	HAL_CAN_Transmit(&modCANHandle,1);
 8002f6c:	f008 fc94 	bl	800b898 <HAL_CAN_Transmit>
}
 8002f70:	b009      	add	sp, #36	; 0x24
 8002f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f76:	bf00      	nop
 8002f78:	20001530 	.word	0x20001530

08002f7c <modCANSendBuffer>:
 * Otherwise, it will be passed to the process function.
 */
void modCANSendBuffer(uint8_t controllerID, uint8_t *data, unsigned int len, bool send) {
	uint8_t send_buffer[8];

	if(len <= 6) {
 8002f7c:	2a06      	cmp	r2, #6
void modCANSendBuffer(uint8_t controllerID, uint8_t *data, unsigned int len, bool send) {
 8002f7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f82:	4607      	mov	r7, r0
 8002f84:	4688      	mov	r8, r1
 8002f86:	4614      	mov	r4, r2
 8002f88:	4699      	mov	r9, r3
	if(len <= 6) {
 8002f8a:	d839      	bhi.n	8003000 <modCANSendBuffer+0x84>
		uint32_t ind = 0;
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 8002f8c:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <modCANSendBuffer+0x124>)
		send_buffer[ind++] = send;
 8002f8e:	f88d 9001 	strb.w	r9, [sp, #1]
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 8002f92:	681b      	ldr	r3, [r3, #0]
		memcpy(send_buffer + ind, data, len);
 8002f94:	f10d 0002 	add.w	r0, sp, #2
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 8002f98:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8002f9c:	f88d 3000 	strb.w	r3, [sp]
		memcpy(send_buffer + ind, data, len);
 8002fa0:	f00c fa14 	bl	800f3cc <memcpy>
		ind += len;
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_SHORT_BUFFER), send_buffer, ind);
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f7ff fb02 	bl	80025b0 <modCANGetCANID>
		ind += len;
 8002fac:	1ca2      	adds	r2, r4, #2
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_SHORT_BUFFER), send_buffer, ind);
 8002fae:	b2d2      	uxtb	r2, r2
		send_buffer[ind++] = (uint8_t)(crc >> 8);
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
    
		// Old ID method
		//modCANTransmitExtID(controllerID | ((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_RX_BUFFER), send_buffer, ind++);
 8002fb0:	4669      	mov	r1, sp
 8002fb2:	f7ff fb11 	bl	80025d8 <modCANTransmitExtID>
	}
}
 8002fb6:	b002      	add	sp, #8
 8002fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(i > 255) {
 8002fbc:	f240 1303 	movw	r3, #259	; 0x103
 8002fc0:	429d      	cmp	r5, r3
 8002fc2:	d120      	bne.n	8003006 <modCANSendBuffer+0x8a>
		for(unsigned int i = end_a;i < len;i += 6) {
 8002fc4:	42a5      	cmp	r5, r4
 8002fc6:	d23d      	bcs.n	8003044 <modCANSendBuffer+0xc8>
			send_buffer[0] = i >> 8;
 8002fc8:	0a2b      	lsrs	r3, r5, #8
 8002fca:	b2ee      	uxtb	r6, r5
 8002fcc:	eb08 0105 	add.w	r1, r8, r5
 8002fd0:	3506      	adds	r5, #6
			if((i + 6) <= len) {
 8002fd2:	42a5      	cmp	r5, r4
			send_buffer[0] = i >> 8;
 8002fd4:	f88d 3000 	strb.w	r3, [sp]
			send_buffer[1] = i & 0xFF;
 8002fd8:	f88d 6001 	strb.w	r6, [sp, #1]
			if((i + 6) <= len) {
 8002fdc:	d857      	bhi.n	800308e <modCANSendBuffer+0x112>
				memcpy(send_buffer + 2, data + i, send_len);
 8002fde:	680b      	ldr	r3, [r1, #0]
 8002fe0:	f8cd 3002 	str.w	r3, [sp, #2]
 8002fe4:	888b      	ldrh	r3, [r1, #4]
 8002fe6:	f8ad 3006 	strh.w	r3, [sp, #6]
			uint8_t send_len = 6;
 8002fea:	2606      	movs	r6, #6
			modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_FILL_RX_BUFFER_LONG), send_buffer, send_len + 2);
 8002fec:	2106      	movs	r1, #6
 8002fee:	4638      	mov	r0, r7
 8002ff0:	1cb2      	adds	r2, r6, #2
 8002ff2:	f7ff fadd 	bl	80025b0 <modCANGetCANID>
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4669      	mov	r1, sp
 8002ffa:	f7ff faed 	bl	80025d8 <modCANTransmitExtID>
		for(unsigned int i = end_a;i < len;i += 6) {
 8002ffe:	e7e1      	b.n	8002fc4 <modCANSendBuffer+0x48>
 8003000:	2500      	movs	r5, #0
				send_len = len - i;
 8003002:	fa5f fa82 	uxtb.w	sl, r2
			end_a = i + 7;
 8003006:	462b      	mov	r3, r5
 8003008:	3507      	adds	r5, #7
			send_buffer[0] = i;
 800300a:	b2de      	uxtb	r6, r3
			if((i + 7) <= len) {
 800300c:	42ac      	cmp	r4, r5
			send_buffer[0] = i;
 800300e:	f88d 6000 	strb.w	r6, [sp]
			if((i + 7) <= len) {
 8003012:	eb03 0108 	add.w	r1, r3, r8
 8003016:	d331      	bcc.n	800307c <modCANSendBuffer+0x100>
				memcpy(send_buffer + 1, data + i, send_len);
 8003018:	f853 3008 	ldr.w	r3, [r3, r8]
 800301c:	f8cd 3001 	str.w	r3, [sp, #1]
 8003020:	888b      	ldrh	r3, [r1, #4]
 8003022:	f8ad 3005 	strh.w	r3, [sp, #5]
 8003026:	798b      	ldrb	r3, [r1, #6]
 8003028:	f88d 3007 	strb.w	r3, [sp, #7]
			uint8_t send_len = 7;
 800302c:	2607      	movs	r6, #7
			modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_FILL_RX_BUFFER), send_buffer, send_len + 1);
 800302e:	2105      	movs	r1, #5
 8003030:	4638      	mov	r0, r7
 8003032:	1c72      	adds	r2, r6, #1
 8003034:	f7ff fabc 	bl	80025b0 <modCANGetCANID>
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4669      	mov	r1, sp
 800303c:	f7ff facc 	bl	80025d8 <modCANTransmitExtID>
		for(unsigned int i = 0;i < len;i += 7) {
 8003040:	42ac      	cmp	r4, r5
 8003042:	d8bb      	bhi.n	8002fbc <modCANSendBuffer+0x40>
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <modCANSendBuffer+0x124>)
		send_buffer[ind++] = send;
 8003046:	f88d 9001 	strb.w	r9, [sp, #1]
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 800304a:	681b      	ldr	r3, [r3, #0]
		send_buffer[ind++] = len & 0xFF;
 800304c:	f88d a003 	strb.w	sl, [sp, #3]
		send_buffer[ind++] = modCANGeneralConfigHandle->CANID;
 8003050:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8003054:	f88d 3000 	strb.w	r3, [sp]
		unsigned short crc = libCRCCalcCRC16(data, len);
 8003058:	4621      	mov	r1, r4
		send_buffer[ind++] = len >> 8;
 800305a:	0a23      	lsrs	r3, r4, #8
		unsigned short crc = libCRCCalcCRC16(data, len);
 800305c:	4640      	mov	r0, r8
		send_buffer[ind++] = len >> 8;
 800305e:	f88d 3002 	strb.w	r3, [sp, #2]
		unsigned short crc = libCRCCalcCRC16(data, len);
 8003062:	f00b fb81 	bl	800e768 <libCRCCalcCRC16>
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_RX_BUFFER), send_buffer, ind++);
 8003066:	2107      	movs	r1, #7
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 8003068:	0a03      	lsrs	r3, r0, #8
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800306a:	f88d 0005 	strb.w	r0, [sp, #5]
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_RX_BUFFER), send_buffer, ind++);
 800306e:	4638      	mov	r0, r7
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 8003070:	f88d 3004 	strb.w	r3, [sp, #4]
		modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_PROCESS_RX_BUFFER), send_buffer, ind++);
 8003074:	2206      	movs	r2, #6
 8003076:	f7ff fa9b 	bl	80025b0 <modCANGetCANID>
 800307a:	e799      	b.n	8002fb0 <modCANSendBuffer+0x34>
				send_len = len - i;
 800307c:	ebaa 0606 	sub.w	r6, sl, r6
 8003080:	b2f6      	uxtb	r6, r6
				memcpy(send_buffer + 1, data + i, send_len);
 8003082:	4632      	mov	r2, r6
 8003084:	f10d 0001 	add.w	r0, sp, #1
 8003088:	f00c f9a0 	bl	800f3cc <memcpy>
 800308c:	e7cf      	b.n	800302e <modCANSendBuffer+0xb2>
				send_len = len - i;
 800308e:	ebaa 0606 	sub.w	r6, sl, r6
 8003092:	b2f6      	uxtb	r6, r6
				memcpy(send_buffer + 2, data + i, send_len);
 8003094:	4632      	mov	r2, r6
 8003096:	f10d 0002 	add.w	r0, sp, #2
 800309a:	f00c f997 	bl	800f3cc <memcpy>
 800309e:	e7a5      	b.n	8002fec <modCANSendBuffer+0x70>
 80030a0:	2000152c 	.word	0x2000152c

080030a4 <modCANSendPacketWrapper>:
	uint8_t buffer[4];
	libBufferAppend_float32(buffer, currentRel, 1e5, &sendIndex);
	modCANTransmitExtID(modCANGetCANID(controllerID,CAN_PACKET_SET_CURRENT_BRAKE_REL), buffer, sendIndex);
}

static void modCANSendPacketWrapper(unsigned char *data, unsigned int length) {
 80030a4:	460a      	mov	r2, r1
	modCANSendBuffer(modCANRxBufferLastID, data, length, true);
 80030a6:	4601      	mov	r1, r0
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <modCANSendPacketWrapper+0x10>)
 80030aa:	2301      	movs	r3, #1
 80030ac:	7800      	ldrb	r0, [r0, #0]
 80030ae:	f7ff bf65 	b.w	8002f7c <modCANSendBuffer>
 80030b2:	bf00      	nop
 80030b4:	20001980 	.word	0x20001980

080030b8 <modCANHandleKeepAliveSafetyMessage>:
}

void modCANHandleKeepAliveSafetyMessage(CanRxMsgTypeDef canMsg) {
 80030b8:	b084      	sub	sp, #16
 80030ba:	b538      	push	{r3, r4, r5, lr}
 80030bc:	9d08      	ldr	r5, [sp, #32]
 80030be:	ac04      	add	r4, sp, #16
 80030c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(canMsg.DLC >= 1){
 80030c4:	b345      	cbz	r5, 8003118 <modCANHandleKeepAliveSafetyMessage+0x60>
 80030c6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
		if(canMsg.Data[0] & 0x01){
 80030ca:	07e1      	lsls	r1, r4, #31
 80030cc:	d509      	bpl.n	80030e2 <modCANHandleKeepAliveSafetyMessage+0x2a>
			modCANSafetyCANMessageTimeout = HAL_GetTick();
 80030ce:	f007 fe75 	bl	800adbc <HAL_GetTick>
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <modCANHandleKeepAliveSafetyMessage+0x68>)
 80030d4:	6018      	str	r0, [r3, #0]
			modCANPackStateHandle->safetyOverCANHCSafeNSafe = (canMsg.Data[0] & 0x02) ? true : false;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <modCANHandleKeepAliveSafetyMessage+0x6c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80030de:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		
		if(canMsg.Data[0] & 0x04){
 80030e2:	0762      	lsls	r2, r4, #29
				modCANPackStateHandle->watchDogTime = (canMsg.Data[0] & 0x08) ? 255 : 0;
 80030e4:	bf41      	itttt	mi
 80030e6:	4b0f      	ldrmi	r3, [pc, #60]	; (8003124 <modCANHandleKeepAliveSafetyMessage+0x6c>)
 80030e8:	681b      	ldrmi	r3, [r3, #0]
 80030ea:	f344 04c0 	sbfxmi	r4, r4, #3, #1
 80030ee:	f883 40ae 	strbmi.w	r4, [r3, #174]	; 0xae
		}
	}
	
	if(canMsg.DLC >= 2){
 80030f2:	2d01      	cmp	r5, #1
 80030f4:	d010      	beq.n	8003118 <modCANHandleKeepAliveSafetyMessage+0x60>
		if(canMsg.Data[1] & 0x10){
 80030f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80030fa:	06db      	lsls	r3, r3, #27
 80030fc:	d50c      	bpl.n	8003118 <modCANHandleKeepAliveSafetyMessage+0x60>
			modCANPackStateHandle->chargeBalanceActive = modCANGeneralConfigHandle->allowChargingDuringDischarge;
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <modCANHandleKeepAliveSafetyMessage+0x70>)
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <modCANHandleKeepAliveSafetyMessage+0x6c>)
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800310a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			modPowerElectronicsResetBalanceModeActiveTimeout();
		}
	}
}
 800310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003112:	b004      	add	sp, #16
			modPowerElectronicsResetBalanceModeActiveTimeout();
 8003114:	f003 bede 	b.w	8006ed4 <modPowerElectronicsResetBalanceModeActiveTimeout>
}
 8003118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800311c:	b004      	add	sp, #16
 800311e:	4770      	bx	lr
 8003120:	20003d60 	.word	0x20003d60
 8003124:	2000157c 	.word	0x2000157c
 8003128:	2000152c 	.word	0x2000152c

0800312c <modCANHandleCANOpenMessage>:

void modCANHandleCANOpenMessage(CanRxMsgTypeDef canMsg) {
 800312c:	b084      	sub	sp, #16
 800312e:	b508      	push	{r3, lr}
 8003130:	f10d 0c08 	add.w	ip, sp, #8
 8003134:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if(canMsg.StdId == 0x070A){
 8003138:	f240 730a 	movw	r3, #1802	; 0x70a
 800313c:	4298      	cmp	r0, r3
 800313e:	d10b      	bne.n	8003158 <modCANHandleCANOpenMessage+0x2c>
		modCANLastChargerHeartBeatTick = HAL_GetTick();
 8003140:	f007 fe3c 	bl	800adbc <HAL_GetTick>
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <modCANHandleCANOpenMessage+0x3c>)
		modCANChargerCANOpenState = canMsg.Data[0];
 8003146:	f89d 201c 	ldrb.w	r2, [sp, #28]
		modCANLastChargerHeartBeatTick = HAL_GetTick();
 800314a:	6018      	str	r0, [r3, #0]
		modCANChargerCANOpenState = canMsg.Data[0];
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <modCANHandleCANOpenMessage+0x40>)
	}else if(canMsg.StdId == 0x048A){
	  modCANChargerChargingState = canMsg.Data[5];
 800314e:	701a      	strb	r2, [r3, #0]
	}
}
 8003150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003154:	b004      	add	sp, #16
 8003156:	4770      	bx	lr
	}else if(canMsg.StdId == 0x048A){
 8003158:	f240 438a 	movw	r3, #1162	; 0x48a
 800315c:	4298      	cmp	r0, r3
 800315e:	d1f7      	bne.n	8003150 <modCANHandleCANOpenMessage+0x24>
	  modCANChargerChargingState = canMsg.Data[5];
 8003160:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <modCANHandleCANOpenMessage+0x44>)
 8003166:	e7f2      	b.n	800314e <modCANHandleCANOpenMessage+0x22>
 8003168:	20001570 	.word	0x20001570
 800316c:	20001520 	.word	0x20001520
 8003170:	20001521 	.word	0x20001521

08003174 <HAL_CAN_RxCpltCallback>:
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle) {
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((*CanHandle->pRxMsg).IDE == CAN_ID_STD) {         // Standard ID
 8003176:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003178:	68a3      	ldr	r3, [r4, #8]
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle) {
 800317a:	b087      	sub	sp, #28
 800317c:	f104 0510 	add.w	r5, r4, #16
	if((*CanHandle->pRxMsg).IDE == CAN_ID_STD) {         // Standard ID
 8003180:	b97b      	cbnz	r3, 80031a2 <HAL_CAN_RxCpltCallback+0x2e>
		modCANHandleCANOpenMessage(*CanHandle->pRxMsg);
 8003182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003184:	466e      	mov	r6, sp
 8003186:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	6033      	str	r3, [r6, #0]
 800318c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003190:	f7ff ffcc 	bl	800312c <modCANHandleCANOpenMessage>
  HAL_CAN_Receive_IT(&modCANHandle, CAN_FIFO0);
 8003194:	4819      	ldr	r0, [pc, #100]	; (80031fc <HAL_CAN_RxCpltCallback+0x88>)
 8003196:	2100      	movs	r1, #0
}
 8003198:	b007      	add	sp, #28
 800319a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_CAN_Receive_IT(&modCANHandle, CAN_FIFO0);
 800319e:	f008 bc1f 	b.w	800b9e0 <HAL_CAN_Receive_IT>
		if((*CanHandle->pRxMsg).ExtId == 0x0A23){
 80031a2:	6862      	ldr	r2, [r4, #4]
 80031a4:	f640 2323 	movw	r3, #2595	; 0xa23
 80031a8:	429a      	cmp	r2, r3
			modCANHandleKeepAliveSafetyMessage(*CanHandle->pRxMsg);
 80031aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ac:	466e      	mov	r6, sp
 80031ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
		if((*CanHandle->pRxMsg).ExtId == 0x0A23){
 80031b8:	d102      	bne.n	80031c0 <HAL_CAN_RxCpltCallback+0x4c>
			modCANHandleKeepAliveSafetyMessage(*CanHandle->pRxMsg);
 80031ba:	f7ff ff7d 	bl	80030b8 <modCANHandleKeepAliveSafetyMessage>
 80031be:	e7e9      	b.n	8003194 <HAL_CAN_RxCpltCallback+0x20>
			uint8_t destinationID = modCANGetDestinationID(*CanHandle->pRxMsg);
 80031c0:	f7ff f9e4 	bl	800258c <modCANGetDestinationID>
			if(destinationID == modCANGeneralConfigHandle->CANID){
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_CAN_RxCpltCallback+0x8c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 80031cc:	b2c0      	uxtb	r0, r0
 80031ce:	4283      	cmp	r3, r0
 80031d0:	d1e0      	bne.n	8003194 <HAL_CAN_RxCpltCallback+0x20>
				modCANRxFrames[modCANRxFrameWrite++] = *CanHandle->pRxMsg;
 80031d2:	4f0c      	ldr	r7, [pc, #48]	; (8003204 <HAL_CAN_RxCpltCallback+0x90>)
 80031d4:	4d0c      	ldr	r5, [pc, #48]	; (8003208 <HAL_CAN_RxCpltCallback+0x94>)
 80031d6:	783b      	ldrb	r3, [r7, #0]
 80031d8:	2224      	movs	r2, #36	; 0x24
 80031da:	1c5e      	adds	r6, r3, #1
 80031dc:	fb02 5503 	mla	r5, r2, r3, r5
 80031e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e8:	b2f6      	uxtb	r6, r6
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	602b      	str	r3, [r5, #0]
				if(modCANRxFrameWrite >= RX_CAN_FRAMES_SIZE) {
 80031ee:	2eff      	cmp	r6, #255	; 0xff
					modCANRxFrameWrite = 0;
 80031f0:	bf08      	it	eq
 80031f2:	2300      	moveq	r3, #0
				modCANRxFrames[modCANRxFrameWrite++] = *CanHandle->pRxMsg;
 80031f4:	703e      	strb	r6, [r7, #0]
					modCANRxFrameWrite = 0;
 80031f6:	bf08      	it	eq
 80031f8:	703b      	strbeq	r3, [r7, #0]
 80031fa:	e7cb      	b.n	8003194 <HAL_CAN_RxCpltCallback+0x20>
 80031fc:	20001530 	.word	0x20001530
 8003200:	2000152c 	.word	0x2000152c
 8003204:	20001982 	.word	0x20001982
 8003208:	20001984 	.word	0x20001984

0800320c <modCANRXWatchDog>:
		  chargerOpState = opInit;
		}
	}
}

void modCANRXWatchDog(void){
 800320c:	b508      	push	{r3, lr}
  if(modCANHandle.pRxMsg->ExtId != modCANLastRXID){
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <modCANRXWatchDog+0x38>)
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <modCANRXWatchDog+0x3c>)
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	428a      	cmp	r2, r1
 800321a:	d004      	beq.n	8003226 <modCANRXWatchDog+0x1a>
	  modCANLastRXID = modCANHandle.pRxMsg->ExtId;
 800321c:	601a      	str	r2, [r3, #0]
		modCANLastRXDifferLastTick = HAL_GetTick();
 800321e:	f007 fdcd 	bl	800adbc <HAL_GetTick>
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <modCANRXWatchDog+0x40>)
 8003224:	6018      	str	r0, [r3, #0]
	}
	
	if(modDelayTick1ms(&modCANLastRXDifferLastTick,1000)){
 8003226:	4809      	ldr	r0, [pc, #36]	; (800324c <modCANRXWatchDog+0x40>)
 8003228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800322c:	f001 fc78 	bl	8004b20 <modDelayTick1ms>
 8003230:	b138      	cbz	r0, 8003242 <modCANRXWatchDog+0x36>
		modCANInit(modCANPackStateHandle,modCANGeneralConfigHandle);
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <modCANRXWatchDog+0x44>)
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <modCANRXWatchDog+0x48>)
 8003238:	6818      	ldr	r0, [r3, #0]
	}
}
 800323a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		modCANInit(modCANPackStateHandle,modCANGeneralConfigHandle);
 800323e:	f7ff b921 	b.w	8002484 <modCANInit>
}
 8003242:	bd08      	pop	{r3, pc}
 8003244:	20001530 	.word	0x20001530
 8003248:	20001578 	.word	0x20001578
 800324c:	20001574 	.word	0x20001574
 8003250:	2000152c 	.word	0x2000152c
 8003254:	2000157c 	.word	0x2000157c

08003258 <modCANOpenChargerCheckPresent>:

void modCANOpenChargerCheckPresent(void) {
 8003258:	b508      	push	{r3, lr}
	if((HAL_GetTick() - modCANLastChargerHeartBeatTick) < 2000)
 800325a:	f007 fdaf 	bl	800adbc <HAL_GetTick>
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <modCANOpenChargerCheckPresent+0x1c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1ac0      	subs	r0, r0, r3
 8003264:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <modCANOpenChargerCheckPresent+0x20>)
 800326a:	bf2c      	ite	cs
 800326c:	2000      	movcs	r0, #0
 800326e:	2001      	movcc	r0, #1
 8003270:	7018      	strb	r0, [r3, #0]
		modCANChargerPresentOnBus = true;
	else
		modCANChargerPresentOnBus = false;
}
 8003272:	bd08      	pop	{r3, pc}
 8003274:	20001570 	.word	0x20001570
 8003278:	20001522 	.word	0x20001522

0800327c <modCANOpenBMSSendHeartBeat>:

void modCANOpenBMSSendHeartBeat(void) {
 800327c:	b507      	push	{r0, r1, r2, lr}
  // Send the canopen heartbeat from the BMS
	int32_t sendIndex = 0;
 800327e:	2300      	movs	r3, #0
	uint8_t operationalState = 5;
	uint8_t buffer[1];
	libBufferAppend_uint8(buffer, operationalState, &sendIndex);
 8003280:	aa01      	add	r2, sp, #4
 8003282:	4668      	mov	r0, sp
 8003284:	2105      	movs	r1, #5
	int32_t sendIndex = 0;
 8003286:	9301      	str	r3, [sp, #4]
	libBufferAppend_uint8(buffer, operationalState, &sendIndex);
 8003288:	f00b f950 	bl	800e52c <libBufferAppend_uint8>
	modCANTransmitStandardID(0x0701, buffer, sendIndex);
 800328c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003290:	4669      	mov	r1, sp
 8003292:	f240 7001 	movw	r0, #1793	; 0x701
 8003296:	f7ff fe5b 	bl	8002f50 <modCANTransmitStandardID>
}
 800329a:	b003      	add	sp, #12
 800329c:	f85d fb04 	ldr.w	pc, [sp], #4

080032a0 <modCANOpenChargerStartNode>:

void modCANOpenChargerStartNode(void) {
 80032a0:	b513      	push	{r0, r1, r4, lr}
  // Send the canopen heartbeat from the BMS
	int32_t sendIndex = 0;
 80032a2:	2400      	movs	r4, #0
	uint8_t buffer[2];
	libBufferAppend_uint8(buffer, 0x01, &sendIndex);
 80032a4:	aa01      	add	r2, sp, #4
 80032a6:	4668      	mov	r0, sp
 80032a8:	2101      	movs	r1, #1
	int32_t sendIndex = 0;
 80032aa:	9401      	str	r4, [sp, #4]
	libBufferAppend_uint8(buffer, 0x01, &sendIndex);
 80032ac:	f00b f93e 	bl	800e52c <libBufferAppend_uint8>
	libBufferAppend_uint8(buffer, 0x0A, &sendIndex);	
 80032b0:	aa01      	add	r2, sp, #4
 80032b2:	4668      	mov	r0, sp
 80032b4:	210a      	movs	r1, #10
 80032b6:	f00b f939 	bl	800e52c <libBufferAppend_uint8>
	modCANTransmitStandardID(0x0000, buffer, sendIndex);
 80032ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80032be:	4669      	mov	r1, sp
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7ff fe45 	bl	8002f50 <modCANTransmitStandardID>
}
 80032c6:	b002      	add	sp, #8
 80032c8:	bd10      	pop	{r4, pc}
	...

080032cc <modCANOpenChargerSetCurrentVoltageReady>:

void modCANOpenChargerSetCurrentVoltageReady(float current,float voltage,bool ready) {
 80032cc:	b510      	push	{r4, lr}
	uint32_t modCANChargerRequestVoltageInt = voltage * 1024;
	uint16_t modCANChargerRequestCurrentInt = current * 16;
 80032ce:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
void modCANOpenChargerSetCurrentVoltageReady(float current,float voltage,bool ready) {
 80032d2:	ed2d 8b02 	vpush	{d8}
	uint16_t modCANChargerRequestCurrentInt = current * 16;
 80032d6:	ee20 0a27 	vmul.f32	s0, s0, s15
void modCANOpenChargerSetCurrentVoltageReady(float current,float voltage,bool ready) {
 80032da:	b084      	sub	sp, #16
	uint16_t modCANChargerRequestCurrentInt = current * 16;
 80032dc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	
	int32_t sendIndex = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
	uint8_t buffer[8];
	libBufferAppend_uint16_LSBFirst(buffer, modCANChargerRequestCurrentInt, &sendIndex);
 80032e4:	ee10 3a10 	vmov	r3, s0
void modCANOpenChargerSetCurrentVoltageReady(float current,float voltage,bool ready) {
 80032e8:	4604      	mov	r4, r0
	libBufferAppend_uint16_LSBFirst(buffer, modCANChargerRequestCurrentInt, &sendIndex);
 80032ea:	b299      	uxth	r1, r3
 80032ec:	aa01      	add	r2, sp, #4
 80032ee:	a802      	add	r0, sp, #8
void modCANOpenChargerSetCurrentVoltageReady(float current,float voltage,bool ready) {
 80032f0:	eeb0 8a60 	vmov.f32	s16, s1
	libBufferAppend_uint16_LSBFirst(buffer, modCANChargerRequestCurrentInt, &sendIndex);
 80032f4:	f00b f960 	bl	800e5b8 <libBufferAppend_uint16_LSBFirst>
	libBufferAppend_uint8(buffer, ready, &sendIndex);	
 80032f8:	aa01      	add	r2, sp, #4
 80032fa:	4621      	mov	r1, r4
 80032fc:	a802      	add	r0, sp, #8
 80032fe:	f00b f915 	bl	800e52c <libBufferAppend_uint8>
	uint32_t modCANChargerRequestVoltageInt = voltage * 1024;
 8003302:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003330 <modCANOpenChargerSetCurrentVoltageReady+0x64>
 8003306:	ee28 8a20 	vmul.f32	s16, s16, s1
	libBufferAppend_uint32_LSBFirst(buffer, modCANChargerRequestVoltageInt, &sendIndex);		
 800330a:	aa01      	add	r2, sp, #4
 800330c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8003310:	a802      	add	r0, sp, #8
 8003312:	ee17 1a90 	vmov	r1, s15
 8003316:	f00b f95a 	bl	800e5ce <libBufferAppend_uint32_LSBFirst>
	modCANTransmitStandardID(0x040A, buffer, sendIndex);
 800331a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800331e:	a902      	add	r1, sp, #8
 8003320:	f240 400a 	movw	r0, #1034	; 0x40a
 8003324:	f7ff fe14 	bl	8002f50 <modCANTransmitStandardID>
}
 8003328:	b004      	add	sp, #16
 800332a:	ecbd 8b02 	vpop	{d8}
 800332e:	bd10      	pop	{r4, pc}
 8003330:	44800000 	.word	0x44800000

08003334 <modCANHandleSubTaskCharger>:
void modCANHandleSubTaskCharger(void) {
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(modDelayTick1ms(&modCANChargerTaskIntervalLastTick, 500)) {
 8003336:	483b      	ldr	r0, [pc, #236]	; (8003424 <modCANHandleSubTaskCharger+0xf0>)
 8003338:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800333c:	f001 fbf0 	bl	8004b20 <modDelayTick1ms>
 8003340:	b1d8      	cbz	r0, 800337a <modCANHandleSubTaskCharger+0x46>
		modCANOpenChargerCheckPresent();
 8003342:	f7ff ff89 	bl	8003258 <modCANOpenChargerCheckPresent>
		if(modCANChargerPresentOnBus) {
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <modCANHandleSubTaskCharger+0xf4>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d066      	beq.n	800341c <modCANHandleSubTaskCharger+0xe8>
			if(modCANChargerCANOpenState != 0x05)
 800334e:	4c37      	ldr	r4, [pc, #220]	; (800342c <modCANHandleSubTaskCharger+0xf8>)
			modCANOpenBMSSendHeartBeat();
 8003350:	f7ff ff94 	bl	800327c <modCANOpenBMSSendHeartBeat>
			if(modCANChargerCANOpenState != 0x05)
 8003354:	7823      	ldrb	r3, [r4, #0]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d10a      	bne.n	8003370 <modCANHandleSubTaskCharger+0x3c>
				switch(chargerOpState) {
 800335a:	4f35      	ldr	r7, [pc, #212]	; (8003430 <modCANHandleSubTaskCharger+0xfc>)
 800335c:	4d35      	ldr	r5, [pc, #212]	; (8003434 <modCANHandleSubTaskCharger+0x100>)
 800335e:	783b      	ldrb	r3, [r7, #0]
 8003360:	4c35      	ldr	r4, [pc, #212]	; (8003438 <modCANHandleSubTaskCharger+0x104>)
 8003362:	4e36      	ldr	r6, [pc, #216]	; (800343c <modCANHandleSubTaskCharger+0x108>)
 8003364:	2b03      	cmp	r3, #3
 8003366:	d857      	bhi.n	8003418 <modCANHandleSubTaskCharger+0xe4>
 8003368:	e8df f003 	tbb	[pc, r3]
 800336c:	342b2208 	.word	0x342b2208
				modCANOpenChargerStartNode();
 8003370:	f7ff ff96 	bl	80032a0 <modCANOpenChargerStartNode>
			if(modCANChargerCANOpenState == 0x05) {
 8003374:	7823      	ldrb	r3, [r4, #0]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d0ef      	beq.n	800335a <modCANHandleSubTaskCharger+0x26>
}
 800337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if(modCANPackStateHandle->powerDownDesired) {
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003382:	b193      	cbz	r3, 80033aa <modCANHandleSubTaskCharger+0x76>
						  modCANOpenChargerSetCurrentVoltageReady(0.0f,0.0f,false);
 8003384:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8003440 <modCANHandleSubTaskCharger+0x10c>
 8003388:	2000      	movs	r0, #0
 800338a:	eeb0 0a60 	vmov.f32	s0, s1
 800338e:	f7ff ff9d 	bl	80032cc <modCANOpenChargerSetCurrentVoltageReady>
				chargerOpState = chargerOpStateNew;
 8003392:	7823      	ldrb	r3, [r4, #0]
			  modCANPackStateHandle->chargeBalanceActive = modCANGeneralConfigHandle->allowChargingDuringDischarge;
 8003394:	6832      	ldr	r2, [r6, #0]
				chargerOpState = chargerOpStateNew;
 8003396:	703b      	strb	r3, [r7, #0]
			  modCANPackStateHandle->chargeBalanceActive = modCANGeneralConfigHandle->allowChargingDuringDischarge;
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800339e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
}
 80033a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			  modPowerElectronicsResetBalanceModeActiveTimeout();
 80033a6:	f003 bd95 	b.w	8006ed4 <modPowerElectronicsResetBalanceModeActiveTimeout>
						  chargerOpStateNew = opChargerReset;
 80033aa:	2301      	movs	r3, #1
						chargerOpStateNew = opInit;
 80033ac:	7023      	strb	r3, [r4, #0]
 80033ae:	e7f0      	b.n	8003392 <modCANHandleSubTaskCharger+0x5e>
						modCANOpenChargerSetCurrentVoltageReady(0.0f,0.0f,false);
 80033b0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003440 <modCANHandleSubTaskCharger+0x10c>
 80033b4:	2000      	movs	r0, #0
 80033b6:	eeb0 0a60 	vmov.f32	s0, s1
 80033ba:	f7ff ff87 	bl	80032cc <modCANOpenChargerSetCurrentVoltageReady>
					  chargerOpStateNew = opChargerSet;
 80033be:	2302      	movs	r3, #2
 80033c0:	e7f4      	b.n	80033ac <modCANHandleSubTaskCharger+0x78>
						modCANOpenChargerSetCurrentVoltageReady(0.0f,0.0f,true);
 80033c2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8003440 <modCANHandleSubTaskCharger+0x10c>
 80033c6:	2001      	movs	r0, #1
 80033c8:	eeb0 0a60 	vmov.f32	s0, s1
 80033cc:	f7ff ff7e 	bl	80032cc <modCANOpenChargerSetCurrentVoltageReady>
					  chargerOpStateNew = opCharging;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e7eb      	b.n	80033ac <modCANHandleSubTaskCharger+0x78>
						modCANOpenChargerSetCurrentVoltageReady(30.0f*modCANPackStateHandle->throttleDutyCharge/1000,modCANGeneralConfigHandle->noOfCellsSeries*modCANGeneralConfigHandle->cellSoftOverVoltage+0.6f,true);
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003444 <modCANHandleSubTaskCharger+0x110>
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	88db      	ldrh	r3, [r3, #6]
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	ee07 2a10 	vmov	s14, r2
 80033ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80033f4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80033f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033fc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003448 <modCANHandleSubTaskCharger+0x114>
 8003400:	eee7 0a26 	vfma.f32	s1, s14, s13
 8003404:	2001      	movs	r0, #1
 8003406:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800340a:	f7ff ff5f 	bl	80032cc <modCANOpenChargerSetCurrentVoltageReady>
					  if(modCANPackStateHandle->powerDownDesired)
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0bc      	beq.n	8003392 <modCANHandleSubTaskCharger+0x5e>
						chargerOpStateNew = opInit;
 8003418:	2300      	movs	r3, #0
 800341a:	e7c7      	b.n	80033ac <modCANHandleSubTaskCharger+0x78>
		  chargerOpState = opInit;
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <modCANHandleSubTaskCharger+0xfc>)
 800341e:	7013      	strb	r3, [r2, #0]
}
 8003420:	e7ab      	b.n	800337a <modCANHandleSubTaskCharger+0x46>
 8003422:	bf00      	nop
 8003424:	20001524 	.word	0x20001524
 8003428:	20001522 	.word	0x20001522
 800342c:	20001520 	.word	0x20001520
 8003430:	20001514 	.word	0x20001514
 8003434:	2000157c 	.word	0x2000157c
 8003438:	20001515 	.word	0x20001515
 800343c:	2000152c 	.word	0x2000152c
 8003440:	00000000 	.word	0x00000000
 8003444:	3f19999a 	.word	0x3f19999a
 8003448:	447a0000 	.word	0x447a0000

0800344c <modCANTask>:
void modCANTask(void){		
 800344c:	b508      	push	{r3, lr}
	if((modCANHandle.State != HAL_CAN_STATE_BUSY_RX)) {
 800344e:	4822      	ldr	r0, [pc, #136]	; (80034d8 <modCANTask+0x8c>)
 8003450:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003454:	2b22      	cmp	r3, #34	; 0x22
 8003456:	d02d      	beq.n	80034b4 <modCANTask+0x68>
	  HAL_CAN_Receive_IT(&modCANHandle, CAN_FIFO0);
 8003458:	2100      	movs	r1, #0
 800345a:	f008 fac1 	bl	800b9e0 <HAL_CAN_Receive_IT>
	if(modCANGeneralConfigHandle->emitStatusOverCAN) {
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <modCANTask+0x90>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
 8003466:	b192      	cbz	r2, 800348e <modCANTask+0x42>
		if(modCANGeneralConfigHandle->emitStatusProtocol == canEmitProtocolDieBieEngineering) {
 8003468:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800346c:	2b01      	cmp	r3, #1
 800346e:	d126      	bne.n	80034be <modCANTask+0x72>
			if(modDelayTick1ms(&modCANSendStatusFastLastTisk,200))                        // 5 Hz
 8003470:	481b      	ldr	r0, [pc, #108]	; (80034e0 <modCANTask+0x94>)
 8003472:	21c8      	movs	r1, #200	; 0xc8
 8003474:	f001 fb54 	bl	8004b20 <modDelayTick1ms>
 8003478:	b108      	cbz	r0, 800347e <modCANTask+0x32>
				modCANSendStatusFast();
 800347a:	f7ff f8c3 	bl	8002604 <modCANSendStatusFast>
			if(modDelayTick1ms(&modCANSendStatusSlowLastTisk,500))                        // 2 Hz
 800347e:	4819      	ldr	r0, [pc, #100]	; (80034e4 <modCANTask+0x98>)
 8003480:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003484:	f001 fb4c 	bl	8004b20 <modDelayTick1ms>
 8003488:	b108      	cbz	r0, 800348e <modCANTask+0x42>
				modCANSendStatusSlow();
 800348a:	f7ff f93d 	bl	8002708 <modCANSendStatusSlow>
	if(modDelayTick1ms(&modCANSafetyCANMessageTimeout,5000))
 800348e:	4816      	ldr	r0, [pc, #88]	; (80034e8 <modCANTask+0x9c>)
 8003490:	f241 3188 	movw	r1, #5000	; 0x1388
 8003494:	f001 fb44 	bl	8004b20 <modDelayTick1ms>
 8003498:	b120      	cbz	r0, 80034a4 <modCANTask+0x58>
		modCANPackStateHandle->safetyOverCANHCSafeNSafe = false;
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <modCANTask+0xa0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	modCANSubTaskHandleCommunication();
 80034a4:	f7ff fb3a 	bl	8002b1c <modCANSubTaskHandleCommunication>
	modCANRXWatchDog();
 80034a8:	f7ff feb0 	bl	800320c <modCANRXWatchDog>
}
 80034ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	modCANHandleSubTaskCharger();
 80034b0:	f7ff bf40 	b.w	8003334 <modCANHandleSubTaskCharger>
		modCANErrorLastTick = HAL_GetTick();
 80034b4:	f007 fc82 	bl	800adbc <HAL_GetTick>
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <modCANTask+0xa4>)
 80034ba:	6018      	str	r0, [r3, #0]
 80034bc:	e7cf      	b.n	800345e <modCANTask+0x12>
		}else if(modCANGeneralConfigHandle->emitStatusProtocol == canEmitProtocolVESC){
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d1e5      	bne.n	800348e <modCANTask+0x42>
			if(modDelayTick1ms(&modCANSendStatusVESCLastTisk,1000)) 
 80034c2:	480c      	ldr	r0, [pc, #48]	; (80034f4 <modCANTask+0xa8>)
 80034c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034c8:	f001 fb2a 	bl	8004b20 <modDelayTick1ms>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d0de      	beq.n	800348e <modCANTask+0x42>
				modCANSendStatusVESC();
 80034d0:	f7ff f966 	bl	80027a0 <modCANSendStatusVESC>
 80034d4:	e7db      	b.n	800348e <modCANTask+0x42>
 80034d6:	bf00      	nop
 80034d8:	20001530 	.word	0x20001530
 80034dc:	2000152c 	.word	0x2000152c
 80034e0:	20003d64 	.word	0x20003d64
 80034e4:	20003d68 	.word	0x20003d68
 80034e8:	20003d60 	.word	0x20003d60
 80034ec:	2000157c 	.word	0x2000157c
 80034f0:	20001528 	.word	0x20001528
 80034f4:	20003d6c 	.word	0x20003d6c

080034f8 <comm_can_get_status_msg_4_index>:

	return 0;
}

can_status_msg_4 *comm_can_get_status_msg_4_index(int index) {
	if (index < CAN_STATUS_MSGS_TO_STORE) {
 80034f8:	2809      	cmp	r0, #9
		return &stat_msgs_4[index];
 80034fa:	bfdd      	ittte	le
 80034fc:	4b02      	ldrle	r3, [pc, #8]	; (8003508 <comm_can_get_status_msg_4_index+0x10>)
 80034fe:	2218      	movle	r2, #24
 8003500:	fb02 3000 	mlale	r0, r2, r0, r3
	} else {
		return 0;
 8003504:	2000      	movgt	r0, #0
	}
}
 8003506:	4770      	bx	lr
 8003508:	20003f7c 	.word	0x20003f7c

0800350c <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800350c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003510:	4905      	ldr	r1, [pc, #20]	; (8003528 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003514:	68ca      	ldr	r2, [r1, #12]
 8003516:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800351a:	4313      	orrs	r3, r2
 800351c:	60cb      	str	r3, [r1, #12]
 800351e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <NVIC_SystemReset+0x16>
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00
 800352c:	05fa0004 	.word	0x05fa0004

08003530 <modCommandsInit>:
modConfigGeneralConfigStructTypedef *modCommandsToBeSendConfig;
modConfigGeneralConfigStructTypedef  modCommandsConfigStorage;
modPowerElectronicsPackStateTypedef *modCommandsGeneralState;

void modCommandsInit(modPowerElectronicsPackStateTypedef   *generalState,modConfigGeneralConfigStructTypedef *configPointer) {
	modCommandsGeneralConfig = configPointer;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <modCommandsInit+0x10>)
 8003532:	6019      	str	r1, [r3, #0]
	modCommandsGeneralState  = generalState;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <modCommandsInit+0x14>)
 8003536:	6018      	str	r0, [r3, #0]
	jumpBootloaderTrue = false;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <modCommandsInit+0x18>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
}
 800353e:	4770      	bx	lr
 8003540:	20004248 	.word	0x20004248
 8003544:	2000424c 	.word	0x2000424c
 8003548:	2000410c 	.word	0x2000410c

0800354c <modCommandsSetSendFunction>:

void modCommandsSetSendFunction(void(*func)(unsigned char *data, unsigned int len)) {
	modCommandsSendFunction = func;
 800354c:	4b01      	ldr	r3, [pc, #4]	; (8003554 <modCommandsSetSendFunction+0x8>)
 800354e:	6018      	str	r0, [r3, #0]
}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20004650 	.word	0x20004650

08003558 <modCommandsSendPacket>:

void modCommandsSendPacket(unsigned char *data, unsigned int len) {
	if (modCommandsSendFunction) {
 8003558:	4b02      	ldr	r3, [pc, #8]	; (8003564 <modCommandsSendPacket+0xc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b103      	cbz	r3, 8003560 <modCommandsSendPacket+0x8>
		modCommandsSendFunction(data, len);
 800355e:	4718      	bx	r3
	}
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20004650 	.word	0x20004650

08003568 <modCommandsPrintf>:
	
	if(modDelayTick1ms(&delayTick,1000) && jumpBootloaderTrue)
		modFlashJumpToBootloader();
}

void modCommandsPrintf(const char* format, ...) {
 8003568:	b40f      	push	{r0, r1, r2, r3}
 800356a:	b513      	push	{r0, r1, r4, lr}
	va_list arg;
	va_start (arg, format);
	int len;
	static char print_buffer[255];

	print_buffer[0] = COMM_PRINT;
 800356c:	4c0c      	ldr	r4, [pc, #48]	; (80035a0 <modCommandsPrintf+0x38>)
void modCommandsPrintf(const char* format, ...) {
 800356e:	ab04      	add	r3, sp, #16
	print_buffer[0] = COMM_PRINT;
 8003570:	4620      	mov	r0, r4
 8003572:	2115      	movs	r1, #21
void modCommandsPrintf(const char* format, ...) {
 8003574:	f853 2b04 	ldr.w	r2, [r3], #4
	print_buffer[0] = COMM_PRINT;
 8003578:	f800 1b01 	strb.w	r1, [r0], #1
	len = vsnprintf(print_buffer+1, 254, format, arg);
 800357c:	21fe      	movs	r1, #254	; 0xfe
	va_start (arg, format);
 800357e:	9301      	str	r3, [sp, #4]
	len = vsnprintf(print_buffer+1, 254, format, arg);
 8003580:	f00c fe54 	bl	801022c <vsniprintf>
	va_end (arg);

	if(len > 0) {
 8003584:	2800      	cmp	r0, #0
 8003586:	dd06      	ble.n	8003596 <modCommandsPrintf+0x2e>
		modCommandsSendPacket((unsigned char*)print_buffer, (len<254)? len+1: 255);
 8003588:	28fe      	cmp	r0, #254	; 0xfe
 800358a:	bfa8      	it	ge
 800358c:	20fe      	movge	r0, #254	; 0xfe
 800358e:	1c41      	adds	r1, r0, #1
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff ffe1 	bl	8003558 <modCommandsSendPacket>
	}
}
 8003596:	b002      	add	sp, #8
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	b004      	add	sp, #16
 800359e:	4770      	bx	lr
 80035a0:	20004658 	.word	0x20004658

080035a4 <modCommandsVESCToEBMS>:

void modCommandsVESCToEBMS(main_config_t *conf) {
	
	modCommandsGeneralConfig->CANID	= conf->controller_id;
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <modCommandsVESCToEBMS+0x64>)
 80035a6:	7802      	ldrb	r2, [r0, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	modCommandsGeneralConfig->canBusSpeed = conf->can_baud_rate;
 80035ae:	7842      	ldrb	r2, [r0, #1]
 80035b0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	modCommandsGeneralConfig->noOfCellsSeries = conf->cell_num;
 80035b4:	f8d0 2002 	ldr.w	r2, [r0, #2]
 80035b8:	701a      	strb	r2, [r3, #0]
	modCommandsGeneralConfig->noOfTempSensorPerModule = conf->temp_num;
 80035ba:	f8d0 2006 	ldr.w	r2, [r0, #6]
 80035be:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	modCommandsGeneralConfig->cellBalanceStart = conf->balance_start_voltage;
 80035c2:	f8d0 200a 	ldr.w	r2, [r0, #10]
 80035c6:	61da      	str	r2, [r3, #28]
	modCommandsGeneralConfig->maxMismatchThreshold = conf->balance_difference_threshold;
 80035c8:	f8d0 200e 	ldr.w	r2, [r0, #14]
 80035cc:	679a      	str	r2, [r3, #120]	; 0x78
	modCommandsGeneralConfig->cellSoftOverVoltage = conf->soft_overvoltage;
 80035ce:	f8d0 2012 	ldr.w	r2, [r0, #18]
 80035d2:	615a      	str	r2, [r3, #20]
	modCommandsGeneralConfig->cellLCSoftUnderVoltage = conf->soft_undervoltage;
 80035d4:	f8d0 2016 	ldr.w	r2, [r0, #22]
 80035d8:	611a      	str	r2, [r3, #16]
	modCommandsGeneralConfig->cellHardOverVoltage = conf->hard_overvoltage;
 80035da:	f8d0 201a 	ldr.w	r2, [r0, #26]
 80035de:	60da      	str	r2, [r3, #12]
	modCommandsGeneralConfig->cellHardUnderVoltage = conf->hard_undervoltage;
 80035e0:	f8d0 201e 	ldr.w	r2, [r0, #30]
 80035e4:	609a      	str	r2, [r3, #8]
	modCommandsGeneralConfig->allowedTempBattChargingMax = conf->t_charge_max;
 80035e6:	f8d0 2022 	ldr.w	r2, [r0, #34]	; 0x22
 80035ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	modCommandsGeneralConfig->allowedTempBattDischargingMax = conf->t_discharge_max;
 80035ee:	f8d0 2026 	ldr.w	r2, [r0, #38]	; 0x26
 80035f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	modCommandsGeneralConfig->notUsedCurrentThreshold = conf->not_used_current_threshold;
 80035f6:	f8d0 202a 	ldr.w	r2, [r0, #42]	; 0x2a
 80035fa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	modCommandsGeneralConfig->notUsedTimeout = conf->not_used_timeout;
 80035fe:	f8d0 202e 	ldr.w	r2, [r0, #46]	; 0x2e
 8003602:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

}
 8003606:	4770      	bx	lr
 8003608:	20004248 	.word	0x20004248

0800360c <modCommandsEBMSToVESC>:

void modCommandsEBMSToVESC(main_config_t *conf) {
	conf->controller_id = modCommandsGeneralConfig->CANID;
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <modCommandsEBMSToVESC+0x64>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
 8003614:	7002      	strb	r2, [r0, #0]
	conf->can_baud_rate = modCommandsGeneralConfig->canBusSpeed;
 8003616:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 800361a:	7042      	strb	r2, [r0, #1]
	conf->cell_num = modCommandsGeneralConfig->noOfCellsSeries;
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	f8c0 2002 	str.w	r2, [r0, #2]
	conf->temp_num = modCommandsGeneralConfig->noOfTempSensorPerModule;
 8003622:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003626:	f8c0 2006 	str.w	r2, [r0, #6]
	conf->balance_start_voltage = modCommandsGeneralConfig->cellBalanceStart;
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	f8c0 200a 	str.w	r2, [r0, #10]
	conf->balance_difference_threshold = modCommandsGeneralConfig->maxMismatchThreshold;
 8003630:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003632:	f8c0 200e 	str.w	r2, [r0, #14]
	conf->soft_overvoltage = modCommandsGeneralConfig->cellSoftOverVoltage;
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	f8c0 2012 	str.w	r2, [r0, #18]
	conf->soft_undervoltage = modCommandsGeneralConfig->cellLCSoftUnderVoltage;
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	f8c0 2016 	str.w	r2, [r0, #22]
	conf->hard_overvoltage = modCommandsGeneralConfig->cellHardOverVoltage;
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	f8c0 201a 	str.w	r2, [r0, #26]
	conf->hard_undervoltage = modCommandsGeneralConfig->cellHardUnderVoltage;
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	f8c0 201e 	str.w	r2, [r0, #30]
	conf->t_charge_max = modCommandsGeneralConfig->allowedTempBattChargingMax;
 800364e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003652:	f8c0 2022 	str.w	r2, [r0, #34]	; 0x22
	conf->t_discharge_max = modCommandsGeneralConfig->allowedTempBattDischargingMax;
 8003656:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800365a:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
	conf->not_used_current_threshold = modCommandsGeneralConfig->notUsedCurrentThreshold;
 800365e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
	conf->not_used_timeout = modCommandsGeneralConfig->notUsedTimeout;
 8003662:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
	conf->not_used_current_threshold = modCommandsGeneralConfig->notUsedCurrentThreshold;
 8003666:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
	conf->not_used_timeout = modCommandsGeneralConfig->notUsedTimeout;
 800366a:	f8c0 302e 	str.w	r3, [r0, #46]	; 0x2e
}
 800366e:	4770      	bx	lr
 8003670:	20004248 	.word	0x20004248

08003674 <modCommandsProcessPacket>:
void modCommandsProcessPacket(unsigned char *data, unsigned int len) {
 8003674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003678:	ed2d 8b02 	vpush	{d8}
 800367c:	4605      	mov	r5, r0
 800367e:	b082      	sub	sp, #8
	if (!len) {
 8003680:	460f      	mov	r7, r1
 8003682:	2900      	cmp	r1, #0
 8003684:	d04c      	beq.n	8003720 <modCommandsProcessPacket+0xac>
	packet_id = (COMM_PACKET_ID) data[0];
 8003686:	4604      	mov	r4, r0
	int32_t ind = 0;
 8003688:	2300      	movs	r3, #0
	packet_id = (COMM_PACKET_ID) data[0];
 800368a:	f814 6b01 	ldrb.w	r6, [r4], #1
	int32_t ind = 0;
 800368e:	9300      	str	r3, [sp, #0]
	switch (packet_id) {
 8003690:	2e65      	cmp	r6, #101	; 0x65
 8003692:	d835      	bhi.n	8003700 <modCommandsProcessPacket+0x8c>
 8003694:	2e5b      	cmp	r6, #91	; 0x5b
 8003696:	d81c      	bhi.n	80036d2 <modCommandsProcessPacket+0x5e>
 8003698:	2e03      	cmp	r6, #3
 800369a:	d92a      	bls.n	80036f2 <modCommandsProcessPacket+0x7e>
 800369c:	2e1d      	cmp	r6, #29
 800369e:	f000 8736 	beq.w	800450e <modCommandsProcessPacket+0xe9a>
 80036a2:	2e22      	cmp	r6, #34	; 0x22
 80036a4:	f000 8735 	beq.w	8004512 <modCommandsProcessPacket+0xe9e>
 80036a8:	2e14      	cmp	r6, #20
 80036aa:	d12e      	bne.n	800370a <modCommandsProcessPacket+0x96>
		  	data[len] = '\0';
 80036ac:	5443      	strb	r3, [r0, r1]
		  	modTerminalProcessString((char*)data);
 80036ae:	4620      	mov	r0, r4
 80036b0:	f004 fe00 	bl	80082b4 <modTerminalProcessString>
			break;
 80036b4:	e029      	b.n	800370a <modCommandsProcessPacket+0x96>
	switch (packet_id) {
 80036b6:	f1a6 0396 	sub.w	r3, r6, #150	; 0x96
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	d825      	bhi.n	800370a <modCommandsProcessPacket+0x96>
 80036be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036c2:	072f      	.short	0x072f
 80036c4:	0172013c 	.word	0x0172013c
 80036c8:	01e101ad 	.word	0x01e101ad
 80036cc:	04810481 	.word	0x04810481
 80036d0:	0079      	.short	0x0079
 80036d2:	f1a6 035c 	sub.w	r3, r6, #92	; 0x5c
 80036d6:	2b09      	cmp	r3, #9
 80036d8:	d817      	bhi.n	800370a <modCommandsProcessPacket+0x96>
 80036da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036de:	0843      	.short	0x0843
 80036e0:	08070807 	.word	0x08070807
 80036e4:	072a0829 	.word	0x072a0829
 80036e8:	001607f5 	.word	0x001607f5
 80036ec:	07fc0016 	.word	0x07fc0016
 80036f0:	0803      	.short	0x0803
 80036f2:	3e01      	subs	r6, #1
 80036f4:	2e02      	cmp	r6, #2
 80036f6:	d818      	bhi.n	800372a <modCommandsProcessPacket+0xb6>
 80036f8:	e8df f006 	tbb	[pc, r6]
 80036fc:	3b34      	.short	0x3b34
 80036fe:	4d          	.byte	0x4d
 80036ff:	00          	.byte	0x00
 8003700:	f106 036a 	add.w	r3, r6, #106	; 0x6a
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b07      	cmp	r3, #7
 8003708:	d9d5      	bls.n	80036b6 <modCommandsProcessPacket+0x42>
	if(modDelayTick1ms(&delayTick,1000) && jumpBootloaderTrue)
 800370a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800370e:	a801      	add	r0, sp, #4
 8003710:	f001 fa06 	bl	8004b20 <modDelayTick1ms>
 8003714:	b120      	cbz	r0, 8003720 <modCommandsProcessPacket+0xac>
 8003716:	4bba      	ldr	r3, [pc, #744]	; (8003a00 <modCommandsProcessPacket+0x38c>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b10b      	cbz	r3, 8003720 <modCommandsProcessPacket+0xac>
		modFlashJumpToBootloader();
 800371c:	f002 f862 	bl	80057e4 <modFlashJumpToBootloader>
}
 8003720:	b002      	add	sp, #8
 8003722:	ecbd 8b02 	vpop	{d8}
 8003726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			modCommandsSendBuffer[ind++] = COMM_FW_VERSION;
 800372a:	4cb6      	ldr	r4, [pc, #728]	; (8003a04 <modCommandsProcessPacket+0x390>)
			strcpy((char*)(modCommandsSendBuffer + ind), HW_NAME);
 800372c:	49b6      	ldr	r1, [pc, #728]	; (8003a08 <modCommandsProcessPacket+0x394>)
			modCommandsSendBuffer[ind++] = FW_VERSION_MAJOR;
 800372e:	2305      	movs	r3, #5
			modCommandsSendBuffer[ind++] = COMM_FW_VERSION;
 8003730:	2500      	movs	r5, #0
			modCommandsSendBuffer[ind++] = FW_VERSION_MAJOR;
 8003732:	7063      	strb	r3, [r4, #1]
			modCommandsSendBuffer[ind++] = FW_VERSION_MINOR;
 8003734:	2302      	movs	r3, #2
 8003736:	70a3      	strb	r3, [r4, #2]
			modCommandsSendBuffer[ind++] = COMM_FW_VERSION;
 8003738:	7025      	strb	r5, [r4, #0]
			strcpy((char*)(modCommandsSendBuffer + ind), HW_NAME);
 800373a:	1ce0      	adds	r0, r4, #3
 800373c:	f00c fce5 	bl	801010a <strcpy>
			memcpy(modCommandsSendBuffer + ind, STM32_UUID_8, 12);
 8003740:	4bb2      	ldr	r3, [pc, #712]	; (8003a0c <modCommandsProcessPacket+0x398>)
 8003742:	cb03      	ldmia	r3!, {r0, r1}
 8003744:	f8c4 1011 	str.w	r1, [r4, #17]
 8003748:	f8c4 000d 	str.w	r0, [r4, #13]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	f8c4 0015 	str.w	r0, [r4, #21]
			modCommandsSendBuffer[ind++] = HW_TYPE_VESC_BMS;
 8003752:	2301      	movs	r3, #1
			modCommandsSendBuffer[ind++] = 1; // One custom config
 8003754:	211d      	movs	r1, #29
			modCommandsSendBuffer[ind++] = 0;
 8003756:	7665      	strb	r5, [r4, #25]
			modCommandsSendBuffer[ind++] = FW_TEST_VERSION_NUMBER;
 8003758:	76a5      	strb	r5, [r4, #26]
			modCommandsSendBuffer[ind++] = HW_TYPE_VESC_BMS;
 800375a:	76e3      	strb	r3, [r4, #27]
			modCommandsSendBuffer[ind++] = 1; // One custom config
 800375c:	9100      	str	r1, [sp, #0]
 800375e:	7723      	strb	r3, [r4, #28]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8003760:	4620      	mov	r0, r4
 8003762:	e015      	b.n	8003790 <modCommandsProcessPacket+0x11c>
			jumpBootloaderTrue = true;
 8003764:	4ba6      	ldr	r3, [pc, #664]	; (8003a00 <modCommandsProcessPacket+0x38c>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
			delayTick = HAL_GetTick();
 800376a:	f007 fb27 	bl	800adbc <HAL_GetTick>
 800376e:	9001      	str	r0, [sp, #4]
			break;
 8003770:	e7cb      	b.n	800370a <modCommandsProcessPacket+0x96>
			flash_res = modFlashEraseNewAppData(libBufferGet_uint32(data, &ind));
 8003772:	4669      	mov	r1, sp
 8003774:	4620      	mov	r0, r4
 8003776:	f00a ffb6 	bl	800e6e6 <libBufferGet_uint32>
 800377a:	f001 ffcf 	bl	800571c <modFlashEraseNewAppData>
			modCommandsSendBuffer[ind++] = COMM_ERASE_NEW_APP;
 800377e:	4aa1      	ldr	r2, [pc, #644]	; (8003a04 <modCommandsProcessPacket+0x390>)
 8003780:	2102      	movs	r1, #2
 8003782:	7011      	strb	r1, [r2, #0]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? 1 : 0;
 8003784:	fab0 f380 	clz	r3, r0
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	9100      	str	r1, [sp, #0]
 800378c:	7053      	strb	r3, [r2, #1]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800378e:	4610      	mov	r0, r2
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8003790:	f7ff fee2 	bl	8003558 <modCommandsSendPacket>
		} break;
 8003794:	e7b9      	b.n	800370a <modCommandsProcessPacket+0x96>
			new_app_offset = libBufferGet_uint32(data, &ind);
 8003796:	4669      	mov	r1, sp
 8003798:	4620      	mov	r0, r4
 800379a:	f00a ffa4 	bl	800e6e6 <libBufferGet_uint32>
			flash_res = modFlashWriteNewAppData(new_app_offset, data + ind, len - ind);
 800379e:	9900      	ldr	r1, [sp, #0]
 80037a0:	43ca      	mvns	r2, r1
 80037a2:	443a      	add	r2, r7
 80037a4:	4421      	add	r1, r4
 80037a6:	f002 f807 	bl	80057b8 <modFlashWriteNewAppData>
			modCommandsSendBuffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 80037aa:	4a96      	ldr	r2, [pc, #600]	; (8003a04 <modCommandsProcessPacket+0x390>)
 80037ac:	2303      	movs	r3, #3
 80037ae:	7013      	strb	r3, [r2, #0]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? 1 : 0;
 80037b0:	2102      	movs	r1, #2
 80037b2:	e7e7      	b.n	8003784 <modCommandsProcessPacket+0x110>
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_VALUES;
 80037b4:	4c93      	ldr	r4, [pc, #588]	; (8003a04 <modCommandsProcessPacket+0x390>)
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packVoltage,			1e3, 		&ind);
 80037b6:	4d96      	ldr	r5, [pc, #600]	; (8003a10 <modCommandsProcessPacket+0x39c>)
 80037b8:	eddf 0a96 	vldr	s1, [pc, #600]	; 8003a14 <modCommandsProcessPacket+0x3a0>
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_VALUES;
 80037bc:	2301      	movs	r3, #1
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	239d      	movs	r3, #157	; 0x9d
 80037c2:	7023      	strb	r3, [r4, #0]
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packVoltage,			1e3, 		&ind);
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	4669      	mov	r1, sp
 80037c8:	ed93 0a07 	vldr	s0, [r3, #28]
 80037cc:	4620      	mov	r0, r4
 80037ce:	f00a ff1d 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packCurrent,			1e3,		&ind);
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	eddf 0a8f 	vldr	s1, [pc, #572]	; 8003a14 <modCommandsProcessPacket+0x3a0>
 80037d8:	ed93 0a08 	vldr	s0, [r3, #32]
 80037dc:	4669      	mov	r1, sp
 80037de:	4620      	mov	r0, r4
 80037e0:	f00a ff14 	bl	800e60c <libBufferAppend_float32>
		  	libBufferAppend_uint8(modCommandsSendBuffer, (uint8_t)round(modCommandsGeneralState->SoC), 				&ind);
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	6918      	ldr	r0, [r3, #16]
 80037e8:	f7fe f98e 	bl	8001b08 <__aeabi_f2d>
 80037ec:	ec41 0b10 	vmov	d0, r0, r1
 80037f0:	f00f fb2c 	bl	8012e4c <round>
 80037f4:	ec51 0b10 	vmov	r0, r1, d0
 80037f8:	f7fe f9de 	bl	8001bb8 <__aeabi_d2uiz>
 80037fc:	466a      	mov	r2, sp
 80037fe:	b2c1      	uxtb	r1, r0
 8003800:	4620      	mov	r0, r4
 8003802:	f00a fe93 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->cellVoltageHigh,		1e3,		&ind);
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	eddf 0a82 	vldr	s1, [pc, #520]	; 8003a14 <modCommandsProcessPacket+0x3a0>
 800380c:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 8003810:	4669      	mov	r1, sp
 8003812:	4620      	mov	r0, r4
 8003814:	f00a fefa 	bl	800e60c <libBufferAppend_float32>
		  	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->cellVoltageAverage,		1e3,		&ind);
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003a14 <modCommandsProcessPacket+0x3a0>
 800381e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003822:	4669      	mov	r1, sp
 8003824:	4620      	mov	r0, r4
 8003826:	f00a fef1 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->cellVoltageLow,			1e3,		&ind);
 800382a:	682b      	ldr	r3, [r5, #0]
 800382c:	eddf 0a79 	vldr	s1, [pc, #484]	; 8003a14 <modCommandsProcessPacket+0x3a0>
 8003830:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 8003834:	4669      	mov	r1, sp
 8003836:	4620      	mov	r0, r4
 8003838:	f00a fee8 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->cellVoltageMisMatch,		1e3,		&ind);
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	eddf 0a75 	vldr	s1, [pc, #468]	; 8003a14 <modCommandsProcessPacket+0x3a0>
 8003842:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8003846:	4669      	mov	r1, sp
 8003848:	4620      	mov	r0, r4
 800384a:	f00a fedf 	bl	800e60c <libBufferAppend_float32>
		  	libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->loCurrentLoadVoltage,		1e1,		&ind);
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	4669      	mov	r1, sp
 8003852:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
 8003856:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800385a:	4620      	mov	r0, r4
 800385c:	f00a fecc 	bl	800e5f8 <libBufferAppend_float16>
		  	libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->loCurrentLoadCurrent,		1e1,		&ind);
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	4669      	mov	r1, sp
 8003864:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 8003868:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800386c:	4620      	mov	r0, r4
 800386e:	f00a fec3 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->chargerVoltage,			1e1,		&ind);
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	4669      	mov	r1, sp
 8003876:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 800387a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800387e:	4620      	mov	r0, r4
 8003880:	f00a feba 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBatteryHigh,		1e1,		&ind);
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	4669      	mov	r1, sp
 8003888:	ed93 0a20 	vldr	s0, [r3, #128]	; 0x80
 800388c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003890:	4620      	mov	r0, r4
 8003892:	f00a feb1 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBatteryAverage,		1e1,		&ind);
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	4669      	mov	r1, sp
 800389a:	ed93 0a22 	vldr	s0, [r3, #136]	; 0x88
 800389e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038a2:	4620      	mov	r0, r4
 80038a4:	f00a fea8 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBatteryLow,			1e1,		&ind);
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	4669      	mov	r1, sp
 80038ac:	ed93 0a21 	vldr	s0, [r3, #132]	; 0x84
 80038b0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038b4:	4620      	mov	r0, r4
 80038b6:	f00a fe9f 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBMSHigh,			1e1,		&ind);
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	4669      	mov	r1, sp
 80038be:	ed93 0a23 	vldr	s0, [r3, #140]	; 0x8c
 80038c2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f00a fe96 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBMSAverage,			1e1,		&ind);
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	4669      	mov	r1, sp
 80038d0:	ed93 0a25 	vldr	s0, [r3, #148]	; 0x94
 80038d4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038d8:	4620      	mov	r0, r4
 80038da:	f00a fe8d 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBMSLow,			1e1,		&ind);
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	4669      	mov	r1, sp
 80038e2:	ed93 0a24 	vldr	s0, [r3, #144]	; 0x90
 80038e6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038ea:	4620      	mov	r0, r4
 80038ec:	f00a fe84 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->humidity,			1e1,		&ind);
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038f6:	ed93 0a26 	vldr	s0, [r3, #152]	; 0x98
 80038fa:	4669      	mov	r1, sp
 80038fc:	4620      	mov	r0, r4
 80038fe:	f00a fe7b 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_uint8(modCommandsSendBuffer, (uint8_t)modCommandsGeneralState->operationalState,			&ind);
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	466a      	mov	r2, sp
 8003906:	7e19      	ldrb	r1, [r3, #24]
 8003908:	4620      	mov	r0, r4
 800390a:	f00a fe0f 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(modCommandsSendBuffer, (uint8_t)modCommandsGeneralState->chargeBalanceActive,			&ind);
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	466a      	mov	r2, sp
 8003912:	f893 10a6 	ldrb.w	r1, [r3, #166]	; 0xa6
 8003916:	4620      	mov	r0, r4
 8003918:	f00a fe08 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(modCommandsSendBuffer, (uint8_t)modCommandsGeneralState->faultState,				&ind);
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	466a      	mov	r2, sp
 8003920:	7e59      	ldrb	r1, [r3, #25]
 8003922:	4620      	mov	r0, r4
 8003924:	f00a fe02 	bl	800e52c <libBufferAppend_uint8>
			modCommandsSendBuffer[ind++] = modCommandsGeneralConfig->CANID;
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <modCommandsProcessPacket+0x3a4>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	9b00      	ldr	r3, [sp, #0]
 800392e:	f892 20d1 	ldrb.w	r2, [r2, #209]	; 0xd1
 8003932:	54e2      	strb	r2, [r4, r3]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	9100      	str	r1, [sp, #0]
 8003938:	e712      	b.n	8003760 <modCommandsProcessPacket+0xec>
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_CELLS;
 800393a:	4c32      	ldr	r4, [pc, #200]	; (8003a04 <modCommandsProcessPacket+0x390>)
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules, &ind);                
 800393c:	4d36      	ldr	r5, [pc, #216]	; (8003a18 <modCommandsProcessPacket+0x3a4>)
				if(modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellBleedActive)
 800393e:	4e34      	ldr	r6, [pc, #208]	; (8003a10 <modCommandsProcessPacket+0x39c>)
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage, 1e3, &ind);          
 8003940:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8003a14 <modCommandsProcessPacket+0x3a0>
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_CELLS;
 8003944:	2301      	movs	r3, #1
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2397      	movs	r3, #151	; 0x97
 800394a:	7023      	strb	r3, [r4, #0]
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules, &ind);                
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	7819      	ldrb	r1, [r3, #0]
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	fb11 f103 	smulbb	r1, r1, r3
 8003956:	466a      	mov	r2, sp
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	4620      	mov	r0, r4
 800395c:	f00a fde6 	bl	800e52c <libBufferAppend_uint8>
		  	for(cellPointer = 0; cellPointer < modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules; cellPointer++){
 8003960:	2700      	movs	r7, #0
 8003962:	682a      	ldr	r2, [r5, #0]
 8003964:	7811      	ldrb	r1, [r2, #0]
 8003966:	78d3      	ldrb	r3, [r2, #3]
 8003968:	b2f8      	uxtb	r0, r7
 800396a:	fb11 f103 	smulbb	r1, r1, r3
 800396e:	4288      	cmp	r0, r1
 8003970:	db07      	blt.n	8003982 <modCommandsProcessPacket+0x30e>
			modCommandsSendBuffer[ind++] = modCommandsGeneralConfig->CANID;
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	1c59      	adds	r1, r3, #1
 8003976:	9100      	str	r1, [sp, #0]
 8003978:	f892 20d1 	ldrb.w	r2, [r2, #209]	; 0xd1
 800397c:	54e2      	strb	r2, [r4, r3]
		  	modCommandsSendPacket(modCommandsSendBuffer, ind);
 800397e:	4821      	ldr	r0, [pc, #132]	; (8003a04 <modCommandsProcessPacket+0x390>)
 8003980:	e706      	b.n	8003790 <modCommandsProcessPacket+0x11c>
				if(modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellBleedActive)
 8003982:	6833      	ldr	r3, [r6, #0]
 8003984:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage*-1.0f, 1e3, &ind);    
 8003988:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
				if(modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellBleedActive)
 800398c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage*-1.0f, 1e3, &ind);    
 8003990:	4669      	mov	r1, sp
 8003992:	eef0 0a48 	vmov.f32	s1, s16
				if(modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellBleedActive)
 8003996:	b10b      	cbz	r3, 800399c <modCommandsProcessPacket+0x328>
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage*-1.0f, 1e3, &ind);    
 8003998:	eeb1 0a40 	vneg.f32	s0, s0
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage, 1e3, &ind);          
 800399c:	4620      	mov	r0, r4
 800399e:	f00a fe2b 	bl	800e5f8 <libBufferAppend_float16>
		  	for(cellPointer = 0; cellPointer < modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules; cellPointer++){
 80039a2:	3701      	adds	r7, #1
 80039a4:	e7dd      	b.n	8003962 <modCommandsProcessPacket+0x2ee>
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_AUX;
 80039a6:	4c17      	ldr	r4, [pc, #92]	; (8003a04 <modCommandsProcessPacket+0x390>)
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule, &ind);                
 80039a8:	4e1b      	ldr	r6, [pc, #108]	; (8003a18 <modCommandsProcessPacket+0x3a4>)
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e1, &ind);          
 80039aa:	4f19      	ldr	r7, [pc, #100]	; (8003a10 <modCommandsProcessPacket+0x39c>)
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_AUX;
 80039ac:	2301      	movs	r3, #1
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2398      	movs	r3, #152	; 0x98
 80039b2:	7023      	strb	r3, [r4, #0]
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule, &ind);                
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
 80039ba:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80039be:	fb11 f103 	smulbb	r1, r1, r3
 80039c2:	466a      	mov	r2, sp
 80039c4:	b2c9      	uxtb	r1, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	f00a fdb0 	bl	800e52c <libBufferAppend_uint8>
		  	for(auxPointer = 0; auxPointer < modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule; auxPointer++){
 80039cc:	2500      	movs	r5, #0
 80039ce:	6832      	ldr	r2, [r6, #0]
 80039d0:	f892 10f0 	ldrb.w	r1, [r2, #240]	; 0xf0
 80039d4:	f892 00e4 	ldrb.w	r0, [r2, #228]	; 0xe4
 80039d8:	b2eb      	uxtb	r3, r5
 80039da:	fb11 f100 	smulbb	r1, r1, r0
 80039de:	428b      	cmp	r3, r1
 80039e0:	f105 0501 	add.w	r5, r5, #1
 80039e4:	dac5      	bge.n	8003972 <modCommandsProcessPacket+0x2fe>
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e1, &ind);          
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	33ca      	adds	r3, #202	; 0xca
 80039ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039ee:	ed93 0a00 	vldr	s0, [r3]
 80039f2:	4669      	mov	r1, sp
 80039f4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80039f8:	4620      	mov	r0, r4
 80039fa:	f00a fdfd 	bl	800e5f8 <libBufferAppend_float16>
		  	for(auxPointer = 0; auxPointer < modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule; auxPointer++){
 80039fe:	e7e6      	b.n	80039ce <modCommandsProcessPacket+0x35a>
 8003a00:	2000410c 	.word	0x2000410c
 8003a04:	20004250 	.word	0x20004250
 8003a08:	080133e4 	.word	0x080133e4
 8003a0c:	1ffff7ac 	.word	0x1ffff7ac
 8003a10:	2000424c 	.word	0x2000424c
 8003a14:	447a0000 	.word	0x447a0000
 8003a18:	20004248 	.word	0x20004248
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_EXP_TEMP;
 8003a1c:	4c16      	ldr	r4, [pc, #88]	; (8003a78 <modCommandsProcessPacket+0x404>)
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->noOfExpansionBoard*modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard, &ind);
 8003a1e:	4e17      	ldr	r6, [pc, #92]	; (8003a7c <modCommandsProcessPacket+0x408>)
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->expVoltagesIndividual[expPointer].expVoltage, 1e1, &ind);
 8003a20:	4f17      	ldr	r7, [pc, #92]	; (8003a80 <modCommandsProcessPacket+0x40c>)
			modCommandsSendBuffer[ind++] = COMM_EBMS_GET_EXP_TEMP;
 8003a22:	2301      	movs	r3, #1
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2399      	movs	r3, #153	; 0x99
 8003a28:	7023      	strb	r3, [r4, #0]
		  	libBufferAppend_uint8(modCommandsSendBuffer, modCommandsGeneralConfig->noOfExpansionBoard*modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard, &ind);
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	f893 10e5 	ldrb.w	r1, [r3, #229]	; 0xe5
 8003a30:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8003a34:	fb11 f103 	smulbb	r1, r1, r3
 8003a38:	466a      	mov	r2, sp
 8003a3a:	b2c9      	uxtb	r1, r1
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f00a fd75 	bl	800e52c <libBufferAppend_uint8>
		  	for(expPointer = 0; expPointer < modCommandsGeneralConfig->noOfExpansionBoard*modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard; expPointer++){
 8003a42:	2500      	movs	r5, #0
 8003a44:	6832      	ldr	r2, [r6, #0]
 8003a46:	f892 10e5 	ldrb.w	r1, [r2, #229]	; 0xe5
 8003a4a:	f892 00e6 	ldrb.w	r0, [r2, #230]	; 0xe6
 8003a4e:	b2eb      	uxtb	r3, r5
 8003a50:	fb11 f100 	smulbb	r1, r1, r0
 8003a54:	428b      	cmp	r3, r1
 8003a56:	f105 0501 	add.w	r5, r5, #1
 8003a5a:	da8a      	bge.n	8003972 <modCommandsProcessPacket+0x2fe>
					libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->expVoltagesIndividual[expPointer].expVoltage, 1e1, &ind);
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 8003a62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a66:	ed93 0a00 	vldr	s0, [r3]
 8003a6a:	4669      	mov	r1, sp
 8003a6c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003a70:	4620      	mov	r0, r4
 8003a72:	f00a fdc1 	bl	800e5f8 <libBufferAppend_float16>
		  	for(expPointer = 0; expPointer < modCommandsGeneralConfig->noOfExpansionBoard*modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard; expPointer++){
 8003a76:	e7e5      	b.n	8003a44 <modCommandsProcessPacket+0x3d0>
 8003a78:	20004250 	.word	0x20004250
 8003a7c:	20004248 	.word	0x20004248
 8003a80:	2000424c 	.word	0x2000424c
			modCommandsGeneralConfig->noOfCellsSeries				= libBufferGet_uint8(data,&ind);		// 1
 8003a84:	4ddb      	ldr	r5, [pc, #876]	; (8003df4 <modCommandsProcessPacket+0x780>)
 8003a86:	4669      	mov	r1, sp
 8003a88:	4620      	mov	r0, r4
 8003a8a:	682e      	ldr	r6, [r5, #0]
 8003a8c:	f00a fe02 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->noOfCellsParallel				= libBufferGet_uint8(data,&ind);		// 1
 8003a90:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfCellsSeries				= libBufferGet_uint8(data,&ind);		// 1
 8003a92:	7030      	strb	r0, [r6, #0]
			modCommandsGeneralConfig->noOfCellsParallel				= libBufferGet_uint8(data,&ind);		// 1
 8003a94:	4620      	mov	r0, r4
 8003a96:	682e      	ldr	r6, [r5, #0]
 8003a98:	f00a fdfc 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->noOfParallelModules				= libBufferGet_uint8(data,&ind);		// 1
 8003a9c:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfCellsParallel				= libBufferGet_uint8(data,&ind);		// 1
 8003a9e:	7070      	strb	r0, [r6, #1]
			modCommandsGeneralConfig->noOfParallelModules				= libBufferGet_uint8(data,&ind);		// 1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	682e      	ldr	r6, [r5, #0]
 8003aa4:	f00a fdf6 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->batteryCapacity				= libBufferGet_float32_auto(data,&ind);		// 4
 8003aa8:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfParallelModules				= libBufferGet_uint8(data,&ind);		// 1
 8003aaa:	70f0      	strb	r0, [r6, #3]
			modCommandsGeneralConfig->batteryCapacity				= libBufferGet_float32_auto(data,&ind);		// 4
 8003aac:	4620      	mov	r0, r4
 8003aae:	682e      	ldr	r6, [r5, #0]
 8003ab0:	f00a fe34 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellHardUnderVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ab4:	4669      	mov	r1, sp
 8003ab6:	4620      	mov	r0, r4
			modCommandsGeneralConfig->batteryCapacity				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ab8:	ed86 0a01 	vstr	s0, [r6, #4]
			modCommandsGeneralConfig->cellHardUnderVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003abc:	682e      	ldr	r6, [r5, #0]
 8003abe:	f00a fe2d 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellHardOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ac2:	4669      	mov	r1, sp
 8003ac4:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellHardUnderVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ac6:	ed86 0a02 	vstr	s0, [r6, #8]
			modCommandsGeneralConfig->cellHardOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003aca:	682e      	ldr	r6, [r5, #0]
 8003acc:	f00a fe26 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellLCSoftUnderVoltage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ad0:	4669      	mov	r1, sp
 8003ad2:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellHardOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ad4:	ed86 0a03 	vstr	s0, [r6, #12]
			modCommandsGeneralConfig->cellLCSoftUnderVoltage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ad8:	682e      	ldr	r6, [r5, #0]
 8003ada:	f00a fe1f 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellSoftOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ade:	4669      	mov	r1, sp
 8003ae0:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellLCSoftUnderVoltage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ae2:	ed86 0a04 	vstr	s0, [r6, #16]
			modCommandsGeneralConfig->cellSoftOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ae6:	682e      	ldr	r6, [r5, #0]
 8003ae8:	f00a fe18 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellBalanceDifferenceThreshold		= libBufferGet_float32_auto(data,&ind);		// 4
 8003aec:	4669      	mov	r1, sp
 8003aee:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellSoftOverVoltage				= libBufferGet_float32_auto(data,&ind);		// 4
 8003af0:	ed86 0a05 	vstr	s0, [r6, #20]
			modCommandsGeneralConfig->cellBalanceDifferenceThreshold		= libBufferGet_float32_auto(data,&ind);		// 4
 8003af4:	682e      	ldr	r6, [r5, #0]
 8003af6:	f00a fe11 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellBalanceStart				= libBufferGet_float32_auto(data,&ind);		// 4
 8003afa:	4669      	mov	r1, sp
 8003afc:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellBalanceDifferenceThreshold		= libBufferGet_float32_auto(data,&ind);		// 4
 8003afe:	ed86 0a06 	vstr	s0, [r6, #24]
			modCommandsGeneralConfig->cellBalanceStart				= libBufferGet_float32_auto(data,&ind);		// 4
 8003b02:	682e      	ldr	r6, [r5, #0]
 8003b04:	f00a fe0a 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellBalanceAllTime				= libBufferGet_uint8(data,&ind);		// 1
 8003b08:	4669      	mov	r1, sp
			modCommandsGeneralConfig->cellBalanceStart				= libBufferGet_float32_auto(data,&ind);		// 4
 8003b0a:	ed86 0a07 	vstr	s0, [r6, #28]
			modCommandsGeneralConfig->cellBalanceAllTime				= libBufferGet_uint8(data,&ind);		// 1
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f00a fdc0 	bl	800e694 <libBufferGet_uint8>
 8003b14:	682e      	ldr	r6, [r5, #0]
 8003b16:	3800      	subs	r0, #0
 8003b18:	bf18      	it	ne
 8003b1a:	2001      	movne	r0, #1
 8003b1c:	f886 0020 	strb.w	r0, [r6, #32]
			modCommandsGeneralConfig->cellThrottleUpperStart			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b20:	4669      	mov	r1, sp
 8003b22:	4620      	mov	r0, r4
 8003b24:	f00a fdfa 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellThrottleLowerStart			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b28:	4669      	mov	r1, sp
 8003b2a:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellThrottleUpperStart			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b2c:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
			modCommandsGeneralConfig->cellThrottleLowerStart			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b30:	682e      	ldr	r6, [r5, #0]
 8003b32:	f00a fdf3 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellThrottleUpperMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b36:	4669      	mov	r1, sp
 8003b38:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellThrottleLowerStart			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b3a:	ed86 0a0a 	vstr	s0, [r6, #40]	; 0x28
			modCommandsGeneralConfig->cellThrottleUpperMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b3e:	682e      	ldr	r6, [r5, #0]
 8003b40:	f00a fdec 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->cellThrottleLowerMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b44:	4669      	mov	r1, sp
 8003b46:	4620      	mov	r0, r4
			modCommandsGeneralConfig->cellThrottleUpperMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b48:	ed86 0a0b 	vstr	s0, [r6, #44]	; 0x2c
			modCommandsGeneralConfig->cellThrottleLowerMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b4c:	682e      	ldr	r6, [r5, #0]
 8003b4e:	f00a fde5 	bl	800e71c <libBufferGet_float32_auto>
		  	modCommandsGeneralConfig->packVoltageDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b52:	4669      	mov	r1, sp
			modCommandsGeneralConfig->cellThrottleLowerMargin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003b54:	ed86 0a0c 	vstr	s0, [r6, #48]	; 0x30
		  	modCommandsGeneralConfig->packVoltageDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	682e      	ldr	r6, [r5, #0]
 8003b5c:	f00a fd9a 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->packCurrentDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b60:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->packVoltageDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b62:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
		  	modCommandsGeneralConfig->packCurrentDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b66:	4620      	mov	r0, r4
 8003b68:	682e      	ldr	r6, [r5, #0]
 8003b6a:	f00a fd93 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->buzzerSignalSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b6e:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->packCurrentDataSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b70:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
		  	modCommandsGeneralConfig->buzzerSignalSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b74:	4620      	mov	r0, r4
 8003b76:	682e      	ldr	r6, [r5, #0]
 8003b78:	f00a fd8c 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->buzzerSignalPersistant			= libBufferGet_uint8(data,&ind);		// 1
 8003b7c:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->buzzerSignalSource				= libBufferGet_uint8(data,&ind);		// 1
 8003b7e:	f886 0036 	strb.w	r0, [r6, #54]	; 0x36
		  	modCommandsGeneralConfig->buzzerSignalPersistant			= libBufferGet_uint8(data,&ind);		// 1
 8003b82:	4620      	mov	r0, r4
 8003b84:	682e      	ldr	r6, [r5, #0]
 8003b86:	f00a fd85 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->shuntLCFactor					= libBufferGet_float32_auto(data,&ind);		// 4
 8003b8a:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->buzzerSignalPersistant			= libBufferGet_uint8(data,&ind);		// 1
 8003b8c:	f886 0037 	strb.w	r0, [r6, #55]	; 0x37
			modCommandsGeneralConfig->shuntLCFactor					= libBufferGet_float32_auto(data,&ind);		// 4
 8003b90:	4620      	mov	r0, r4
 8003b92:	682e      	ldr	r6, [r5, #0]
 8003b94:	f00a fdc2 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->voltageLCFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003b98:	4669      	mov	r1, sp
 8003b9a:	4620      	mov	r0, r4
			modCommandsGeneralConfig->shuntLCFactor					= libBufferGet_float32_auto(data,&ind);		// 4
 8003b9c:	ed86 0a0e 	vstr	s0, [r6, #56]	; 0x38
			modCommandsGeneralConfig->voltageLCFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ba0:	682e      	ldr	r6, [r5, #0]
 8003ba2:	f00a fdbb 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->voltageLCOffset				= libBufferGet_int16(data,&ind);		// 2
 8003ba6:	4669      	mov	r1, sp
			modCommandsGeneralConfig->voltageLCFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003ba8:	ed86 0a0f 	vstr	s0, [r6, #60]	; 0x3c
			modCommandsGeneralConfig->voltageLCOffset				= libBufferGet_int16(data,&ind);		// 2
 8003bac:	4620      	mov	r0, r4
 8003bae:	682e      	ldr	r6, [r5, #0]
 8003bb0:	f00a fd75 	bl	800e69e <libBufferGet_int16>
			modCommandsGeneralConfig->loadVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bb4:	4669      	mov	r1, sp
			modCommandsGeneralConfig->voltageLCOffset				= libBufferGet_int16(data,&ind);		// 2
 8003bb6:	f8a6 0040 	strh.w	r0, [r6, #64]	; 0x40
			modCommandsGeneralConfig->loadVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bba:	4620      	mov	r0, r4
 8003bbc:	682e      	ldr	r6, [r5, #0]
 8003bbe:	f00a fdad 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->loadVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bc2:	4669      	mov	r1, sp
 8003bc4:	4620      	mov	r0, r4
			modCommandsGeneralConfig->loadVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bc6:	ed86 0a11 	vstr	s0, [r6, #68]	; 0x44
			modCommandsGeneralConfig->loadVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bca:	682e      	ldr	r6, [r5, #0]
 8003bcc:	f00a fda6 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->chargerVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bd0:	4669      	mov	r1, sp
 8003bd2:	4620      	mov	r0, r4
			modCommandsGeneralConfig->loadVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bd4:	ed86 0a12 	vstr	s0, [r6, #72]	; 0x48
			modCommandsGeneralConfig->chargerVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bd8:	682e      	ldr	r6, [r5, #0]
 8003bda:	f00a fd9f 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->chargerVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bde:	4669      	mov	r1, sp
 8003be0:	4620      	mov	r0, r4
			modCommandsGeneralConfig->chargerVoltageFactor				= libBufferGet_float32_auto(data,&ind);		// 4
 8003be2:	ed86 0a13 	vstr	s0, [r6, #76]	; 0x4c
			modCommandsGeneralConfig->chargerVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003be6:	682e      	ldr	r6, [r5, #0]
 8003be8:	f00a fd98 	bl	800e71c <libBufferGet_float32_auto>
		  	modCommandsGeneralConfig->throttleChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003bec:	4669      	mov	r1, sp
			modCommandsGeneralConfig->chargerVoltageOffset				= libBufferGet_float32_auto(data,&ind);		// 4
 8003bee:	ed86 0a14 	vstr	s0, [r6, #80]	; 0x50
		  	modCommandsGeneralConfig->throttleChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	682e      	ldr	r6, [r5, #0]
 8003bf6:	f00a fd4d 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->throttleDisChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003bfa:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->throttleChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003bfc:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
		  	modCommandsGeneralConfig->throttleDisChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003c00:	4620      	mov	r0, r4
 8003c02:	682e      	ldr	r6, [r5, #0]
 8003c04:	f00a fd46 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->cellBalanceUpdateInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003c08:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->throttleDisChargeIncreaseRate			= libBufferGet_uint8(data,&ind);		// 1
 8003c0a:	f886 0055 	strb.w	r0, [r6, #85]	; 0x55
		  	modCommandsGeneralConfig->cellBalanceUpdateInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003c0e:	4620      	mov	r0, r4
 8003c10:	682e      	ldr	r6, [r5, #0]
 8003c12:	f00a fd68 	bl	800e6e6 <libBufferGet_uint32>
		  	modCommandsGeneralConfig->maxSimultaneousDischargingCells		= libBufferGet_uint8(data,&ind);		// 1
 8003c16:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->cellBalanceUpdateInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003c18:	65b0      	str	r0, [r6, #88]	; 0x58
		  	modCommandsGeneralConfig->maxSimultaneousDischargingCells		= libBufferGet_uint8(data,&ind);		// 1
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	682e      	ldr	r6, [r5, #0]
 8003c1e:	f00a fd39 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->timeoutDischargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c22:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->maxSimultaneousDischargingCells		= libBufferGet_uint8(data,&ind);		// 1
 8003c24:	f886 005c 	strb.w	r0, [r6, #92]	; 0x5c
		  	modCommandsGeneralConfig->timeoutDischargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c28:	4620      	mov	r0, r4
 8003c2a:	682e      	ldr	r6, [r5, #0]
 8003c2c:	f00a fd5b 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->hysteresisDischarge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c30:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->timeoutDischargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c32:	6630      	str	r0, [r6, #96]	; 0x60
			modCommandsGeneralConfig->hysteresisDischarge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c34:	4620      	mov	r0, r4
 8003c36:	682e      	ldr	r6, [r5, #0]
 8003c38:	f00a fd70 	bl	800e71c <libBufferGet_float32_auto>
		  	modCommandsGeneralConfig->timeoutChargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c3c:	4669      	mov	r1, sp
			modCommandsGeneralConfig->hysteresisDischarge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c3e:	ed86 0a19 	vstr	s0, [r6, #100]	; 0x64
		  	modCommandsGeneralConfig->timeoutChargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c42:	4620      	mov	r0, r4
 8003c44:	682e      	ldr	r6, [r5, #0]
 8003c46:	f00a fd4e 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->hysteresisCharge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c4a:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->timeoutChargeRetry				= libBufferGet_uint32(data,&ind);		// 4
 8003c4c:	66b0      	str	r0, [r6, #104]	; 0x68
			modCommandsGeneralConfig->hysteresisCharge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c4e:	4620      	mov	r0, r4
 8003c50:	682e      	ldr	r6, [r5, #0]
 8003c52:	f00a fd63 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->timeoutChargeCompleted			= libBufferGet_uint32(data,&ind);		// 4
 8003c56:	4669      	mov	r1, sp
			modCommandsGeneralConfig->hysteresisCharge				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c58:	ed86 0a1b 	vstr	s0, [r6, #108]	; 0x6c
			modCommandsGeneralConfig->timeoutChargeCompleted			= libBufferGet_uint32(data,&ind);		// 4
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	682e      	ldr	r6, [r5, #0]
 8003c60:	f00a fd41 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->timeoutChargingCompletedMinimalMismatch	= libBufferGet_uint32(data,&ind);		// 4
 8003c64:	4669      	mov	r1, sp
			modCommandsGeneralConfig->timeoutChargeCompleted			= libBufferGet_uint32(data,&ind);		// 4
 8003c66:	6730      	str	r0, [r6, #112]	; 0x70
			modCommandsGeneralConfig->timeoutChargingCompletedMinimalMismatch	= libBufferGet_uint32(data,&ind);		// 4
 8003c68:	4620      	mov	r0, r4
 8003c6a:	682e      	ldr	r6, [r5, #0]
 8003c6c:	f00a fd3b 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->maxMismatchThreshold				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c70:	4669      	mov	r1, sp
			modCommandsGeneralConfig->timeoutChargingCompletedMinimalMismatch	= libBufferGet_uint32(data,&ind);		// 4
 8003c72:	6770      	str	r0, [r6, #116]	; 0x74
			modCommandsGeneralConfig->maxMismatchThreshold				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c74:	4620      	mov	r0, r4
 8003c76:	682e      	ldr	r6, [r5, #0]
 8003c78:	f00a fd50 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->chargerEnabledThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003c7c:	4669      	mov	r1, sp
 8003c7e:	4620      	mov	r0, r4
			modCommandsGeneralConfig->maxMismatchThreshold				= libBufferGet_float32_auto(data,&ind);		// 4
 8003c80:	ed86 0a1e 	vstr	s0, [r6, #120]	; 0x78
			modCommandsGeneralConfig->chargerEnabledThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003c84:	682e      	ldr	r6, [r5, #0]
 8003c86:	f00a fd49 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->timeoutChargerDisconnected			= libBufferGet_uint32(data,&ind);		// 4
 8003c8a:	4669      	mov	r1, sp
			modCommandsGeneralConfig->chargerEnabledThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003c8c:	ed86 0a1f 	vstr	s0, [r6, #124]	; 0x7c
			modCommandsGeneralConfig->timeoutChargerDisconnected			= libBufferGet_uint32(data,&ind);		// 4
 8003c90:	4620      	mov	r0, r4
 8003c92:	682e      	ldr	r6, [r5, #0]
 8003c94:	f00a fd27 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->minimalPrechargePercentage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003c98:	4669      	mov	r1, sp
			modCommandsGeneralConfig->timeoutChargerDisconnected			= libBufferGet_uint32(data,&ind);		// 4
 8003c9a:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
			modCommandsGeneralConfig->minimalPrechargePercentage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	682e      	ldr	r6, [r5, #0]
 8003ca2:	f00a fd3b 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->timeoutLCPreCharge				= libBufferGet_uint32(data,&ind);		// 4
 8003ca6:	4669      	mov	r1, sp
			modCommandsGeneralConfig->minimalPrechargePercentage			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ca8:	ed86 0a21 	vstr	s0, [r6, #132]	; 0x84
			modCommandsGeneralConfig->timeoutLCPreCharge				= libBufferGet_uint32(data,&ind);		// 4
 8003cac:	4620      	mov	r0, r4
 8003cae:	682e      	ldr	r6, [r5, #0]
 8003cb0:	f00a fd19 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->maxAllowedCurrent				= libBufferGet_float32_auto(data,&ind);		// 4
 8003cb4:	4669      	mov	r1, sp
			modCommandsGeneralConfig->timeoutLCPreCharge				= libBufferGet_uint32(data,&ind);		// 4
 8003cb6:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
			modCommandsGeneralConfig->maxAllowedCurrent				= libBufferGet_float32_auto(data,&ind);		// 4
 8003cba:	4620      	mov	r0, r4
 8003cbc:	682e      	ldr	r6, [r5, #0]
 8003cbe:	f00a fd2d 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattDischargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cc2:	4669      	mov	r1, sp
 8003cc4:	4620      	mov	r0, r4
			modCommandsGeneralConfig->maxAllowedCurrent				= libBufferGet_float32_auto(data,&ind);		// 4
 8003cc6:	ed86 0a23 	vstr	s0, [r6, #140]	; 0x8c
			modCommandsGeneralConfig->allowedTempBattDischargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cca:	682e      	ldr	r6, [r5, #0]
 8003ccc:	f00a fd26 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattDischargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cd0:	4669      	mov	r1, sp
 8003cd2:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattDischargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cd4:	ed86 0a24 	vstr	s0, [r6, #144]	; 0x90
			modCommandsGeneralConfig->allowedTempBattDischargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cd8:	682e      	ldr	r6, [r5, #0]
 8003cda:	f00a fd1f 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattChargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cde:	4669      	mov	r1, sp
 8003ce0:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattDischargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ce2:	ed86 0a25 	vstr	s0, [r6, #148]	; 0x94
			modCommandsGeneralConfig->allowedTempBattChargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003ce6:	682e      	ldr	r6, [r5, #0]
 8003ce8:	f00a fd18 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattChargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cec:	4669      	mov	r1, sp
 8003cee:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattChargingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cf0:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
			modCommandsGeneralConfig->allowedTempBattChargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cf4:	682e      	ldr	r6, [r5, #0]
 8003cf6:	f00a fd11 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattCoolingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cfa:	4669      	mov	r1, sp
 8003cfc:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattChargingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003cfe:	ed86 0a27 	vstr	s0, [r6, #156]	; 0x9c
			modCommandsGeneralConfig->allowedTempBattCoolingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d02:	682e      	ldr	r6, [r5, #0]
 8003d04:	f00a fd0a 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBattCoolingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d08:	4669      	mov	r1, sp
 8003d0a:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattCoolingMax			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d0c:	ed86 0a28 	vstr	s0, [r6, #160]	; 0xa0
			modCommandsGeneralConfig->allowedTempBattCoolingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d10:	682e      	ldr	r6, [r5, #0]
 8003d12:	f00a fd03 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBMSMax				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d16:	4669      	mov	r1, sp
 8003d18:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBattCoolingMin			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d1a:	ed86 0a29 	vstr	s0, [r6, #164]	; 0xa4
			modCommandsGeneralConfig->allowedTempBMSMax				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d1e:	682e      	ldr	r6, [r5, #0]
 8003d20:	f00a fcfc 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->allowedTempBMSMin				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d24:	4669      	mov	r1, sp
 8003d26:	4620      	mov	r0, r4
			modCommandsGeneralConfig->allowedTempBMSMax				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d28:	ed86 0a2a 	vstr	s0, [r6, #168]	; 0xa8
			modCommandsGeneralConfig->allowedTempBMSMin				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d2c:	682e      	ldr	r6, [r5, #0]
 8003d2e:	f00a fcf5 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->displayTimeoutBatteryDead			= libBufferGet_uint32(data,&ind);		// 4
 8003d32:	4669      	mov	r1, sp
			modCommandsGeneralConfig->allowedTempBMSMin				= libBufferGet_float32_auto(data,&ind);		// 4
 8003d34:	ed86 0a2b 	vstr	s0, [r6, #172]	; 0xac
			modCommandsGeneralConfig->displayTimeoutBatteryDead			= libBufferGet_uint32(data,&ind);		// 4
 8003d38:	4620      	mov	r0, r4
 8003d3a:	682e      	ldr	r6, [r5, #0]
 8003d3c:	f00a fcd3 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->displayTimeoutBatteryError			= libBufferGet_uint32(data,&ind);		// 4
 8003d40:	4669      	mov	r1, sp
			modCommandsGeneralConfig->displayTimeoutBatteryDead			= libBufferGet_uint32(data,&ind);		// 4
 8003d42:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
			modCommandsGeneralConfig->displayTimeoutBatteryError			= libBufferGet_uint32(data,&ind);		// 4
 8003d46:	4620      	mov	r0, r4
 8003d48:	682e      	ldr	r6, [r5, #0]
 8003d4a:	f00a fccc 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->displayTimeoutBatteryErrorPreCharge		= libBufferGet_uint32(data,&ind);		// 4
 8003d4e:	4669      	mov	r1, sp
			modCommandsGeneralConfig->displayTimeoutBatteryError			= libBufferGet_uint32(data,&ind);		// 4
 8003d50:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
			modCommandsGeneralConfig->displayTimeoutBatteryErrorPreCharge		= libBufferGet_uint32(data,&ind);		// 4
 8003d54:	4620      	mov	r0, r4
 8003d56:	682e      	ldr	r6, [r5, #0]
 8003d58:	f00a fcc5 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->displayTimeoutSplashScreen			= libBufferGet_uint32(data,&ind);		// 4
 8003d5c:	4669      	mov	r1, sp
			modCommandsGeneralConfig->displayTimeoutBatteryErrorPreCharge		= libBufferGet_uint32(data,&ind);		// 4
 8003d5e:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
			modCommandsGeneralConfig->displayTimeoutSplashScreen			= libBufferGet_uint32(data,&ind);		// 4
 8003d62:	4620      	mov	r0, r4
 8003d64:	682e      	ldr	r6, [r5, #0]
 8003d66:	f00a fcbe 	bl	800e6e6 <libBufferGet_uint32>
		  	modCommandsGeneralConfig->displayStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003d6a:	4669      	mov	r1, sp
			modCommandsGeneralConfig->displayTimeoutSplashScreen			= libBufferGet_uint32(data,&ind);		// 4
 8003d6c:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		  	modCommandsGeneralConfig->displayStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003d70:	4620      	mov	r0, r4
 8003d72:	682e      	ldr	r6, [r5, #0]
 8003d74:	f00a fc8e 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->maxUnderAndOverVoltageErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d78:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->displayStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003d7a:	f886 00c0 	strb.w	r0, [r6, #192]	; 0xc0
			modCommandsGeneralConfig->maxUnderAndOverVoltageErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d7e:	4620      	mov	r0, r4
 8003d80:	682e      	ldr	r6, [r5, #0]
 8003d82:	f00a fc87 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->maxUnderAndOverTemperatureErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d86:	4669      	mov	r1, sp
			modCommandsGeneralConfig->maxUnderAndOverVoltageErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d88:	f886 00c1 	strb.w	r0, [r6, #193]	; 0xc1
			modCommandsGeneralConfig->maxUnderAndOverTemperatureErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	682e      	ldr	r6, [r5, #0]
 8003d90:	f00a fc80 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->notUsedCurrentThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d94:	4669      	mov	r1, sp
			modCommandsGeneralConfig->maxUnderAndOverTemperatureErrorCount		= libBufferGet_uint8(data,&ind);		// 1
 8003d96:	f886 00c2 	strb.w	r0, [r6, #194]	; 0xc2
			modCommandsGeneralConfig->notUsedCurrentThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	682e      	ldr	r6, [r5, #0]
 8003d9e:	f00a fcbd 	bl	800e71c <libBufferGet_float32_auto>
			modCommandsGeneralConfig->notUsedTimeout				= libBufferGet_uint32(data,&ind);		// 4
 8003da2:	4669      	mov	r1, sp
			modCommandsGeneralConfig->notUsedCurrentThreshold			= libBufferGet_float32_auto(data,&ind);		// 4
 8003da4:	ed86 0a31 	vstr	s0, [r6, #196]	; 0xc4
			modCommandsGeneralConfig->notUsedTimeout				= libBufferGet_uint32(data,&ind);		// 4
 8003da8:	4620      	mov	r0, r4
 8003daa:	682e      	ldr	r6, [r5, #0]
 8003dac:	f00a fc9b 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->stateOfChargeStoreInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003db0:	4669      	mov	r1, sp
			modCommandsGeneralConfig->notUsedTimeout				= libBufferGet_uint32(data,&ind);		// 4
 8003db2:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
			modCommandsGeneralConfig->stateOfChargeStoreInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003db6:	4620      	mov	r0, r4
 8003db8:	682e      	ldr	r6, [r5, #0]
 8003dba:	f00a fc94 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->stateOfChargeMethod				= libBufferGet_uint8(data,&ind);		// 1
 8003dbe:	4669      	mov	r1, sp
			modCommandsGeneralConfig->stateOfChargeStoreInterval			= libBufferGet_uint32(data,&ind);		// 4
 8003dc0:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
			modCommandsGeneralConfig->stateOfChargeMethod				= libBufferGet_uint8(data,&ind);		// 1
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	682e      	ldr	r6, [r5, #0]
 8003dc8:	f00a fc64 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->CANID						= libBufferGet_uint8(data,&ind);		// 1
 8003dcc:	4669      	mov	r1, sp
			modCommandsGeneralConfig->stateOfChargeMethod				= libBufferGet_uint8(data,&ind);		// 1
 8003dce:	f886 00d0 	strb.w	r0, [r6, #208]	; 0xd0
			modCommandsGeneralConfig->CANID						= libBufferGet_uint8(data,&ind);		// 1
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	682e      	ldr	r6, [r5, #0]
 8003dd6:	f00a fc5d 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->CANIDStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003dda:	4669      	mov	r1, sp
			modCommandsGeneralConfig->CANID						= libBufferGet_uint8(data,&ind);		// 1
 8003ddc:	f886 00d1 	strb.w	r0, [r6, #209]	; 0xd1
			modCommandsGeneralConfig->CANIDStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003de0:	4620      	mov	r0, r4
 8003de2:	682e      	ldr	r6, [r5, #0]
 8003de4:	f00a fc56 	bl	800e694 <libBufferGet_uint8>
      			modCommandsGeneralConfig->canBusSpeed					= libBufferGet_uint8(data,&ind);		// 1
 8003de8:	4669      	mov	r1, sp
			modCommandsGeneralConfig->CANIDStyle					= libBufferGet_uint8(data,&ind);		// 1
 8003dea:	f886 00d2 	strb.w	r0, [r6, #210]	; 0xd2
      			modCommandsGeneralConfig->canBusSpeed					= libBufferGet_uint8(data,&ind);		// 1
 8003dee:	4620      	mov	r0, r4
 8003df0:	e002      	b.n	8003df8 <modCommandsProcessPacket+0x784>
 8003df2:	bf00      	nop
 8003df4:	20004248 	.word	0x20004248
 8003df8:	682e      	ldr	r6, [r5, #0]
 8003dfa:	f00a fc4b 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->emitStatusOverCAN				= libBufferGet_uint8(data,&ind);		// 1
 8003dfe:	4669      	mov	r1, sp
      			modCommandsGeneralConfig->canBusSpeed					= libBufferGet_uint8(data,&ind);		// 1
 8003e00:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
			modCommandsGeneralConfig->emitStatusOverCAN				= libBufferGet_uint8(data,&ind);		// 1
 8003e04:	4620      	mov	r0, r4
 8003e06:	682e      	ldr	r6, [r5, #0]
 8003e08:	f00a fc44 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->emitStatusProtocol				= libBufferGet_uint8(data,&ind);		// 1
 8003e0c:	4669      	mov	r1, sp
			modCommandsGeneralConfig->emitStatusOverCAN				= libBufferGet_uint8(data,&ind);		// 1
 8003e0e:	f886 00d3 	strb.w	r0, [r6, #211]	; 0xd3
			modCommandsGeneralConfig->emitStatusProtocol				= libBufferGet_uint8(data,&ind);		// 1
 8003e12:	4620      	mov	r0, r4
 8003e14:	682e      	ldr	r6, [r5, #0]
 8003e16:	f00a fc3d 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->tempEnableMaskBMS				= libBufferGet_uint32(data,&ind);		// 4
 8003e1a:	4669      	mov	r1, sp
			modCommandsGeneralConfig->emitStatusProtocol				= libBufferGet_uint8(data,&ind);		// 1
 8003e1c:	f886 00d4 	strb.w	r0, [r6, #212]	; 0xd4
			modCommandsGeneralConfig->tempEnableMaskBMS				= libBufferGet_uint32(data,&ind);		// 4
 8003e20:	4620      	mov	r0, r4
 8003e22:	682e      	ldr	r6, [r5, #0]
 8003e24:	f00a fc5f 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->tempEnableMaskBattery				= libBufferGet_uint32(data,&ind);		// 4
 8003e28:	4669      	mov	r1, sp
			modCommandsGeneralConfig->tempEnableMaskBMS				= libBufferGet_uint32(data,&ind);		// 4
 8003e2a:	f8c6 00d8 	str.w	r0, [r6, #216]	; 0xd8
			modCommandsGeneralConfig->tempEnableMaskBattery				= libBufferGet_uint32(data,&ind);		// 4
 8003e2e:	4620      	mov	r0, r4
 8003e30:	682e      	ldr	r6, [r5, #0]
 8003e32:	f00a fc58 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->tempEnableMaskExpansion			= libBufferGet_uint32(data,&ind);		// 4
 8003e36:	4669      	mov	r1, sp
			modCommandsGeneralConfig->tempEnableMaskBattery				= libBufferGet_uint32(data,&ind);		// 4
 8003e38:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
			modCommandsGeneralConfig->tempEnableMaskExpansion			= libBufferGet_uint32(data,&ind);		// 4
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	682e      	ldr	r6, [r5, #0]
 8003e40:	f00a fc51 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->noOfTempSensorPerModule			= libBufferGet_uint8(data,&ind);		// 1
 8003e44:	4669      	mov	r1, sp
			modCommandsGeneralConfig->tempEnableMaskExpansion			= libBufferGet_uint32(data,&ind);		// 4
 8003e46:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
			modCommandsGeneralConfig->noOfTempSensorPerModule			= libBufferGet_uint8(data,&ind);		// 1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	682e      	ldr	r6, [r5, #0]
 8003e4e:	f00a fc21 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->noOfExpansionBoard				= libBufferGet_uint8(data,&ind);		// 1
 8003e52:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfTempSensorPerModule			= libBufferGet_uint8(data,&ind);		// 1
 8003e54:	f886 00e4 	strb.w	r0, [r6, #228]	; 0xe4
			modCommandsGeneralConfig->noOfExpansionBoard				= libBufferGet_uint8(data,&ind);		// 1
 8003e58:	4620      	mov	r0, r4
 8003e5a:	682e      	ldr	r6, [r5, #0]
 8003e5c:	f00a fc1a 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard		= libBufferGet_uint8(data,&ind);		// 1
 8003e60:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfExpansionBoard				= libBufferGet_uint8(data,&ind);		// 1
 8003e62:	f886 00e5 	strb.w	r0, [r6, #229]	; 0xe5
			modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard		= libBufferGet_uint8(data,&ind);		// 1
 8003e66:	4620      	mov	r0, r4
 8003e68:	682e      	ldr	r6, [r5, #0]
 8003e6a:	f00a fc13 	bl	800e694 <libBufferGet_uint8>
		  	modCommandsGeneralConfig->LCUseDischarge				= libBufferGet_uint8(data,&ind);		// 1
 8003e6e:	4669      	mov	r1, sp
			modCommandsGeneralConfig->noOfTempSensorPerExpansionBoard		= libBufferGet_uint8(data,&ind);		// 1
 8003e70:	f886 00e6 	strb.w	r0, [r6, #230]	; 0xe6
		  	modCommandsGeneralConfig->LCUseDischarge				= libBufferGet_uint8(data,&ind);		// 1
 8003e74:	4620      	mov	r0, r4
 8003e76:	682e      	ldr	r6, [r5, #0]
 8003e78:	f00a fc0c 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->LCUsePrecharge				= libBufferGet_uint8(data,&ind);		// 1
 8003e7c:	4669      	mov	r1, sp
		  	modCommandsGeneralConfig->LCUseDischarge				= libBufferGet_uint8(data,&ind);		// 1
 8003e7e:	f886 00e7 	strb.w	r0, [r6, #231]	; 0xe7
			modCommandsGeneralConfig->LCUsePrecharge				= libBufferGet_uint8(data,&ind);		// 1
 8003e82:	4620      	mov	r0, r4
 8003e84:	682e      	ldr	r6, [r5, #0]
 8003e86:	f00a fc05 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->allowChargingDuringDischarge			= libBufferGet_uint8(data,&ind);		// 1
 8003e8a:	4669      	mov	r1, sp
			modCommandsGeneralConfig->LCUsePrecharge				= libBufferGet_uint8(data,&ind);		// 1
 8003e8c:	f886 00e8 	strb.w	r0, [r6, #232]	; 0xe8
			modCommandsGeneralConfig->allowChargingDuringDischarge			= libBufferGet_uint8(data,&ind);		// 1
 8003e90:	4620      	mov	r0, r4
 8003e92:	682e      	ldr	r6, [r5, #0]
 8003e94:	f00a fbfe 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->allowForceOn					= libBufferGet_uint8(data,&ind);		// 1
 8003e98:	4669      	mov	r1, sp
			modCommandsGeneralConfig->allowChargingDuringDischarge			= libBufferGet_uint8(data,&ind);		// 1
 8003e9a:	f886 00e9 	strb.w	r0, [r6, #233]	; 0xe9
			modCommandsGeneralConfig->allowForceOn					= libBufferGet_uint8(data,&ind);		// 1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	682e      	ldr	r6, [r5, #0]
 8003ea2:	f00a fbf7 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->pulseToggleButton				= libBufferGet_uint8(data,&ind);		// 1
 8003ea6:	4669      	mov	r1, sp
			modCommandsGeneralConfig->allowForceOn					= libBufferGet_uint8(data,&ind);		// 1
 8003ea8:	f886 00ea 	strb.w	r0, [r6, #234]	; 0xea
			modCommandsGeneralConfig->pulseToggleButton				= libBufferGet_uint8(data,&ind);		// 1
 8003eac:	4620      	mov	r0, r4
 8003eae:	682e      	ldr	r6, [r5, #0]
 8003eb0:	f00a fbf0 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->useCANSafetyInput				= libBufferGet_uint8(data,&ind);		// 1
 8003eb4:	4669      	mov	r1, sp
			modCommandsGeneralConfig->pulseToggleButton				= libBufferGet_uint8(data,&ind);		// 1
 8003eb6:	f886 00eb 	strb.w	r0, [r6, #235]	; 0xeb
			modCommandsGeneralConfig->useCANSafetyInput				= libBufferGet_uint8(data,&ind);		// 1
 8003eba:	4620      	mov	r0, r4
 8003ebc:	682e      	ldr	r6, [r5, #0]
 8003ebe:	f00a fbe9 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->useCANDelayedPowerDown			= libBufferGet_uint8(data,&ind);		// 1
 8003ec2:	4669      	mov	r1, sp
			modCommandsGeneralConfig->useCANSafetyInput				= libBufferGet_uint8(data,&ind);		// 1
 8003ec4:	f886 00ed 	strb.w	r0, [r6, #237]	; 0xed
			modCommandsGeneralConfig->useCANDelayedPowerDown			= libBufferGet_uint8(data,&ind);		// 1
 8003ec8:	4620      	mov	r0, r4
 8003eca:	682e      	ldr	r6, [r5, #0]
 8003ecc:	f00a fbe2 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003ed0:	4669      	mov	r1, sp
			modCommandsGeneralConfig->useCANDelayedPowerDown			= libBufferGet_uint8(data,&ind);		// 1
 8003ed2:	f886 00ee 	strb.w	r0, [r6, #238]	; 0xee
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	682e      	ldr	r6, [r5, #0]
 8003eda:	f00a fc04 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003ede:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003ee0:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	682e      	ldr	r6, [r5, #0]
 8003ee8:	f00a fbfd 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupLTCExt]	= libBufferGet_uint16(data,&ind);		// 2
 8003eec:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupLTCExt]	= libBufferGet_uint32(data,&ind);		// 4
 8003eee:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupLTCExt]	= libBufferGet_uint16(data,&ind);		// 2
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	682e      	ldr	r6, [r5, #0]
 8003ef6:	f00a fbdc 	bl	800e6b2 <libBufferGet_uint16>
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint32(data,&ind);		// 4
 8003efa:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupLTCExt]	= libBufferGet_uint16(data,&ind);		// 2
 8003efc:	f8a6 0130 	strh.w	r0, [r6, #304]	; 0x130
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint32(data,&ind);		// 4
 8003f00:	4620      	mov	r0, r4
 8003f02:	682e      	ldr	r6, [r5, #0]
 8003f04:	f00a fbef 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupMasterPCB]= libBufferGet_uint32(data,&ind);		// 4
 8003f08:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint32(data,&ind);		// 4
 8003f0a:	f8c6 0110 	str.w	r0, [r6, #272]	; 0x110
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupMasterPCB]= libBufferGet_uint32(data,&ind);		// 4
 8003f0e:	4620      	mov	r0, r4
 8003f10:	682e      	ldr	r6, [r5, #0]
 8003f12:	f00a fbe8 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint16(data,&ind);		// 2
 8003f16:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupMasterPCB]= libBufferGet_uint32(data,&ind);		// 4
 8003f18:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint16(data,&ind);		// 2
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	682e      	ldr	r6, [r5, #0]
 8003f20:	f00a fbc7 	bl	800e6b2 <libBufferGet_uint16>
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupExp]		= libBufferGet_uint32(data,&ind);		// 4
 8003f24:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupMasterPCB]	= libBufferGet_uint16(data,&ind);		// 2
 8003f26:	f8a6 0132 	strh.w	r0, [r6, #306]	; 0x132
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupExp]		= libBufferGet_uint32(data,&ind);		// 4
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	682e      	ldr	r6, [r5, #0]
 8003f2e:	f00a fbda 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupExp]	= libBufferGet_uint32(data,&ind);		// 4
 8003f32:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCTopResistor[modConfigNTCGroupExp]		= libBufferGet_uint32(data,&ind);		// 4
 8003f34:	f8c6 0114 	str.w	r0, [r6, #276]	; 0x114
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupExp]	= libBufferGet_uint32(data,&ind);		// 4
 8003f38:	4620      	mov	r0, r4
 8003f3a:	682e      	ldr	r6, [r5, #0]
 8003f3c:	f00a fbd3 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupExp]		= libBufferGet_uint16(data,&ind);		// 2
 8003f40:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTC25DegResistance[modConfigNTCGroupExp]	= libBufferGet_uint32(data,&ind);		// 4
 8003f42:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupExp]		= libBufferGet_uint16(data,&ind);		// 2
 8003f46:	4620      	mov	r0, r4
 8003f48:	682e      	ldr	r6, [r5, #0]
 8003f4a:	f00a fbb2 	bl	800e6b2 <libBufferGet_uint16>
			modCommandsGeneralConfig->cellMonitorType				= libBufferGet_uint8(data,&ind);		// 1
 8003f4e:	4669      	mov	r1, sp
			modCommandsGeneralConfig->NTCBetaFactor[modConfigNTCGroupExp]		= libBufferGet_uint16(data,&ind);		// 2
 8003f50:	f8a6 0134 	strh.w	r0, [r6, #308]	; 0x134
			modCommandsGeneralConfig->cellMonitorType				= libBufferGet_uint8(data,&ind);		// 1
 8003f54:	4620      	mov	r0, r4
 8003f56:	682e      	ldr	r6, [r5, #0]
 8003f58:	f00a fb9c 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->cellMonitorICCount				= libBufferGet_uint8(data,&ind);		// 1
 8003f5c:	4669      	mov	r1, sp
			modCommandsGeneralConfig->cellMonitorType				= libBufferGet_uint8(data,&ind);		// 1
 8003f5e:	f886 00ef 	strb.w	r0, [r6, #239]	; 0xef
			modCommandsGeneralConfig->cellMonitorICCount				= libBufferGet_uint8(data,&ind);		// 1
 8003f62:	4620      	mov	r0, r4
 8003f64:	682e      	ldr	r6, [r5, #0]
 8003f66:	f00a fb95 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->externalEnableOperationalState		= libBufferGet_uint8(data,&ind);		// 1
 8003f6a:	4669      	mov	r1, sp
			modCommandsGeneralConfig->cellMonitorICCount				= libBufferGet_uint8(data,&ind);		// 1
 8003f6c:	f886 00f0 	strb.w	r0, [r6, #240]	; 0xf0
			modCommandsGeneralConfig->externalEnableOperationalState		= libBufferGet_uint8(data,&ind);		// 1
 8003f70:	4620      	mov	r0, r4
 8003f72:	682e      	ldr	r6, [r5, #0]
 8003f74:	f00a fb8e 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->chargeEnableOperationalState			= libBufferGet_uint8(data,&ind);		// 1
 8003f78:	4669      	mov	r1, sp
			modCommandsGeneralConfig->externalEnableOperationalState		= libBufferGet_uint8(data,&ind);		// 1
 8003f7a:	f886 00f8 	strb.w	r0, [r6, #248]	; 0xf8
			modCommandsGeneralConfig->chargeEnableOperationalState			= libBufferGet_uint8(data,&ind);		// 1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	682e      	ldr	r6, [r5, #0]
 8003f82:	f00a fb87 	bl	800e694 <libBufferGet_uint8>
			modCommandsGeneralConfig->powerDownDelay				= libBufferGet_uint32(data,&ind);		// 4
 8003f86:	4669      	mov	r1, sp
			modCommandsGeneralConfig->chargeEnableOperationalState			= libBufferGet_uint8(data,&ind);		// 1
 8003f88:	f886 0101 	strb.w	r0, [r6, #257]	; 0x101
			modCommandsGeneralConfig->powerDownDelay				= libBufferGet_uint32(data,&ind);		// 4
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	682e      	ldr	r6, [r5, #0]
 8003f90:	f00a fba9 	bl	800e6e6 <libBufferGet_uint32>
			modCommandsGeneralConfig->humidityICType				= libBufferGet_uint8(data,&ind);		// 1
 8003f94:	4669      	mov	r1, sp
			modCommandsGeneralConfig->powerDownDelay				= libBufferGet_uint32(data,&ind);		// 4
 8003f96:	f8c6 00fc 	str.w	r0, [r6, #252]	; 0xfc
			modCommandsGeneralConfig->humidityICType				= libBufferGet_uint8(data,&ind);		// 1
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	682e      	ldr	r6, [r5, #0]
 8003f9e:	f00a fb79 	bl	800e694 <libBufferGet_uint8>
 8003fa2:	f886 0136 	strb.w	r0, [r6, #310]	; 0x136
			modCommandsSendBuffer[ind++] = packet_id;
 8003fa6:	4806      	ldr	r0, [pc, #24]	; (8003fc0 <modCommandsProcessPacket+0x94c>)
 8003fa8:	239a      	movs	r3, #154	; 0x9a
 8003faa:	2101      	movs	r1, #1
 8003fac:	7003      	strb	r3, [r0, #0]
 8003fae:	9100      	str	r1, [sp, #0]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8003fb0:	f7ff fad2 	bl	8003558 <modCommandsSendPacket>
			modconfigHardwareLimitsApply(modCommandsGeneralConfig);
 8003fb4:	6828      	ldr	r0, [r5, #0]
 8003fb6:	f000 fc33 	bl	8004820 <modconfigHardwareLimitsApply>
			break;
 8003fba:	f7ff bba6 	b.w	800370a <modCommandsProcessPacket+0x96>
 8003fbe:	bf00      	nop
 8003fc0:	20004250 	.word	0x20004250
      			if(packet_id == COMM_EBMS_GET_MCCONF_DEFAULT){
 8003fc4:	2e9c      	cmp	r6, #156	; 0x9c
 8003fc6:	4dd8      	ldr	r5, [pc, #864]	; (8004328 <modCommandsProcessPacket+0xcb4>)
 8003fc8:	f040 829d 	bne.w	8004506 <modCommandsProcessPacket+0xe92>
				modConfigLoadDefaultConfig(&modCommandsConfigStorage);
 8003fcc:	4cd7      	ldr	r4, [pc, #860]	; (800432c <modCommandsProcessPacket+0xcb8>)
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 fc86 	bl	80048e0 <modConfigLoadDefaultConfig>
				modCommandsToBeSendConfig = &modCommandsConfigStorage;
 8003fd4:	602c      	str	r4, [r5, #0]
		  	modCommandsSendBuffer[ind++] = packet_id;
 8003fd6:	4cd6      	ldr	r4, [pc, #856]	; (8004330 <modCommandsProcessPacket+0xcbc>)
 8003fd8:	2301      	movs	r3, #1
 8003fda:	9300      	str	r3, [sp, #0]
		  	libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfCellsSeries					,&ind); // 1
 8003fdc:	682b      	ldr	r3, [r5, #0]
		  	modCommandsSendBuffer[ind++] = packet_id;
 8003fde:	7026      	strb	r6, [r4, #0]
		  	libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfCellsSeries					,&ind); // 1
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f00a faa1 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfCellsParallel				,&ind); // 1
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	466a      	mov	r2, sp
 8003fee:	7859      	ldrb	r1, [r3, #1]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f00a fa9b 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfParallelModules				,&ind); // 1
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	466a      	mov	r2, sp
 8003ffa:	78d9      	ldrb	r1, [r3, #3]
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f00a fa95 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->batteryCapacity					,&ind); // 4
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	4669      	mov	r1, sp
 8004006:	ed93 0a01 	vldr	s0, [r3, #4]
 800400a:	4620      	mov	r0, r4
 800400c:	f00a fb08 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellHardUnderVoltage				,&ind); // 4
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	4669      	mov	r1, sp
 8004014:	ed93 0a02 	vldr	s0, [r3, #8]
 8004018:	4620      	mov	r0, r4
 800401a:	f00a fb01 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellHardOverVoltage				,&ind); // 4
 800401e:	682b      	ldr	r3, [r5, #0]
 8004020:	4669      	mov	r1, sp
 8004022:	ed93 0a03 	vldr	s0, [r3, #12]
 8004026:	4620      	mov	r0, r4
 8004028:	f00a fafa 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellLCSoftUnderVoltage				,&ind); // 4
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	4669      	mov	r1, sp
 8004030:	ed93 0a04 	vldr	s0, [r3, #16]
 8004034:	4620      	mov	r0, r4
 8004036:	f00a faf3 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellSoftOverVoltage				,&ind); // 4
 800403a:	682b      	ldr	r3, [r5, #0]
 800403c:	4669      	mov	r1, sp
 800403e:	ed93 0a05 	vldr	s0, [r3, #20]
 8004042:	4620      	mov	r0, r4
 8004044:	f00a faec 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellBalanceDifferenceThreshold			,&ind); // 4
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	4669      	mov	r1, sp
 800404c:	ed93 0a06 	vldr	s0, [r3, #24]
 8004050:	4620      	mov	r0, r4
 8004052:	f00a fae5 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellBalanceStart					,&ind); // 4
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	4669      	mov	r1, sp
 800405a:	ed93 0a07 	vldr	s0, [r3, #28]
 800405e:	4620      	mov	r0, r4
 8004060:	f00a fade 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->cellBalanceAllTime				,&ind); // 1
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	466a      	mov	r2, sp
 8004068:	f893 1020 	ldrb.w	r1, [r3, #32]
 800406c:	4620      	mov	r0, r4
 800406e:	f00a fa5d 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellThrottleUpperStart				,&ind); // 4
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	4669      	mov	r1, sp
 8004076:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800407a:	4620      	mov	r0, r4
 800407c:	f00a fad0 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellThrottleLowerStart				,&ind); // 4
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	4669      	mov	r1, sp
 8004084:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 8004088:	4620      	mov	r0, r4
 800408a:	f00a fac9 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellThrottleUpperMargin				,&ind); // 4
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	4669      	mov	r1, sp
 8004092:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
 8004096:	4620      	mov	r0, r4
 8004098:	f00a fac2 	bl	800e620 <libBufferAppend_float32_auto>
		 	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->cellThrottleLowerMargin				,&ind); // 4
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	4669      	mov	r1, sp
 80040a0:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 80040a4:	4620      	mov	r0, r4
 80040a6:	f00a fabb 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->packVoltageDataSource				,&ind); // 1
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	466a      	mov	r2, sp
 80040ae:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80040b2:	4620      	mov	r0, r4
 80040b4:	f00a fa3a 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->packCurrentDataSource				,&ind); // 1
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	466a      	mov	r2, sp
 80040bc:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80040c0:	4620      	mov	r0, r4
 80040c2:	f00a fa33 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->buzzerSignalSource				,&ind); // 1
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	466a      	mov	r2, sp
 80040ca:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80040ce:	4620      	mov	r0, r4
 80040d0:	f00a fa2c 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->buzzerSignalPersistant				,&ind); // 1
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	466a      	mov	r2, sp
 80040d8:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 80040dc:	4620      	mov	r0, r4
 80040de:	f00a fa25 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->shuntLCFactor					,&ind); // 4
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	4669      	mov	r1, sp
 80040e6:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 80040ea:	4620      	mov	r0, r4
 80040ec:	f00a fa98 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->voltageLCFactor					,&ind); // 4
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	4669      	mov	r1, sp
 80040f4:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80040f8:	4620      	mov	r0, r4
 80040fa:	f00a fa91 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_int16(        modCommandsSendBuffer,modCommandsToBeSendConfig->voltageLCOffset					,&ind); // 2
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	466a      	mov	r2, sp
 8004102:	f9b3 1040 	ldrsh.w	r1, [r3, #64]	; 0x40
 8004106:	4620      	mov	r0, r4
 8004108:	f00a fa16 	bl	800e538 <libBufferAppend_int16>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->loadVoltageFactor				,&ind); // 4
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	4669      	mov	r1, sp
 8004110:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8004114:	4620      	mov	r0, r4
 8004116:	f00a fa83 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->loadVoltageOffset				,&ind); // 4
 800411a:	682b      	ldr	r3, [r5, #0]
 800411c:	4669      	mov	r1, sp
 800411e:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 8004122:	4620      	mov	r0, r4
 8004124:	f00a fa7c 	bl	800e620 <libBufferAppend_float32_auto>
		 	libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->chargerVoltageFactor				,&ind); // 4
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	4669      	mov	r1, sp
 800412c:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
 8004130:	4620      	mov	r0, r4
 8004132:	f00a fa75 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->chargerVoltageOffset				,&ind); // 4
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	4669      	mov	r1, sp
 800413a:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
 800413e:	4620      	mov	r0, r4
 8004140:	f00a fa6e 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->throttleChargeIncreaseRate			,&ind); // 1
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	466a      	mov	r2, sp
 8004148:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800414c:	4620      	mov	r0, r4
 800414e:	f00a f9ed 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->throttleDisChargeIncreaseRate			,&ind); // 1
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	466a      	mov	r2, sp
 8004156:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 800415a:	4620      	mov	r0, r4
 800415c:	f00a f9e6 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->cellBalanceUpdateInterval			,&ind); // 4
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	466a      	mov	r2, sp
 8004164:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004166:	4620      	mov	r0, r4
 8004168:	f00a fa11 	bl	800e58e <libBufferAppend_uint32>
		  	libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->maxSimultaneousDischargingCells			,&ind); // 1
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	466a      	mov	r2, sp
 8004170:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
 8004174:	4620      	mov	r0, r4
 8004176:	f00a f9d9 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutDischargeRetry				,&ind); // 4
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	466a      	mov	r2, sp
 800417e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004180:	4620      	mov	r0, r4
 8004182:	f00a fa04 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->hysteresisDischarge				,&ind); // 4
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	4669      	mov	r1, sp
 800418a:	ed93 0a19 	vldr	s0, [r3, #100]	; 0x64
 800418e:	4620      	mov	r0, r4
 8004190:	f00a fa46 	bl	800e620 <libBufferAppend_float32_auto>
		  	libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutChargeRetry				,&ind); // 4
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	466a      	mov	r2, sp
 8004198:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800419a:	4620      	mov	r0, r4
 800419c:	f00a f9f7 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->hysteresisCharge					,&ind); // 4
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	4669      	mov	r1, sp
 80041a4:	ed93 0a1b 	vldr	s0, [r3, #108]	; 0x6c
 80041a8:	4620      	mov	r0, r4
 80041aa:	f00a fa39 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutChargeCompleted				,&ind); // 4
 80041ae:	682b      	ldr	r3, [r5, #0]
 80041b0:	466a      	mov	r2, sp
 80041b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041b4:	4620      	mov	r0, r4
 80041b6:	f00a f9ea 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutChargingCompletedMinimalMismatch		,&ind); // 4
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	466a      	mov	r2, sp
 80041be:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80041c0:	4620      	mov	r0, r4
 80041c2:	f00a f9e4 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->maxMismatchThreshold				,&ind); // 4
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	4669      	mov	r1, sp
 80041ca:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
 80041ce:	4620      	mov	r0, r4
 80041d0:	f00a fa26 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->chargerEnabledThreshold				,&ind); // 4
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	4669      	mov	r1, sp
 80041d8:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
 80041dc:	4620      	mov	r0, r4
 80041de:	f00a fa1f 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutChargerDisconnected			,&ind); // 4
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	466a      	mov	r2, sp
 80041e6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80041ea:	4620      	mov	r0, r4
 80041ec:	f00a f9cf 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->minimalPrechargePercentage			,&ind); // 4
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	4669      	mov	r1, sp
 80041f4:	ed93 0a21 	vldr	s0, [r3, #132]	; 0x84
 80041f8:	4620      	mov	r0, r4
 80041fa:	f00a fa11 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->timeoutLCPreCharge				,&ind); // 4
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	466a      	mov	r2, sp
 8004202:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004206:	4620      	mov	r0, r4
 8004208:	f00a f9c1 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->maxAllowedCurrent				,&ind); // 4
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	4669      	mov	r1, sp
 8004210:	ed93 0a23 	vldr	s0, [r3, #140]	; 0x8c
 8004214:	4620      	mov	r0, r4
 8004216:	f00a fa03 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattDischargingMax			,&ind); // 4
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	4669      	mov	r1, sp
 800421e:	ed93 0a24 	vldr	s0, [r3, #144]	; 0x90
 8004222:	4620      	mov	r0, r4
 8004224:	f00a f9fc 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattDischargingMin			,&ind); // 4
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	4669      	mov	r1, sp
 800422c:	ed93 0a25 	vldr	s0, [r3, #148]	; 0x94
 8004230:	4620      	mov	r0, r4
 8004232:	f00a f9f5 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattChargingMax			,&ind); // 4
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	4669      	mov	r1, sp
 800423a:	ed93 0a26 	vldr	s0, [r3, #152]	; 0x98
 800423e:	4620      	mov	r0, r4
 8004240:	f00a f9ee 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattChargingMin			,&ind); // 4
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	4669      	mov	r1, sp
 8004248:	ed93 0a27 	vldr	s0, [r3, #156]	; 0x9c
 800424c:	4620      	mov	r0, r4
 800424e:	f00a f9e7 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattCoolingMax			,&ind); // 4
 8004252:	682b      	ldr	r3, [r5, #0]
 8004254:	4669      	mov	r1, sp
 8004256:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
 800425a:	4620      	mov	r0, r4
 800425c:	f00a f9e0 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBattCoolingMin			,&ind); // 4
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	4669      	mov	r1, sp
 8004264:	ed93 0a29 	vldr	s0, [r3, #164]	; 0xa4
 8004268:	4620      	mov	r0, r4
 800426a:	f00a f9d9 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBMSMax				,&ind); // 4
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	4669      	mov	r1, sp
 8004272:	ed93 0a2a 	vldr	s0, [r3, #168]	; 0xa8
 8004276:	4620      	mov	r0, r4
 8004278:	f00a f9d2 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->allowedTempBMSMin				,&ind); // 4
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	4669      	mov	r1, sp
 8004280:	ed93 0a2b 	vldr	s0, [r3, #172]	; 0xac
 8004284:	4620      	mov	r0, r4
 8004286:	f00a f9cb 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->displayTimeoutBatteryDead			,&ind); // 4
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	466a      	mov	r2, sp
 800428e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004292:	4620      	mov	r0, r4
 8004294:	f00a f97b 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->displayTimeoutBatteryError			,&ind); // 4
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	466a      	mov	r2, sp
 800429c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80042a0:	4620      	mov	r0, r4
 80042a2:	f00a f974 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->displayTimeoutBatteryErrorPreCharge		,&ind); // 4
 80042a6:	682b      	ldr	r3, [r5, #0]
 80042a8:	466a      	mov	r2, sp
 80042aa:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80042ae:	4620      	mov	r0, r4
 80042b0:	f00a f96d 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->displayTimeoutSplashScreen			,&ind); // 4
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	466a      	mov	r2, sp
 80042b8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 80042bc:	4620      	mov	r0, r4
 80042be:	f00a f966 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->displayStyle					,&ind); // 1
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	466a      	mov	r2, sp
 80042c6:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
 80042ca:	4620      	mov	r0, r4
 80042cc:	f00a f92e 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->maxUnderAndOverVoltageErrorCount			,&ind); // 1
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	466a      	mov	r2, sp
 80042d4:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
 80042d8:	4620      	mov	r0, r4
 80042da:	f00a f927 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->maxUnderAndOverTemperatureErrorCount		,&ind); // 1
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	466a      	mov	r2, sp
 80042e2:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
 80042e6:	4620      	mov	r0, r4
 80042e8:	f00a f920 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_float32_auto( modCommandsSendBuffer,modCommandsToBeSendConfig->notUsedCurrentThreshold				,&ind); // 4
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	4669      	mov	r1, sp
 80042f0:	ed93 0a31 	vldr	s0, [r3, #196]	; 0xc4
 80042f4:	4620      	mov	r0, r4
 80042f6:	f00a f993 	bl	800e620 <libBufferAppend_float32_auto>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->notUsedTimeout					,&ind); // 4
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	466a      	mov	r2, sp
 80042fe:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8004302:	4620      	mov	r0, r4
 8004304:	f00a f943 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->stateOfChargeStoreInterval			,&ind); // 4
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	466a      	mov	r2, sp
 800430c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8004310:	4620      	mov	r0, r4
 8004312:	f00a f93c 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->stateOfChargeMethod				,&ind); // 1
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	466a      	mov	r2, sp
 800431a:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
 800431e:	4620      	mov	r0, r4
 8004320:	f00a f904 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->CANID						,&ind); // 1
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	e005      	b.n	8004334 <modCommandsProcessPacket+0xcc0>
 8004328:	20004654 	.word	0x20004654
 800432c:	20004110 	.word	0x20004110
 8004330:	20004250 	.word	0x20004250
 8004334:	466a      	mov	r2, sp
 8004336:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
 800433a:	4620      	mov	r0, r4
 800433c:	f00a f8f6 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->CANIDStyle					,&ind); // 1
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	466a      	mov	r2, sp
 8004344:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
 8004348:	4620      	mov	r0, r4
 800434a:	f00a f8ef 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->canBusSpeed					,&ind); // 1
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	466a      	mov	r2, sp
 8004352:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 8004356:	4620      	mov	r0, r4
 8004358:	f00a f8e8 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->emitStatusOverCAN				,&ind); // 1
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	466a      	mov	r2, sp
 8004360:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
 8004364:	4620      	mov	r0, r4
 8004366:	f00a f8e1 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->emitStatusProtocol				,&ind); // 1
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	466a      	mov	r2, sp
 800436e:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
 8004372:	4620      	mov	r0, r4
 8004374:	f00a f8da 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->tempEnableMaskBMS				,&ind); // 4
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	466a      	mov	r2, sp
 800437c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8004380:	4620      	mov	r0, r4
 8004382:	f00a f904 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->tempEnableMaskBattery				,&ind); // 4
 8004386:	682b      	ldr	r3, [r5, #0]
 8004388:	466a      	mov	r2, sp
 800438a:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800438e:	4620      	mov	r0, r4
 8004390:	f00a f8fd 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->tempEnableMaskExpansion				,&ind); // 4
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	466a      	mov	r2, sp
 8004398:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800439c:	4620      	mov	r0, r4
 800439e:	f00a f8f6 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfTempSensorPerModule				,&ind); // 1
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	466a      	mov	r2, sp
 80043a6:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 80043aa:	4620      	mov	r0, r4
 80043ac:	f00a f8be 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfExpansionBoard				,&ind); // 1
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	466a      	mov	r2, sp
 80043b4:	f893 10e5 	ldrb.w	r1, [r3, #229]	; 0xe5
 80043b8:	4620      	mov	r0, r4
 80043ba:	f00a f8b7 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->noOfTempSensorPerExpansionBoard			,&ind); // 1
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	466a      	mov	r2, sp
 80043c2:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
 80043c6:	4620      	mov	r0, r4
 80043c8:	f00a f8b0 	bl	800e52c <libBufferAppend_uint8>
		  	libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->LCUseDischarge					,&ind); // 1
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	466a      	mov	r2, sp
 80043d0:	f893 10e7 	ldrb.w	r1, [r3, #231]	; 0xe7
 80043d4:	4620      	mov	r0, r4
 80043d6:	f00a f8a9 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->LCUsePrecharge					,&ind); // 1
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	466a      	mov	r2, sp
 80043de:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
 80043e2:	4620      	mov	r0, r4
 80043e4:	f00a f8a2 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->allowChargingDuringDischarge			,&ind); // 1
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	466a      	mov	r2, sp
 80043ec:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
 80043f0:	4620      	mov	r0, r4
 80043f2:	f00a f89b 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->allowForceOn					,&ind); // 1
 80043f6:	682b      	ldr	r3, [r5, #0]
 80043f8:	466a      	mov	r2, sp
 80043fa:	f893 10ea 	ldrb.w	r1, [r3, #234]	; 0xea
 80043fe:	4620      	mov	r0, r4
 8004400:	f00a f894 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->pulseToggleButton				,&ind); // 1
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	466a      	mov	r2, sp
 8004408:	f893 10eb 	ldrb.w	r1, [r3, #235]	; 0xeb
 800440c:	4620      	mov	r0, r4
 800440e:	f00a f88d 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->useCANSafetyInput				,&ind); // 1
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	466a      	mov	r2, sp
 8004416:	f893 10ed 	ldrb.w	r1, [r3, #237]	; 0xed
 800441a:	4620      	mov	r0, r4
 800441c:	f00a f886 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->useCANDelayedPowerDown				,&ind); // 1
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	466a      	mov	r2, sp
 8004424:	f893 10ee 	ldrb.w	r1, [r3, #238]	; 0xee
 8004428:	4620      	mov	r0, r4
 800442a:	f00a f87f 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCTopResistor[modConfigNTCGroupLTCExt]		,&ind); // 4
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	466a      	mov	r2, sp
 8004432:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8004436:	4620      	mov	r0, r4
 8004438:	f00a f8a9 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTC25DegResistance[modConfigNTCGroupLTCExt]	,&ind); // 4
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	466a      	mov	r2, sp
 8004440:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 8004444:	4620      	mov	r0, r4
 8004446:	f00a f8a2 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint16(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCBetaFactor[modConfigNTCGroupLTCExt]		,&ind); // 2
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	466a      	mov	r2, sp
 800444e:	f8b3 1130 	ldrh.w	r1, [r3, #304]	; 0x130
 8004452:	4620      	mov	r0, r4
 8004454:	f00a f87b 	bl	800e54e <libBufferAppend_uint16>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCTopResistor[modConfigNTCGroupMasterPCB]	,&ind); // 4
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	466a      	mov	r2, sp
 800445c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8004460:	4620      	mov	r0, r4
 8004462:	f00a f894 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTC25DegResistance[modConfigNTCGroupMasterPCB]	,&ind); // 4
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	466a      	mov	r2, sp
 800446a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 800446e:	4620      	mov	r0, r4
 8004470:	f00a f88d 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint16(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCBetaFactor[modConfigNTCGroupMasterPCB]	,&ind); // 2
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	466a      	mov	r2, sp
 8004478:	f8b3 1132 	ldrh.w	r1, [r3, #306]	; 0x132
 800447c:	4620      	mov	r0, r4
 800447e:	f00a f866 	bl	800e54e <libBufferAppend_uint16>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCTopResistor[modConfigNTCGroupExp]		,&ind); // 4
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	466a      	mov	r2, sp
 8004486:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800448a:	4620      	mov	r0, r4
 800448c:	f00a f87f 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTC25DegResistance[modConfigNTCGroupExp]		,&ind); // 4
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	466a      	mov	r2, sp
 8004494:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 8004498:	4620      	mov	r0, r4
 800449a:	f00a f878 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint16(       modCommandsSendBuffer,modCommandsToBeSendConfig->NTCBetaFactor[modConfigNTCGroupExp]		,&ind); // 2
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	466a      	mov	r2, sp
 80044a2:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
 80044a6:	4620      	mov	r0, r4
 80044a8:	f00a f851 	bl	800e54e <libBufferAppend_uint16>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->cellMonitorType					,&ind); // 1
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	466a      	mov	r2, sp
 80044b0:	f893 10ef 	ldrb.w	r1, [r3, #239]	; 0xef
 80044b4:	4620      	mov	r0, r4
 80044b6:	f00a f839 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->cellMonitorICCount				,&ind); // 1
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	466a      	mov	r2, sp
 80044be:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
 80044c2:	4620      	mov	r0, r4
 80044c4:	f00a f832 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->externalEnableOperationalState			,&ind); // 1
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	466a      	mov	r2, sp
 80044cc:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80044d0:	4620      	mov	r0, r4
 80044d2:	f00a f82b 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->chargeEnableOperationalState			,&ind); // 1	
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	466a      	mov	r2, sp
 80044da:	f893 1101 	ldrb.w	r1, [r3, #257]	; 0x101
 80044de:	4620      	mov	r0, r4
 80044e0:	f00a f824 	bl	800e52c <libBufferAppend_uint8>
			libBufferAppend_uint32(       modCommandsSendBuffer,modCommandsToBeSendConfig->powerDownDelay					,&ind); // 4
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	466a      	mov	r2, sp
 80044e8:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 80044ec:	4620      	mov	r0, r4
 80044ee:	f00a f84e 	bl	800e58e <libBufferAppend_uint32>
			libBufferAppend_uint8(        modCommandsSendBuffer,modCommandsToBeSendConfig->humidityICType					,&ind); // 1
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	466a      	mov	r2, sp
 80044f6:	f893 1136 	ldrb.w	r1, [r3, #310]	; 0x136
 80044fa:	4620      	mov	r0, r4
 80044fc:	f00a f816 	bl	800e52c <libBufferAppend_uint8>
		  	modCommandsSendPacket(modCommandsSendBuffer, ind);
 8004500:	9900      	ldr	r1, [sp, #0]
 8004502:	f7ff b92d 	b.w	8003760 <modCommandsProcessPacket+0xec>
				modCommandsToBeSendConfig = modCommandsGeneralConfig;
 8004506:	4bb2      	ldr	r3, [pc, #712]	; (80047d0 <modCommandsProcessPacket+0x115c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	e563      	b.n	8003fd6 <modCommandsProcessPacket+0x962>

void modCommandsJumpToMainApplication(void) {
	NVIC_SystemReset();
 800450e:	f7fe fffd 	bl	800350c <NVIC_SystemReset>
			modCANSendBuffer(data[0], data + 1, len - 1, false);
 8004512:	1e8a      	subs	r2, r1, #2
 8004514:	1c81      	adds	r1, r0, #2
 8004516:	7840      	ldrb	r0, [r0, #1]
 8004518:	f7fe fd30 	bl	8002f7c <modCANSendBuffer>
			break;
 800451c:	f7ff b8f5 	b.w	800370a <modCommandsProcessPacket+0x96>
			modConfigStoreConfig();
 8004520:	f000 f972 	bl	8004808 <modConfigStoreConfig>
			modCommandsSendBuffer[ind++] = packet_id;
 8004524:	48ab      	ldr	r0, [pc, #684]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 8004526:	2101      	movs	r1, #1
 8004528:	2396      	movs	r3, #150	; 0x96
 800452a:	9100      	str	r1, [sp, #0]
 800452c:	7003      	strb	r3, [r0, #0]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800452e:	f7ff b92f 	b.w	8003790 <modCommandsProcessPacket+0x11c>
			modCommandsSendBuffer[ind++] = COMM_BMS_GET_VALUES;
 8004532:	4da8      	ldr	r5, [pc, #672]	; (80047d4 <modCommandsProcessPacket+0x1160>)
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packVoltage,			1e6, 		&ind);
 8004534:	4ca8      	ldr	r4, [pc, #672]	; (80047d8 <modCommandsProcessPacket+0x1164>)
 8004536:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80047dc <modCommandsProcessPacket+0x1168>
			totalNoOfCells = modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules;
 800453a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 80047d0 <modCommandsProcessPacket+0x115c>
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage, 1e3, &ind);
 800453e:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 80047e0 <modCommandsProcessPacket+0x116c>
			modCommandsSendBuffer[ind++] = COMM_BMS_GET_VALUES;
 8004542:	2301      	movs	r3, #1
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2360      	movs	r3, #96	; 0x60
 8004548:	702b      	strb	r3, [r5, #0]
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packVoltage,			1e6, 		&ind);
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	4669      	mov	r1, sp
 800454e:	ed93 0a07 	vldr	s0, [r3, #28]
 8004552:	4628      	mov	r0, r5
 8004554:	f00a f85a 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->chargerVoltage,			1e6, 		&ind);
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80047dc <modCommandsProcessPacket+0x1168>
 800455e:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8004562:	4669      	mov	r1, sp
 8004564:	4628      	mov	r0, r5
 8004566:	f00a f851 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packCurrent,			1e6, 		&ind);
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80047dc <modCommandsProcessPacket+0x1168>
 8004570:	ed93 0a08 	vldr	s0, [r3, #32]
 8004574:	4669      	mov	r1, sp
 8004576:	4628      	mov	r0, r5
 8004578:	f00a f848 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packCurrent,			1e6, 		&ind);
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	eddf 0a97 	vldr	s1, [pc, #604]	; 80047dc <modCommandsProcessPacket+0x1168>
 8004582:	ed93 0a08 	vldr	s0, [r3, #32]
 8004586:	4669      	mov	r1, sp
 8004588:	4628      	mov	r0, r5
 800458a:	f00a f83f 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packCurrent,			1e3, 		&ind); //TO DO: define AhCounter instead of packCurrent
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	eddf 0a93 	vldr	s1, [pc, #588]	; 80047e0 <modCommandsProcessPacket+0x116c>
 8004594:	ed93 0a08 	vldr	s0, [r3, #32]
 8004598:	4669      	mov	r1, sp
 800459a:	4628      	mov	r0, r5
 800459c:	f00a f836 	bl	800e60c <libBufferAppend_float32>
		 	libBufferAppend_float32(modCommandsSendBuffer, modCommandsGeneralState->packVoltage,			1e3, 		&ind); //TO DO: define WhCounter instead of packCurrent
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80047e0 <modCommandsProcessPacket+0x116c>
 80045a6:	ed93 0a07 	vldr	s0, [r3, #28]
 80045aa:	4669      	mov	r1, sp
 80045ac:	4628      	mov	r0, r5
 80045ae:	f00a f82d 	bl	800e60c <libBufferAppend_float32>
			totalNoOfCells = modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules;
 80045b2:	f8d8 3000 	ldr.w	r3, [r8]
 80045b6:	781e      	ldrb	r6, [r3, #0]
 80045b8:	78db      	ldrb	r3, [r3, #3]
 80045ba:	fb16 f603 	smulbb	r6, r6, r3
			modCommandsSendBuffer[ind++] = totalNoOfCells;
 80045be:	9b00      	ldr	r3, [sp, #0]
			totalNoOfCells = modCommandsGeneralConfig->noOfCellsSeries*modCommandsGeneralConfig->noOfParallelModules;
 80045c0:	b2f6      	uxtb	r6, r6
			modCommandsSendBuffer[ind++] = totalNoOfCells;
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	54ee      	strb	r6, [r5, r3]
 80045c6:	9200      	str	r2, [sp, #0]
			for (cellPointer = 0; cellPointer < totalNoOfCells; cellPointer++) {
 80045c8:	2700      	movs	r7, #0
 80045ca:	b2fa      	uxtb	r2, r7
 80045cc:	4296      	cmp	r6, r2
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage, 1e3, &ind);
 80045ce:	6823      	ldr	r3, [r4, #0]
			for (cellPointer = 0; cellPointer < totalNoOfCells; cellPointer++) {
 80045d0:	d859      	bhi.n	8004686 <modCommandsProcessPacket+0x1012>
 80045d2:	9800      	ldr	r0, [sp, #0]
 80045d4:	2100      	movs	r1, #0
 80045d6:	182f      	adds	r7, r5, r0
			for (int i = 0; i < totalNoOfCells; i++) {
 80045d8:	460a      	mov	r2, r1
				modCommandsSendBuffer[ind++] = modCommandsGeneralState->cellVoltagesIndividual[i].cellBleedActive;
 80045da:	33b5      	adds	r3, #181	; 0xb5
			for (int i = 0; i < totalNoOfCells; i++) {
 80045dc:	4296      	cmp	r6, r2
 80045de:	dc5e      	bgt.n	800469e <modCommandsProcessPacket+0x102a>
 80045e0:	4406      	add	r6, r0
 80045e2:	b101      	cbz	r1, 80045e6 <modCommandsProcessPacket+0xf72>
 80045e4:	9600      	str	r6, [sp, #0]
			totalNoOfAux = modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule;
 80045e6:	f8d8 3000 	ldr.w	r3, [r8]
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e2, &ind); 
 80045ea:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 80047e4 <modCommandsProcessPacket+0x1170>
			totalNoOfAux = modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule;
 80045ee:	f893 60f0 	ldrb.w	r6, [r3, #240]	; 0xf0
 80045f2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e2, &ind); 
 80045f6:	4f77      	ldr	r7, [pc, #476]	; (80047d4 <modCommandsProcessPacket+0x1160>)
			totalNoOfAux = modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule;
 80045f8:	fb16 f603 	smulbb	r6, r6, r3
			modCommandsSendBuffer[ind++] = totalNoOfAux;
 80045fc:	9b00      	ldr	r3, [sp, #0]
			totalNoOfAux = modCommandsGeneralConfig->cellMonitorICCount*modCommandsGeneralConfig->noOfTempSensorPerModule;
 80045fe:	b2f6      	uxtb	r6, r6
			modCommandsSendBuffer[ind++] = totalNoOfAux;
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	54ee      	strb	r6, [r5, r3]
 8004604:	9200      	str	r2, [sp, #0]
			for (auxPointer = 0; auxPointer < totalNoOfAux; auxPointer++) {
 8004606:	2500      	movs	r5, #0
 8004608:	b2ea      	uxtb	r2, r5
 800460a:	4296      	cmp	r6, r2
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e2, &ind); 
 800460c:	6823      	ldr	r3, [r4, #0]
			for (auxPointer = 0; auxPointer < totalNoOfAux; auxPointer++) {
 800460e:	d84d      	bhi.n	80046ac <modCommandsProcessPacket+0x1038>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->temperatures[0], 1e2, &ind); 
 8004610:	ed9f 8a74 	vldr	s16, [pc, #464]	; 80047e4 <modCommandsProcessPacket+0x1170>
 8004614:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 8004618:	486e      	ldr	r0, [pc, #440]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 800461a:	4669      	mov	r1, sp
 800461c:	eef0 0a48 	vmov.f32	s1, s16
 8004620:	f009 ffea 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->humidity, 1e2, &ind);
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	486b      	ldr	r0, [pc, #428]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 8004628:	ed93 0a26 	vldr	s0, [r3, #152]	; 0x98
 800462c:	4669      	mov	r1, sp
 800462e:	eef0 0a48 	vmov.f32	s1, s16
 8004632:	f009 ffe1 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->temperatures[1], 1e2, &ind);
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	4866      	ldr	r0, [pc, #408]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 800463a:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
 800463e:	4669      	mov	r1, sp
 8004640:	eef0 0a48 	vmov.f32	s1, s16
 8004644:	f009 ffd8 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->tempBatteryHigh, 1e2, &ind);
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	4862      	ldr	r0, [pc, #392]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 800464c:	ed93 0a20 	vldr	s0, [r3, #128]	; 0x80
 8004650:	4669      	mov	r1, sp
 8004652:	eef0 0a48 	vmov.f32	s1, s16
 8004656:	f009 ffcf 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->SoC/100, 1e3, &ind);
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	eddf 0a60 	vldr	s1, [pc, #384]	; 80047e0 <modCommandsProcessPacket+0x116c>
 8004660:	ed93 0a04 	vldr	s0, [r3, #16]
 8004664:	485b      	ldr	r0, [pc, #364]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 8004666:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800466a:	4669      	mov	r1, sp
 800466c:	f009 ffc4 	bl	800e5f8 <libBufferAppend_float16>
			libBufferAppend_float16(modCommandsSendBuffer, 0.0, 1e3, &ind);
 8004670:	4669      	mov	r1, sp
 8004672:	4858      	ldr	r0, [pc, #352]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 8004674:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80047e0 <modCommandsProcessPacket+0x116c>
 8004678:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80047e8 <modCommandsProcessPacket+0x1174>
 800467c:	f009 ffbc 	bl	800e5f8 <libBufferAppend_float16>
		  	modCommandsSendPacket(modCommandsSendBuffer, ind);
 8004680:	9900      	ldr	r1, [sp, #0]
 8004682:	f7ff b97c 	b.w	800397e <modCommandsProcessPacket+0x30a>
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->cellVoltagesIndividual[cellPointer].cellVoltage, 1e3, &ind);
 8004686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800468a:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
 800468e:	4669      	mov	r1, sp
 8004690:	eef0 0a48 	vmov.f32	s1, s16
 8004694:	4628      	mov	r0, r5
 8004696:	f009 ffaf 	bl	800e5f8 <libBufferAppend_float16>
			for (cellPointer = 0; cellPointer < totalNoOfCells; cellPointer++) {
 800469a:	3701      	adds	r7, #1
 800469c:	e795      	b.n	80045ca <modCommandsProcessPacket+0xf56>
				modCommandsSendBuffer[ind++] = modCommandsGeneralState->cellVoltagesIndividual[i].cellBleedActive;
 800469e:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 80046a2:	f807 1b01 	strb.w	r1, [r7], #1
			for (int i = 0; i < totalNoOfCells; i++) {
 80046a6:	3201      	adds	r2, #1
 80046a8:	2101      	movs	r1, #1
 80046aa:	e797      	b.n	80045dc <modCommandsProcessPacket+0xf68>
				libBufferAppend_float16(modCommandsSendBuffer, modCommandsGeneralState->auxVoltagesIndividual[auxPointer].auxVoltage, 1e2, &ind); 
 80046ac:	f105 02ca 	add.w	r2, r5, #202	; 0xca
 80046b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046b4:	ed93 0a00 	vldr	s0, [r3]
 80046b8:	4669      	mov	r1, sp
 80046ba:	eef0 0a48 	vmov.f32	s1, s16
 80046be:	4638      	mov	r0, r7
 80046c0:	f009 ff9a 	bl	800e5f8 <libBufferAppend_float16>
			for (auxPointer = 0; auxPointer < totalNoOfAux; auxPointer++) {
 80046c4:	3501      	adds	r5, #1
 80046c6:	e79f      	b.n	8004608 <modCommandsProcessPacket+0xf94>
			modCommandsGeneralState->chargeAllowed = true;
 80046c8:	4b43      	ldr	r3, [pc, #268]	; (80047d8 <modCommandsProcessPacket+0x1164>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			break;
 80046d2:	f7ff b81a 	b.w	800370a <modCommandsProcessPacket+0x96>
			modCommandsGeneralConfig->cellBalanceAllTime = true;
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <modCommandsProcessPacket+0x115c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 80046e0:	f7ff b813 	b.w	800370a <modCommandsProcessPacket+0x96>
			modPowerElectronicsResetCurrentOffset();
 80046e4:	f003 fbd8 	bl	8007e98 <modPowerElectronicsResetCurrentOffset>
		break;
 80046e8:	f7ff b80f 	b.w	800370a <modCommandsProcessPacket+0x96>
			main_config_t *conf = libMempools_alloc_conf();
 80046ec:	f00a fca0 	bl	800f030 <libMempools_alloc_conf>
			if (conf_ind != 0) {
 80046f0:	786b      	ldrb	r3, [r5, #1]
			main_config_t *conf = libMempools_alloc_conf();
 80046f2:	4607      	mov	r7, r0
			if (conf_ind != 0) {
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f47f a808 	bne.w	800370a <modCommandsProcessPacket+0x96>
			if (packet_id == COMM_GET_CUSTOM_CONFIG) {
 80046fa:	2e5d      	cmp	r6, #93	; 0x5d
 80046fc:	d115      	bne.n	800472a <modCommandsProcessPacket+0x10b6>
				modCommandsEBMSToVESC(conf);
 80046fe:	f7fe ff85 	bl	800360c <modCommandsEBMSToVESC>
			modCommandsSendBuffer[ind++] = packet_id;
 8004702:	4c34      	ldr	r4, [pc, #208]	; (80047d4 <modCommandsProcessPacket+0x1160>)
			modCommandsSendBuffer[ind++] = conf_ind;
 8004704:	2302      	movs	r3, #2
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	7063      	strb	r3, [r4, #1]
			int32_t len = confparser_serialize_main_config_t(modCommandsSendBuffer + ind, conf);
 800470c:	4639      	mov	r1, r7
			modCommandsSendBuffer[ind++] = packet_id;
 800470e:	7026      	strb	r6, [r4, #0]
			int32_t len = confparser_serialize_main_config_t(modCommandsSendBuffer + ind, conf);
 8004710:	1ca0      	adds	r0, r4, #2
 8004712:	f00a fcc7 	bl	800f0a4 <confparser_serialize_main_config_t>
			modCommandsSendPacket(modCommandsSendBuffer, len + ind);
 8004716:	9900      	ldr	r1, [sp, #0]
 8004718:	4401      	add	r1, r0
 800471a:	4620      	mov	r0, r4
 800471c:	f7fe ff1c 	bl	8003558 <modCommandsSendPacket>
			libMempools_free_conf(conf);
 8004720:	4638      	mov	r0, r7
			libMempools_free_conf(conf);
 8004722:	f00a fcab 	bl	800f07c <libMempools_free_conf>
		} break;
 8004726:	f7fe bff0 	b.w	800370a <modCommandsProcessPacket+0x96>
				confparser_set_defaults_main_config_t(conf);
 800472a:	f00a fda9 	bl	800f280 <confparser_set_defaults_main_config_t>
 800472e:	e7e8      	b.n	8004702 <modCommandsProcessPacket+0x108e>
			main_config_t *conf = libMempools_alloc_conf();
 8004730:	f00a fc7e 	bl	800f030 <libMempools_alloc_conf>
			if (conf_ind == 0 && confparser_deserialize_main_config_t(data + 1, conf)) {
 8004734:	786b      	ldrb	r3, [r5, #1]
			main_config_t *conf = libMempools_alloc_conf();
 8004736:	4604      	mov	r4, r0
			if (conf_ind == 0 && confparser_deserialize_main_config_t(data + 1, conf)) {
 8004738:	b983      	cbnz	r3, 800475c <modCommandsProcessPacket+0x10e8>
 800473a:	4601      	mov	r1, r0
 800473c:	1ca8      	adds	r0, r5, #2
 800473e:	f00a fd27 	bl	800f190 <confparser_deserialize_main_config_t>
 8004742:	b158      	cbz	r0, 800475c <modCommandsProcessPacket+0x10e8>
				modCommandsVESCToEBMS(conf);
 8004744:	4620      	mov	r0, r4
 8004746:	f7fe ff2d 	bl	80035a4 <modCommandsVESCToEBMS>
				modCommandsSendBuffer[ind++] = packet_id;
 800474a:	4822      	ldr	r0, [pc, #136]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 800474c:	235f      	movs	r3, #95	; 0x5f
 800474e:	2101      	movs	r1, #1
 8004750:	7003      	strb	r3, [r0, #0]
 8004752:	9100      	str	r1, [sp, #0]
				modCommandsSendPacket(modCommandsSendBuffer, ind);
 8004754:	f7fe ff00 	bl	8003558 <modCommandsSendPacket>
			libMempools_free_conf(conf);
 8004758:	4620      	mov	r0, r4
 800475a:	e7e2      	b.n	8004722 <modCommandsProcessPacket+0x10ae>
				modCommandsPrintf("Warning: Could not set configuration");
 800475c:	4823      	ldr	r0, [pc, #140]	; (80047ec <modCommandsProcessPacket+0x1178>)
 800475e:	f7fe ff03 	bl	8003568 <modCommandsPrintf>
 8004762:	e7f9      	b.n	8004758 <modCommandsProcessPacket+0x10e4>
			if (conf_ind != 0) {
 8004764:	7846      	ldrb	r6, [r0, #1]
			int conf_ind = data[ind++];
 8004766:	2301      	movs	r3, #1
 8004768:	9300      	str	r3, [sp, #0]
			if (conf_ind != 0) {
 800476a:	2e00      	cmp	r6, #0
 800476c:	f47e afcd 	bne.w	800370a <modCommandsProcessPacket+0x96>
			int32_t len_conf = libBufferGet_int32(data, &ind);
 8004770:	4669      	mov	r1, sp
 8004772:	4620      	mov	r0, r4
 8004774:	f009 ffa7 	bl	800e6c6 <libBufferGet_int32>
			int32_t ofs_conf = libBufferGet_int32(data, &ind);
 8004778:	4669      	mov	r1, sp
			int32_t len_conf = libBufferGet_int32(data, &ind);
 800477a:	4605      	mov	r5, r0
			int32_t ofs_conf = libBufferGet_int32(data, &ind);
 800477c:	4620      	mov	r0, r4
 800477e:	f009 ffa2 	bl	800e6c6 <libBufferGet_int32>
			if ((len_conf + ofs_conf) > DATA_MAIN_CONFIG_T__SIZE || len_conf > (PACKET_MAX_PL_LEN - 10)) {
 8004782:	182b      	adds	r3, r5, r0
 8004784:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
			int32_t ofs_conf = libBufferGet_int32(data, &ind);
 8004788:	4607      	mov	r7, r0
			if ((len_conf + ofs_conf) > DATA_MAIN_CONFIG_T__SIZE || len_conf > (PACKET_MAX_PL_LEN - 10)) {
 800478a:	f6be afbe 	bge.w	800370a <modCommandsProcessPacket+0x96>
 800478e:	f240 33f6 	movw	r3, #1014	; 0x3f6
 8004792:	429d      	cmp	r5, r3
 8004794:	f73e afb9 	bgt.w	800370a <modCommandsProcessPacket+0x96>
			modCommandsSendBuffer[ind++] = packet_id;
 8004798:	4c0e      	ldr	r4, [pc, #56]	; (80047d4 <modCommandsProcessPacket+0x1160>)
 800479a:	235c      	movs	r3, #92	; 0x5c
 800479c:	7023      	strb	r3, [r4, #0]
			modCommandsSendBuffer[ind++] = conf_ind;
 800479e:	7066      	strb	r6, [r4, #1]
 80047a0:	2302      	movs	r3, #2
			libBufferAppend_int32(modCommandsSendBuffer, DATA_MAIN_CONFIG_T__SIZE, &ind);
 80047a2:	466a      	mov	r2, sp
 80047a4:	f240 71ef 	movw	r1, #2031	; 0x7ef
 80047a8:	4620      	mov	r0, r4
			modCommandsSendBuffer[ind++] = conf_ind;
 80047aa:	9300      	str	r3, [sp, #0]
			libBufferAppend_int32(modCommandsSendBuffer, DATA_MAIN_CONFIG_T__SIZE, &ind);
 80047ac:	f009 feda 	bl	800e564 <libBufferAppend_int32>
			libBufferAppend_int32(modCommandsSendBuffer, ofs_conf, &ind);
 80047b0:	466a      	mov	r2, sp
 80047b2:	4639      	mov	r1, r7
 80047b4:	4620      	mov	r0, r4
 80047b6:	f009 fed5 	bl	800e564 <libBufferAppend_int32>
			memcpy(modCommandsSendBuffer + ind, data_main_config_t_ + ofs_conf, len_conf);
 80047ba:	9e00      	ldr	r6, [sp, #0]
 80047bc:	490c      	ldr	r1, [pc, #48]	; (80047f0 <modCommandsProcessPacket+0x117c>)
 80047be:	462a      	mov	r2, r5
 80047c0:	4439      	add	r1, r7
 80047c2:	19a0      	adds	r0, r4, r6
 80047c4:	f00a fe02 	bl	800f3cc <memcpy>
			ind += len_conf;
 80047c8:	1971      	adds	r1, r6, r5
 80047ca:	9100      	str	r1, [sp, #0]
 80047cc:	f7fe bfc8 	b.w	8003760 <modCommandsProcessPacket+0xec>
 80047d0:	20004248 	.word	0x20004248
 80047d4:	20004250 	.word	0x20004250
 80047d8:	2000424c 	.word	0x2000424c
 80047dc:	49742400 	.word	0x49742400
 80047e0:	447a0000 	.word	0x447a0000
 80047e4:	42c80000 	.word	0x42c80000
 80047e8:	00000000 	.word	0x00000000
 80047ec:	080133ee 	.word	0x080133ee
 80047f0:	08016f50 	.word	0x08016f50

080047f4 <modConfigInit>:
#include "modConfig.h"

modConfigGeneralConfigStructTypedef modConfigGeneralConfig;

modConfigGeneralConfigStructTypedef* modConfigInit(void) {
	driverSWStorageManagerConfigStructSize = (sizeof(modConfigGeneralConfigStructTypedef)/sizeof(uint16_t)); // Calculate the space needed for the config struct in EEPROM
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <modConfigInit+0xc>)
	return &modConfigGeneralConfig;
};
 80047f6:	4803      	ldr	r0, [pc, #12]	; (8004804 <modConfigInit+0x10>)
	driverSWStorageManagerConfigStructSize = (sizeof(modConfigGeneralConfigStructTypedef)/sizeof(uint16_t)); // Calculate the space needed for the config struct in EEPROM
 80047f8:	229c      	movs	r2, #156	; 0x9c
 80047fa:	801a      	strh	r2, [r3, #0]
};
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20004bea 	.word	0x20004bea
 8004804:	20004758 	.word	0x20004758

08004808 <modConfigStoreConfig>:
	modConfigLoadConfig();
	return returnVal;
};

bool modConfigStoreConfig(void) {
	return driverSWStorageManagerStoreStruct(&modConfigGeneralConfig,STORAGE_CONFIG);
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <modConfigStoreConfig+0x8>)
 800480a:	2100      	movs	r1, #0
 800480c:	f004 baea 	b.w	8008de4 <driverSWStorageManagerStoreStruct>
 8004810:	20004758 	.word	0x20004758

08004814 <modConfigLoadConfig>:
	// TODO_EEPROM
};

bool modConfigLoadConfig(void) {
	return driverSWStorageManagerGetStruct(&modConfigGeneralConfig,STORAGE_CONFIG);
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <modConfigLoadConfig+0x8>)
 8004816:	2100      	movs	r1, #0
 8004818:	f004 bb0a 	b.w	8008e30 <driverSWStorageManagerGetStruct>
 800481c:	20004758 	.word	0x20004758

08004820 <modconfigHardwareLimitsApply>:
	driverSWStorageManagerConfigEmpty = false;
	return driverSWStorageManagerStoreStruct(&defaultConfig,STORAGE_CONFIG);
}

void modconfigHardwareLimitsApply(modConfigGeneralConfigStructTypedef *configLocation) {
	configLocation->maxSimultaneousDischargingCells = MIN(configLocation->maxSimultaneousDischargingCells,HW_LIM_CELL_BALANCE_MAX_SIMULTANEOUS_DISCHARGE);
 8004820:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004824:	2b12      	cmp	r3, #18
 8004826:	bf28      	it	cs
 8004828:	2312      	movcs	r3, #18
 800482a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	configLocation->cellMonitorICCount              = MIN(configLocation->cellMonitorICCount             ,HW_LIM_CELL_MONITOR_IC_COUNT);
 800482e:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
	configLocation->lastICMask 											= 0;
 8004832:	2200      	movs	r2, #0
	configLocation->cellMonitorICCount              = MIN(configLocation->cellMonitorICCount             ,HW_LIM_CELL_MONITOR_IC_COUNT);
 8004834:	2b12      	cmp	r3, #18
	configLocation->lastICMask 											= 0;
 8004836:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
	
	if(configLocation->notUsedTimeout)
 800483a:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
	configLocation->cellMonitorICCount              = MIN(configLocation->cellMonitorICCount             ,HW_LIM_CELL_MONITOR_IC_COUNT);
 800483e:	bf28      	it	cs
 8004840:	2312      	movcs	r3, #18
void modconfigHardwareLimitsApply(modConfigGeneralConfigStructTypedef *configLocation) {
 8004842:	b530      	push	{r4, r5, lr}
	configLocation->cellMonitorICCount              = MIN(configLocation->cellMonitorICCount             ,HW_LIM_CELL_MONITOR_IC_COUNT);
 8004844:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
	if(configLocation->notUsedTimeout)
 8004848:	b13a      	cbz	r2, 800485a <modconfigHardwareLimitsApply+0x3a>
		configLocation->notUsedTimeout                = MAX(configLocation->notUsedTimeout                 ,HW_LIM_MIN_NOT_USED_DELAY);
 800484a:	f241 3188 	movw	r1, #5000	; 0x1388
 800484e:	428a      	cmp	r2, r1
 8004850:	bf2c      	ite	cs
 8004852:	f8c0 20c8 	strcs.w	r2, [r0, #200]	; 0xc8
 8004856:	f8c0 10c8 	strcc.w	r1, [r0, #200]	; 0xc8
	
// Check for feasable parameters
	if((configLocation->cellMonitorICCount % configLocation->noOfParallelModules) == 0){ // Check if feasable configuration
 800485a:	78c2      	ldrb	r2, [r0, #3]
 800485c:	fbb3 f5f2 	udiv	r5, r3, r2
 8004860:	fb02 3315 	mls	r3, r2, r5, r3
 8004864:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004868:	d111      	bne.n	800488e <modconfigHardwareLimitsApply+0x6e>
			if(configLocation->noOfCellsSeries % (configLocation->cellMonitorICCount / configLocation->noOfParallelModules) == 0){
 800486a:	7804      	ldrb	r4, [r0, #0]
				configLocation->noOfCellsPerModule = configLocation->noOfCellsSeries/(configLocation->cellMonitorICCount / configLocation->noOfParallelModules);
 800486c:	fbb4 f2f5 	udiv	r2, r4, r5
 8004870:	b2d1      	uxtb	r1, r2
			if(configLocation->noOfCellsSeries % (configLocation->cellMonitorICCount / configLocation->noOfParallelModules) == 0){
 8004872:	fb05 4212 	mls	r2, r5, r2, r4
 8004876:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800487a:	d11b      	bne.n	80048b4 <modconfigHardwareLimitsApply+0x94>
				configLocation->noOfCellsPerModule = configLocation->noOfCellsSeries/(configLocation->cellMonitorICCount / configLocation->noOfParallelModules);
 800487c:	7081      	strb	r1, [r0, #2]
				configLocation->lastICNoOfCells = configLocation->noOfCellsPerModule;
 800487e:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
				
				for(int bitPointer = 0; bitPointer < configLocation->lastICNoOfCells ; bitPointer++){
 8004882:	4613      	mov	r3, r2
 8004884:	4299      	cmp	r1, r3
 8004886:	dc0c      	bgt.n	80048a2 <modconfigHardwareLimitsApply+0x82>
			configLocation->noOfCellsPerModule = 1;
			configLocation->lastICNoOfCells = 0;
			configLocation->lastICMask = 0;
		};
		
		if (configLocation->noOfCellsPerModule <= 3){
 8004888:	7883      	ldrb	r3, [r0, #2]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d808      	bhi.n	80048a0 <modconfigHardwareLimitsApply+0x80>
			configLocation->noOfCellsSeries    = 12;
 800488e:	230c      	movs	r3, #12
 8004890:	7003      	strb	r3, [r0, #0]
			configLocation->cellMonitorICCount = 1;
			configLocation->noOfCellsPerModule = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	7083      	strb	r3, [r0, #2]
			configLocation->cellMonitorICCount = 1;
 8004896:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
			configLocation->lastICNoOfCells = 0;
			configLocation->lastICMask = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
		}
}
 80048a0:	bd30      	pop	{r4, r5, pc}
					configLocation->lastICMask = (configLocation->lastICMask << 1)| 1 ; // This contains the last cells mask 
 80048a2:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 80048a6:	0052      	lsls	r2, r2, #1
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
				for(int bitPointer = 0; bitPointer < configLocation->lastICNoOfCells ; bitPointer++){
 80048b0:	3301      	adds	r3, #1
 80048b2:	e7e7      	b.n	8004884 <modconfigHardwareLimitsApply+0x64>
				configLocation->noOfCellsPerModule = (configLocation->noOfCellsSeries / (configLocation->cellMonitorICCount / configLocation->noOfParallelModules))+1;
 80048b4:	3101      	adds	r1, #1
 80048b6:	b2c9      	uxtb	r1, r1
 80048b8:	7081      	strb	r1, [r0, #2]
				configLocation->lastICNoOfCells = configLocation->noOfCellsSeries % configLocation->noOfCellsPerModule; // This contains the last cells number monitored by the last serie IC 
 80048ba:	fbb4 f2f1 	udiv	r2, r4, r1
 80048be:	fb01 4112 	mls	r1, r1, r2, r4
 80048c2:	b2c9      	uxtb	r1, r1
 80048c4:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
				for(int bitPointer = 0; bitPointer < configLocation->lastICNoOfCells ; bitPointer++){
 80048c8:	4299      	cmp	r1, r3
 80048ca:	dddd      	ble.n	8004888 <modconfigHardwareLimitsApply+0x68>
					configLocation->lastICMask = (configLocation->lastICMask << 1)| 1 ; // This contains the last cells mask  
 80048cc:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 80048d0:	0052      	lsls	r2, r2, #1
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
				for(int bitPointer = 0; bitPointer < configLocation->lastICNoOfCells ; bitPointer++){
 80048da:	3301      	adds	r3, #1
 80048dc:	e7f4      	b.n	80048c8 <modconfigHardwareLimitsApply+0xa8>
	...

080048e0 <modConfigLoadDefaultConfig>:

void modConfigLoadDefaultConfig(modConfigGeneralConfigStructTypedef *configLocation) {
#if ENNOID_LV
	configLocation->noOfCellsSeries					= 12;					// Total number of cells in series in the battery pack
 80048e0:	f640 230c 	movw	r3, #2572	; 0xa0c
 80048e4:	8003      	strh	r3, [r0, #0]
    //configLocation->noOfCellsSeries                 = 6;                   // Total number of cells in series in the battery pack
	configLocation->noOfCellsParallel                              	= 10;       				// Number of cells in parallel
	configLocation->noOfParallelModules                       	= 1;      				// Number of parallel modules
	//configLocation->batteryCapacity					= 22.00f;				// XXAh battery
	configLocation->batteryCapacity                 = 352.80f;               // XXAh battery
 80048e6:	4b5c      	ldr	r3, [pc, #368]	; (8004a58 <modConfigLoadDefaultConfig+0x178>)
 80048e8:	6043      	str	r3, [r0, #4]
	configLocation->cellHardUnderVoltage				= 2.30f;				// Worst case X.XXV as lowest cell voltage
 80048ea:	4b5c      	ldr	r3, [pc, #368]	; (8004a5c <modConfigLoadDefaultConfig+0x17c>)
 80048ec:	6083      	str	r3, [r0, #8]
	configLocation->cellHardOverVoltage				= 4.20f;				// Worst case X.XXV as highest cell voltage
 80048ee:	4b5c      	ldr	r3, [pc, #368]	; (8004a60 <modConfigLoadDefaultConfig+0x180>)
 80048f0:	60c3      	str	r3, [r0, #12]
	configLocation->cellLCSoftUnderVoltage				= 2.70f;				// Lowest cell voltage X.XXV.
 80048f2:	4b5c      	ldr	r3, [pc, #368]	; (8004a64 <modConfigLoadDefaultConfig+0x184>)
 80048f4:	6103      	str	r3, [r0, #16]
	configLocation->cellSoftOverVoltage				= 4.10f;				// Normal highest cell voltage X.XXV.
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <modConfigLoadDefaultConfig+0x188>)
 80048f8:	6143      	str	r3, [r0, #20]
	configLocation->cellBalanceDifferenceThreshold                 	= 0.005f;				// Start balancing @ XmV difference, stop if below.
 80048fa:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <modConfigLoadDefaultConfig+0x18c>)
	//configLocation->cellBalanceStart				= 4.0f;					// Start balancing above X.XXV.
	configLocation->cellBalanceStart                = 3.5f;                 // Start balancing above X.XXV.
	configLocation->cellBalanceAllTime				= true;				// Enable balancing under all opstate
	//configLocation->cellBalanceAllTime              = true;                // Enable balancing under all opstate
	configLocation->cellThrottleUpperStart				= 0.03f;				// Upper range of cell voltage for charge throttling.
 80048fc:	4a5c      	ldr	r2, [pc, #368]	; (8004a70 <modConfigLoadDefaultConfig+0x190>)
	configLocation->cellBalanceDifferenceThreshold                 	= 0.005f;				// Start balancing @ XmV difference, stop if below.
 80048fe:	6183      	str	r3, [r0, #24]
	configLocation->cellBalanceStart                = 3.5f;                 // Start balancing above X.XXV.
 8004900:	4b5c      	ldr	r3, [pc, #368]	; (8004a74 <modConfigLoadDefaultConfig+0x194>)
 8004902:	61c3      	str	r3, [r0, #28]
	configLocation->cellThrottleUpperStart				= 0.03f;				// Upper range of cell voltage for charge throttling.
 8004904:	6242      	str	r2, [r0, #36]	; 0x24
	configLocation->packVoltageDataSource                          	= sourcePackVoltageISL28022;		// Packvoltage source.
	configLocation->packCurrentDataSource                          	= sourcePackCurrentISL28022; 		// The pack current is the same as the current through the low current shunt
	configLocation->buzzerSignalSource                             	= buzzerSourceOn;         		// Stores what source shoud be taken to trigger
	configLocation->buzzerSignalPersistant                         	= false;                    		// Stores whether the buzzer should stay on after triggering
  	configLocation->shuntLCFactor                                  	= -0.051f;              		// Shunt factor low current
	configLocation->voltageLCFactor	                               	= 3.50f;                   		// Pack voltage factor 
 8004906:	63c3      	str	r3, [r0, #60]	; 0x3c
	configLocation->cellThrottleLowerStart				= 0.20f;				// Lower range of cell voltage for discharge throttling.
 8004908:	4a5b      	ldr	r2, [pc, #364]	; (8004a78 <modConfigLoadDefaultConfig+0x198>)
	configLocation->voltageLCOffset                                	= 0;                       		// Pack voltage offset 
	configLocation->loadVoltageFactor	                       	= 49.2f;                   		// Load voltage factor 
 800490a:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <modConfigLoadDefaultConfig+0x19c>)
	configLocation->cellThrottleLowerStart				= 0.20f;				// Lower range of cell voltage for discharge throttling.
 800490c:	6282      	str	r2, [r0, #40]	; 0x28
	configLocation->loadVoltageFactor	                       	= 49.2f;                   		// Load voltage factor 
 800490e:	6443      	str	r3, [r0, #68]	; 0x44
	configLocation->packVoltageDataSource                          	= sourcePackVoltageISL28022;		// Packvoltage source.
 8004910:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <modConfigLoadDefaultConfig+0x1a0>)
	configLocation->loadVoltageOffset                              	= 0.0f;                    		// Load voltage offset
	configLocation->chargerVoltageFactor	                       	= 49.2f;                   		// Charger voltage factor 
 8004912:	64c3      	str	r3, [r0, #76]	; 0x4c
	configLocation->chargerVoltageOffset                           	= 0.0f;                    		// Charger voltage offset
	configLocation->throttleChargeIncreaseRate                     	= 1;                       		// Percentage charge throttle increase rate per 100ms (cell voltage loop time)  
 8004914:	f240 2301 	movw	r3, #513	; 0x201
void modConfigLoadDefaultConfig(modConfigGeneralConfigStructTypedef *configLocation) {
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
	configLocation->packVoltageDataSource                          	= sourcePackVoltageISL28022;		// Packvoltage source.
 800491a:	6342      	str	r2, [r0, #52]	; 0x34
	configLocation->throttleDisChargeIncreaseRate                  	= 2;                       		// Percentage discharge throttle increase rate per 100ms (cell voltage loop time)  	
	configLocation->cellBalanceUpdateInterval			= 4*1000;				// Keep calculated resistors enabled for this amount of time in miliseconds.
	configLocation->maxSimultaneousDischargingCells			= 5;					// Allow a maximum of X cells simultinous discharging trough bleeding resistors.
	configLocation->timeoutDischargeRetry				= 10*1000;				// Wait for X seconds before retrying to enable load.
	configLocation->hysteresisDischarge 				= 0.02f;				// Lowest cell should rise XXmV before output is re enabled.
 800491c:	4d59      	ldr	r5, [pc, #356]	; (8004a84 <modConfigLoadDefaultConfig+0x1a4>)
  	configLocation->shuntLCFactor                                  	= -0.051f;              		// Shunt factor low current
 800491e:	4a5a      	ldr	r2, [pc, #360]	; (8004a88 <modConfigLoadDefaultConfig+0x1a8>)
	configLocation->timeoutChargeRetry				= 100*1000;				// Wait for XX seconds before retrying to enable charger.
	configLocation->hysteresisCharge				= 0.01f;				// Highest cell should lower XXmV before charger is re enabled.
	configLocation->timeoutChargeCompleted				= 30*60*1000;				// Wait for XX minutes before setting charge state to charged.
 8004920:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8004ab0 <modConfigLoadDefaultConfig+0x1d0>
	configLocation->throttleChargeIncreaseRate                     	= 1;                       		// Percentage charge throttle increase rate per 100ms (cell voltage loop time)  
 8004924:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
	configLocation->cellBalanceUpdateInterval			= 4*1000;				// Keep calculated resistors enabled for this amount of time in miliseconds.
 8004928:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	configLocation->cellThrottleUpperMargin				= 0.01f;				// Margin of throttle from upper soft limits.
 800492c:	4e57      	ldr	r6, [pc, #348]	; (8004a8c <modConfigLoadDefaultConfig+0x1ac>)
  	configLocation->shuntLCFactor                                  	= -0.051f;              		// Shunt factor low current
 800492e:	6382      	str	r2, [r0, #56]	; 0x38
	configLocation->noOfParallelModules                       	= 1;      				// Number of parallel modules
 8004930:	2401      	movs	r4, #1
	configLocation->loadVoltageOffset                              	= 0.0f;                    		// Load voltage offset
 8004932:	2200      	movs	r2, #0
	configLocation->voltageLCOffset                                	= 0;                       		// Pack voltage offset 
 8004934:	2100      	movs	r1, #0
	configLocation->cellThrottleLowerMargin				= 0.50f;				// Margin of throttle from lower soft limits.	
 8004936:	f04f 5c7c 	mov.w	ip, #1056964608	; 0x3f000000
	configLocation->maxSimultaneousDischargingCells			= 5;					// Allow a maximum of X cells simultinous discharging trough bleeding resistors.
 800493a:	2705      	movs	r7, #5
	configLocation->cellBalanceUpdateInterval			= 4*1000;				// Keep calculated resistors enabled for this amount of time in miliseconds.
 800493c:	6583      	str	r3, [r0, #88]	; 0x58
	configLocation->hysteresisDischarge 				= 0.02f;				// Lowest cell should rise XXmV before output is re enabled.
 800493e:	6645      	str	r5, [r0, #100]	; 0x64
	configLocation->timeoutDischargeRetry				= 10*1000;				// Wait for X seconds before retrying to enable load.
 8004940:	f242 7310 	movw	r3, #10000	; 0x2710
	configLocation->timeoutChargeRetry				= 100*1000;				// Wait for XX seconds before retrying to enable charger.
 8004944:	4d52      	ldr	r5, [pc, #328]	; (8004a90 <modConfigLoadDefaultConfig+0x1b0>)
	configLocation->timeoutChargeCompleted				= 30*60*1000;				// Wait for XX minutes before setting charge state to charged.
 8004946:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
	configLocation->timeoutChargingCompletedMinimalMismatch 	= 6*1000;				// If cell mismatch is under threshold and (charging is not allowed) wait this delay time to set "charged" state.
 800494a:	f241 7e70 	movw	lr, #6000	; 0x1770
	configLocation->cellThrottleUpperMargin				= 0.01f;				// Margin of throttle from upper soft limits.
 800494e:	62c6      	str	r6, [r0, #44]	; 0x2c
	configLocation->cellThrottleLowerMargin				= 0.50f;				// Margin of throttle from lower soft limits.	
 8004950:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
	configLocation->loadVoltageOffset                              	= 0.0f;                    		// Load voltage offset
 8004954:	6482      	str	r2, [r0, #72]	; 0x48
	configLocation->chargerVoltageOffset                           	= 0.0f;                    		// Charger voltage offset
 8004956:	6502      	str	r2, [r0, #80]	; 0x50
	configLocation->maxSimultaneousDischargingCells			= 5;					// Allow a maximum of X cells simultinous discharging trough bleeding resistors.
 8004958:	f880 705c 	strb.w	r7, [r0, #92]	; 0x5c
	configLocation->timeoutDischargeRetry				= 10*1000;				// Wait for X seconds before retrying to enable load.
 800495c:	6603      	str	r3, [r0, #96]	; 0x60
	configLocation->hysteresisCharge				= 0.01f;				// Highest cell should lower XXmV before charger is re enabled.
 800495e:	66c6      	str	r6, [r0, #108]	; 0x6c
	configLocation->noOfParallelModules                       	= 1;      				// Number of parallel modules
 8004960:	70c4      	strb	r4, [r0, #3]
	configLocation->cellBalanceAllTime				= true;				// Enable balancing under all opstate
 8004962:	f880 4020 	strb.w	r4, [r0, #32]
	configLocation->voltageLCOffset                                	= 0;                       		// Pack voltage offset 
 8004966:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
	configLocation->timeoutChargeRetry				= 100*1000;				// Wait for XX seconds before retrying to enable charger.
 800496a:	6685      	str	r5, [r0, #104]	; 0x68
	configLocation->timeoutChargingCompletedMinimalMismatch 	= 6*1000;				// If cell mismatch is under threshold and (charging is not allowed) wait this delay time to set "charged" state.
 800496c:	f8c0 e074 	str.w	lr, [r0, #116]	; 0x74
	configLocation->maxMismatchThreshold				= 0.010f;				// If mismatch is under this threshold for timeoutChargingCompletedMinimalMismatch determin fully charged.
 8004970:	6786      	str	r6, [r0, #120]	; 0x78
	configLocation->chargerEnabledThreshold				= 0.5f;					// If charge current > X.XA stay in charging mode and dont power off.
	configLocation->timeoutChargerDisconnected			= 2000;					// Wait for X seconds to respond to charger disconnect.
 8004972:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 8004976:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
	configLocation->minimalPrechargePercentage			= 0.70f;				// output should be at a minimal of 80% of input voltage.
	configLocation->timeoutLCPreCharge				= 1.5*1000;				// Precharge error timeout, allow 1.5 seconds pre-charge time before declaring load error.
	configLocation->maxAllowedCurrent				= 1000.0f;				// Allow max XXXA trough BMS.
	configLocation->allowedTempBattDischargingMax                  	= 75.0f;                  		// Max battery temperature where discharging is still allowed
	configLocation->allowedTempBattDischargingMin                  	= 0.0f;                    		// Min battery temperature where discharging is still allowed
 800497a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	configLocation->minimalPrechargePercentage			= 0.70f;				// output should be at a minimal of 80% of input voltage.
 800497e:	4e45      	ldr	r6, [pc, #276]	; (8004a94 <modConfigLoadDefaultConfig+0x1b4>)
	configLocation->allowedTempBattChargingMax                     	= 50.0f;                   		// Max battery temperature where charging is still allowed
	configLocation->allowedTempBattChargingMin                     	= 0.0f;                    		// Min battery temperature where charging is still allowed
 8004980:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	configLocation->allowedTempBattCoolingMax                      	= 5.0f;                    		// Max battery temperature where cooling is activated
	configLocation->allowedTempBattCoolingMin                      	= 50.0f;                   		// Min battery temperature where heating is activated
	configLocation->allowedTempBMSMax                              	= 80.0f;                   		// Max BMS operational temperature
	configLocation->allowedTempBMSMin                              	= 0.0f;                    		// Min BMS operational temperature
 8004984:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
	configLocation->displayTimeoutBatteryDead			= 5000;					// Show battery dead symbol X seconds before going to powerdown in cell voltage error state.
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
	configLocation->displayTimeoutBatteryError			= 5000;					// Show error symbol for X seconds before going to powerdown in general error state.
 800498c:	e9c0 222c 	strd	r2, r2, [r0, #176]	; 0xb0
	configLocation->minimalPrechargePercentage			= 0.70f;				// output should be at a minimal of 80% of input voltage.
 8004990:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
	configLocation->displayTimeoutBatteryErrorPreCharge		= 10000;				// Show pre charge error for XX seconds.
	configLocation->displayTimeoutSplashScreen			= 3000;					// Display / INIT splash screen time.
	configLocation->displayStyle					= advanced;				// Display style used for showing the SSD1306 data
 8004994:	f240 5201 	movw	r2, #1281	; 0x501
	configLocation->timeoutLCPreCharge				= 1.5*1000;				// Precharge error timeout, allow 1.5 seconds pre-charge time before declaring load error.
 8004998:	f240 56dc 	movw	r6, #1500	; 0x5dc
 800499c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
	configLocation->displayStyle					= advanced;				// Display style used for showing the SSD1306 data
 80049a0:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
	configLocation->maxAllowedCurrent				= 1000.0f;				// Allow max XXXA trough BMS.
 80049a4:	4e3c      	ldr	r6, [pc, #240]	; (8004a98 <modConfigLoadDefaultConfig+0x1b8>)
	configLocation->maxUnderAndOverVoltageErrorCount 		= 5;					// Max count of hard cell voltage errors.
	configLocation->maxUnderAndOverTemperatureErrorCount 		= 5;					// Max count of hard cell voltage errors.
 80049a6:	f880 70c2 	strb.w	r7, [r0, #194]	; 0xc2
	configLocation->notUsedCurrentThreshold				= 1.0f;					// If abs(packcurrent) < X.XA consider pack as not used.
 80049aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	configLocation->notUsedTimeout					= 20*60*1000;				// If pack is not used for longer than XX minutes disable bms.
	configLocation->stateOfChargeStoreInterval			= 60*1000;				// Interval in ms to store state of charge information.
 80049ae:	4f3b      	ldr	r7, [pc, #236]	; (8004a9c <modConfigLoadDefaultConfig+0x1bc>)
	configLocation->maxAllowedCurrent				= 1000.0f;				// Allow max XXXA trough BMS.
 80049b0:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
	configLocation->notUsedCurrentThreshold				= 1.0f;					// If abs(packcurrent) < X.XA consider pack as not used.
 80049b4:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
	configLocation->allowedTempBattDischargingMax                  	= 75.0f;                  		// Max battery temperature where discharging is still allowed
 80049b8:	4e39      	ldr	r6, [pc, #228]	; (8004aa0 <modConfigLoadDefaultConfig+0x1c0>)
 80049ba:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
	configLocation->stateOfChargeStoreInterval			= 60*1000;				// Interval in ms to store state of charge information.
 80049be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049c2:	e9c0 7232 	strd	r7, r2, [r0, #200]	; 0xc8
	configLocation->allowedTempBattChargingMax                     	= 50.0f;                   		// Max battery temperature where charging is still allowed
 80049c6:	4e37      	ldr	r6, [pc, #220]	; (8004aa4 <modConfigLoadDefaultConfig+0x1c4>)
	//configLocation->tempEnableMaskBattery                         = 0xFFFF;				// Bitwise select what sensor to enable for the battery (external sensors).
	configLocation->tempEnableMaskBattery                           = 0x0006;               // Bitwise select what sensor to enable for the battery (external sensors).
	//configLocation->tempEnableMaskExpansion                     	= 0xFFFF;				// Bitwise select what sensor to enable for the expansion boards(external sensors).
	configLocation->tempEnableMaskExpansion                         = 0x0000;               // Bitwise select what sensor to enable for the expansion boards(external sensors).
  	//configLocation->noOfTempSensorPerModule            		= 1;					// Number of temperature sensors monitored per LTC68XX
    configLocation->noOfTempSensorPerModule                 = 3;                    // Number of temperature sensors monitored per LTC68XX
 80049c8:	4f37      	ldr	r7, [pc, #220]	; (8004aa8 <modConfigLoadDefaultConfig+0x1c8>)
	configLocation->allowedTempBattChargingMax                     	= 50.0f;                   		// Max battery temperature where charging is still allowed
 80049ca:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
	configLocation->stateOfChargeMethod                             = socCoulombAndCellVoltage;                   // Use coulomb counting for SoC calculation
 80049ce:	f640 2202 	movw	r2, #2562	; 0xa02
	configLocation->allowedTempBattCoolingMin                      	= 50.0f;                   		// Min battery temperature where heating is activated
 80049d2:	f8c0 60a4 	str.w	r6, [r0, #164]	; 0xa4
	configLocation->stateOfChargeMethod                             = socCoulombAndCellVoltage;                   // Use coulomb counting for SoC calculation
 80049d6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	configLocation->allowedTempBMSMax                              	= 80.0f;                   		// Max BMS operational temperature
 80049da:	4e34      	ldr	r6, [pc, #208]	; (8004aac <modConfigLoadDefaultConfig+0x1cc>)
	configLocation->chargerEnabledThreshold				= 0.5f;					// If charge current > X.XA stay in charging mode and dont power off.
 80049dc:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
	configLocation->emitStatusProtocol                             	= canEmitProtocolVESC; 			// Can emit protocol set to MG style for backwards compatibility
 80049e0:	2203      	movs	r2, #3
	configLocation->allowedTempBattCoolingMax                      	= 5.0f;                    		// Max battery temperature where cooling is activated
 80049e2:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8004ab4 <modConfigLoadDefaultConfig+0x1d4>
	configLocation->allowedTempBMSMax                              	= 80.0f;                   		// Max BMS operational temperature
 80049e6:	f8c0 60a8 	str.w	r6, [r0, #168]	; 0xa8
	configLocation->emitStatusProtocol                             	= canEmitProtocolVESC; 			// Can emit protocol set to MG style for backwards compatibility
 80049ea:	f880 20d4 	strb.w	r2, [r0, #212]	; 0xd4
	configLocation->displayTimeoutSplashScreen			= 3000;					// Display / INIT splash screen time.
 80049ee:	f640 36b8 	movw	r6, #3000	; 0xbb8
	configLocation->tempEnableMaskBattery                           = 0x0006;               // Bitwise select what sensor to enable for the battery (external sensors).
 80049f2:	2206      	movs	r2, #6
    configLocation->noOfTempSensorPerModule                 = 3;                    // Number of temperature sensors monitored per LTC68XX
 80049f4:	f8c0 70e4 	str.w	r7, [r0, #228]	; 0xe4
	configLocation->noOfExpansionBoard   				= 0;					// Number of expansion board
	configLocation->noOfTempSensorPerExpansionBoard          	= 0;					// Number of temperature sensors monitored per expansion board
	configLocation->LCUseDischarge                                 	= enabled;                 		// Enable or disable the solid state output
	configLocation->LCUsePrecharge                                 	= enabled;              		// Use precharge before enabling main output
 80049f8:	37fe      	adds	r7, #254	; 0xfe
	configLocation->pulseToggleButton                              	= true;                    		// Select either pulse or toggle power button
	configLocation->useCANSafetyInput                              	= false;                   		// Use the safety input status from CAN
	configLocation->useCANDelayedPowerDown                         	= false;                   		// Use delayed power down
	//configLocation->NTCTopResistor[modConfigNTCGroupLTCExt]        	= 100000;                  		// NTC Pullup resistor value
    configLocation->NTCTopResistor[modConfigNTCGroupLTCExt]         = 10000;                       // NTC Pullup resistor value
	configLocation->NTCTopResistor[modConfigNTCGroupMasterPCB]     	= 100000;                  		// NTC Pullup resistor value
 80049fa:	e9c0 3543 	strd	r3, r5, [r0, #268]	; 0x10c
	configLocation->allowedTempBattCoolingMax                      	= 5.0f;                    		// Max battery temperature where cooling is activated
 80049fe:	f8c0 c0a0 	str.w	ip, [r0, #160]	; 0xa0
	configLocation->displayTimeoutBatteryErrorPreCharge		= 10000;				// Show pre charge error for XX seconds.
 8004a02:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	configLocation->NTCTopResistor[modConfigNTCGroupExp]  		= 10000;                  		// NTC Pullup resistor value
 8004a06:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
	configLocation->tempEnableMaskExpansion                         = 0x0000;               // Bitwise select what sensor to enable for the expansion boards(external sensors).
 8004a0a:	e9c0 2137 	strd	r2, r1, [r0, #220]	; 0xdc
	configLocation->displayTimeoutSplashScreen			= 3000;					// Display / INIT splash screen time.
 8004a0e:	f8c0 60bc 	str.w	r6, [r0, #188]	; 0xbc
	configLocation->tempEnableMaskBMS                              	= 0x0001;				// Bitwise select what sensor to enable for the BMS (internal sensors).
 8004a12:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
	configLocation->LCUsePrecharge                                 	= enabled;              		// Use precharge before enabling main output
 8004a16:	f8c0 70e8 	str.w	r7, [r0, #232]	; 0xe8
	//configLocation->NTC25DegResistance[modConfigNTCGroupLTCExt]    	= 100000;                  		// NTC resistance at 25 degree
	configLocation->NTC25DegResistance[modConfigNTCGroupLTCExt]     = 10000;                       // NTC resistance at 25 degree
	configLocation->NTC25DegResistance[modConfigNTCGroupMasterPCB] 	= 100000;                  		// NTC resistance at 25 degree
 8004a1a:	e9c0 3548 	strd	r3, r5, [r0, #288]	; 0x120
	configLocation->canBusSpeed                                    	= canSpeedBaud500k;        		// 500k CAN baud
 8004a1e:	2302      	movs	r3, #2
 8004a20:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	configLocation->useCANDelayedPowerDown                         	= false;                   		// Use delayed power down
 8004a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
	configLocation->NTC25DegResistance[modConfigNTCGroupExp] 	= 100000;                  		// NTC resistance at 25 degree
	configLocation->NTCBetaFactor[modConfigNTCGroupLTCExt]         	= 4250;                  		// NTC Beta factor
	//configLocation->NTCBetaFactor[modConfigNTCGroupLTCExt]          = 3974;                         // NTC Beta factor standard for 10K
	configLocation->NTCBetaFactor[modConfigNTCGroupMasterPCB]      	= 4250;                    		// NTC Beta factor
	configLocation->NTCBetaFactor[modConfigNTCGroupExp]      	= 4250;                    		// NTC Beta factor
 8004a28:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8004ab8 <modConfigLoadDefaultConfig+0x1d8>
	configLocation->useCANDelayedPowerDown                         	= false;                   		// Use delayed power down
 8004a2c:	f8a0 30ee 	strh.w	r3, [r0, #238]	; 0xee
	//configLocation->cellMonitorType                                	= CELL_MON_LTC6811_1;      		// Use the new cell voltage monitor
    configLocation->cellMonitorType                                 = CELL_MON_LTC6810_1;           // Use the new cell voltage monitor AE24112024
	configLocation->cellMonitorICCount                             	= 2;                       		// Only one slave IC  AE24112024
 8004a30:	f240 6302 	movw	r3, #1538	; 0x602
 8004a34:	f8a0 30f0 	strh.w	r3, [r0, #240]	; 0xf0
	configLocation->NTCBetaFactor[modConfigNTCGroupExp]      	= 4250;                    		// NTC Beta factor
 8004a38:	f241 039a 	movw	r3, #4250	; 0x109a
 8004a3c:	e9c0 c34c 	strd	ip, r3, [r0, #304]	; 0x130
	configLocation->NTC25DegResistance[modConfigNTCGroupExp] 	= 100000;                  		// NTC resistance at 25 degree
 8004a40:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
    //configLocation->cellMonitorICCount                              = 1;                            // Only one slave IC
	configLocation->externalEnableOperationalState                 	= opStateExtNormal;        		// Go to normal enable mode
 8004a44:	f880 40f8 	strb.w	r4, [r0, #248]	; 0xf8
	configLocation->chargeEnableOperationalState                   	= opStateChargingModeCharging;		// Go to charging mode when a charger is connected
	configLocation->powerDownDelay                                 	= 3000;                    		// Wait only minimal to turn off
 8004a48:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc

	configLocation->noOfCellsPerModule                             	= 6;                      		// Number of cell levels monitored per LTC68XX
 8004a4c:	7082      	strb	r2, [r0, #2]
	configLocation->useCANSafetyInput                              	= false;                   		// Use the safety input status from CAN
 8004a4e:	f880 10ed 	strb.w	r1, [r0, #237]	; 0xed
    //configLocation->noOfCellsPerModule                              = 12;                           // Number of cell levels monitored per LTC68XX
	//configLocation->lastICNoOfCells					= 0;
    configLocation->lastICNoOfCells                 = 6;
	configLocation->lastICMask					= 0;
 8004a52:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	configLocation->humidityICType					= 2;
	configLocation->BMSApplication					= electricVehicle;
	
#endif

}
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a58:	43b06666 	.word	0x43b06666
 8004a5c:	40133333 	.word	0x40133333
 8004a60:	40866666 	.word	0x40866666
 8004a64:	402ccccd 	.word	0x402ccccd
 8004a68:	40833333 	.word	0x40833333
 8004a6c:	3ba3d70a 	.word	0x3ba3d70a
 8004a70:	3cf5c28f 	.word	0x3cf5c28f
 8004a74:	40600000 	.word	0x40600000
 8004a78:	3e4ccccd 	.word	0x3e4ccccd
 8004a7c:	4244cccd 	.word	0x4244cccd
 8004a80:	00010101 	.word	0x00010101
 8004a84:	3ca3d70a 	.word	0x3ca3d70a
 8004a88:	bd50e560 	.word	0xbd50e560
 8004a8c:	3c23d70a 	.word	0x3c23d70a
 8004a90:	000186a0 	.word	0x000186a0
 8004a94:	3f333333 	.word	0x3f333333
 8004a98:	447a0000 	.word	0x447a0000
 8004a9c:	00124f80 	.word	0x00124f80
 8004aa0:	42960000 	.word	0x42960000
 8004aa4:	42480000 	.word	0x42480000
 8004aa8:	01000003 	.word	0x01000003
 8004aac:	42a00000 	.word	0x42a00000
 8004ab0:	001b7740 	.word	0x001b7740
 8004ab4:	40a00000 	.word	0x40a00000
 8004ab8:	109a109a 	.word	0x109a109a

08004abc <modConfigStoreDefaultConfig>:
bool modConfigStoreDefaultConfig(void) {
 8004abc:	b500      	push	{lr}
 8004abe:	b0cf      	sub	sp, #316	; 0x13c
  modConfigLoadDefaultConfig(&defaultConfig);
 8004ac0:	4668      	mov	r0, sp
 8004ac2:	f7ff ff0d 	bl	80048e0 <modConfigLoadDefaultConfig>
	driverSWStorageManagerConfigEmpty = false;
 8004ac6:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <modConfigStoreDefaultConfig+0x1c>)
 8004ac8:	2100      	movs	r1, #0
 8004aca:	7019      	strb	r1, [r3, #0]
	return driverSWStorageManagerStoreStruct(&defaultConfig,STORAGE_CONFIG);
 8004acc:	f004 f98a 	bl	8008de4 <driverSWStorageManagerStoreStruct>
}
 8004ad0:	b04f      	add	sp, #316	; 0x13c
 8004ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ad6:	bf00      	nop
 8004ad8:	20004be8 	.word	0x20004be8

08004adc <modConfigStoreAndLoadDefaultConfig>:
	if(driverSWStorageManagerConfigEmpty) {
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <modConfigStoreAndLoadDefaultConfig+0x18>)
bool modConfigStoreAndLoadDefaultConfig(void) {
 8004ade:	b510      	push	{r4, lr}
	if(driverSWStorageManagerConfigEmpty) {
 8004ae0:	781c      	ldrb	r4, [r3, #0]
 8004ae2:	b114      	cbz	r4, 8004aea <modConfigStoreAndLoadDefaultConfig+0xe>
		returnVal = modConfigStoreDefaultConfig();
 8004ae4:	f7ff ffea 	bl	8004abc <modConfigStoreDefaultConfig>
 8004ae8:	4604      	mov	r4, r0
	modConfigLoadConfig();
 8004aea:	f7ff fe93 	bl	8004814 <modConfigLoadConfig>
};
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	bf00      	nop
 8004af4:	20004be8 	.word	0x20004be8

08004af8 <modDelayInit>:
#include "modDelay.h"

static uint32_t hmsCnt = 0;

void modDelayInit(void) {
 8004af8:	b508      	push	{r3, lr}
	SystemCoreClockUpdate();
 8004afa:	f009 fce7 	bl	800e4cc <SystemCoreClockUpdate>
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004b02:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <modDelayInit+0x20>)
 8004b04:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <modDelayInit+0x24>)
 8004b08:	21f0      	movs	r1, #240	; 0xf0
 8004b0a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b0e:	2200      	movs	r2, #0
 8004b10:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b12:	2207      	movs	r2, #7
 8004b14:	611a      	str	r2, [r3, #16]
	
	//SystemCoreClock / 1000
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}
 8004b16:	bd08      	pop	{r3, pc}
 8004b18:	0001193f 	.word	0x0001193f
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <modDelayTick1ms>:

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4604      	mov	r4, r0
 8004b24:	460d      	mov	r5, r1
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 8004b26:	f006 f949 	bl	800adbc <HAL_GetTick>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	1ac0      	subs	r0, r0, r3
 8004b2e:	42a8      	cmp	r0, r5
 8004b30:	d304      	bcc.n	8004b3c <modDelayTick1ms+0x1c>
	{
		*last = HAL_GetTick();
 8004b32:	f006 f943 	bl	800adbc <HAL_GetTick>
 8004b36:	6020      	str	r0, [r4, #0]
		return true;
 8004b38:	2001      	movs	r0, #1
	}

	return false;
}
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e7fc      	b.n	8004b3a <modDelayTick1ms+0x1a>

08004b40 <modDelayTick100ms>:

uint8_t modDelayTick100ms(uint32_t *last, uint32_t ticks) {
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4604      	mov	r4, r0
 8004b44:	460d      	mov	r5, r1
	static uint32_t msTicks = 0;

	if(modDelayTick1ms(&msTicks,99))
 8004b46:	4809      	ldr	r0, [pc, #36]	; (8004b6c <modDelayTick100ms+0x2c>)
 8004b48:	2163      	movs	r1, #99	; 0x63
 8004b4a:	f7ff ffe9 	bl	8004b20 <modDelayTick1ms>
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <modDelayTick100ms+0x30>)
 8004b50:	b110      	cbz	r0, 8004b58 <modDelayTick100ms+0x18>
		hmsCnt++;
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	3201      	adds	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

	if((uint32_t)(hmsCnt - *last) >= ticks)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	42ab      	cmp	r3, r5
	{
		*last = hmsCnt;
 8004b60:	bf26      	itte	cs
 8004b62:	6022      	strcs	r2, [r4, #0]
		return true;
 8004b64:	2001      	movcs	r0, #1
	}

	return false;
 8004b66:	2000      	movcc	r0, #0
}
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20004894 	.word	0x20004894
 8004b70:	20004890 	.word	0x20004890

08004b74 <modDelayTick1msNoRST>:

uint8_t modDelayTick1msNoRST(uint32_t *last, uint32_t ticks) {
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4605      	mov	r5, r0
 8004b78:	460c      	mov	r4, r1
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 8004b7a:	f006 f91f 	bl	800adbc <HAL_GetTick>
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	1ac0      	subs	r0, r0, r3
	{
		return true;
	}

	return false;
}
 8004b82:	42a0      	cmp	r0, r4
 8004b84:	bf34      	ite	cc
 8004b86:	2000      	movcc	r0, #0
 8004b88:	2001      	movcs	r0, #1
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}

08004b8c <modDisplayInit>:
bool toggleButtonReleased;
bool toggleButtonPressedCounter;

extern modDisplayDataTypedef modDisplayData;

void modDisplayInit(void) {
 8004b8c:	b510      	push	{r4, lr}
	modDisplayStartupDelay = HAL_GetTick();
 8004b8e:	f006 f915 	bl	800adbc <HAL_GetTick>
 8004b92:	4c12      	ldr	r4, [pc, #72]	; (8004bdc <modDisplayInit+0x50>)
	libGraphicsInit(SSD1306_LCDWIDTH,SSD1306_LCDHEIGHT);
 8004b94:	2140      	movs	r1, #64	; 0x40
	modDisplayStartupDelay = HAL_GetTick();
 8004b96:	6020      	str	r0, [r4, #0]
	libGraphicsInit(SSD1306_LCDWIDTH,SSD1306_LCDHEIGHT);
 8004b98:	2080      	movs	r0, #128	; 0x80
 8004b9a:	f009 fdf9 	bl	800e790 <libGraphicsInit>
	while(!modDelayTick1ms(&modDisplayStartupDelay,STARTUPDELAY)) {};
 8004b9e:	210a      	movs	r1, #10
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f7ff ffbd 	bl	8004b20 <modDelayTick1ms>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0f9      	beq.n	8004b9e <modDisplayInit+0x12>
	driverSWSSD1306Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8004baa:	213c      	movs	r1, #60	; 0x3c
 8004bac:	2002      	movs	r0, #2
 8004bae:	f004 f979 	bl	8008ea4 <driverSWSSD1306Init>
	driverSWSSD1306ClearDisplay();
 8004bb2:	f004 f9e5 	bl	8008f80 <driverSWSSD1306ClearDisplay>
	driverSWSSD1306ClearDisplayBuffers();
 8004bb6:	f004 f9db 	bl	8008f70 <driverSWSSD1306ClearDisplayBuffers>
		
	modDisplayPresent = true;
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <modDisplayInit+0x54>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
			
	modDisplayCurrentState = DISP_MODE_OFF;												//  Default content is nothing
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <modDisplayInit+0x58>)
 8004bc2:	2400      	movs	r4, #0
 8004bc4:	701c      	strb	r4, [r3, #0]
	modDisplayLastRefresh = HAL_GetTick();
 8004bc6:	f006 f8f9 	bl	800adbc <HAL_GetTick>
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <modDisplayInit+0x5c>)
 8004bcc:	6018      	str	r0, [r3, #0]
	toggleButtonPressedLastTick = HAL_GetTick();
 8004bce:	f006 f8f5 	bl	800adbc <HAL_GetTick>
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <modDisplayInit+0x60>)
 8004bd4:	6018      	str	r0, [r3, #0]
	modDisplayDispLoadShuffle = 0;
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <modDisplayInit+0x64>)
 8004bd8:	701c      	strb	r4, [r3, #0]
};
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	200048e4 	.word	0x200048e4
 8004be0:	200048e0 	.word	0x200048e0
 8004be4:	2000489c 	.word	0x2000489c
 8004be8:	200048dc 	.word	0x200048dc
 8004bec:	200048ec 	.word	0x200048ec
 8004bf0:	200048d8 	.word	0x200048d8

08004bf4 <modDisplayTask>:
	}
	
	modDisplayCurrentState = newState;
};

void modDisplayTask(void) {
 8004bf4:	b510      	push	{r4, lr}
	static uint32_t displayRefreshLastTick;
	
	if(modDelayTick1ms(&displayRefreshLastTick,10000)){
 8004bf6:	480c      	ldr	r0, [pc, #48]	; (8004c28 <modDisplayTask+0x34>)
 8004bf8:	f242 7110 	movw	r1, #10000	; 0x2710
 8004bfc:	f7ff ff90 	bl	8004b20 <modDelayTick1ms>
 8004c00:	b150      	cbz	r0, 8004c18 <modDisplayTask+0x24>
		if(!modDisplayPresent){
 8004c02:	4c0a      	ldr	r4, [pc, #40]	; (8004c2c <modDisplayTask+0x38>)
 8004c04:	7823      	ldrb	r3, [r4, #0]
 8004c06:	b92b      	cbnz	r3, 8004c14 <modDisplayTask+0x20>
			driverSWSSD1306Init(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8004c08:	213c      	movs	r1, #60	; 0x3c
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	f004 f94a 	bl	8008ea4 <driverSWSSD1306Init>
			modDisplayPresent = true;
 8004c10:	2301      	movs	r3, #1
 8004c12:	7023      	strb	r3, [r4, #0]
		}
		driverSWSSD1306ClearDisplayBuffers();
 8004c14:	f004 f9ac 	bl	8008f70 <driverSWSSD1306ClearDisplayBuffers>
	}
	
	if(driverSWSSD1306DisplayAsync() != HAL_OK)
 8004c18:	f004 f9c2 	bl	8008fa0 <driverSWSSD1306DisplayAsync>
 8004c1c:	b110      	cbz	r0, 8004c24 <modDisplayTask+0x30>
		modDisplayPresent = false;
 8004c1e:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <modDisplayTask+0x38>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
};
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	20004898 	.word	0x20004898
 8004c2c:	200048e0 	.word	0x200048e0

08004c30 <modDisplay100ConvertValueToASCII>:
	if (decimals >= 3)
		libGraphicsWrite(modDisplay0_001ConvertValueToASCII(value));
};

uint8_t modDisplay100ConvertValueToASCII(float value) {
		value = (int)value/100;
 8004c30:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004c34:	2364      	movs	r3, #100	; 0x64
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c3e:	ee07 3a90 	vmov	s15, r3
		value = value+48;
 8004c42:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004c60 <modDisplay100ConvertValueToASCII+0x30>
		value = (int)value/100;
 8004c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
uint8_t modDisplay100ConvertValueToASCII(float value) {
 8004c4a:	b082      	sub	sp, #8
		value = value+48;
 8004c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
	return value;
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004c58:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004c5c:	b002      	add	sp, #8
 8004c5e:	4770      	bx	lr
 8004c60:	42400000 	.word	0x42400000

08004c64 <modDisplay10ConvertValueToASCII>:

uint8_t modDisplay10ConvertValueToASCII(float value) {
		value = (int)value % 100;
 8004c64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004c68:	2264      	movs	r2, #100	; 0x64
 8004c6a:	ee17 3a90 	vmov	r3, s15
 8004c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c72:	fb02 3311 	mls	r3, r2, r1, r3
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value = (int)value/10;
 8004c7e:	230a      	movs	r3, #10
 8004c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		value = value+48;
 8004c84:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004cb0 <modDisplay10ConvertValueToASCII+0x4c>
		value = (int)value/10;
 8004c88:	ee17 2a90 	vmov	r2, s15
 8004c8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
uint8_t modDisplay10ConvertValueToASCII(float value) {
 8004c98:	b082      	sub	sp, #8
		value = value+48;
 8004c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
	return value;
 8004c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca2:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004ca6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004caa:	b002      	add	sp, #8
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	42400000 	.word	0x42400000

08004cb4 <modDisplay1ConvertValueToASCII>:

uint8_t modDisplay1ConvertValueToASCII(float value) {
		value = (int)value % 10;
 8004cb4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cb8:	220a      	movs	r2, #10
 8004cba:	ee17 3a90 	vmov	r3, s15
 8004cbe:	fb93 f1f2 	sdiv	r1, r3, r2
 8004cc2:	fb02 3311 	mls	r3, r2, r1, r3
 8004cc6:	ee00 3a10 	vmov	s0, r3
		value = value+48;
 8004cca:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004ce8 <modDisplay1ConvertValueToASCII+0x34>
		value = (int)value % 10;
 8004cce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
uint8_t modDisplay1ConvertValueToASCII(float value) {
 8004cd2:	b082      	sub	sp, #8
		value = value+48;
 8004cd4:	ee30 0a27 	vadd.f32	s0, s0, s15
	return value;
 8004cd8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004cdc:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004ce0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004ce4:	b002      	add	sp, #8
 8004ce6:	4770      	bx	lr
 8004ce8:	42400000 	.word	0x42400000

08004cec <modDisplay0_1ConvertValueToASCII>:

uint8_t modDisplay0_1ConvertValueToASCII(float value) {
		value = (int)(value*10.0f) % 10;
 8004cec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004cf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004cf4:	220a      	movs	r2, #10
 8004cf6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		value = value+48;
 8004cfa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004d28 <modDisplay0_1ConvertValueToASCII+0x3c>
		value = (int)(value*10.0f) % 10;
 8004cfe:	ee17 3a90 	vmov	r3, s15
 8004d02:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d06:	fb02 3311 	mls	r3, r2, r1, r3
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
uint8_t modDisplay0_1ConvertValueToASCII(float value) {
 8004d12:	b082      	sub	sp, #8
		value = value+48;
 8004d14:	ee77 7a87 	vadd.f32	s15, s15, s14
	return value;
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004d20:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004d24:	b002      	add	sp, #8
 8004d26:	4770      	bx	lr
 8004d28:	42400000 	.word	0x42400000

08004d2c <modDisplay0_01ConvertValueToASCII>:

uint8_t modDisplay0_01ConvertValueToASCII(float value) {
		value = (int)(value*100.0f) % 10;
 8004d2c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004d68 <modDisplay0_01ConvertValueToASCII+0x3c>
		value = value+48;
 8004d30:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d6c <modDisplay0_01ConvertValueToASCII+0x40>
		value = (int)(value*100.0f) % 10;
 8004d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d38:	220a      	movs	r2, #10
 8004d3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
uint8_t modDisplay0_01ConvertValueToASCII(float value) {
 8004d3e:	b082      	sub	sp, #8
		value = (int)(value*100.0f) % 10;
 8004d40:	ee17 3a90 	vmov	r3, s15
 8004d44:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d48:	fb02 3311 	mls	r3, r2, r1, r3
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value = value+48;
 8004d54:	ee77 7a87 	vadd.f32	s15, s15, s14
	return value;
 8004d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5c:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004d60:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004d64:	b002      	add	sp, #8
 8004d66:	4770      	bx	lr
 8004d68:	42c80000 	.word	0x42c80000
 8004d6c:	42400000 	.word	0x42400000

08004d70 <modDisplay0_001ConvertValueToASCII>:

uint8_t modDisplay0_001ConvertValueToASCII(float value) {
		value = (int)(value*1000.0f) % 10;
 8004d70:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004dac <modDisplay0_001ConvertValueToASCII+0x3c>
		value = value+48;
 8004d74:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004db0 <modDisplay0_001ConvertValueToASCII+0x40>
		value = (int)(value*1000.0f) % 10;
 8004d78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d7c:	220a      	movs	r2, #10
 8004d7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
uint8_t modDisplay0_001ConvertValueToASCII(float value) {
 8004d82:	b082      	sub	sp, #8
		value = (int)(value*1000.0f) % 10;
 8004d84:	ee17 3a90 	vmov	r3, s15
 8004d88:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d8c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value = value+48;
 8004d98:	ee77 7a87 	vadd.f32	s15, s15, s14
	return value;
 8004d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da0:	edcd 7a01 	vstr	s15, [sp, #4]
};
 8004da4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004da8:	b002      	add	sp, #8
 8004daa:	4770      	bx	lr
 8004dac:	447a0000 	.word	0x447a0000
 8004db0:	42400000 	.word	0x42400000

08004db4 <modDisplayWrite>:
void modDisplayWrite(float value, uint8_t decimals){
 8004db4:	b538      	push	{r3, r4, r5, lr}
	if(value < 0.0f)
 8004db6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void modDisplayWrite(float value, uint8_t decimals){
 8004dbe:	ed2d 8b02 	vpush	{d8}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	eeb0 8a40 	vmov.f32	s16, s0
	if(value < 0.0f)
 8004dc8:	d502      	bpl.n	8004dd0 <modDisplayWrite+0x1c>
		libGraphicsWrite('-');
 8004dca:	202d      	movs	r0, #45	; 0x2d
 8004dcc:	f009 fec0 	bl	800eb50 <libGraphicsWrite>
	if(modDisplay100ConvertValueToASCII(value)!= 48)
 8004dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8004dd4:	f7ff ff2c 	bl	8004c30 <modDisplay100ConvertValueToASCII>
 8004dd8:	2830      	cmp	r0, #48	; 0x30
 8004dda:	4605      	mov	r5, r0
 8004ddc:	d001      	beq.n	8004de2 <modDisplayWrite+0x2e>
		libGraphicsWrite(modDisplay100ConvertValueToASCII(value));
 8004dde:	f009 feb7 	bl	800eb50 <libGraphicsWrite>
	if(modDisplay10ConvertValueToASCII(value)!= 48 || modDisplay100ConvertValueToASCII(value)!= 48)
 8004de2:	eeb0 0a48 	vmov.f32	s0, s16
 8004de6:	f7ff ff3d 	bl	8004c64 <modDisplay10ConvertValueToASCII>
 8004dea:	2830      	cmp	r0, #48	; 0x30
 8004dec:	d101      	bne.n	8004df2 <modDisplayWrite+0x3e>
 8004dee:	2d30      	cmp	r5, #48	; 0x30
 8004df0:	d001      	beq.n	8004df6 <modDisplayWrite+0x42>
		libGraphicsWrite(modDisplay10ConvertValueToASCII(value));			 
 8004df2:	f009 fead 	bl	800eb50 <libGraphicsWrite>
	libGraphicsWrite(modDisplay1ConvertValueToASCII(value));
 8004df6:	eeb0 0a48 	vmov.f32	s0, s16
 8004dfa:	f7ff ff5b 	bl	8004cb4 <modDisplay1ConvertValueToASCII>
 8004dfe:	f009 fea7 	bl	800eb50 <libGraphicsWrite>
	if (decimals >= 1){
 8004e02:	b1e4      	cbz	r4, 8004e3e <modDisplayWrite+0x8a>
		libGraphicsWrite('.');
 8004e04:	202e      	movs	r0, #46	; 0x2e
 8004e06:	f009 fea3 	bl	800eb50 <libGraphicsWrite>
		libGraphicsWrite(modDisplay0_1ConvertValueToASCII(value));
 8004e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e0e:	f7ff ff6d 	bl	8004cec <modDisplay0_1ConvertValueToASCII>
 8004e12:	f009 fe9d 	bl	800eb50 <libGraphicsWrite>
	if (decimals >= 2)
 8004e16:	2c01      	cmp	r4, #1
 8004e18:	d011      	beq.n	8004e3e <modDisplayWrite+0x8a>
		libGraphicsWrite(modDisplay0_01ConvertValueToASCII(value));	
 8004e1a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e1e:	f7ff ff85 	bl	8004d2c <modDisplay0_01ConvertValueToASCII>
 8004e22:	f009 fe95 	bl	800eb50 <libGraphicsWrite>
	if (decimals >= 3)
 8004e26:	2c02      	cmp	r4, #2
 8004e28:	d009      	beq.n	8004e3e <modDisplayWrite+0x8a>
		libGraphicsWrite(modDisplay0_001ConvertValueToASCII(value));
 8004e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e2e:	f7ff ff9f 	bl	8004d70 <modDisplay0_001ConvertValueToASCII>
};
 8004e32:	ecbd 8b02 	vpop	{d8}
 8004e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		libGraphicsWrite(modDisplay0_001ConvertValueToASCII(value));
 8004e3a:	f009 be89 	b.w	800eb50 <libGraphicsWrite>
};
 8004e3e:	ecbd 8b02 	vpop	{d8}
 8004e42:	bd38      	pop	{r3, r4, r5, pc}

08004e44 <modDisplayShowInfo>:
void modDisplayShowInfo(modDisplayInfoType newState, modDisplayDataTypedef modDisplayData) {
 8004e44:	b084      	sub	sp, #16
 8004e46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	ad0b      	add	r5, sp, #44	; 0x2c
	toggleButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8004e4e:	2001      	movs	r0, #1
void modDisplayShowInfo(modDisplayInfoType newState, modDisplayDataTypedef modDisplayData) {
 8004e50:	e885 000e 	stmia.w	r5, {r1, r2, r3}
	toggleButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8004e54:	f005 fdd0 	bl	800a9f8 <driverHWPowerStateReadInput>
 8004e58:	4ba7      	ldr	r3, [pc, #668]	; (80050f8 <modDisplayShowInfo+0x2b4>)
 8004e5a:	4ca8      	ldr	r4, [pc, #672]	; (80050fc <modDisplayShowInfo+0x2b8>)
 8004e5c:	4fa8      	ldr	r7, [pc, #672]	; (8005100 <modDisplayShowInfo+0x2bc>)
 8004e5e:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800511c <modDisplayShowInfo+0x2d8>
 8004e62:	7018      	strb	r0, [r3, #0]
		if(toggleButtonPressed == 0){
 8004e64:	2800      	cmp	r0, #0
 8004e66:	f040 82e1 	bne.w	800542c <modDisplayShowInfo+0x5e8>
			toggleButtonReleased = 1 ;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	7023      	strb	r3, [r4, #0]
		if(modDisplayDispLoadShuffle == 4)
 8004e6e:	783b      	ldrb	r3, [r7, #0]
	if(modDisplayCurrentState != newState || (memcmp(&modDisplayDataLast,&modDisplayData,sizeof(modDisplayDataTypedef)) && modDelayTick1ms(&modDisplayLastRefresh,2000)) || toggleButtonPressedCounter) {											// Different state than last state?
 8004e70:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005120 <modDisplayShowInfo+0x2dc>
		if(modDisplayDispLoadShuffle == 4)
 8004e74:	2b04      	cmp	r3, #4
				modDisplayDispLoadShuffle = 0;
 8004e76:	bf04      	itt	eq
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	703b      	strbeq	r3, [r7, #0]
	if(modDisplayCurrentState != newState || (memcmp(&modDisplayDataLast,&modDisplayData,sizeof(modDisplayDataTypedef)) && modDelayTick1ms(&modDisplayLastRefresh,2000)) || toggleButtonPressedCounter) {											// Different state than last state?
 8004e7c:	f899 3000 	ldrb.w	r3, [r9]
 8004e80:	42b3      	cmp	r3, r6
 8004e82:	d01d      	beq.n	8004ec0 <modDisplayShowInfo+0x7c>
		toggleButtonPressedCounter = false;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f888 3000 	strb.w	r3, [r8]
		memcpy(&modDisplayDataLast,&modDisplayData,sizeof(modDisplayDataTypedef));
 8004e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8c:	4c9d      	ldr	r4, [pc, #628]	; (8005104 <modDisplayShowInfo+0x2c0>)
 8004e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e9c:	e884 0003 	stmia.w	r4, {r0, r1}
		switch(newState) {
 8004ea0:	2e0b      	cmp	r6, #11
 8004ea2:	d817      	bhi.n	8004ed4 <modDisplayShowInfo+0x90>
 8004ea4:	e8df f016 	tbh	[pc, r6, lsl #1]
 8004ea8:	00280025 	.word	0x00280025
 8004eac:	013e0046 	.word	0x013e0046
 8004eb0:	01ce01a8 	.word	0x01ce01a8
 8004eb4:	023701f9 	.word	0x023701f9
 8004eb8:	0253024b 	.word	0x0253024b
 8004ebc:	02bc02b6 	.word	0x02bc02b6
	if(modDisplayCurrentState != newState || (memcmp(&modDisplayDataLast,&modDisplayData,sizeof(modDisplayDataTypedef)) && modDelayTick1ms(&modDisplayLastRefresh,2000)) || toggleButtonPressedCounter) {											// Different state than last state?
 8004ec0:	4890      	ldr	r0, [pc, #576]	; (8005104 <modDisplayShowInfo+0x2c0>)
 8004ec2:	2238      	movs	r2, #56	; 0x38
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f00a fa71 	bl	800f3ac <memcmp>
 8004eca:	b950      	cbnz	r0, 8004ee2 <modDisplayShowInfo+0x9e>
 8004ecc:	f898 3000 	ldrb.w	r3, [r8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1d7      	bne.n	8004e84 <modDisplayShowInfo+0x40>
	modDisplayCurrentState = newState;
 8004ed4:	f889 6000 	strb.w	r6, [r9]
};
 8004ed8:	b003      	add	sp, #12
 8004eda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr
	if(modDisplayCurrentState != newState || (memcmp(&modDisplayDataLast,&modDisplayData,sizeof(modDisplayDataTypedef)) && modDelayTick1ms(&modDisplayLastRefresh,2000)) || toggleButtonPressedCounter) {											// Different state than last state?
 8004ee2:	4889      	ldr	r0, [pc, #548]	; (8005108 <modDisplayShowInfo+0x2c4>)
 8004ee4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004ee8:	f7ff fe1a 	bl	8004b20 <modDelayTick1ms>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d1c9      	bne.n	8004e84 <modDisplayShowInfo+0x40>
 8004ef0:	e7ec      	b.n	8004ecc <modDisplayShowInfo+0x88>
				driverSWSSD1306ClearDisplay();
 8004ef2:	f004 f845 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				break;
 8004ef6:	e7ed      	b.n	8004ed4 <modDisplayShowInfo+0x90>
				driverSWSSD1306ClearDisplay();
 8004ef8:	f004 f842 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_ENNOID],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);
 8004efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f00:	4882      	ldr	r0, [pc, #520]	; (800510c <modDisplayShowInfo+0x2c8>)
 8004f02:	f004 f845 	bl	8008f90 <driverSWSSD1306FillBuffer>
				libGraphicsSetTextSize(2);
 8004f06:	2002      	movs	r0, #2
 8004f08:	f009 fe1a 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(WHITE);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f009 fe0d 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(10,SSD1306_LCDHEIGHT/2+14);
 8004f12:	212e      	movs	r1, #46	; 0x2e
 8004f14:	200a      	movs	r0, #10
 8004f16:	f009 fdff 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('V');
 8004f1a:	2056      	movs	r0, #86	; 0x56
 8004f1c:	f009 fe18 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(FW_VERSION_MAJOR+48);
 8004f20:	2035      	movs	r0, #53	; 0x35
 8004f22:	f009 fe15 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('.');
 8004f26:	202e      	movs	r0, #46	; 0x2e
 8004f28:	f009 fe12 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(FW_VERSION_MINOR+48);
 8004f2c:	2032      	movs	r0, #50	; 0x32
				libGraphicsWrite('F');			
 8004f2e:	f009 fe0f 	bl	800eb50 <libGraphicsWrite>
				break;
 8004f32:	e7cf      	b.n	8004ed4 <modDisplayShowInfo+0x90>
				driverSWSSD1306ClearDisplay();
 8004f34:	f004 f824 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				if(modDisplayData.DisplayStyle==0){
 8004f38:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8004f3c:	b9db      	cbnz	r3, 8004f76 <modDisplayShowInfo+0x132>
					driverSWSSD1306FillBuffer(libLogos[LOGO_LOAD],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);
 8004f3e:	4874      	ldr	r0, [pc, #464]	; (8005110 <modDisplayShowInfo+0x2cc>)
 8004f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f44:	f004 f824 	bl	8008f90 <driverSWSSD1306FillBuffer>
					libGraphicsFillRect(7,7,(uint16_t)(modDisplayData.StateOfCharge/100*106),50,WHITE);
 8004f48:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8004f4c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005114 <modDisplayShowInfo+0x2d0>
 8004f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f54:	2301      	movs	r3, #1
 8004f56:	2107      	movs	r1, #7
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	2332      	movs	r3, #50	; 0x32
 8004f5e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005118 <modDisplayShowInfo+0x2d4>
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6a:	ee17 2a90 	vmov	r2, s15
 8004f6e:	b212      	sxth	r2, r2
 8004f70:	f009 fcad 	bl	800e8ce <libGraphicsFillRect>
 8004f74:	e7ae      	b.n	8004ed4 <modDisplayShowInfo+0x90>
					libGraphicsSetTextSize(2);
 8004f76:	2002      	movs	r0, #2
 8004f78:	f009 fde2 	bl	800eb40 <libGraphicsSetTextSize>
					if(modDisplayDispLoadShuffle == 0){
 8004f7c:	783c      	ldrb	r4, [r7, #0]
 8004f7e:	bb5c      	cbnz	r4, 8004fd8 <modDisplayShowInfo+0x194>
						libGraphicsSetTextColor_0(WHITE);
 8004f80:	2001      	movs	r0, #1
 8004f82:	f009 fdd3 	bl	800eb2c <libGraphicsSetTextColor_0>
						libGraphicsSetCursor(7,7);
 8004f86:	2107      	movs	r1, #7
 8004f88:	4608      	mov	r0, r1
 8004f8a:	f009 fdc5 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('S');
 8004f8e:	2053      	movs	r0, #83	; 0x53
 8004f90:	f009 fdde 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('O');
 8004f94:	204f      	movs	r0, #79	; 0x4f
 8004f96:	f009 fddb 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('C');
 8004f9a:	2043      	movs	r0, #67	; 0x43
 8004f9c:	f009 fdd8 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 8004fa0:	203a      	movs	r0, #58	; 0x3a
 8004fa2:	f009 fdd5 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.StateOfCharge,0);
 8004fa6:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff ff02 	bl	8004db4 <modDisplayWrite>
						libGraphicsWrite('%');
 8004fb0:	2025      	movs	r0, #37	; 0x25
 8004fb2:	f009 fdcd 	bl	800eb50 <libGraphicsWrite>
						libGraphicsSetCursor(7,32);
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	2007      	movs	r0, #7
 8004fba:	f009 fdad 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('I');
 8004fbe:	2049      	movs	r0, #73	; 0x49
 8004fc0:	f009 fdc6 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 8004fc4:	203a      	movs	r0, #58	; 0x3a
 8004fc6:	f009 fdc3 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.Current,2);
 8004fca:	2002      	movs	r0, #2
 8004fcc:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 8004fd0:	f7ff fef0 	bl	8004db4 <modDisplayWrite>
						libGraphicsWrite('A');							
 8004fd4:	2041      	movs	r0, #65	; 0x41
 8004fd6:	e7aa      	b.n	8004f2e <modDisplayShowInfo+0xea>
					}else if(modDisplayDispLoadShuffle == 1){
 8004fd8:	2c01      	cmp	r4, #1
 8004fda:	d128      	bne.n	800502e <modDisplayShowInfo+0x1ea>
						libGraphicsSetCursor(7,7);
 8004fdc:	2107      	movs	r1, #7
 8004fde:	4608      	mov	r0, r1
 8004fe0:	f009 fd9a 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('V');
 8004fe4:	2056      	movs	r0, #86	; 0x56
 8004fe6:	f009 fdb3 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 8004fea:	203a      	movs	r0, #58	; 0x3a
 8004fec:	f009 fdb0 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.PackVoltage,1);
 8004ff0:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff fedd 	bl	8004db4 <modDisplayWrite>
						libGraphicsWrite('V');
 8004ffa:	2056      	movs	r0, #86	; 0x56
 8004ffc:	f009 fda8 	bl	800eb50 <libGraphicsWrite>
						libGraphicsSetCursor(7,32);
 8005000:	2120      	movs	r1, #32
 8005002:	2007      	movs	r0, #7
 8005004:	f009 fd88 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('H');
 8005008:	2048      	movs	r0, #72	; 0x48
 800500a:	f009 fda1 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('u');
 800500e:	2075      	movs	r0, #117	; 0x75
 8005010:	f009 fd9e 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('m');
 8005014:	206d      	movs	r0, #109	; 0x6d
 8005016:	f009 fd9b 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');		
 800501a:	203a      	movs	r0, #58	; 0x3a
 800501c:	f009 fd98 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.Humidity,1);						
 8005020:	4620      	mov	r0, r4
 8005022:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
 8005026:	f7ff fec5 	bl	8004db4 <modDisplayWrite>
						libGraphicsWrite('%');
 800502a:	2025      	movs	r0, #37	; 0x25
 800502c:	e77f      	b.n	8004f2e <modDisplayShowInfo+0xea>
					}else if (modDisplayDispLoadShuffle == 2){
 800502e:	2c02      	cmp	r4, #2
 8005030:	d12e      	bne.n	8005090 <modDisplayShowInfo+0x24c>
						libGraphicsSetCursor(7,7);
 8005032:	2107      	movs	r1, #7
 8005034:	4608      	mov	r0, r1
 8005036:	f009 fd6f 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('C');
 800503a:	2043      	movs	r0, #67	; 0x43
 800503c:	f009 fd88 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('V');
 8005040:	2056      	movs	r0, #86	; 0x56
 8005042:	f009 fd85 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('H');
 8005046:	2048      	movs	r0, #72	; 0x48
 8005048:	f009 fd82 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 800504c:	203a      	movs	r0, #58	; 0x3a
 800504e:	f009 fd7f 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.HighestCellVoltage,3);
 8005052:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 8005056:	2003      	movs	r0, #3
 8005058:	f7ff feac 	bl	8004db4 <modDisplayWrite>
						libGraphicsWrite('V');
 800505c:	2056      	movs	r0, #86	; 0x56
 800505e:	f009 fd77 	bl	800eb50 <libGraphicsWrite>
						libGraphicsSetCursor(7,32);
 8005062:	2120      	movs	r1, #32
 8005064:	2007      	movs	r0, #7
 8005066:	f009 fd57 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('C');
 800506a:	2043      	movs	r0, #67	; 0x43
 800506c:	f009 fd70 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('V');
 8005070:	2056      	movs	r0, #86	; 0x56
 8005072:	f009 fd6d 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('L');
 8005076:	204c      	movs	r0, #76	; 0x4c
 8005078:	f009 fd6a 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 800507c:	203a      	movs	r0, #58	; 0x3a
 800507e:	f009 fd67 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.LowestCellVoltage,3);
 8005082:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 8005086:	2003      	movs	r0, #3
				modDisplayWrite(modDisplayData.CellMismatch,3);
 8005088:	f7ff fe94 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('V');
 800508c:	2056      	movs	r0, #86	; 0x56
 800508e:	e74e      	b.n	8004f2e <modDisplayShowInfo+0xea>
					}else if(modDisplayDispLoadShuffle == 3){
 8005090:	2c03      	cmp	r4, #3
 8005092:	f47f af1f 	bne.w	8004ed4 <modDisplayShowInfo+0x90>
						libGraphicsSetCursor(0,7);
 8005096:	2107      	movs	r1, #7
 8005098:	2000      	movs	r0, #0
 800509a:	f009 fd3d 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('T');
 800509e:	2054      	movs	r0, #84	; 0x54
 80050a0:	f009 fd56 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('m');
 80050a4:	206d      	movs	r0, #109	; 0x6d
 80050a6:	f009 fd53 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('a');
 80050aa:	2061      	movs	r0, #97	; 0x61
 80050ac:	f009 fd50 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('x');
 80050b0:	2078      	movs	r0, #120	; 0x78
 80050b2:	f009 fd4d 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 80050b6:	203a      	movs	r0, #58	; 0x3a
 80050b8:	f009 fd4a 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.HighestTemp,1);
 80050bc:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7ff fe77 	bl	8004db4 <modDisplayWrite>
						libGraphicsSetCursor(0,32);
 80050c6:	2120      	movs	r1, #32
 80050c8:	2000      	movs	r0, #0
 80050ca:	f009 fd25 	bl	800eb18 <libGraphicsSetCursor>
						libGraphicsWrite('T');
 80050ce:	2054      	movs	r0, #84	; 0x54
 80050d0:	f009 fd3e 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('m');
 80050d4:	206d      	movs	r0, #109	; 0x6d
 80050d6:	f009 fd3b 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('i');
 80050da:	2069      	movs	r0, #105	; 0x69
 80050dc:	f009 fd38 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite('n');
 80050e0:	206e      	movs	r0, #110	; 0x6e
 80050e2:	f009 fd35 	bl	800eb50 <libGraphicsWrite>
						libGraphicsWrite(':');
 80050e6:	203a      	movs	r0, #58	; 0x3a
 80050e8:	f009 fd32 	bl	800eb50 <libGraphicsWrite>
						modDisplayWrite(modDisplayData.LowestTemp,1);
 80050ec:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
 80050f0:	2001      	movs	r0, #1
				modDisplayWrite(modDisplayData.FaultCode,0);
 80050f2:	f7ff fe5f 	bl	8004db4 <modDisplayWrite>
				break;
 80050f6:	e6ed      	b.n	8004ed4 <modDisplayShowInfo+0x90>
 80050f8:	200048e8 	.word	0x200048e8
 80050fc:	200048f0 	.word	0x200048f0
 8005100:	200048d8 	.word	0x200048d8
 8005104:	200048a0 	.word	0x200048a0
 8005108:	200048dc 	.word	0x200048dc
 800510c:	08014e50 	.word	0x08014e50
 8005110:	08015650 	.word	0x08015650
 8005114:	42c80000 	.word	0x42c80000
 8005118:	42d40000 	.word	0x42d40000
 800511c:	200048e9 	.word	0x200048e9
 8005120:	2000489c 	.word	0x2000489c
				driverSWSSD1306ClearDisplay();
 8005124:	f003 ff2c 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_CHARGING],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);
 8005128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800512c:	48cd      	ldr	r0, [pc, #820]	; (8005464 <modDisplayShowInfo+0x620>)
 800512e:	f003 ff2f 	bl	8008f90 <driverSWSSD1306FillBuffer>
				libGraphicsSetTextSize(1);
 8005132:	2001      	movs	r0, #1
 8005134:	f009 fd04 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetCursor(15,43);
 8005138:	212b      	movs	r1, #43	; 0x2b
 800513a:	200f      	movs	r0, #15
 800513c:	f009 fcec 	bl	800eb18 <libGraphicsSetCursor>
				modDisplayWrite(modDisplayData.StateOfCharge,0);
 8005140:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8005144:	2000      	movs	r0, #0
 8005146:	f7ff fe35 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('%');
 800514a:	2025      	movs	r0, #37	; 0x25
 800514c:	f009 fd00 	bl	800eb50 <libGraphicsWrite>
				libGraphicsSetTextSize(0);
 8005150:	2000      	movs	r0, #0
 8005152:	f009 fcf5 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(INVERSE);
 8005156:	2002      	movs	r0, #2
 8005158:	f009 fce8 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(7,0);
 800515c:	2100      	movs	r1, #0
 800515e:	2007      	movs	r0, #7
 8005160:	f009 fcda 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('C');
 8005164:	2043      	movs	r0, #67	; 0x43
 8005166:	f009 fcf3 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('H');
 800516a:	2048      	movs	r0, #72	; 0x48
 800516c:	f009 fcf0 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 8005170:	203a      	movs	r0, #58	; 0x3a
 8005172:	f009 fced 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.HighestCellVoltage,2);
 8005176:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 800517a:	2002      	movs	r0, #2
 800517c:	f7ff fe1a 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('V');
 8005180:	2056      	movs	r0, #86	; 0x56
 8005182:	f009 fce5 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(' ');
 8005186:	2020      	movs	r0, #32
 8005188:	f009 fce2 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('C');
 800518c:	2043      	movs	r0, #67	; 0x43
 800518e:	f009 fcdf 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('L');
 8005192:	204c      	movs	r0, #76	; 0x4c
 8005194:	f009 fcdc 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 8005198:	203a      	movs	r0, #58	; 0x3a
 800519a:	f009 fcd9 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.LowestCellVoltage,2);
 800519e:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
 80051a2:	2002      	movs	r0, #2
 80051a4:	f7ff fe06 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('V');
 80051a8:	2056      	movs	r0, #86	; 0x56
 80051aa:	f009 fcd1 	bl	800eb50 <libGraphicsWrite>
				libGraphicsSetCursor(7,57);
 80051ae:	2139      	movs	r1, #57	; 0x39
 80051b0:	2007      	movs	r0, #7
 80051b2:	f009 fcb1 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('I');
 80051b6:	2049      	movs	r0, #73	; 0x49
 80051b8:	f009 fcca 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 80051bc:	203a      	movs	r0, #58	; 0x3a
 80051be:	f009 fcc7 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.Current,1);
 80051c2:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 80051c6:	2001      	movs	r0, #1
 80051c8:	f7ff fdf4 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('A');
 80051cc:	2041      	movs	r0, #65	; 0x41
 80051ce:	f009 fcbf 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(' ');
 80051d2:	2020      	movs	r0, #32
 80051d4:	f009 fcbc 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('V');
 80051d8:	2056      	movs	r0, #86	; 0x56
 80051da:	f009 fcb9 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('c');
 80051de:	2063      	movs	r0, #99	; 0x63
 80051e0:	f009 fcb6 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('h');
 80051e4:	2068      	movs	r0, #104	; 0x68
 80051e6:	f009 fcb3 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 80051ea:	203a      	movs	r0, #58	; 0x3a
 80051ec:	f009 fcb0 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.ChargerVoltage,1);
 80051f0:	ed9d 0a18 	vldr	s0, [sp, #96]	; 0x60
 80051f4:	2001      	movs	r0, #1
 80051f6:	e747      	b.n	8005088 <modDisplayShowInfo+0x244>
				driverSWSSD1306ClearDisplay();
 80051f8:	f003 fec2 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				libGraphicsSetTextSize(2);
 80051fc:	2002      	movs	r0, #2
 80051fe:	f009 fc9f 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(WHITE);
 8005202:	2001      	movs	r0, #1
 8005204:	f009 fc92 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(SSD1306_LCDWIDTH/2-50,SSD1306_LCDHEIGHT/2-6);
 8005208:	211a      	movs	r1, #26
 800520a:	200e      	movs	r0, #14
 800520c:	f009 fc84 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('P');  
 8005210:	2050      	movs	r0, #80	; 0x50
 8005212:	f009 fc9d 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('O');  
 8005216:	204f      	movs	r0, #79	; 0x4f
 8005218:	f009 fc9a 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('W');
 800521c:	2057      	movs	r0, #87	; 0x57
 800521e:	f009 fc97 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('E');
 8005222:	2045      	movs	r0, #69	; 0x45
 8005224:	f009 fc94 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');
 8005228:	2052      	movs	r0, #82	; 0x52
 800522a:	f009 fc91 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(' ');
 800522e:	2020      	movs	r0, #32
 8005230:	f009 fc8e 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('O');	
 8005234:	204f      	movs	r0, #79	; 0x4f
 8005236:	f009 fc8b 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('F');	
 800523a:	2046      	movs	r0, #70	; 0x46
 800523c:	f009 fc88 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('F');			
 8005240:	2046      	movs	r0, #70	; 0x46
 8005242:	e674      	b.n	8004f2e <modDisplayShowInfo+0xea>
				driverSWSSD1306ClearDisplay();
 8005244:	f003 fe9c 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_ERROR],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);  // Error logo uses half of the screen
 8005248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800524c:	4886      	ldr	r0, [pc, #536]	; (8005468 <modDisplayShowInfo+0x624>)
 800524e:	f003 fe9f 	bl	8008f90 <driverSWSSD1306FillBuffer>
				libGraphicsSetTextSize(1);
 8005252:	2001      	movs	r0, #1
 8005254:	f009 fc74 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(WHITE);
 8005258:	2001      	movs	r0, #1
 800525a:	f009 fc67 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(68,0);																						// Display text on the other side of the screen
 800525e:	2100      	movs	r1, #0
 8005260:	2044      	movs	r0, #68	; 0x44
 8005262:	f009 fc59 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('E');  
 8005266:	2045      	movs	r0, #69	; 0x45
 8005268:	f009 fc72 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 800526c:	2052      	movs	r0, #82	; 0x52
 800526e:	f009 fc6f 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 8005272:	2052      	movs	r0, #82	; 0x52
 8005274:	f009 fc6c 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('O');  
 8005278:	204f      	movs	r0, #79	; 0x4f
 800527a:	f009 fc69 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 800527e:	2052      	movs	r0, #82	; 0x52
 8005280:	f009 fc66 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(' ');
 8005284:	2020      	movs	r0, #32
 8005286:	f009 fc63 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.FaultCode,0);
 800528a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800528e:	ee00 3a10 	vmov	s0, r3
 8005292:	2000      	movs	r0, #0
 8005294:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005298:	e72b      	b.n	80050f2 <modDisplayShowInfo+0x2ae>
				driverSWSSD1306ClearDisplay();
 800529a:	f003 fe71 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_ERROR],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);  // Error logo uses half of the screen
 800529e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a2:	4871      	ldr	r0, [pc, #452]	; (8005468 <modDisplayShowInfo+0x624>)
 80052a4:	f003 fe74 	bl	8008f90 <driverSWSSD1306FillBuffer>
				libGraphicsSetTextSize(1);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f009 fc49 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(WHITE);
 80052ae:	2001      	movs	r0, #1
 80052b0:	f009 fc3c 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(68,0);																						// Display text on the other side of the screen
 80052b4:	2100      	movs	r1, #0
 80052b6:	2044      	movs	r0, #68	; 0x44
 80052b8:	f009 fc2e 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('E');  
 80052bc:	2045      	movs	r0, #69	; 0x45
 80052be:	f009 fc47 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 80052c2:	2052      	movs	r0, #82	; 0x52
 80052c4:	f009 fc44 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 80052c8:	2052      	movs	r0, #82	; 0x52
 80052ca:	f009 fc41 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('O');  
 80052ce:	204f      	movs	r0, #79	; 0x4f
 80052d0:	f009 fc3e 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');  
 80052d4:	2052      	movs	r0, #82	; 0x52
 80052d6:	f009 fc3b 	bl	800eb50 <libGraphicsWrite>
				libGraphicsSetCursor(68,15);																						// Display text on the other side of the screen
 80052da:	210f      	movs	r1, #15
 80052dc:	2044      	movs	r0, #68	; 0x44
 80052de:	f009 fc1b 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('P');
 80052e2:	2050      	movs	r0, #80	; 0x50
 80052e4:	f009 fc34 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');
 80052e8:	2052      	movs	r0, #82	; 0x52
 80052ea:	f009 fc31 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('E');
 80052ee:	2045      	movs	r0, #69	; 0x45
 80052f0:	f009 fc2e 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('C');
 80052f4:	2043      	movs	r0, #67	; 0x43
 80052f6:	f009 fc2b 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('H');
 80052fa:	2048      	movs	r0, #72	; 0x48
 80052fc:	f009 fc28 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('A');
 8005300:	2041      	movs	r0, #65	; 0x41
 8005302:	f009 fc25 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('R');
 8005306:	2052      	movs	r0, #82	; 0x52
 8005308:	f009 fc22 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('G');
 800530c:	2047      	movs	r0, #71	; 0x47
 800530e:	f009 fc1f 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('E');
 8005312:	2045      	movs	r0, #69	; 0x45
 8005314:	e60b      	b.n	8004f2e <modDisplayShowInfo+0xea>
				driverSWSSD1306ClearDisplay();
 8005316:	f003 fe33 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				libGraphicsSetTextSize(1);
 800531a:	2001      	movs	r0, #1
 800531c:	f009 fc10 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(WHITE);
 8005320:	2001      	movs	r0, #1
 8005322:	f009 fc03 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(0,0);
 8005326:	2100      	movs	r1, #0
 8005328:	4608      	mov	r0, r1
 800532a:	f009 fbf5 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('E');  
 800532e:	2045      	movs	r0, #69	; 0x45
 8005330:	f009 fc0e 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('x');  
 8005334:	2078      	movs	r0, #120	; 0x78
 8005336:	f009 fc0b 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('t');  
 800533a:	2074      	movs	r0, #116	; 0x74
 800533c:	e5f7      	b.n	8004f2e <modDisplayShowInfo+0xea>
				driverSWSSD1306ClearDisplay();
 800533e:	f003 fe1f 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_BATTERY_DEAD],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);  
 8005342:	484a      	ldr	r0, [pc, #296]	; (800546c <modDisplayShowInfo+0x628>)
 8005344:	f44f 6180 	mov.w	r1, #1024	; 0x400
				driverSWSSD1306FillBuffer(libLogos[LOGO_FORCEON],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);			
 8005348:	f003 fe22 	bl	8008f90 <driverSWSSD1306FillBuffer>
				break;
 800534c:	e5c2      	b.n	8004ed4 <modDisplayShowInfo+0x90>
				driverSWSSD1306ClearDisplay();
 800534e:	f003 fe17 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_CHARGING],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);
 8005352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005356:	4843      	ldr	r0, [pc, #268]	; (8005464 <modDisplayShowInfo+0x620>)
 8005358:	f003 fe1a 	bl	8008f90 <driverSWSSD1306FillBuffer>
				libGraphicsSetTextSize(0);
 800535c:	2000      	movs	r0, #0
 800535e:	f009 fbef 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(INVERSE);
 8005362:	2002      	movs	r0, #2
 8005364:	f009 fbe2 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(35,0);
 8005368:	2100      	movs	r1, #0
 800536a:	2023      	movs	r0, #35	; 0x23
 800536c:	f009 fbd4 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('B');  
 8005370:	2042      	movs	r0, #66	; 0x42
 8005372:	f009 fbed 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('A');  
 8005376:	2041      	movs	r0, #65	; 0x41
 8005378:	f009 fbea 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('L'); 
 800537c:	204c      	movs	r0, #76	; 0x4c
 800537e:	f009 fbe7 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('A');  
 8005382:	2041      	movs	r0, #65	; 0x41
 8005384:	f009 fbe4 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('N');  
 8005388:	204e      	movs	r0, #78	; 0x4e
 800538a:	f009 fbe1 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('C'); 
 800538e:	2043      	movs	r0, #67	; 0x43
 8005390:	f009 fbde 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('I');  
 8005394:	2049      	movs	r0, #73	; 0x49
 8005396:	f009 fbdb 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('N');  
 800539a:	204e      	movs	r0, #78	; 0x4e
 800539c:	f009 fbd8 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('G');
 80053a0:	2047      	movs	r0, #71	; 0x47
 80053a2:	f009 fbd5 	bl	800eb50 <libGraphicsWrite>
				libGraphicsSetTextSize(1);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f009 fbca 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetCursor(15,43);
 80053ac:	212b      	movs	r1, #43	; 0x2b
 80053ae:	200f      	movs	r0, #15
 80053b0:	f009 fbb2 	bl	800eb18 <libGraphicsSetCursor>
				modDisplayWrite(modDisplayData.StateOfCharge,0);
 80053b4:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 80053b8:	2000      	movs	r0, #0
 80053ba:	f7ff fcfb 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('%');
 80053be:	2025      	movs	r0, #37	; 0x25
 80053c0:	f009 fbc6 	bl	800eb50 <libGraphicsWrite>
				libGraphicsSetTextSize(0);
 80053c4:	2000      	movs	r0, #0
 80053c6:	f009 fbbb 	bl	800eb40 <libGraphicsSetTextSize>
				libGraphicsSetTextColor_0(INVERSE);
 80053ca:	2002      	movs	r0, #2
 80053cc:	f009 fbae 	bl	800eb2c <libGraphicsSetTextColor_0>
				libGraphicsSetCursor(4,57);
 80053d0:	2139      	movs	r1, #57	; 0x39
 80053d2:	2004      	movs	r0, #4
 80053d4:	f009 fba0 	bl	800eb18 <libGraphicsSetCursor>
				libGraphicsWrite('C');
 80053d8:	2043      	movs	r0, #67	; 0x43
 80053da:	f009 fbb9 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite('H');
 80053de:	2048      	movs	r0, #72	; 0x48
 80053e0:	f009 fbb6 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 80053e4:	203a      	movs	r0, #58	; 0x3a
 80053e6:	f009 fbb3 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.HighestCellVoltage,3);
 80053ea:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
 80053ee:	2003      	movs	r0, #3
 80053f0:	f7ff fce0 	bl	8004db4 <modDisplayWrite>
				libGraphicsWrite('V');
 80053f4:	2056      	movs	r0, #86	; 0x56
 80053f6:	f009 fbab 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(' ');
 80053fa:	2020      	movs	r0, #32
 80053fc:	f009 fba8 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(30);
 8005400:	201e      	movs	r0, #30
 8005402:	f009 fba5 	bl	800eb50 <libGraphicsWrite>
				libGraphicsWrite(':');
 8005406:	203a      	movs	r0, #58	; 0x3a
 8005408:	f009 fba2 	bl	800eb50 <libGraphicsWrite>
				modDisplayWrite(modDisplayData.CellMismatch,3);
 800540c:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
 8005410:	2003      	movs	r0, #3
 8005412:	e639      	b.n	8005088 <modDisplayShowInfo+0x244>
				driverSWSSD1306ClearDisplay();
 8005414:	f003 fdb4 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_BATTERY_FULL],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8); 
 8005418:	4815      	ldr	r0, [pc, #84]	; (8005470 <modDisplayShowInfo+0x62c>)
 800541a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800541e:	e793      	b.n	8005348 <modDisplayShowInfo+0x504>
				driverSWSSD1306ClearDisplay();
 8005420:	f003 fdae 	bl	8008f80 <driverSWSSD1306ClearDisplay>
				driverSWSSD1306FillBuffer(libLogos[LOGO_FORCEON],SSD1306_LCDHEIGHT*SSD1306_LCDWIDTH/8);			
 8005424:	4813      	ldr	r0, [pc, #76]	; (8005474 <modDisplayShowInfo+0x630>)
 8005426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800542a:	e78d      	b.n	8005348 <modDisplayShowInfo+0x504>
		if(toggleButtonPressed && toggleButtonReleased && modDelayTick1ms(&toggleButtonPressedLastTick,500)){
 800542c:	7823      	ldrb	r3, [r4, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f43f ad1d 	beq.w	8004e6e <modDisplayShowInfo+0x2a>
 8005434:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8005478 <modDisplayShowInfo+0x634>
 8005438:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800543c:	4648      	mov	r0, r9
 800543e:	f7ff fb6f 	bl	8004b20 <modDelayTick1ms>
 8005442:	2800      	cmp	r0, #0
 8005444:	f43f ad13 	beq.w	8004e6e <modDisplayShowInfo+0x2a>
			toggleButtonPressedLastTick = HAL_GetTick();
 8005448:	f005 fcb8 	bl	800adbc <HAL_GetTick>
			modDisplayDispLoadShuffle++;
 800544c:	783b      	ldrb	r3, [r7, #0]
			toggleButtonPressedLastTick = HAL_GetTick();
 800544e:	f8c9 0000 	str.w	r0, [r9]
			modDisplayDispLoadShuffle++;
 8005452:	3301      	adds	r3, #1
 8005454:	703b      	strb	r3, [r7, #0]
			toggleButtonReleased = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	7023      	strb	r3, [r4, #0]
			toggleButtonPressedCounter = true;
 800545a:	2301      	movs	r3, #1
 800545c:	f888 3000 	strb.w	r3, [r8]
 8005460:	e505      	b.n	8004e6e <modDisplayShowInfo+0x2a>
 8005462:	bf00      	nop
 8005464:	08015250 	.word	0x08015250
 8005468:	08015e50 	.word	0x08015e50
 800546c:	08015a50 	.word	0x08015a50
 8005470:	08016250 	.word	0x08016250
 8005474:	08016650 	.word	0x08016650
 8005478:	200048ec 	.word	0x200048ec

0800547c <modEffectChangeState>:
	modEffectTask();
	modDelayInit();																					// Init delay mechanism
}

void modEffectChangeState(STATIDTypedef id, STATStateTypedef NewState) {
	if(STATStatuses[id].State != NewState) {
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <modEffectChangeState+0x24>)
 800547e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8005482:	428a      	cmp	r2, r1
 8005484:	ea4f 02c0 	mov.w	r2, r0, lsl #3
		STATStatuses[id].State = NewState;
		STATStatuses[id].Count = 1;
	}else{
		STATStatuses[id].Count++;
 8005488:	bf0b      	itete	eq
 800548a:	189b      	addeq	r3, r3, r2
		STATStatuses[id].State = NewState;
 800548c:	f803 1030 	strbne.w	r1, [r3, r0, lsl #3]
		STATStatuses[id].Count++;
 8005490:	685a      	ldreq	r2, [r3, #4]
		STATStatuses[id].Count = 1;
 8005492:	189b      	addne	r3, r3, r2
		STATStatuses[id].Count++;
 8005494:	bf0c      	ite	eq
 8005496:	3201      	addeq	r2, #1
		STATStatuses[id].Count = 1;
 8005498:	2201      	movne	r2, #1
		STATStatuses[id].Count++;
 800549a:	605a      	str	r2, [r3, #4]
	}
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000000 	.word	0x20000000

080054a4 <modEffectChangeStateError>:

void modEffectChangeStateError(STATIDTypedef id, STATStateTypedef NewState, uint8_t errorCode) {
 80054a4:	b530      	push	{r4, r5, lr}
	static uint32_t error = 0;
	
	if(STATStatuses[id].State != NewState || error != errorCode) {
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <modEffectChangeStateError+0x24>)
 80054a8:	f813 4030 	ldrb.w	r4, [r3, r0, lsl #3]
 80054ac:	428c      	cmp	r4, r1
 80054ae:	4c07      	ldr	r4, [pc, #28]	; (80054cc <modEffectChangeStateError+0x28>)
 80054b0:	d102      	bne.n	80054b8 <modEffectChangeStateError+0x14>
 80054b2:	6825      	ldr	r5, [r4, #0]
 80054b4:	4295      	cmp	r5, r2
 80054b6:	d005      	beq.n	80054c4 <modEffectChangeStateError+0x20>
		STATStatuses[id].State = NewState;
 80054b8:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
		STATStatuses[id].Count = (uint32_t)errorCode;
 80054bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		error = errorCode;
 80054c0:	6022      	str	r2, [r4, #0]
		STATStatuses[id].Count = (uint32_t)errorCode;
 80054c2:	605a      	str	r2, [r3, #4]
	}
}
 80054c4:	bd30      	pop	{r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	20000000 	.word	0x20000000
 80054cc:	200048f8 	.word	0x200048f8

080054d0 <modEffectTaskFlash>:
				break;
		}
	}
}

STATStateTypedef modEffectTaskFlash(void) {
 80054d0:	b508      	push	{r3, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	
	if(modDelayTick100ms(&lastTick,5)) {
 80054d2:	4807      	ldr	r0, [pc, #28]	; (80054f0 <modEffectTaskFlash+0x20>)
 80054d4:	2105      	movs	r1, #5
 80054d6:	f7ff fb33 	bl	8004b40 <modDelayTick100ms>
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <modEffectTaskFlash+0x24>)
 80054dc:	b118      	cbz	r0, 80054e6 <modEffectTaskFlash+0x16>
		if(LEDOnState){
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	b11a      	cbz	r2, 80054ea <modEffectTaskFlash+0x1a>
			LEDOnState = STAT_RESET;
 80054e2:	2200      	movs	r2, #0
		}else{
			LEDOnState = STAT_SET;
 80054e4:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return LEDOnState;
}
 80054e6:	7818      	ldrb	r0, [r3, #0]
 80054e8:	bd08      	pop	{r3, pc}
			LEDOnState = STAT_SET;
 80054ea:	2201      	movs	r2, #1
 80054ec:	e7fa      	b.n	80054e4 <modEffectTaskFlash+0x14>
 80054ee:	bf00      	nop
 80054f0:	20004908 	.word	0x20004908
 80054f4:	200048f1 	.word	0x200048f1

080054f8 <modEffectTaskFlashFast>:

STATStateTypedef modEffectTaskFlashFast(void) {
 80054f8:	b508      	push	{r3, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	
	if(modDelayTick1ms(&lastTick,100)) {
 80054fa:	4807      	ldr	r0, [pc, #28]	; (8005518 <modEffectTaskFlashFast+0x20>)
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	f7ff fb0f 	bl	8004b20 <modDelayTick1ms>
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <modEffectTaskFlashFast+0x24>)
 8005504:	b118      	cbz	r0, 800550e <modEffectTaskFlashFast+0x16>
		if(LEDOnState){
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	b11a      	cbz	r2, 8005512 <modEffectTaskFlashFast+0x1a>
			LEDOnState = STAT_RESET;
 800550a:	2200      	movs	r2, #0
		}else{
			LEDOnState = STAT_SET;
 800550c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return LEDOnState;
}
 800550e:	7818      	ldrb	r0, [r3, #0]
 8005510:	bd08      	pop	{r3, pc}
			LEDOnState = STAT_SET;
 8005512:	2201      	movs	r2, #1
 8005514:	e7fa      	b.n	800550c <modEffectTaskFlashFast+0x14>
 8005516:	bf00      	nop
 8005518:	20004904 	.word	0x20004904
 800551c:	200048f6 	.word	0x200048f6

08005520 <modEffectTaskBlinkShort>:

STATStateTypedef modEffectTaskBlinkShort(uint32_t LEDPointer, uint32_t blinkTime) {
 8005520:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	
	if(LEDOnState) {
 8005522:	4d15      	ldr	r5, [pc, #84]	; (8005578 <modEffectTaskBlinkShort+0x58>)
 8005524:	782b      	ldrb	r3, [r5, #0]
STATStateTypedef modEffectTaskBlinkShort(uint32_t LEDPointer, uint32_t blinkTime) {
 8005526:	4604      	mov	r4, r0
	if(LEDOnState) {
 8005528:	b15b      	cbz	r3, 8005542 <modEffectTaskBlinkShort+0x22>
		if(modDelayTick1ms(&lastTick,blinkTime)) {
 800552a:	4c14      	ldr	r4, [pc, #80]	; (800557c <modEffectTaskBlinkShort+0x5c>)
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff faf7 	bl	8004b20 <modDelayTick1ms>
 8005532:	b120      	cbz	r0, 800553e <modEffectTaskBlinkShort+0x1e>
			LEDOnState = STAT_RESET;
 8005534:	2300      	movs	r3, #0
 8005536:	702b      	strb	r3, [r5, #0]
			lastTick = HAL_GetTick();
 8005538:	f005 fc40 	bl	800adbc <HAL_GetTick>
 800553c:	6020      	str	r0, [r4, #0]
			lastTick = HAL_GetTick();
		}
	}
	
	return LEDOnState;
}
 800553e:	7828      	ldrb	r0, [r5, #0]
 8005540:	bd38      	pop	{r3, r4, r5, pc}
		if(modDelayTick1ms(&lastTick,blinkTime)) {
 8005542:	480e      	ldr	r0, [pc, #56]	; (800557c <modEffectTaskBlinkShort+0x5c>)
 8005544:	f7ff faec 	bl	8004b20 <modDelayTick1ms>
 8005548:	2800      	cmp	r0, #0
 800554a:	d0f8      	beq.n	800553e <modEffectTaskBlinkShort+0x1e>
			if(STATStatuses[LEDPointer].Count > MAX_BLINKSHORT_CYCLES) {
 800554c:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <modEffectTaskBlinkShort+0x60>)
 800554e:	00e2      	lsls	r2, r4, #3
 8005550:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
			if(STATStatuses[LEDPointer].Count > 0) {
 8005554:	4413      	add	r3, r2
			if(STATStatuses[LEDPointer].Count > MAX_BLINKSHORT_CYCLES) {
 8005556:	6861      	ldr	r1, [r4, #4]
 8005558:	2914      	cmp	r1, #20
				STATStatuses[LEDPointer].Count = MAX_BLINKSHORT_CYCLES;
 800555a:	bf84      	itt	hi
 800555c:	2114      	movhi	r1, #20
 800555e:	6061      	strhi	r1, [r4, #4]
			if(STATStatuses[LEDPointer].Count > 0) {
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	b11a      	cbz	r2, 800556c <modEffectTaskBlinkShort+0x4c>
				STATStatuses[LEDPointer].Count--;
 8005564:	3a01      	subs	r2, #1
 8005566:	605a      	str	r2, [r3, #4]
				LEDOnState = STAT_SET;
 8005568:	2301      	movs	r3, #1
 800556a:	702b      	strb	r3, [r5, #0]
			lastTick = HAL_GetTick();
 800556c:	f005 fc26 	bl	800adbc <HAL_GetTick>
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <modEffectTaskBlinkShort+0x5c>)
 8005572:	6018      	str	r0, [r3, #0]
 8005574:	e7e3      	b.n	800553e <modEffectTaskBlinkShort+0x1e>
 8005576:	bf00      	nop
 8005578:	200048f5 	.word	0x200048f5
 800557c:	20004914 	.word	0x20004914
 8005580:	20000000 	.word	0x20000000

08005584 <modEffectTaskBlinkLong>:

STATStateTypedef modEffectTaskBlinkLong(uint32_t LEDPointer, uint32_t blinkTime) {
 8005584:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	
	if(LEDOnState) {
 8005586:	4d15      	ldr	r5, [pc, #84]	; (80055dc <modEffectTaskBlinkLong+0x58>)
 8005588:	782b      	ldrb	r3, [r5, #0]
STATStateTypedef modEffectTaskBlinkLong(uint32_t LEDPointer, uint32_t blinkTime) {
 800558a:	4604      	mov	r4, r0
	if(LEDOnState) {
 800558c:	b15b      	cbz	r3, 80055a6 <modEffectTaskBlinkLong+0x22>
		if(modDelayTick1ms(&lastTick,blinkTime)) {
 800558e:	4c14      	ldr	r4, [pc, #80]	; (80055e0 <modEffectTaskBlinkLong+0x5c>)
 8005590:	4620      	mov	r0, r4
 8005592:	f7ff fac5 	bl	8004b20 <modDelayTick1ms>
 8005596:	b120      	cbz	r0, 80055a2 <modEffectTaskBlinkLong+0x1e>
			LEDOnState = STAT_RESET;
 8005598:	2300      	movs	r3, #0
 800559a:	702b      	strb	r3, [r5, #0]
			lastTick = HAL_GetTick();
 800559c:	f005 fc0e 	bl	800adbc <HAL_GetTick>
 80055a0:	6020      	str	r0, [r4, #0]
			lastTick = HAL_GetTick();
		}
	}
	
	return LEDOnState;
}
 80055a2:	7828      	ldrb	r0, [r5, #0]
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
		if(modDelayTick1ms(&lastTick,blinkTime)) {
 80055a6:	480e      	ldr	r0, [pc, #56]	; (80055e0 <modEffectTaskBlinkLong+0x5c>)
 80055a8:	f7ff faba 	bl	8004b20 <modDelayTick1ms>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0f8      	beq.n	80055a2 <modEffectTaskBlinkLong+0x1e>
			if(STATStatuses[LEDPointer].Count > MAX_BLINKLONG_CYCLES) {
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <modEffectTaskBlinkLong+0x60>)
 80055b2:	00e2      	lsls	r2, r4, #3
 80055b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
			if(STATStatuses[LEDPointer].Count > 0) {
 80055b8:	4413      	add	r3, r2
			if(STATStatuses[LEDPointer].Count > MAX_BLINKLONG_CYCLES) {
 80055ba:	6861      	ldr	r1, [r4, #4]
 80055bc:	2905      	cmp	r1, #5
				STATStatuses[LEDPointer].Count = MAX_BLINKLONG_CYCLES;
 80055be:	bf84      	itt	hi
 80055c0:	2105      	movhi	r1, #5
 80055c2:	6061      	strhi	r1, [r4, #4]
			if(STATStatuses[LEDPointer].Count > 0) {
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	b11a      	cbz	r2, 80055d0 <modEffectTaskBlinkLong+0x4c>
				STATStatuses[LEDPointer].Count--;
 80055c8:	3a01      	subs	r2, #1
 80055ca:	605a      	str	r2, [r3, #4]
				LEDOnState = STAT_SET; 
 80055cc:	2301      	movs	r3, #1
 80055ce:	702b      	strb	r3, [r5, #0]
			lastTick = HAL_GetTick();
 80055d0:	f005 fbf4 	bl	800adbc <HAL_GetTick>
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <modEffectTaskBlinkLong+0x5c>)
 80055d6:	6018      	str	r0, [r3, #0]
 80055d8:	e7e3      	b.n	80055a2 <modEffectTaskBlinkLong+0x1e>
 80055da:	bf00      	nop
 80055dc:	200048f4 	.word	0x200048f4
 80055e0:	20004910 	.word	0x20004910
 80055e4:	20000000 	.word	0x20000000

080055e8 <modEffectTaskBlinkShortLong>:

STATStateTypedef modEffectTaskBlinkShortLong(uint32_t blinkTimeShort, uint32_t blinkRatio) {
 80055e8:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	
	if(LEDOnState) {
 80055ea:	4c0c      	ldr	r4, [pc, #48]	; (800561c <modEffectTaskBlinkShortLong+0x34>)
 80055ec:	4d0c      	ldr	r5, [pc, #48]	; (8005620 <modEffectTaskBlinkShortLong+0x38>)
 80055ee:	7823      	ldrb	r3, [r4, #0]
 80055f0:	b15b      	cbz	r3, 800560a <modEffectTaskBlinkShortLong+0x22>
		if(modDelayTick1ms(&lastTick,blinkTimeShort)) {
 80055f2:	4601      	mov	r1, r0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f7ff fa93 	bl	8004b20 <modDelayTick1ms>
 80055fa:	b120      	cbz	r0, 8005606 <modEffectTaskBlinkShortLong+0x1e>
			LEDOnState = STAT_RESET;
 80055fc:	2300      	movs	r3, #0
			lastTick = HAL_GetTick();
		}
	}else{
		if(modDelayTick1ms(&lastTick,blinkTimeShort*blinkRatio)) {
			LEDOnState = STAT_SET;
 80055fe:	7023      	strb	r3, [r4, #0]
			lastTick = HAL_GetTick();
 8005600:	f005 fbdc 	bl	800adbc <HAL_GetTick>
 8005604:	6028      	str	r0, [r5, #0]
		}
	}
	
	return LEDOnState;
}
 8005606:	7820      	ldrb	r0, [r4, #0]
 8005608:	bd38      	pop	{r3, r4, r5, pc}
		if(modDelayTick1ms(&lastTick,blinkTimeShort*blinkRatio)) {
 800560a:	4341      	muls	r1, r0
 800560c:	4628      	mov	r0, r5
 800560e:	f7ff fa87 	bl	8004b20 <modDelayTick1ms>
 8005612:	2800      	cmp	r0, #0
 8005614:	d0f7      	beq.n	8005606 <modEffectTaskBlinkShortLong+0x1e>
			LEDOnState = STAT_SET;
 8005616:	2301      	movs	r3, #1
 8005618:	e7f1      	b.n	80055fe <modEffectTaskBlinkShortLong+0x16>
 800561a:	bf00      	nop
 800561c:	200048f3 	.word	0x200048f3
 8005620:	2000490c 	.word	0x2000490c

08005624 <modEffectTaskError>:

STATStateTypedef modEffectTaskError(uint32_t blinkTimeShort, uint32_t blinkRatio, uint32_t LEDPointer) {
 8005624:	b570      	push	{r4, r5, r6, lr}
	static uint32_t lastTick;
	static STATStateTypedef LEDOnState = STAT_RESET;
	static uint8_t errorCounter = 0;
	
	if(LEDOnState) {
 8005626:	4c16      	ldr	r4, [pc, #88]	; (8005680 <modEffectTaskError+0x5c>)
 8005628:	7826      	ldrb	r6, [r4, #0]
 800562a:	b166      	cbz	r6, 8005646 <modEffectTaskError+0x22>
		if(modDelayTick1ms(&lastTick,blinkTimeShort)) {
 800562c:	4601      	mov	r1, r0
 800562e:	4815      	ldr	r0, [pc, #84]	; (8005684 <modEffectTaskError+0x60>)
 8005630:	f7ff fa76 	bl	8004b20 <modDelayTick1ms>
 8005634:	b128      	cbz	r0, 8005642 <modEffectTaskError+0x1e>
			LEDOnState = STAT_RESET;
			errorCounter++;
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <modEffectTaskError+0x64>)
			LEDOnState = STAT_RESET;
 8005638:	2300      	movs	r3, #0
 800563a:	7023      	strb	r3, [r4, #0]
			errorCounter++;
 800563c:	7813      	ldrb	r3, [r2, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	7013      	strb	r3, [r2, #0]
				}
			}
	}
	
	return LEDOnState;
}
 8005642:	7820      	ldrb	r0, [r4, #0]
 8005644:	bd70      	pop	{r4, r5, r6, pc}
			if(errorCounter >= STATStatuses[LEDPointer].Count){
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <modEffectTaskError+0x68>)
 8005648:	4d0f      	ldr	r5, [pc, #60]	; (8005688 <modEffectTaskError+0x64>)
 800564a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800564e:	4341      	muls	r1, r0
 8005650:	6853      	ldr	r3, [r2, #4]
 8005652:	7828      	ldrb	r0, [r5, #0]
 8005654:	4298      	cmp	r0, r3
 8005656:	d30a      	bcc.n	800566e <modEffectTaskError+0x4a>
				if(modDelayTick1ms(&lastTick,blinkTimeShort*blinkRatio*5)) {
 8005658:	480a      	ldr	r0, [pc, #40]	; (8005684 <modEffectTaskError+0x60>)
 800565a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800565e:	f7ff fa5f 	bl	8004b20 <modDelayTick1ms>
 8005662:	2800      	cmp	r0, #0
 8005664:	d0ed      	beq.n	8005642 <modEffectTaskError+0x1e>
					LEDOnState = STAT_SET;
 8005666:	2301      	movs	r3, #1
 8005668:	7023      	strb	r3, [r4, #0]
					errorCounter = 0;
 800566a:	702e      	strb	r6, [r5, #0]
 800566c:	e7e9      	b.n	8005642 <modEffectTaskError+0x1e>
				if(modDelayTick1ms(&lastTick,blinkTimeShort*blinkRatio)) {
 800566e:	4805      	ldr	r0, [pc, #20]	; (8005684 <modEffectTaskError+0x60>)
 8005670:	f7ff fa56 	bl	8004b20 <modDelayTick1ms>
 8005674:	2800      	cmp	r0, #0
 8005676:	d0e4      	beq.n	8005642 <modEffectTaskError+0x1e>
					LEDOnState = STAT_SET;				
 8005678:	2301      	movs	r3, #1
 800567a:	7023      	strb	r3, [r4, #0]
 800567c:	e7e1      	b.n	8005642 <modEffectTaskError+0x1e>
 800567e:	bf00      	nop
 8005680:	200048f2 	.word	0x200048f2
 8005684:	20004900 	.word	0x20004900
 8005688:	200048fc 	.word	0x200048fc
 800568c:	20000000 	.word	0x20000000

08005690 <modEffectTask>:
void modEffectTask(void) {
 8005690:	b538      	push	{r3, r4, r5, lr}
		switch(STATStatuses[LEDPointer].State) {
 8005692:	4d1c      	ldr	r5, [pc, #112]	; (8005704 <modEffectTask+0x74>)
	for(LEDPointer = 0; LEDPointer < NoOfSTATs; LEDPointer++) {
 8005694:	2400      	movs	r4, #0
		switch(STATStatuses[LEDPointer].State) {
 8005696:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
 800569a:	2b0a      	cmp	r3, #10
 800569c:	d80b      	bhi.n	80056b6 <modEffectTask+0x26>
 800569e:	e8df f003 	tbb	[pc, r3]
 80056a2:	0e06      	.short	0x0e06
 80056a4:	1c171410 	.word	0x1c171410
 80056a8:	060e2722 	.word	0x060e2722
 80056ac:	2b          	.byte	0x2b
 80056ad:	00          	.byte	0x00
				driverHWSetOutput((STATIDTypedef)LEDPointer,STAT_RESET);
 80056ae:	2100      	movs	r1, #0
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskError(200,1,LEDPointer));
 80056b0:	b2e0      	uxtb	r0, r4
 80056b2:	f005 fabb 	bl	800ac2c <driverHWSetOutput>
	for(LEDPointer = 0; LEDPointer < NoOfSTATs; LEDPointer++) {
 80056b6:	3401      	adds	r4, #1
 80056b8:	2c03      	cmp	r4, #3
 80056ba:	d1ec      	bne.n	8005696 <modEffectTask+0x6>
}
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
				driverHWSetOutput((STATIDTypedef)LEDPointer,STAT_SET);
 80056be:	2101      	movs	r1, #1
 80056c0:	e7f6      	b.n	80056b0 <modEffectTask+0x20>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskFlash());
 80056c2:	f7ff ff05 	bl	80054d0 <modEffectTaskFlash>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskError(200,1,LEDPointer));
 80056c6:	4601      	mov	r1, r0
 80056c8:	e7f2      	b.n	80056b0 <modEffectTask+0x20>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskFlashFast());
 80056ca:	f7ff ff15 	bl	80054f8 <modEffectTaskFlashFast>
 80056ce:	e7fa      	b.n	80056c6 <modEffectTask+0x36>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskBlinkShort(LEDPointer,50));
 80056d0:	2132      	movs	r1, #50	; 0x32
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff ff24 	bl	8005520 <modEffectTaskBlinkShort>
 80056d8:	e7f5      	b.n	80056c6 <modEffectTask+0x36>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskBlinkLong(LEDPointer,500));
 80056da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056de:	4620      	mov	r0, r4
 80056e0:	f7ff ff50 	bl	8005584 <modEffectTaskBlinkLong>
 80056e4:	e7ef      	b.n	80056c6 <modEffectTask+0x36>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskBlinkShortLong(200,10));
 80056e6:	210a      	movs	r1, #10
 80056e8:	20c8      	movs	r0, #200	; 0xc8
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskBlinkShortLong(1000,4));
 80056ea:	f7ff ff7d 	bl	80055e8 <modEffectTaskBlinkShortLong>
 80056ee:	e7ea      	b.n	80056c6 <modEffectTask+0x36>
 80056f0:	2104      	movs	r1, #4
 80056f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056f6:	e7f8      	b.n	80056ea <modEffectTask+0x5a>
				driverHWSetOutput((STATIDTypedef)LEDPointer,modEffectTaskError(200,1,LEDPointer));
 80056f8:	4622      	mov	r2, r4
 80056fa:	2101      	movs	r1, #1
 80056fc:	20c8      	movs	r0, #200	; 0xc8
 80056fe:	f7ff ff91 	bl	8005624 <modEffectTaskError>
 8005702:	e7e0      	b.n	80056c6 <modEffectTask+0x36>
 8005704:	20000000 	.word	0x20000000

08005708 <modEffectInit>:
void modEffectInit(void) {
 8005708:	b508      	push	{r3, lr}
	driverHWStatusInit();																		// Init GPIO direction and state
 800570a:	f005 fa6b 	bl	800abe4 <driverHWStatusInit>
	modEffectTask();
 800570e:	f7ff ffbf 	bl	8005690 <modEffectTask>
}
 8005712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	modDelayInit();																					// Init delay mechanism
 8005716:	f7ff b9ef 	b.w	8004af8 <modDelayInit>
	...

0800571c <modFlashEraseNewAppData>:
	ADDR_FLASH_PAGE_97,
	ADDR_FLASH_PAGE_98,
	ADDR_FLASH_PAGE_99
};

uint16_t modFlashEraseNewAppData(uint32_t new_app_size) {	
 800571c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t page_error = 0;
 800571e:	2400      	movs	r4, #0
	
	new_app_size += flash_addr[NEW_APP_BASE];
 8005720:	f100 6500 	add.w	r5, r0, #134217728	; 0x8000000
	
	FLASH_EraseInitTypeDef flashEraseInit;
	flashEraseInit.NbPages     = 1;
 8005724:	2301      	movs	r3, #1
 8005726:	4e0b      	ldr	r6, [pc, #44]	; (8005754 <modFlashEraseNewAppData+0x38>)
	uint32_t page_error = 0;
 8005728:	9400      	str	r4, [sp, #0]
	new_app_size += flash_addr[NEW_APP_BASE];
 800572a:	f505 35c8 	add.w	r5, r5, #102400	; 0x19000
	flashEraseInit.NbPages     = 1;
 800572e:	9303      	str	r3, [sp, #12]
	flashEraseInit.PageAddress = flash_addr[NEW_APP_BASE];
	flashEraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005730:	9401      	str	r4, [sp, #4]

	for (int i = 0;i < NEW_APP_SECTORS;i++) {
		if (new_app_size > flash_addr[NEW_APP_BASE + i]) {
 8005732:	f856 3b04 	ldr.w	r3, [r6], #4
 8005736:	42ab      	cmp	r3, r5
 8005738:	d209      	bcs.n	800574e <modFlashEraseNewAppData+0x32>
			flashEraseInit.PageAddress = flash_addr[NEW_APP_BASE + i];
			uint16_t res = HAL_FLASHEx_Erase(&flashEraseInit,&page_error);
 800573a:	4669      	mov	r1, sp
 800573c:	a801      	add	r0, sp, #4
			flashEraseInit.PageAddress = flash_addr[NEW_APP_BASE + i];
 800573e:	9302      	str	r3, [sp, #8]
			uint16_t res = HAL_FLASHEx_Erase(&flashEraseInit,&page_error);
 8005740:	f006 ff0c 	bl	800c55c <HAL_FLASHEx_Erase>
 8005744:	b280      	uxth	r0, r0
			if (res != HAL_OK) {
 8005746:	b918      	cbnz	r0, 8005750 <modFlashEraseNewAppData+0x34>
	for (int i = 0;i < NEW_APP_SECTORS;i++) {
 8005748:	3401      	adds	r4, #1
 800574a:	2c32      	cmp	r4, #50	; 0x32
 800574c:	d1f1      	bne.n	8005732 <modFlashEraseNewAppData+0x16>
		} else {
			break;
		}
	}
	
	return HAL_OK;
 800574e:	2000      	movs	r0, #0
}
 8005750:	b004      	add	sp, #16
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	080134dc 	.word	0x080134dc

08005758 <modFlashWriteByte>:
	}
	
	return HAL_OK;
}

uint16_t modFlashWriteByte(uint32_t offset, uint8_t data, bool lastByte) {
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <modFlashWriteByte+0x50>)
	static bool newStoredData;
	static uint32_t newAddressOffset;
	static uint32_t newData;
	uint16_t returnValue = HAL_OK;
	
	if(offset != 0){
 800575c:	b178      	cbz	r0, 800577e <modFlashWriteByte+0x26>
		highLowByte = (offset & 0x01) ? true : false;
		newAddressOffset = (offset & 0xFFFFFFFE);
 800575e:	4d13      	ldr	r5, [pc, #76]	; (80057ac <modFlashWriteByte+0x54>)
		highLowByte = (offset & 0x01) ? true : false;
 8005760:	f000 0401 	and.w	r4, r0, #1
		newAddressOffset = (offset & 0xFFFFFFFE);
 8005764:	f020 0001 	bic.w	r0, r0, #1
 8005768:	6028      	str	r0, [r5, #0]
		highLowByte = (offset & 0x01) ? true : false;
 800576a:	701c      	strb	r4, [r3, #0]
		
		if(!highLowByte)
 800576c:	4810      	ldr	r0, [pc, #64]	; (80057b0 <modFlashWriteByte+0x58>)
 800576e:	b114      	cbz	r4, 8005776 <modFlashWriteByte+0x1e>
			newData = data;
		else
			newData |= (data << 8);
 8005770:	6804      	ldr	r4, [r0, #0]
 8005772:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8005776:	6001      	str	r1, [r0, #0]
		
		newStoredData = true;
 8005778:	490e      	ldr	r1, [pc, #56]	; (80057b4 <modFlashWriteByte+0x5c>)
 800577a:	2001      	movs	r0, #1
 800577c:	7008      	strb	r0, [r1, #0]
	}
	
	if((highLowByte || lastByte) && newStoredData) {
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b903      	cbnz	r3, 8005784 <modFlashWriteByte+0x2c>
 8005782:	b172      	cbz	r2, 80057a2 <modFlashWriteByte+0x4a>
 8005784:	4c0b      	ldr	r4, [pc, #44]	; (80057b4 <modFlashWriteByte+0x5c>)
 8005786:	7820      	ldrb	r0, [r4, #0]
 8005788:	2500      	movs	r5, #0
 800578a:	b148      	cbz	r0, 80057a0 <modFlashWriteByte+0x48>
		returnValue = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,newAddressOffset,newData);
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <modFlashWriteByte+0x58>)
 800578e:	4907      	ldr	r1, [pc, #28]	; (80057ac <modFlashWriteByte+0x54>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	462b      	mov	r3, r5
 8005796:	2001      	movs	r0, #1
 8005798:	f006 fe6c 	bl	800c474 <HAL_FLASH_Program>
		newStoredData = false;
 800579c:	7025      	strb	r5, [r4, #0]
		returnValue = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,newAddressOffset,newData);
 800579e:	b280      	uxth	r0, r0
	}
	
	return returnValue;
}
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t returnValue = HAL_OK;
 80057a2:	4610      	mov	r0, r2
 80057a4:	e7fc      	b.n	80057a0 <modFlashWriteByte+0x48>
 80057a6:	bf00      	nop
 80057a8:	20004918 	.word	0x20004918
 80057ac:	2000491c 	.word	0x2000491c
 80057b0:	20004920 	.word	0x20004920
 80057b4:	20004924 	.word	0x20004924

080057b8 <modFlashWriteNewAppData>:

uint16_t modFlashWriteNewAppData(uint32_t offset, uint8_t *data, uint32_t len) {
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	f100 6400 	add.w	r4, r0, #134217728	; 0x8000000
 80057be:	460d      	mov	r5, r1
 80057c0:	f504 34c8 	add.w	r4, r4, #102400	; 0x19000
 80057c4:	188e      	adds	r6, r1, r2
	uint16_t returnVal = HAL_OK;

	for (uint32_t i = 0;i < len;i++) {
 80057c6:	42b5      	cmp	r5, r6
 80057c8:	d101      	bne.n	80057ce <modFlashWriteNewAppData+0x16>
		if (res != HAL_OK) {
			return res;
		}
	}

	return returnVal;
 80057ca:	2000      	movs	r0, #0
 80057cc:	e008      	b.n	80057e0 <modFlashWriteNewAppData+0x28>
		uint16_t res = modFlashWriteByte(flash_addr[NEW_APP_BASE] + offset + i, data[i],false);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80057d4:	2200      	movs	r2, #0
 80057d6:	f7ff ffbf 	bl	8005758 <modFlashWriteByte>
		if (res != HAL_OK) {
 80057da:	3401      	adds	r4, #1
 80057dc:	2800      	cmp	r0, #0
 80057de:	d0f2      	beq.n	80057c6 <modFlashWriteNewAppData+0xe>
}
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057e4 <modFlashJumpToBootloader>:
	modFlashWriteByte(0,0,true);

	return HAL_OK;
}

void modFlashJumpToBootloader(void) {
 80057e4:	b5b0      	push	{r4, r5, r7, lr}
	typedef void (*pFunction)(void);
	
	modFlashWriteByte(0,0,true);
 80057e6:	2100      	movs	r1, #0
	
	__HAL_RCC_CAN1_FORCE_RESET();
 80057e8:	4c1f      	ldr	r4, [pc, #124]	; (8005868 <modFlashJumpToBootloader+0x84>)
	modFlashWriteByte(0,0,true);
 80057ea:	2201      	movs	r2, #1
 80057ec:	4608      	mov	r0, r1
void modFlashJumpToBootloader(void) {
 80057ee:	af00      	add	r7, sp, #0
	modFlashWriteByte(0,0,true);
 80057f0:	f7ff ffb2 	bl	8005758 <modFlashWriteByte>
	__HAL_RCC_CAN1_FORCE_RESET();
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057fa:	6123      	str	r3, [r4, #16]
	HAL_Delay(5);
 80057fc:	2005      	movs	r0, #5
 80057fe:	f005 fae3 	bl	800adc8 <HAL_Delay>
	__HAL_RCC_CAN1_RELEASE_RESET();
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005808:	6123      	str	r3, [r4, #16]
	HAL_Delay(5);
 800580a:	2005      	movs	r0, #5
 800580c:	f005 fadc 	bl	800adc8 <HAL_Delay>

	__HAL_RCC_USART2_FORCE_RESET();
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005816:	6123      	str	r3, [r4, #16]
	HAL_Delay(5);
 8005818:	2005      	movs	r0, #5
 800581a:	f005 fad5 	bl	800adc8 <HAL_Delay>
	__HAL_RCC_USART2_RELEASE_RESET();
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005824:	6123      	str	r3, [r4, #16]
	HAL_Delay(5);
 8005826:	2005      	movs	r0, #5
 8005828:	f005 face 	bl	800adc8 <HAL_Delay>
	
	HAL_RCC_DeInit();
 800582c:	f007 fb0e 	bl	800ce4c <HAL_RCC_DeInit>
	// Variable that will be loaded with the start address of the application
	volatile uint32_t* jump_address;
	const volatile uint32_t* bootloader_address = (volatile uint32_t*)ADDR_FLASH_PAGE_100;

	// Get jump address from application vector table
	jump_address = (volatile uint32_t*) bootloader_address[1];
 8005830:	4b0e      	ldr	r3, [pc, #56]	; (800586c <modFlashJumpToBootloader+0x88>)
 8005832:	6859      	ldr	r1, [r3, #4]

	// Load this address into function pointer
	jump_to_bootloader = (pFunction) jump_address;
	
	// Clear pending interrupts
	SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <modFlashJumpToBootloader+0x8c>)
 8005836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800583a:	605a      	str	r2, [r3, #4]

	// Disable all interrupts
	for(int i = 0;i < 8;i++) {
 800583c:	2200      	movs	r2, #0
		NVIC->ICER[i] = NVIC->IABR[i];
 800583e:	0093      	lsls	r3, r2, #2
 8005840:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005844:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
	for(int i = 0;i < 8;i++) {
 8005848:	3201      	adds	r2, #1
		NVIC->ICER[i] = NVIC->IABR[i];
 800584a:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800584e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	for(int i = 0;i < 8;i++) {
 8005852:	2a08      	cmp	r2, #8
 8005854:	d1f3      	bne.n	800583e <modFlashJumpToBootloader+0x5a>
	}

	// Set stack pointer
	__set_MSP((uint32_t) (bootloader_address[0]));
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <modFlashJumpToBootloader+0x88>)
 8005858:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 800585a:	f383 8808 	msr	MSP, r3

	// Jump to the bootloader
	jump_to_bootloader();
}
 800585e:	46bd      	mov	sp, r7
 8005860:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	jump_to_bootloader();
 8005864:	4708      	bx	r1
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000
 800586c:	08032000 	.word	0x08032000
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <modOperationalStateUpdateStates>:
	// Handle subtask-display to update display content
	modDisplayTask();
};

void modOperationalStateUpdateStates(void) {
	modOperationalStateLastState = modOperationalStateCurrentState;
 8005874:	4a05      	ldr	r2, [pc, #20]	; (800588c <modOperationalStateUpdateStates+0x18>)
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <modOperationalStateUpdateStates+0x1c>)
 8005878:	7811      	ldrb	r1, [r2, #0]
 800587a:	7019      	strb	r1, [r3, #0]
	modOperationalStatePackStatehandle->operationalState = modOperationalStateCurrentState = modOperationalStateNewState;
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <modOperationalStateUpdateStates+0x20>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	7013      	strb	r3, [r2, #0]
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <modOperationalStateUpdateStates+0x24>)
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	7613      	strb	r3, [r2, #24]
};
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20004939 	.word	0x20004939
 8005890:	20004985 	.word	0x20004985
 8005894:	20004987 	.word	0x20004987
 8005898:	20004994 	.word	0x20004994

0800589c <modOperationalStateSetAllStates>:

void modOperationalStateSetAllStates(OperationalStateTypedef newState) {
	modOperationalStatePackStatehandle->operationalState = modOperationalStateLastState = modOperationalStateCurrentState = modOperationalStateNewState = newState;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <modOperationalStateSetAllStates+0x14>)
 800589e:	7018      	strb	r0, [r3, #0]
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <modOperationalStateSetAllStates+0x18>)
 80058a2:	7018      	strb	r0, [r3, #0]
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <modOperationalStateSetAllStates+0x1c>)
 80058a6:	7018      	strb	r0, [r3, #0]
 80058a8:	4b04      	ldr	r3, [pc, #16]	; (80058bc <modOperationalStateSetAllStates+0x20>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	7618      	strb	r0, [r3, #24]
};
 80058ae:	4770      	bx	lr
 80058b0:	20004987 	.word	0x20004987
 80058b4:	20004939 	.word	0x20004939
 80058b8:	20004985 	.word	0x20004985
 80058bc:	20004994 	.word	0x20004994

080058c0 <modOperationalStateInit>:
	modOperationalStatePackStatehandle = packState;
 80058c0:	4b14      	ldr	r3, [pc, #80]	; (8005914 <modOperationalStateInit+0x54>)
void modOperationalStateInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer, modStateOfChargeStructTypeDef *generalStateOfCharge) {
 80058c2:	b510      	push	{r4, lr}
	modOperationalStatePackStatehandle = packState;
 80058c4:	6018      	str	r0, [r3, #0]
	modOperationalStateGeneralConfigHandle = generalConfigPointer;
 80058c6:	4c14      	ldr	r4, [pc, #80]	; (8005918 <modOperationalStateInit+0x58>)
	modOperationalStateGeneralStateOfCharge = generalStateOfCharge;
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <modOperationalStateInit+0x5c>)
	modOperationalStateGeneralConfigHandle = generalConfigPointer;
 80058ca:	6021      	str	r1, [r4, #0]
	modOperationalStateSetAllStates(OP_STATE_INIT);
 80058cc:	2000      	movs	r0, #0
	modOperationalStateGeneralStateOfCharge = generalStateOfCharge;
 80058ce:	601a      	str	r2, [r3, #0]
	modOperationalStateSetAllStates(OP_STATE_INIT);
 80058d0:	f7ff ffe4 	bl	800589c <modOperationalStateSetAllStates>
	modOperationalStateStartupDelay = HAL_GetTick();
 80058d4:	f005 fa72 	bl	800adbc <HAL_GetTick>
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <modOperationalStateInit+0x60>)
 80058da:	6018      	str	r0, [r3, #0]
	modOperationalStateChargerDisconnectDetectDelay = HAL_GetTick();
 80058dc:	f005 fa6e 	bl	800adbc <HAL_GetTick>
 80058e0:	4b10      	ldr	r3, [pc, #64]	; (8005924 <modOperationalStateInit+0x64>)
 80058e2:	6018      	str	r0, [r3, #0]
	packOperationalCellStateLastErrorState = PACK_STATE_NORMAL;
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <modOperationalStateInit+0x68>)
 80058e6:	2203      	movs	r2, #3
 80058e8:	701a      	strb	r2, [r3, #0]
	modOperationalStateForceOn = false;
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <modOperationalStateInit+0x6c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
	modDisplayInit();
 80058f0:	f7ff f94c 	bl	8004b8c <modDisplayInit>
	driverSWADC128D818Init(modOperationalStateGeneralConfigHandle->noOfExpansionBoard, 8);
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	2108      	movs	r1, #8
 80058f8:	f893 00e5 	ldrb.w	r0, [r3, #229]	; 0xe5
 80058fc:	f004 fa5c 	bl	8009db8 <driverSWADC128D818Init>
	modOperationalStateNotUsedTime = HAL_GetTick();
 8005900:	f005 fa5c 	bl	800adbc <HAL_GetTick>
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <modOperationalStateInit+0x70>)
 8005906:	6018      	str	r0, [r3, #0]
	modOperationalStateNotUsedResetDelay = HAL_GetTick();
 8005908:	f005 fa58 	bl	800adbc <HAL_GetTick>
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <modOperationalStateInit+0x74>)
 800590e:	6018      	str	r0, [r3, #0]
};
 8005910:	bd10      	pop	{r4, pc}
 8005912:	bf00      	nop
 8005914:	20004994 	.word	0x20004994
 8005918:	2000497c 	.word	0x2000497c
 800591c:	20004980 	.word	0x20004980
 8005920:	2000499c 	.word	0x2000499c
 8005924:	20004930 	.word	0x20004930
 8005928:	200049a4 	.word	0x200049a4
 800592c:	20004978 	.word	0x20004978
 8005930:	2000498c 	.word	0x2000498c
 8005934:	20004988 	.word	0x20004988

08005938 <modOperationalStateHandleChargerDisconnect>:

void modOperationalStateSetNewState(OperationalStateTypedef newState) {
	modOperationalStateNewState = newState;
};

void modOperationalStateHandleChargerDisconnect(OperationalStateTypedef newState) {
 8005938:	b510      	push	{r4, lr}
 800593a:	4604      	mov	r4, r0
	if(modPowerStateChargerDetected() && !((modOperationalStatePackStatehandle->packCurrent < modOperationalStateGeneralConfigHandle->chargerEnabledThreshold ) && modOperationalStatePackStatehandle->chargeDesired && modOperationalStatePackStatehandle->chargeAllowed)) {
 800593c:	f002 fb56 	bl	8007fec <modPowerStateChargerDetected>
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <modOperationalStateHandleChargerDisconnect+0x5c>)
 8005942:	b1b0      	cbz	r0, 8005972 <modOperationalStateHandleChargerDisconnect+0x3a>
 8005944:	4b14      	ldr	r3, [pc, #80]	; (8005998 <modOperationalStateHandleChargerDisconnect+0x60>)
 8005946:	6811      	ldr	r1, [r2, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	edd1 7a1f 	vldr	s15, [r1, #124]	; 0x7c
 800594e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595a:	d505      	bpl.n	8005968 <modOperationalStateHandleChargerDisconnect+0x30>
 800595c:	f893 109f 	ldrb.w	r1, [r3, #159]	; 0x9f
 8005960:	b111      	cbz	r1, 8005968 <modOperationalStateHandleChargerDisconnect+0x30>
 8005962:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005966:	b923      	cbnz	r3, 8005972 <modOperationalStateHandleChargerDisconnect+0x3a>
		modOperationalStateChargerDisconnectDetectDelay = HAL_GetTick();
 8005968:	f005 fa28 	bl	800adbc <HAL_GetTick>
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <modOperationalStateHandleChargerDisconnect+0x64>)
 800596e:	6018      	str	r0, [r3, #0]
		if(modDelayTick1ms(&modOperationalStateChargerDisconnectDetectDelay,modOperationalStateGeneralConfigHandle->timeoutChargerDisconnected)){
			modOperationalStateSetAllStates(newState);
			modOperationalStatePackStatehandle->powerDownDesired = true;
		}
	}
};
 8005970:	bd10      	pop	{r4, pc}
		if(modDelayTick1ms(&modOperationalStateChargerDisconnectDetectDelay,modOperationalStateGeneralConfigHandle->timeoutChargerDisconnected)){
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	4809      	ldr	r0, [pc, #36]	; (800599c <modOperationalStateHandleChargerDisconnect+0x64>)
 8005976:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800597a:	f7ff f8d1 	bl	8004b20 <modDelayTick1ms>
 800597e:	2800      	cmp	r0, #0
 8005980:	d0f6      	beq.n	8005970 <modOperationalStateHandleChargerDisconnect+0x38>
			modOperationalStateSetAllStates(newState);
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff ff8a 	bl	800589c <modOperationalStateSetAllStates>
			modOperationalStatePackStatehandle->powerDownDesired = true;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <modOperationalStateHandleChargerDisconnect+0x60>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
};
 8005992:	e7ed      	b.n	8005970 <modOperationalStateHandleChargerDisconnect+0x38>
 8005994:	2000497c 	.word	0x2000497c
 8005998:	20004994 	.word	0x20004994
 800599c:	20004930 	.word	0x20004930

080059a0 <modOperationalStateTerminateOperation>:

void modOperationalStateTerminateOperation(void) {	
 80059a0:	b508      	push	{r3, lr}
	// Store the state of charge data
	modStateOfChargePowerDownSave();																						// Store the SoC data
 80059a2:	f002 fc6d 	bl	8008280 <modStateOfChargePowerDownSave>
	
	// Disable the power supply
	modPowerStateSetState(P_STAT_RESET);																				// Turn off the power
}
 80059a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	modPowerStateSetState(P_STAT_RESET);																				// Turn off the power
 80059aa:	2000      	movs	r0, #0
 80059ac:	f002 bb44 	b.w	8008038 <modPowerStateSetState>

080059b0 <modOperationalStateDelayedDisable>:

bool modOperationalStateDelayedDisable(bool delayedPowerDownDesired) {
 80059b0:	b510      	push	{r4, lr}
	if(delayedPowerDownDesired){
 80059b2:	b190      	cbz	r0, 80059da <modOperationalStateDelayedDisable+0x2a>
		if(modOperationalStatePackStatehandle->watchDogTime){
 80059b4:	4c0a      	ldr	r4, [pc, #40]	; (80059e0 <modOperationalStateDelayedDisable+0x30>)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80059bc:	b163      	cbz	r3, 80059d8 <modOperationalStateDelayedDisable+0x28>
			if(modDelayTick1ms(&modOperationalStateWatchDogCountdownLastTick,1000))
 80059be:	4809      	ldr	r0, [pc, #36]	; (80059e4 <modOperationalStateDelayedDisable+0x34>)
 80059c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059c4:	f7ff f8ac 	bl	8004b20 <modDelayTick1ms>
 80059c8:	b130      	cbz	r0, 80059d8 <modOperationalStateDelayedDisable+0x28>
				modOperationalStatePackStatehandle->watchDogTime--;
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	f892 30ae 	ldrb.w	r3, [r2, #174]	; 0xae
 80059d0:	3b01      	subs	r3, #1
 80059d2:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
 80059d6:	2000      	movs	r0, #0
			return true;
		}
	}else{
	  return true;
	}
}
 80059d8:	bd10      	pop	{r4, pc}
	  return true;
 80059da:	2001      	movs	r0, #1
 80059dc:	e7fc      	b.n	80059d8 <modOperationalStateDelayedDisable+0x28>
 80059de:	bf00      	nop
 80059e0:	20004994 	.word	0x20004994
 80059e4:	200049a0 	.word	0x200049a0

080059e8 <modOperationalStatePowerDownDelayCheck>:

bool modOperationalStatePowerDownDelayCheck(void){
 80059e8:	b510      	push	{r4, lr}
	return modDelayTick1ms(&modOperationalStateNotUsedTime,modOperationalStateGeneralConfigHandle->notUsedTimeout) && modOperationalStateGeneralConfigHandle->notUsedTimeout;
 80059ea:	4c07      	ldr	r4, [pc, #28]	; (8005a08 <modOperationalStatePowerDownDelayCheck+0x20>)
 80059ec:	4807      	ldr	r0, [pc, #28]	; (8005a0c <modOperationalStatePowerDownDelayCheck+0x24>)
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80059f4:	f7ff f894 	bl	8004b20 <modDelayTick1ms>
 80059f8:	b128      	cbz	r0, 8005a06 <modOperationalStatePowerDownDelayCheck+0x1e>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8005a00:	3800      	subs	r0, #0
 8005a02:	bf18      	it	ne
 8005a04:	2001      	movne	r0, #1
}
 8005a06:	bd10      	pop	{r4, pc}
 8005a08:	2000497c 	.word	0x2000497c
 8005a0c:	2000498c 	.word	0x2000498c

08005a10 <modOperationalStateUpdateFaultStates>:

void modOperationalStateUpdateFaultStates(void) {
	modOperationalStateLastFaultState = modOperationalStateCurrentFaultState;
 8005a10:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <modOperationalStateUpdateFaultStates+0x18>)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <modOperationalStateUpdateFaultStates+0x1c>)
 8005a14:	7811      	ldrb	r1, [r2, #0]
 8005a16:	7019      	strb	r1, [r3, #0]
	modOperationalStatePackStatehandle->faultState = modOperationalStateCurrentFaultState = modOperationalStateNewFaultState;
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <modOperationalStateUpdateFaultStates+0x20>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	7013      	strb	r3, [r2, #0]
 8005a1e:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <modOperationalStateUpdateFaultStates+0x24>)
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	7653      	strb	r3, [r2, #25]
};
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20004938 	.word	0x20004938
 8005a2c:	20004984 	.word	0x20004984
 8005a30:	20004986 	.word	0x20004986
 8005a34:	20004994 	.word	0x20004994

08005a38 <modOperationalStateTask>:
void modOperationalStateTask(void) {	
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(modOperationalStateCurrentState) {
 8005a3c:	4bb1      	ldr	r3, [pc, #708]	; (8005d04 <modOperationalStateTask+0x2cc>)
 8005a3e:	4cb2      	ldr	r4, [pc, #712]	; (8005d08 <modOperationalStateTask+0x2d0>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
void modOperationalStateTask(void) {	
 8005a42:	b08c      	sub	sp, #48	; 0x30
	switch(modOperationalStateCurrentState) {
 8005a44:	2b0b      	cmp	r3, #11
 8005a46:	f200 853f 	bhi.w	80064c8 <modOperationalStateTask+0xa90>
 8005a4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a4e:	000c      	.short	0x000c
 8005a50:	017500c5 	.word	0x017500c5
 8005a54:	02e501d0 	.word	0x02e501d0
 8005a58:	03450309 	.word	0x03450309
 8005a5c:	03a90364 	.word	0x03a90364
 8005a60:	04d403f5 	.word	0x04d403f5
 8005a64:	04ee      	.short	0x04ee
			if(modPowerStateChargerDetected()) {																		// Check to detect charger
 8005a66:	f002 fac1 	bl	8007fec <modPowerStateChargerDetected>
 8005a6a:	4ea8      	ldr	r6, [pc, #672]	; (8005d0c <modOperationalStateTask+0x2d4>)
 8005a6c:	4da8      	ldr	r5, [pc, #672]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f000 80a2 	beq.w	8005bb8 <modOperationalStateTask+0x180>
				switch(modOperationalStateGeneralConfigHandle->chargeEnableOperationalState){
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 8095 	bne.w	8005baa <modOperationalStateTask+0x172>
	modOperationalStateNewState = newState;
 8005a80:	2001      	movs	r0, #1
						modEffectChangeState(STAT_LED_POWER,STAT_FLASH);									// Flash power LED when charging
 8005a82:	2102      	movs	r1, #2
	modOperationalStateNewState = newState;
 8005a84:	7028      	strb	r0, [r5, #0]
						modEffectChangeState(STAT_LED_POWER,STAT_FLASH);									// Flash power LED when charging
 8005a86:	f7ff fcf9 	bl	800547c <modEffectChangeState>
						modOperationalStateChargerDisconnectDetectDelay = HAL_GetTick();
 8005a8a:	f005 f997 	bl	800adbc <HAL_GetTick>
 8005a8e:	4ba1      	ldr	r3, [pc, #644]	; (8005d14 <modOperationalStateTask+0x2dc>)
 8005a90:	6018      	str	r0, [r3, #0]
			if(modDelayTick1ms(&modOperationalStateStartupDelay,modOperationalStateGeneralConfigHandle->displayTimeoutSplashScreen)) {// Wait for a bit than update state. Also check voltage after main fuse? followed by going to error state if blown?		
 8005a92:	6833      	ldr	r3, [r6, #0]
 8005a94:	48a0      	ldr	r0, [pc, #640]	; (8005d18 <modOperationalStateTask+0x2e0>)
 8005a96:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8005a9a:	f7ff f841 	bl	8004b20 <modDelayTick1ms>
 8005a9e:	b170      	cbz	r0, 8005abe <modOperationalStateTask+0x86>
				if(!modOperationalStatePackStatehandle->disChargeLCAllowed && !modPowerStateChargerDetected()) {						// If discharge is not allowed
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005aa6:	b943      	cbnz	r3, 8005aba <modOperationalStateTask+0x82>
 8005aa8:	f002 faa0 	bl	8007fec <modPowerStateChargerDetected>
 8005aac:	b928      	cbnz	r0, 8005aba <modOperationalStateTask+0x82>
	modOperationalStateNewState = newState;
 8005aae:	2307      	movs	r3, #7
 8005ab0:	702b      	strb	r3, [r5, #0]
					modOperationalStateBatteryDeadDisplayTime = HAL_GetTick();
 8005ab2:	f005 f983 	bl	800adbc <HAL_GetTick>
 8005ab6:	4b99      	ldr	r3, [pc, #612]	; (8005d1c <modOperationalStateTask+0x2e4>)
 8005ab8:	6018      	str	r0, [r3, #0]
				modOperationalStateUpdateStates();																		// Sync states
 8005aba:	f7ff fedb 	bl	8005874 <modOperationalStateUpdateStates>
			modDisplayShowInfo(DISP_MODE_SPLASH,modOperationalStateDisplayData);
 8005abe:	4f98      	ldr	r7, [pc, #608]	; (8005d20 <modOperationalStateTask+0x2e8>)
 8005ac0:	f107 060c 	add.w	r6, r7, #12
 8005ac4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ac6:	466d      	mov	r5, sp
 8005ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ace:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005ad2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005ad6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005ada:	2001      	movs	r0, #1
			modDisplayShowInfo(DISP_MODE_CHARGE,modOperationalStateDisplayData);
 8005adc:	f7ff f9b2 	bl	8004e44 <modDisplayShowInfo>
	if(modPowerStateForceOnRequest()){
 8005ae0:	f002 fa9c 	bl	800801c <modPowerStateForceOnRequest>
 8005ae4:	b148      	cbz	r0, 8005afa <modOperationalStateTask+0xc2>
		modOperationalStateForceOn = true;
 8005ae6:	4b8f      	ldr	r3, [pc, #572]	; (8005d24 <modOperationalStateTask+0x2ec>)
 8005ae8:	2001      	movs	r0, #1
 8005aea:	7018      	strb	r0, [r3, #0]
		modPowerElectronicsAllowForcedOn(true);
 8005aec:	f000 fd06 	bl	80064fc <modPowerElectronicsAllowForcedOn>
	modOperationalStateNewState = newState;
 8005af0:	4b87      	ldr	r3, [pc, #540]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005af2:	2202      	movs	r2, #2
 8005af4:	701a      	strb	r2, [r3, #0]
		driverSWStorageManagerEraseData();
 8005af6:	f003 f94f 	bl	8008d98 <driverSWStorageManagerEraseData>
	if(modPowerStatePowerdownRequest()) {
 8005afa:	f002 fa7b 	bl	8007ff4 <modPowerStatePowerdownRequest>
 8005afe:	b330      	cbz	r0, 8005b4e <modOperationalStateTask+0x116>
		modOperationalStatePackStatehandle->powerDownDesired = true;
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
		if(modOperationalStateDelayedDisable(modOperationalStateGeneralConfigHandle->useCANDelayedPowerDown)) {
 8005b08:	4b80      	ldr	r3, [pc, #512]	; (8005d0c <modOperationalStateTask+0x2d4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f893 00ee 	ldrb.w	r0, [r3, #238]	; 0xee
 8005b10:	3800      	subs	r0, #0
 8005b12:	bf18      	it	ne
 8005b14:	2001      	movne	r0, #1
 8005b16:	f7ff ff4b 	bl	80059b0 <modOperationalStateDelayedDisable>
 8005b1a:	b1c0      	cbz	r0, 8005b4e <modOperationalStateTask+0x116>
void modOperationalStateSetAllFaultStates(bms_fault_state newFaultState) {
	modOperationalStatePackStatehandle->faultState = modOperationalStateLastFaultState = modOperationalStateCurrentFaultState = modOperationalStateNewFaultState = newFaultState;
};

void modOperationalStateSetNewFaultState(bms_fault_state newFaultState) {
	modOperationalStateNewFaultState = newFaultState;
 8005b1c:	4b82      	ldr	r3, [pc, #520]	; (8005d28 <modOperationalStateTask+0x2f0>)
			modDisplayShowInfo(DISP_MODE_POWEROFF,modOperationalStateDisplayData);
 8005b1e:	4f80      	ldr	r7, [pc, #512]	; (8005d20 <modOperationalStateTask+0x2e8>)
	modOperationalStateNewFaultState = newFaultState;
 8005b20:	2217      	movs	r2, #23
 8005b22:	701a      	strb	r2, [r3, #0]
	modOperationalStateNewState = newState;
 8005b24:	4b7a      	ldr	r3, [pc, #488]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005b26:	2205      	movs	r2, #5
			modDisplayShowInfo(DISP_MODE_POWEROFF,modOperationalStateDisplayData);
 8005b28:	f107 060c 	add.w	r6, r7, #12
	modOperationalStateNewState = newState;
 8005b2c:	701a      	strb	r2, [r3, #0]
			modDisplayShowInfo(DISP_MODE_POWEROFF,modOperationalStateDisplayData);
 8005b2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005b30:	466d      	mov	r5, sp
 8005b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005b3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005b40:	2004      	movs	r0, #4
 8005b42:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005b46:	f7ff f97d 	bl	8004e44 <modDisplayShowInfo>
			modOperationalStateUpdateFaultStates();
 8005b4a:	f7ff ff61 	bl	8005a10 <modOperationalStateUpdateFaultStates>
	if((modOperationalStatePackStatehandle->packOperationalCellState == PACK_STATE_ERROR_HARD_CELLVOLTAGE || modOperationalStatePackStatehandle->packOperationalCellState == PACK_STATE_ERROR_TEMPERATURE) && (modOperationalStatePackStatehandle->packOperationalCellState != packOperationalCellStateLastErrorState) && !modOperationalStateForceOn){
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	f893 3c50 	ldrb.w	r3, [r3, #3152]	; 0xc50
 8005b54:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 8005b58:	d10c      	bne.n	8005b74 <modOperationalStateTask+0x13c>
 8005b5a:	4a74      	ldr	r2, [pc, #464]	; (8005d2c <modOperationalStateTask+0x2f4>)
 8005b5c:	7811      	ldrb	r1, [r2, #0]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	d008      	beq.n	8005b74 <modOperationalStateTask+0x13c>
 8005b62:	4970      	ldr	r1, [pc, #448]	; (8005d24 <modOperationalStateTask+0x2ec>)
 8005b64:	7809      	ldrb	r1, [r1, #0]
 8005b66:	b929      	cbnz	r1, 8005b74 <modOperationalStateTask+0x13c>
		packOperationalCellStateLastErrorState = modOperationalStatePackStatehandle->packOperationalCellState; // Meganism to make error situation only trigger once
 8005b68:	7013      	strb	r3, [r2, #0]
	modOperationalStateNewState = newState;
 8005b6a:	4b69      	ldr	r3, [pc, #420]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	701a      	strb	r2, [r3, #0]
		modOperationalStateUpdateStates();		
 8005b70:	f7ff fe80 	bl	8005874 <modOperationalStateUpdateStates>
	if((modOperationalStatePackStatehandle->packOperationalCellState == PACK_STATE_ERROR_OVER_CURRENT) && (modOperationalStatePackStatehandle->packOperationalCellState != packOperationalCellStateLastErrorState)){
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	f893 1c50 	ldrb.w	r1, [r3, #3152]	; 0xc50
 8005b7a:	2902      	cmp	r1, #2
 8005b7c:	d10b      	bne.n	8005b96 <modOperationalStateTask+0x15e>
 8005b7e:	4a6b      	ldr	r2, [pc, #428]	; (8005d2c <modOperationalStateTask+0x2f4>)
 8005b80:	7810      	ldrb	r0, [r2, #0]
 8005b82:	2802      	cmp	r0, #2
 8005b84:	d007      	beq.n	8005b96 <modOperationalStateTask+0x15e>
		packOperationalCellStateLastErrorState = modOperationalStatePackStatehandle->packOperationalCellState; // Meganism to make error situation only trigger once
 8005b86:	7011      	strb	r1, [r2, #0]
		modOperationalStatePackStatehandle->faultState = FAULT_CODE_OVER_CURRENT;
 8005b88:	220d      	movs	r2, #13
 8005b8a:	765a      	strb	r2, [r3, #25]
	modOperationalStateNewState = newState;
 8005b8c:	4b60      	ldr	r3, [pc, #384]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005b8e:	2207      	movs	r2, #7
 8005b90:	701a      	strb	r2, [r3, #0]
		modOperationalStateUpdateStates();
 8005b92:	f7ff fe6f 	bl	8005874 <modOperationalStateUpdateStates>
	modOperationalStatePackStatehandle->powerOnLongButtonPress = modPowerStateGetLongButtonPressState(); 
 8005b96:	f002 faa9 	bl	80080ec <modPowerStateGetLongButtonPressState>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
};
 8005ba0:	b00c      	add	sp, #48	; 0x30
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	modDisplayTask();
 8005ba6:	f7ff b825 	b.w	8004bf4 <modDisplayTask>
	modOperationalStateNewState = newState;
 8005baa:	2302      	movs	r3, #2
				modEffectChangeState(STAT_LED_POWER,STAT_SET);												// Turn LED on in normal operation
 8005bac:	2101      	movs	r1, #1
 8005bae:	4608      	mov	r0, r1
 8005bb0:	702b      	strb	r3, [r5, #0]
 8005bb2:	f7ff fc63 	bl	800547c <modEffectChangeState>
 8005bb6:	e76c      	b.n	8005a92 <modOperationalStateTask+0x5a>
			}else if(modPowerStateButtonPressedOnTurnon()) {												// Check if button was pressen on turn-on
 8005bb8:	f002 fa92 	bl	80080e0 <modPowerStateButtonPressedOnTurnon>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d1f4      	bne.n	8005baa <modOperationalStateTask+0x172>
			}else if(modOperationalStateNewState == OP_STATE_INIT){								  // USB or CAN origin of turn-on
 8005bc0:	782b      	ldrb	r3, [r5, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f47f af65 	bne.w	8005a92 <modOperationalStateTask+0x5a>
				switch(modOperationalStateGeneralConfigHandle->externalEnableOperationalState){
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
	modOperationalStateNewState = newState;
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2302      	moveq	r3, #2
 8005bd4:	2306      	movne	r3, #6
 8005bd6:	e7e9      	b.n	8005bac <modOperationalStateTask+0x174>
			if(modOperationalStatePackStatehandle->balanceActive){
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8005bde:	b113      	cbz	r3, 8005be6 <modOperationalStateTask+0x1ae>
	modOperationalStateNewState = newState;
 8005be0:	4b4b      	ldr	r3, [pc, #300]	; (8005d10 <modOperationalStateTask+0x2d8>)
 8005be2:	2209      	movs	r2, #9
 8005be4:	701a      	strb	r2, [r3, #0]
			if(modOperationalStateGeneralConfigHandle->BMSApplication == electricVehicle){
 8005be6:	4d49      	ldr	r5, [pc, #292]	; (8005d0c <modOperationalStateTask+0x2d4>)
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 8083 	bne.w	8005cfa <modOperationalStateTask+0x2c2>
				modOperationalStateHandleChargerDisconnect(OP_STATE_POWER_DOWN);
 8005bf4:	2005      	movs	r0, #5
				modOperationalStateHandleChargerDisconnect(OP_STATE_INIT);
 8005bf6:	f7ff fe9f 	bl	8005938 <modOperationalStateHandleChargerDisconnect>
			modPowerElectronicsSetCharge(true);
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 fdf2 	bl	80067e4 <modPowerElectronicsSetCharge>
			if(modOperationalStatePackStatehandle->packCurrent >= 0.5f || modOperationalStatePackStatehandle->packCurrent >= modOperationalStateGeneralConfigHandle->chargerEnabledThreshold){
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	da07      	bge.n	8005c24 <modOperationalStateTask+0x1ec>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8005c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c22:	db6c      	blt.n	8005cfe <modOperationalStateTask+0x2c6>
				modPowerElectronicsSetChargePFET(true);
 8005c24:	2001      	movs	r0, #1
				modPowerElectronicsSetChargePFET(false);
 8005c26:	f000 fded 	bl	8006804 <modPowerElectronicsSetChargePFET>
				if(modOperationalStatePackStatehandle->packVoltage-modOperationalStatePackStatehandle->loCurrentLoadVoltage < (modOperationalStatePackStatehandle->packVoltage*0.1f) && modOperationalStatePackStatehandle->loCurrentLoadVoltage < (modOperationalStateGeneralConfigHandle->noOfCellsSeries*modOperationalStateGeneralConfigHandle->cellHardOverVoltage+10)){ 
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005d30 <modOperationalStateTask+0x2f8>
 8005c30:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c34:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005c38:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005c3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	d51b      	bpl.n	8005c82 <modOperationalStateTask+0x24a>
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	ed93 6a03 	vldr	s12, [r3, #12]
 8005c52:	ee07 2a10 	vmov	s14, r2
 8005c56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c5a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005c5e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005c62:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	d50a      	bpl.n	8005c82 <modOperationalStateTask+0x24a>
					modPowerElectronicsSetDisCharge(true);
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f000 fd77 	bl	8006760 <modPowerElectronicsSetDisCharge>
					if(modOperationalStateGeneralConfigHandle->LCUsePrecharge==forced){
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d102      	bne.n	8005c82 <modOperationalStateTask+0x24a>
						modPowerElectronicsSetPreCharge(true);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f000 fd55 	bl	800672c <modPowerElectronicsSetPreCharge>
			if(modOperationalStatePackStatehandle->coolingAllowed )
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f893 00a3 	ldrb.w	r0, [r3, #163]	; 0xa3
 8005c88:	b100      	cbz	r0, 8005c8c <modOperationalStateTask+0x254>
				modPowerElectronicsSetCooling(true);
 8005c8a:	2001      	movs	r0, #1
				modPowerElectronicsSetCooling(false);
 8005c8c:	f000 fdca 	bl	8006824 <modPowerElectronicsSetCooling>
			modOperationalStateUpdateStates();
 8005c90:	f7ff fdf0 	bl	8005874 <modOperationalStateUpdateStates>
			modOperationalStateDisplayData.StateOfCharge = modOperationalStateGeneralStateOfCharge->generalStateOfCharge;
 8005c94:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <modOperationalStateTask+0x2fc>)
 8005c96:	4f22      	ldr	r7, [pc, #136]	; (8005d20 <modOperationalStateTask+0x2e8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	603b      	str	r3, [r7, #0]
			modOperationalStateDisplayData.Current = fabs(modOperationalStatePackStatehandle->packCurrent);
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	edd3 7a08 	vldr	s15, [r3, #32]
 8005ca4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ca8:	edc7 7a01 	vstr	s15, [r7, #4]
			modOperationalStateDisplayData.ChargerVoltage = fabs(modOperationalStatePackStatehandle->chargerVoltage);
 8005cac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8005cb4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			modOperationalStateDisplayData.CellMismatch = fabs(modOperationalStatePackStatehandle->cellVoltageMisMatch);
 8005cb8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005cbc:	eef0 7ae7 	vabs.f32	s15, s15
 8005cc0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			modOperationalStateDisplayData.LowestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageLow);
 8005cc4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
			modDisplayShowInfo(DISP_MODE_CHARGE,modOperationalStateDisplayData);
 8005cc8:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateDisplayData.LowestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageLow);
 8005ccc:	eef0 7ae7 	vabs.f32	s15, s15
 8005cd0:	edc7 7a07 	vstr	s15, [r7, #28]
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005cd4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
			modDisplayShowInfo(DISP_MODE_CHARGE,modOperationalStateDisplayData);
 8005cd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005cda:	eef0 7ae7 	vabs.f32	s15, s15
			modDisplayShowInfo(DISP_MODE_CHARGE,modOperationalStateDisplayData);
 8005cde:	466d      	mov	r5, sp
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005ce0:	edc7 7a08 	vstr	s15, [r7, #32]
			modDisplayShowInfo(DISP_MODE_CHARGE,modOperationalStateDisplayData);
 8005ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ce6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005cee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005cf2:	2003      	movs	r0, #3
 8005cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005cf8:	e6f0      	b.n	8005adc <modOperationalStateTask+0xa4>
				modOperationalStateHandleChargerDisconnect(OP_STATE_INIT);
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e77b      	b.n	8005bf6 <modOperationalStateTask+0x1be>
				modPowerElectronicsSetChargePFET(false);
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e791      	b.n	8005c26 <modOperationalStateTask+0x1ee>
 8005d02:	bf00      	nop
 8005d04:	20004939 	.word	0x20004939
 8005d08:	20004994 	.word	0x20004994
 8005d0c:	2000497c 	.word	0x2000497c
 8005d10:	20004987 	.word	0x20004987
 8005d14:	20004930 	.word	0x20004930
 8005d18:	2000499c 	.word	0x2000499c
 8005d1c:	20004928 	.word	0x20004928
 8005d20:	2000493c 	.word	0x2000493c
 8005d24:	20004978 	.word	0x20004978
 8005d28:	20004986 	.word	0x20004986
 8005d2c:	200049a4 	.word	0x200049a4
 8005d30:	3dcccccd 	.word	0x3dcccccd
 8005d34:	20004980 	.word	0x20004980
			if(modOperationalStateLastState != modOperationalStateCurrentState) { 	  // If discharge is not allowed pre-charge will not be enabled, therefore reset timeout every task call. Also reset on first entry
 8005d38:	4bad      	ldr	r3, [pc, #692]	; (8005ff0 <modOperationalStateTask+0x5b8>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d009      	beq.n	8005d54 <modOperationalStateTask+0x31c>
				modOperationalStatePreChargeTimeout = HAL_GetTick();										// Reset timeout
 8005d40:	f005 f83c 	bl	800adbc <HAL_GetTick>
 8005d44:	4bab      	ldr	r3, [pc, #684]	; (8005ff4 <modOperationalStateTask+0x5bc>)
 8005d46:	6018      	str	r0, [r3, #0]
				modPowerElectronicsSetDisCharge(false);
 8005d48:	2000      	movs	r0, #0
 8005d4a:	f000 fd09 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetCharge(false);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f000 fd48 	bl	80067e4 <modPowerElectronicsSetCharge>
			if(modOperationalStatePackStatehandle->disChargeLCAllowed || modOperationalStateForceOn)
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	4da8      	ldr	r5, [pc, #672]	; (8005ff8 <modOperationalStateTask+0x5c0>)
 8005d58:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005d5c:	b913      	cbnz	r3, 8005d64 <modOperationalStateTask+0x32c>
 8005d5e:	4ba7      	ldr	r3, [pc, #668]	; (8005ffc <modOperationalStateTask+0x5c4>)
 8005d60:	7818      	ldrb	r0, [r3, #0]
 8005d62:	b340      	cbz	r0, 8005db6 <modOperationalStateTask+0x37e>
				modPowerElectronicsSetPreCharge(true);
 8005d64:	2001      	movs	r0, #1
 8005d66:	f000 fce1 	bl	800672c <modPowerElectronicsSetPreCharge>
			if((modOperationalStatePackStatehandle->loCurrentLoadVoltage > modOperationalStatePackStatehandle->packVoltage*modOperationalStateGeneralConfigHandle->minimalPrechargePercentage) && (modOperationalStatePackStatehandle->disChargeLCAllowed || modOperationalStateForceOn)) {
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	682a      	ldr	r2, [r5, #0]
 8005d6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d72:	ed92 7a21 	vldr	s14, [r2, #132]	; 0x84
 8005d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d7a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	dd05      	ble.n	8005d94 <modOperationalStateTask+0x35c>
 8005d88:	499c      	ldr	r1, [pc, #624]	; (8005ffc <modOperationalStateTask+0x5c4>)
 8005d8a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005d8e:	7809      	ldrb	r1, [r1, #0]
 8005d90:	bb1b      	cbnz	r3, 8005dda <modOperationalStateTask+0x3a2>
 8005d92:	bb19      	cbnz	r1, 8005ddc <modOperationalStateTask+0x3a4>
			}else if(modDelayTick1ms(&modOperationalStatePreChargeTimeout,modOperationalStateGeneralConfigHandle->timeoutLCPreCharge)){
 8005d94:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005d98:	4896      	ldr	r0, [pc, #600]	; (8005ff4 <modOperationalStateTask+0x5bc>)
 8005d9a:	f7fe fec1 	bl	8004b20 <modDelayTick1ms>
 8005d9e:	b300      	cbz	r0, 8005de2 <modOperationalStateTask+0x3aa>
				if(modOperationalStateGeneralConfigHandle->LCUsePrecharge>=1){
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005da6:	b1fb      	cbz	r3, 8005de8 <modOperationalStateTask+0x3b0>
	modOperationalStateNewState = newState;
 8005da8:	4b95      	ldr	r3, [pc, #596]	; (8006000 <modOperationalStateTask+0x5c8>)
 8005daa:	2208      	movs	r2, #8
 8005dac:	701a      	strb	r2, [r3, #0]
					modOperationalStatePackStatehandle->faultState = FAULT_CODE_PRECHARGE_TIMEOUT;
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	2214      	movs	r2, #20
 8005db2:	765a      	strb	r2, [r3, #25]
			modOperationalStateUpdateStates();
 8005db4:	e015      	b.n	8005de2 <modOperationalStateTask+0x3aa>
				modPowerElectronicsSetPreCharge(false);
 8005db6:	f000 fcb9 	bl	800672c <modPowerElectronicsSetPreCharge>
				modOperationalStatePreChargeTimeout = HAL_GetTick();
 8005dba:	f004 ffff 	bl	800adbc <HAL_GetTick>
 8005dbe:	4b8d      	ldr	r3, [pc, #564]	; (8005ff4 <modOperationalStateTask+0x5bc>)
 8005dc0:	6018      	str	r0, [r3, #0]
				if(modOperationalStateGeneralConfigHandle->buzzerSignalSource)
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ce      	beq.n	8005d6a <modOperationalStateTask+0x332>
					modEffectChangeStateError(STAT_BUZZER,STAT_ERROR,modOperationalStatePackStatehandle->faultState);	
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	210a      	movs	r1, #10
 8005dd0:	7e5a      	ldrb	r2, [r3, #25]
 8005dd2:	2002      	movs	r0, #2
 8005dd4:	f7ff fb66 	bl	80054a4 <modEffectChangeStateError>
 8005dd8:	e7c7      	b.n	8005d6a <modOperationalStateTask+0x332>
				if(modOperationalStateForceOn) {
 8005dda:	b129      	cbz	r1, 8005de8 <modOperationalStateTask+0x3b0>
	modOperationalStateNewState = newState;
 8005ddc:	4b88      	ldr	r3, [pc, #544]	; (8006000 <modOperationalStateTask+0x5c8>)
 8005dde:	220b      	movs	r2, #11
 8005de0:	701a      	strb	r2, [r3, #0]
			modOperationalStateUpdateStates();
 8005de2:	f7ff fd47 	bl	8005874 <modOperationalStateUpdateStates>
			break;
 8005de6:	e67b      	b.n	8005ae0 <modOperationalStateTask+0xa8>
	modOperationalStateNewState = newState;
 8005de8:	4b85      	ldr	r3, [pc, #532]	; (8006000 <modOperationalStateTask+0x5c8>)
 8005dea:	2203      	movs	r2, #3
 8005dec:	e7f8      	b.n	8005de0 <modOperationalStateTask+0x3a8>
			if(modPowerElectronicsSetDisCharge(true)) {
 8005dee:	2001      	movs	r0, #1
 8005df0:	f000 fcb6 	bl	8006760 <modPowerElectronicsSetDisCharge>
 8005df4:	4d80      	ldr	r5, [pc, #512]	; (8005ff8 <modOperationalStateTask+0x5c0>)
 8005df6:	4606      	mov	r6, r0
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f000 80e7 	beq.w	8005fcc <modOperationalStateTask+0x594>
				if(modOperationalStateGeneralConfigHandle->LCUsePrecharge==forced){
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d002      	beq.n	8005e0e <modOperationalStateTask+0x3d6>
					modPowerElectronicsSetPreCharge(false);
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f000 fc8f 	bl	800672c <modPowerElectronicsSetPreCharge>
			  if(modPowerStateChargerDetected()){
 8005e0e:	f002 f8ed 	bl	8007fec <modPowerStateChargerDetected>
 8005e12:	4606      	mov	r6, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f000 80e2 	beq.w	8005fde <modOperationalStateTask+0x5a6>
					modPowerElectronicsSetCharge(modOperationalStateGeneralConfigHandle->allowChargingDuringDischarge);
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
 8005e20:	3800      	subs	r0, #0
 8005e22:	bf18      	it	ne
 8005e24:	2001      	movne	r0, #1
 8005e26:	f000 fcdd 	bl	80067e4 <modPowerElectronicsSetCharge>
					if(modOperationalStatePackStatehandle->packCurrent >= 0.5f || modOperationalStatePackStatehandle->packCurrent >= modOperationalStateGeneralConfigHandle->chargerEnabledThreshold){
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3c:	da07      	bge.n	8005e4e <modOperationalStateTask+0x416>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8005e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	db02      	blt.n	8005e54 <modOperationalStateTask+0x41c>
						modPowerElectronicsSetChargePFET(true);
 8005e4e:	2001      	movs	r0, #1
				modPowerElectronicsSetChargePFET(false);
 8005e50:	f000 fcd8 	bl	8006804 <modPowerElectronicsSetChargePFET>
			modEffectChangeState(STAT_BUZZER,STAT_RESET);
 8005e54:	2002      	movs	r0, #2
 8005e56:	2100      	movs	r1, #0
 8005e58:	f7ff fb10 	bl	800547c <modEffectChangeState>
			if(modOperationalStatePackStatehandle->coolingAllowed )
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f893 00a3 	ldrb.w	r0, [r3, #163]	; 0xa3
 8005e62:	b100      	cbz	r0, 8005e66 <modOperationalStateTask+0x42e>
				modPowerElectronicsSetCooling(true);
 8005e64:	2001      	movs	r0, #1
				modPowerElectronicsSetCooling(false);
 8005e66:	f000 fcdd 	bl	8006824 <modPowerElectronicsSetCooling>
			if(modPowerStateChargerDetected() && !modOperationalStateGeneralConfigHandle->allowChargingDuringDischarge) {
 8005e6a:	f002 f8bf 	bl	8007fec <modPowerStateChargerDetected>
 8005e6e:	b158      	cbz	r0, 8005e88 <modOperationalStateTask+0x450>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	f893 60e9 	ldrb.w	r6, [r3, #233]	; 0xe9
 8005e76:	b93e      	cbnz	r6, 8005e88 <modOperationalStateTask+0x450>
	modOperationalStateNewState = newState;
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <modOperationalStateTask+0x5c8>)
				modPowerElectronicsSetDisCharge(false);
 8005e7a:	4630      	mov	r0, r6
	modOperationalStateNewState = newState;
 8005e7c:	701e      	strb	r6, [r3, #0]
				modPowerElectronicsSetDisCharge(false);
 8005e7e:	f000 fc6f 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetCharge(false);
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 fcae 	bl	80067e4 <modPowerElectronicsSetCharge>
			if(!modOperationalStatePackStatehandle->disChargeLCAllowed) {							
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f893 609e 	ldrb.w	r6, [r3, #158]	; 0x9e
 8005e8e:	b986      	cbnz	r6, 8005eb2 <modOperationalStateTask+0x47a>
				modPowerElectronicsSetDisCharge(false);
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 fc65 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetCharge(false);
 8005e96:	4630      	mov	r0, r6
 8005e98:	f000 fca4 	bl	80067e4 <modPowerElectronicsSetCharge>
				modOperationalStatePackStatehandle->faultState = FAULT_CODE_DISCHARGE_RETRY;
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	2215      	movs	r2, #21
 8005ea0:	765a      	strb	r2, [r3, #25]
				if(modOperationalStateGeneralConfigHandle->buzzerSignalSource)
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ea8:	b11b      	cbz	r3, 8005eb2 <modOperationalStateTask+0x47a>
					modEffectChangeStateError(STAT_BUZZER,STAT_ERROR,modOperationalStatePackStatehandle->faultState);	
 8005eaa:	210a      	movs	r1, #10
 8005eac:	2002      	movs	r0, #2
 8005eae:	f7ff faf9 	bl	80054a4 <modEffectChangeStateError>
			if(fabs(modOperationalStatePackStatehandle->packCurrent) >= fabs(modOperationalStateGeneralConfigHandle->notUsedCurrentThreshold)) {
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	ed93 7a08 	vldr	s14, [r3, #32]
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005ebe:	eeb0 7ac7 	vabs.f32	s14, s14
 8005ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8005ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ece:	f2c0 808a 	blt.w	8005fe6 <modOperationalStateTask+0x5ae>
				if(modDelayTick1ms(&modOperationalStateNotUsedResetDelay,1000))
 8005ed2:	484c      	ldr	r0, [pc, #304]	; (8006004 <modOperationalStateTask+0x5cc>)
 8005ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ed8:	f7fe fe22 	bl	8004b20 <modDelayTick1ms>
 8005edc:	b118      	cbz	r0, 8005ee6 <modOperationalStateTask+0x4ae>
					modOperationalStateNotUsedTime = HAL_GetTick();
 8005ede:	f004 ff6d 	bl	800adbc <HAL_GetTick>
 8005ee2:	4b49      	ldr	r3, [pc, #292]	; (8006008 <modOperationalStateTask+0x5d0>)
				modOperationalStateNotUsedResetDelay = HAL_GetTick();
 8005ee4:	6018      	str	r0, [r3, #0]
			if(modOperationalStatePowerDownDelayCheck()) {
 8005ee6:	f7ff fd7f 	bl	80059e8 <modOperationalStatePowerDownDelayCheck>
 8005eea:	b130      	cbz	r0, 8005efa <modOperationalStateTask+0x4c2>
	modOperationalStateNewState = newState;
 8005eec:	4b44      	ldr	r3, [pc, #272]	; (8006000 <modOperationalStateTask+0x5c8>)
 8005eee:	2205      	movs	r2, #5
 8005ef0:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->powerDownDesired = true;
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
			if(modOperationalStatePackStatehandle->balanceActive) {
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8005f00:	b1c2      	cbz	r2, 8005f34 <modOperationalStateTask+0x4fc>
				if(!modOperationalStatePackStatehandle->chargeAllowed && (modOperationalStatePackStatehandle->cellVoltageMisMatch < modOperationalStateGeneralConfigHandle->maxMismatchThreshold)){
 8005f02:	f893 70a1 	ldrb.w	r7, [r3, #161]	; 0xa1
 8005f06:	4e41      	ldr	r6, [pc, #260]	; (800600c <modOperationalStateTask+0x5d4>)
 8005f08:	b98f      	cbnz	r7, 8005f2e <modOperationalStateTask+0x4f6>
 8005f0a:	682a      	ldr	r2, [r5, #0]
 8005f0c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005f10:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 8005f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	d507      	bpl.n	8005f2e <modOperationalStateTask+0x4f6>
					if(modDelayTick1ms(&modOperationalStateChargedTimeout,modOperationalStateGeneralConfigHandle->timeoutChargingCompletedMinimalMismatch)) {
 8005f1e:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7fe fdfd 	bl	8004b20 <modDelayTick1ms>
 8005f26:	b128      	cbz	r0, 8005f34 <modOperationalStateTask+0x4fc>
						modStateOfChargeVoltageEvent(EVENT_FULL);
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f002 f9b7 	bl	800829c <modStateOfChargeVoltageEvent>
					modOperationalStateChargedTimeout = HAL_GetTick();
 8005f2e:	f004 ff45 	bl	800adbc <HAL_GetTick>
 8005f32:	6030      	str	r0, [r6, #0]
			modOperationalStateUpdateStates();
 8005f34:	f7ff fc9e 	bl	8005874 <modOperationalStateUpdateStates>
			modOperationalStateDisplayData.StateOfCharge = modOperationalStateGeneralStateOfCharge->generalStateOfCharge;
 8005f38:	4b35      	ldr	r3, [pc, #212]	; (8006010 <modOperationalStateTask+0x5d8>)
 8005f3a:	4f36      	ldr	r7, [pc, #216]	; (8006014 <modOperationalStateTask+0x5dc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	603b      	str	r3, [r7, #0]
			modOperationalStateDisplayData.Current = fabs(modOperationalStatePackStatehandle->packCurrent);
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f48:	eef0 7ae7 	vabs.f32	s15, s15
 8005f4c:	edc7 7a01 	vstr	s15, [r7, #4]
			modOperationalStateDisplayData.PackVoltage = fabs(modOperationalStatePackStatehandle->packVoltage);
 8005f50:	edd3 7a07 	vldr	s15, [r3, #28]
 8005f54:	eef0 7ae7 	vabs.f32	s15, s15
 8005f58:	edc7 7a02 	vstr	s15, [r7, #8]
			modOperationalStateDisplayData.HighestTemp = fabs(modOperationalStatePackStatehandle->tempBatteryHigh);
 8005f5c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005f60:	eef0 7ae7 	vabs.f32	s15, s15
 8005f64:	edc7 7a04 	vstr	s15, [r7, #16]
			modOperationalStateDisplayData.AverageTemp = fabs(modOperationalStatePackStatehandle->tempBatteryAverage);
 8005f68:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005f6c:	eef0 7ae7 	vabs.f32	s15, s15
 8005f70:	edc7 7a05 	vstr	s15, [r7, #20]
			modOperationalStateDisplayData.LowestTemp = fabs(modOperationalStatePackStatehandle->tempBatteryLow);
 8005f74:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005f78:	eef0 7ae7 	vabs.f32	s15, s15
 8005f7c:	edc7 7a06 	vstr	s15, [r7, #24]
			modOperationalStateDisplayData.Humidity = fabs(modOperationalStatePackStatehandle->humidity);
 8005f80:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005f84:	eef0 7ae7 	vabs.f32	s15, s15
 8005f88:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			modOperationalStateDisplayData.LowestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageLow);
 8005f8c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005f90:	eef0 7ae7 	vabs.f32	s15, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005f98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
			modOperationalStateDisplayData.DisplayStyle = modOperationalStateGeneralConfigHandle->displayStyle;
 8005f9c:	682b      	ldr	r3, [r5, #0]
			modDisplayShowInfo(DISP_MODE_LOAD,modOperationalStateDisplayData);
 8005f9e:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateDisplayData.DisplayStyle = modOperationalStateGeneralConfigHandle->displayStyle;
 8005fa2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005fa6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			modDisplayShowInfo(DISP_MODE_LOAD,modOperationalStateDisplayData);
 8005faa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005fac:	eef0 7ae7 	vabs.f32	s15, s15
			modDisplayShowInfo(DISP_MODE_LOAD,modOperationalStateDisplayData);
 8005fb0:	466d      	mov	r5, sp
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8005fb2:	edc7 7a08 	vstr	s15, [r7, #32]
			modDisplayShowInfo(DISP_MODE_LOAD,modOperationalStateDisplayData);
 8005fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fbc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005fc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005fca:	e587      	b.n	8005adc <modOperationalStateTask+0xa4>
	modOperationalStateNewState = newState;
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <modOperationalStateTask+0x5c8>)
 8005fce:	2202      	movs	r2, #2
 8005fd0:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->faultState = FAULT_CODE_DISCHARGE_RETRY;
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	2215      	movs	r2, #21
 8005fd6:	765a      	strb	r2, [r3, #25]
				modPowerElectronicsSetDisCharge(false);
 8005fd8:	f000 fbc2 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetCharge(false);
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 fc01 	bl	80067e4 <modPowerElectronicsSetCharge>
				modPowerElectronicsSetChargePFET(false);
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	e734      	b.n	8005e50 <modOperationalStateTask+0x418>
				modOperationalStateNotUsedResetDelay = HAL_GetTick();
 8005fe6:	f004 fee9 	bl	800adbc <HAL_GetTick>
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <modOperationalStateTask+0x5cc>)
 8005fec:	e77a      	b.n	8005ee4 <modOperationalStateTask+0x4ac>
 8005fee:	bf00      	nop
 8005ff0:	20004985 	.word	0x20004985
 8005ff4:	20004998 	.word	0x20004998
 8005ff8:	2000497c 	.word	0x2000497c
 8005ffc:	20004978 	.word	0x20004978
 8006000:	20004987 	.word	0x20004987
 8006004:	20004988 	.word	0x20004988
 8006008:	2000498c 	.word	0x2000498c
 800600c:	2000492c 	.word	0x2000492c
 8006010:	20004980 	.word	0x20004980
 8006014:	2000493c 	.word	0x2000493c
			modDisplayShowInfo(DISP_MODE_BATTERY_DEAD,modOperationalStateDisplayData);
 8006018:	4f80      	ldr	r7, [pc, #512]	; (800621c <modOperationalStateTask+0x7e4>)
 800601a:	f107 060c 	add.w	r6, r7, #12
 800601e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006020:	466d      	mov	r5, sp
 8006022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006024:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006028:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800602c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006030:	2008      	movs	r0, #8
 8006032:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006036:	f7fe ff05 	bl	8004e44 <modDisplayShowInfo>
			if(modDelayTick1ms(&modOperationalStateBatteryDeadDisplayTime,modOperationalStateGeneralConfigHandle->displayTimeoutBatteryDead)){
 800603a:	4b79      	ldr	r3, [pc, #484]	; (8006220 <modOperationalStateTask+0x7e8>)
 800603c:	4879      	ldr	r0, [pc, #484]	; (8006224 <modOperationalStateTask+0x7ec>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006044:	f7fe fd6c 	bl	8004b20 <modDelayTick1ms>
 8006048:	2800      	cmp	r0, #0
 800604a:	f43f aeca 	beq.w	8005de2 <modOperationalStateTask+0x3aa>
	modOperationalStateNewState = newState;
 800604e:	4b76      	ldr	r3, [pc, #472]	; (8006228 <modOperationalStateTask+0x7f0>)
 8006050:	2205      	movs	r2, #5
 8006052:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->powerDownDesired = true;
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
				modOperationalStatePackStatehandle->faultState = FAULT_CODE_PACK_UNDER_VOLTAGE;
 800605c:	2202      	movs	r2, #2
 800605e:	e6a8      	b.n	8005db2 <modOperationalStateTask+0x37a>
			if(modOperationalStateLastState != modOperationalStateCurrentState) {
 8006060:	4b72      	ldr	r3, [pc, #456]	; (800622c <modOperationalStateTask+0x7f4>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b05      	cmp	r3, #5
 8006066:	d003      	beq.n	8006070 <modOperationalStateTask+0x638>
			  modOperationalStatePSPDisableDelay = HAL_GetTick();
 8006068:	f004 fea8 	bl	800adbc <HAL_GetTick>
 800606c:	4b70      	ldr	r3, [pc, #448]	; (8006230 <modOperationalStateTask+0x7f8>)
 800606e:	6018      	str	r0, [r3, #0]
			modPowerElectronicsDisableAll();																				// Disable all power paths
 8006070:	f000 fa4a 	bl	8006508 <modPowerElectronicsDisableAll>
			modEffectChangeState(STAT_LED_POWER,STAT_RESET);												// Turn off power LED
 8006074:	2100      	movs	r1, #0
 8006076:	2001      	movs	r0, #1
 8006078:	f7ff fa00 	bl	800547c <modEffectChangeState>
			if(!modOperationalStateGeneralConfigHandle->buzzerSignalPersistant)
 800607c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006220 <modOperationalStateTask+0x7e8>
			modEffectChangeState(STAT_LED_DEBUG,STAT_RESET);
 8006080:	2100      	movs	r1, #0
 8006082:	4608      	mov	r0, r1
 8006084:	f7ff f9fa 	bl	800547c <modEffectChangeState>
			if(!modOperationalStateGeneralConfigHandle->buzzerSignalPersistant)
 8006088:	f8d8 3000 	ldr.w	r3, [r8]
 800608c:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8006090:	b911      	cbnz	r1, 8006098 <modOperationalStateTask+0x660>
				modEffectChangeState(STAT_BUZZER,STAT_RESET);
 8006092:	2002      	movs	r0, #2
 8006094:	f7ff f9f2 	bl	800547c <modEffectChangeState>
			modDisplayShowInfo(DISP_MODE_POWEROFF,modOperationalStateDisplayData);
 8006098:	4f60      	ldr	r7, [pc, #384]	; (800621c <modOperationalStateTask+0x7e4>)
 800609a:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateUpdateStates();
 800609e:	f7ff fbe9 	bl	8005874 <modOperationalStateUpdateStates>
			modDisplayShowInfo(DISP_MODE_POWEROFF,modOperationalStateDisplayData);
 80060a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80060a4:	466d      	mov	r5, sp
 80060a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80060aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80060b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060b4:	2004      	movs	r0, #4
 80060b6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80060ba:	f7fe fec3 	bl	8004e44 <modDisplayShowInfo>
		  if(modDelayTick1ms(&modOperationalStatePSPDisableDelay,modOperationalStateGeneralConfigHandle->powerDownDelay))	{					// Wait for the power down delay time to pass
 80060be:	f8d8 3000 	ldr.w	r3, [r8]
 80060c2:	485b      	ldr	r0, [pc, #364]	; (8006230 <modOperationalStateTask+0x7f8>)
 80060c4:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 80060c8:	f7fe fd2a 	bl	8004b20 <modDelayTick1ms>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f43f ad07 	beq.w	8005ae0 <modOperationalStateTask+0xa8>
			  modOperationalStateTerminateOperation();															// Disable powersupply and store SoC
 80060d2:	f7ff fc65 	bl	80059a0 <modOperationalStateTerminateOperation>
 80060d6:	e503      	b.n	8005ae0 <modOperationalStateTask+0xa8>
			if(modOperationalStateLastState != modOperationalStateCurrentState) {
 80060d8:	4b54      	ldr	r3, [pc, #336]	; (800622c <modOperationalStateTask+0x7f4>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b06      	cmp	r3, #6
 80060de:	d008      	beq.n	80060f2 <modOperationalStateTask+0x6ba>
				modPowerElectronicsSetPreCharge(false);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f000 fb23 	bl	800672c <modPowerElectronicsSetPreCharge>
				modPowerElectronicsSetDisCharge(false);
 80060e6:	2000      	movs	r0, #0
 80060e8:	f000 fb3a 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetCharge(false);
 80060ec:	2000      	movs	r0, #0
 80060ee:	f000 fb79 	bl	80067e4 <modPowerElectronicsSetCharge>
			modDisplayShowInfo(DISP_MODE_EXTERNAL,modOperationalStateDisplayData);
 80060f2:	4f4a      	ldr	r7, [pc, #296]	; (800621c <modOperationalStateTask+0x7e4>)
 80060f4:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateTerminateOperation();																// Disable power and store SoC
 80060f8:	f7ff fc52 	bl	80059a0 <modOperationalStateTerminateOperation>
			modDisplayShowInfo(DISP_MODE_EXTERNAL,modOperationalStateDisplayData);
 80060fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80060fe:	466d      	mov	r5, sp
 8006100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006102:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006106:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800610a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800610e:	2007      	movs	r0, #7
 8006110:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006114:	e4e2      	b.n	8005adc <modOperationalStateTask+0xa4>
			if(modOperationalStateLastState != modOperationalStateCurrentState)
 8006116:	4b45      	ldr	r3, [pc, #276]	; (800622c <modOperationalStateTask+0x7f4>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b07      	cmp	r3, #7
 800611c:	d003      	beq.n	8006126 <modOperationalStateTask+0x6ee>
				modOperationalStateErrorDisplayTime = HAL_GetTick();
 800611e:	f004 fe4d 	bl	800adbc <HAL_GetTick>
 8006122:	4b44      	ldr	r3, [pc, #272]	; (8006234 <modOperationalStateTask+0x7fc>)
 8006124:	6018      	str	r0, [r3, #0]
			if(modDelayTick1ms(&modOperationalStateErrorDisplayTime,modOperationalStateGeneralConfigHandle->displayTimeoutBatteryError)) {
 8006126:	4d3e      	ldr	r5, [pc, #248]	; (8006220 <modOperationalStateTask+0x7e8>)
 8006128:	4842      	ldr	r0, [pc, #264]	; (8006234 <modOperationalStateTask+0x7fc>)
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006130:	f7fe fcf6 	bl	8004b20 <modDelayTick1ms>
 8006134:	b130      	cbz	r0, 8006144 <modOperationalStateTask+0x70c>
	modOperationalStateNewState = newState;
 8006136:	4b3c      	ldr	r3, [pc, #240]	; (8006228 <modOperationalStateTask+0x7f0>)
 8006138:	2205      	movs	r2, #5
 800613a:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->powerDownDesired = true;
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
			modEffectChangeStateError(STAT_LED_DEBUG,STAT_ERROR,modOperationalStatePackStatehandle->faultState);										// Turn flash fast on debug and power LED
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	210a      	movs	r1, #10
 8006148:	7e5a      	ldrb	r2, [r3, #25]
 800614a:	2000      	movs	r0, #0
 800614c:	f7ff f9aa 	bl	80054a4 <modEffectChangeStateError>
			modEffectChangeStateError(STAT_LED_POWER,STAT_ERROR,modOperationalStatePackStatehandle->faultState);
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	210a      	movs	r1, #10
 8006154:	7e5a      	ldrb	r2, [r3, #25]
 8006156:	2001      	movs	r0, #1
 8006158:	f7ff f9a4 	bl	80054a4 <modEffectChangeStateError>
			if(modOperationalStateGeneralConfigHandle->buzzerSignalSource)
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006162:	b12b      	cbz	r3, 8006170 <modOperationalStateTask+0x738>
				modEffectChangeStateError(STAT_BUZZER,STAT_ERROR,modOperationalStatePackStatehandle->faultState);			// Turn flash fast on debug and power LED
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	210a      	movs	r1, #10
 8006168:	7e5a      	ldrb	r2, [r3, #25]
 800616a:	2002      	movs	r0, #2
 800616c:	f7ff f99a 	bl	80054a4 <modEffectChangeStateError>
			modPowerElectronicsDisableAll();
 8006170:	f000 f9ca 	bl	8006508 <modPowerElectronicsDisableAll>
			modOperationalStateDisplayData.FaultCode = modOperationalStatePackStatehandle->faultState;
 8006174:	4f29      	ldr	r7, [pc, #164]	; (800621c <modOperationalStateTask+0x7e4>)
			modOperationalStateUpdateStates();
 8006176:	f7ff fb7d 	bl	8005874 <modOperationalStateUpdateStates>
			modOperationalStateDisplayData.FaultCode = modOperationalStatePackStatehandle->faultState;
 800617a:	6823      	ldr	r3, [r4, #0]
			modDisplayShowInfo(DISP_MODE_ERROR,modOperationalStateDisplayData);
 800617c:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateDisplayData.FaultCode = modOperationalStatePackStatehandle->faultState;
 8006180:	7e5b      	ldrb	r3, [r3, #25]
 8006182:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			modDisplayShowInfo(DISP_MODE_ERROR,modOperationalStateDisplayData);
 8006186:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006188:	466d      	mov	r5, sp
 800618a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800618c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800618e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006190:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006194:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006198:	2005      	movs	r0, #5
 800619a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800619e:	e49d      	b.n	8005adc <modOperationalStateTask+0xa4>
			if(modOperationalStateLastState != modOperationalStateCurrentState)
 80061a0:	4b22      	ldr	r3, [pc, #136]	; (800622c <modOperationalStateTask+0x7f4>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d003      	beq.n	80061b0 <modOperationalStateTask+0x778>
				modOperationalStateErrorDisplayTime = HAL_GetTick();
 80061a8:	f004 fe08 	bl	800adbc <HAL_GetTick>
 80061ac:	4b21      	ldr	r3, [pc, #132]	; (8006234 <modOperationalStateTask+0x7fc>)
 80061ae:	6018      	str	r0, [r3, #0]
			if(modDelayTick1ms(&modOperationalStateErrorDisplayTime,modOperationalStateGeneralConfigHandle->displayTimeoutBatteryErrorPreCharge)) {
 80061b0:	4d1b      	ldr	r5, [pc, #108]	; (8006220 <modOperationalStateTask+0x7e8>)
 80061b2:	4820      	ldr	r0, [pc, #128]	; (8006234 <modOperationalStateTask+0x7fc>)
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80061ba:	f7fe fcb1 	bl	8004b20 <modDelayTick1ms>
 80061be:	b130      	cbz	r0, 80061ce <modOperationalStateTask+0x796>
	modOperationalStateNewState = newState;
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <modOperationalStateTask+0x7f0>)
 80061c2:	2205      	movs	r2, #5
 80061c4:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->powerDownDesired = true;
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
			modEffectChangeState(STAT_LED_DEBUG,STAT_FLASH_FAST);										// Turn flash fast on debug and power LED
 80061ce:	2103      	movs	r1, #3
 80061d0:	2000      	movs	r0, #0
 80061d2:	f7ff f953 	bl	800547c <modEffectChangeState>
			modEffectChangeState(STAT_LED_POWER,STAT_FLASH_FAST);										// Turn flash fast on debug and power LED
 80061d6:	2103      	movs	r1, #3
 80061d8:	2001      	movs	r0, #1
 80061da:	f7ff f94f 	bl	800547c <modEffectChangeState>
			if(modOperationalStateGeneralConfigHandle->buzzerSignalSource)
 80061de:	682b      	ldr	r3, [r5, #0]
 80061e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061e4:	b12b      	cbz	r3, 80061f2 <modOperationalStateTask+0x7ba>
					modEffectChangeStateError(STAT_BUZZER,STAT_ERROR,modOperationalStatePackStatehandle->faultState);
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	210a      	movs	r1, #10
 80061ea:	7e5a      	ldrb	r2, [r3, #25]
 80061ec:	2002      	movs	r0, #2
 80061ee:	f7ff f959 	bl	80054a4 <modEffectChangeStateError>
			modDisplayShowInfo(DISP_MODE_ERROR_PRECHARGE,modOperationalStateDisplayData);
 80061f2:	4f0a      	ldr	r7, [pc, #40]	; (800621c <modOperationalStateTask+0x7e4>)
 80061f4:	f107 060c 	add.w	r6, r7, #12
			modPowerElectronicsDisableAll();
 80061f8:	f000 f986 	bl	8006508 <modPowerElectronicsDisableAll>
			modOperationalStateUpdateStates();
 80061fc:	f7ff fb3a 	bl	8005874 <modOperationalStateUpdateStates>
			modDisplayShowInfo(DISP_MODE_ERROR_PRECHARGE,modOperationalStateDisplayData);
 8006200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006202:	466d      	mov	r5, sp
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800620e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006212:	2006      	movs	r0, #6
 8006214:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006218:	e460      	b.n	8005adc <modOperationalStateTask+0xa4>
 800621a:	bf00      	nop
 800621c:	2000493c 	.word	0x2000493c
 8006220:	2000497c 	.word	0x2000497c
 8006224:	20004928 	.word	0x20004928
 8006228:	20004987 	.word	0x20004987
 800622c:	20004985 	.word	0x20004985
 8006230:	20004990 	.word	0x20004990
 8006234:	20004974 	.word	0x20004974
			if(modOperationalStatePackStatehandle->packCurrent < modOperationalStateGeneralConfigHandle->chargerEnabledThreshold && modOperationalStatePackStatehandle->chargeAllowed){
 8006238:	4da6      	ldr	r5, [pc, #664]	; (80064d4 <modOperationalStateTask+0xa9c>)
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	ed92 7a08 	vldr	s14, [r2, #32]
 8006242:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8006246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624e:	f140 80b6 	bpl.w	80063be <modOperationalStateTask+0x986>
 8006252:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 8006256:	2a00      	cmp	r2, #0
 8006258:	f000 80b1 	beq.w	80063be <modOperationalStateTask+0x986>
				if(modDelayTick1ms(&modOperationalStateChargerTimeout,modOperationalStateGeneralConfigHandle->timeoutChargeCompleted)) {
 800625c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800625e:	489e      	ldr	r0, [pc, #632]	; (80064d8 <modOperationalStateTask+0xaa0>)
 8006260:	f7fe fc5e 	bl	8004b20 <modDelayTick1ms>
 8006264:	b128      	cbz	r0, 8006272 <modOperationalStateTask+0x83a>
					modOperationalStateSetAllStates(OP_STATE_CHARGED);
 8006266:	200a      	movs	r0, #10
 8006268:	f7ff fb18 	bl	800589c <modOperationalStateSetAllStates>
					modStateOfChargeVoltageEvent(EVENT_FULL);
 800626c:	2000      	movs	r0, #0
 800626e:	f002 f815 	bl	800829c <modStateOfChargeVoltageEvent>
			if(!modOperationalStatePackStatehandle->chargeAllowed && (modOperationalStatePackStatehandle->cellVoltageMisMatch < modOperationalStateGeneralConfigHandle->maxMismatchThreshold)){
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	f892 60a1 	ldrb.w	r6, [r2, #161]	; 0xa1
 8006278:	2e00      	cmp	r6, #0
 800627a:	f040 80a5 	bne.w	80063c8 <modOperationalStateTask+0x990>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8006284:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8006288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	f140 809a 	bpl.w	80063c8 <modOperationalStateTask+0x990>
				if(modDelayTick1ms(&modOperationalStateChargedTimeout,modOperationalStateGeneralConfigHandle->timeoutChargingCompletedMinimalMismatch)) {
 8006294:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8006296:	4891      	ldr	r0, [pc, #580]	; (80064dc <modOperationalStateTask+0xaa4>)
 8006298:	f7fe fc42 	bl	8004b20 <modDelayTick1ms>
 800629c:	b128      	cbz	r0, 80062aa <modOperationalStateTask+0x872>
					modOperationalStateSetAllStates(OP_STATE_CHARGED);
 800629e:	200a      	movs	r0, #10
 80062a0:	f7ff fafc 	bl	800589c <modOperationalStateSetAllStates>
					modStateOfChargeVoltageEvent(EVENT_FULL);
 80062a4:	4630      	mov	r0, r6
 80062a6:	f001 fff9 	bl	800829c <modStateOfChargeVoltageEvent>
			if(modOperationalStateGeneralConfigHandle->BMSApplication == electricVehicle){
 80062aa:	682b      	ldr	r3, [r5, #0]
 80062ac:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 808e 	bne.w	80063d2 <modOperationalStateTask+0x99a>
				modOperationalStateHandleChargerDisconnect(OP_STATE_POWER_DOWN);
 80062b6:	2005      	movs	r0, #5
				modOperationalStateHandleChargerDisconnect(OP_STATE_INIT);
 80062b8:	f7ff fb3e 	bl	8005938 <modOperationalStateHandleChargerDisconnect>
			if(modOperationalStatePackStatehandle->chargeAllowed){
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	f000 8087 	beq.w	80063d6 <modOperationalStateTask+0x99e>
				modPowerElectronicsSetCharge(true);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f000 fa8b 	bl	80067e4 <modPowerElectronicsSetCharge>
				if(modOperationalStatePackStatehandle->packCurrent >= 0.5f || modOperationalStatePackStatehandle->packCurrent >= modOperationalStateGeneralConfigHandle->chargerEnabledThreshold){
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80062d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80062d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e0:	da07      	bge.n	80062f2 <modOperationalStateTask+0x8ba>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80062e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	db02      	blt.n	80062f8 <modOperationalStateTask+0x8c0>
					modPowerElectronicsSetChargePFET(true);
 80062f2:	2001      	movs	r0, #1
 80062f4:	f000 fa86 	bl	8006804 <modPowerElectronicsSetChargePFET>
				if(modOperationalStatePackStatehandle->packVoltage-modOperationalStatePackStatehandle->loCurrentLoadVoltage < (modOperationalStatePackStatehandle->packVoltage*0.1f) && modOperationalStatePackStatehandle->loCurrentLoadVoltage < (modOperationalStateGeneralConfigHandle->noOfCellsSeries*modOperationalStateGeneralConfigHandle->cellHardOverVoltage+10.0f)){ 
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	ed9f 6a79 	vldr	s12, [pc, #484]	; 80064e0 <modOperationalStateTask+0xaa8>
 80062fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8006302:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006306:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800630a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800630e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	d51b      	bpl.n	8006350 <modOperationalStateTask+0x918>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006320:	ee07 2a10 	vmov	s14, r2
 8006324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006328:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800632c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006330:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006338:	d50a      	bpl.n	8006350 <modOperationalStateTask+0x918>
					modPowerElectronicsSetDisCharge(true);
 800633a:	2001      	movs	r0, #1
 800633c:	f000 fa10 	bl	8006760 <modPowerElectronicsSetDisCharge>
					if(modOperationalStateGeneralConfigHandle->LCUsePrecharge==forced){
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006346:	2b02      	cmp	r3, #2
 8006348:	d102      	bne.n	8006350 <modOperationalStateTask+0x918>
						modPowerElectronicsSetPreCharge(true);
 800634a:	2001      	movs	r0, #1
 800634c:	f000 f9ee 	bl	800672c <modPowerElectronicsSetPreCharge>
			if(modOperationalStatePackStatehandle->coolingAllowed )
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f893 00a3 	ldrb.w	r0, [r3, #163]	; 0xa3
 8006356:	b100      	cbz	r0, 800635a <modOperationalStateTask+0x922>
				modPowerElectronicsSetCooling(true);
 8006358:	2001      	movs	r0, #1
				modPowerElectronicsSetCooling(false);
 800635a:	f000 fa63 	bl	8006824 <modPowerElectronicsSetCooling>
			modOperationalStateUpdateStates();
 800635e:	f7ff fa89 	bl	8005874 <modOperationalStateUpdateStates>
			modOperationalStateDisplayData.StateOfCharge = modOperationalStateGeneralStateOfCharge->generalStateOfCharge;
 8006362:	4b60      	ldr	r3, [pc, #384]	; (80064e4 <modOperationalStateTask+0xaac>)
 8006364:	4f60      	ldr	r7, [pc, #384]	; (80064e8 <modOperationalStateTask+0xab0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	603b      	str	r3, [r7, #0]
			modOperationalStateDisplayData.CellMismatch = fabs(modOperationalStatePackStatehandle->cellVoltageMisMatch);
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006372:	eef0 7ae7 	vabs.f32	s15, s15
 8006376:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			modOperationalStateDisplayData.LowestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageLow);
 800637a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
			modDisplayShowInfo(DISP_MODE_BALANCING,modOperationalStateDisplayData);
 800637e:	f107 060c 	add.w	r6, r7, #12
			modOperationalStateDisplayData.LowestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageLow);
 8006382:	eef0 7ae7 	vabs.f32	s15, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 800638a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
			modDisplayShowInfo(DISP_MODE_BALANCING,modOperationalStateDisplayData);
 800638e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8006390:	eef0 7ae7 	vabs.f32	s15, s15
			modDisplayShowInfo(DISP_MODE_BALANCING,modOperationalStateDisplayData);
 8006394:	466d      	mov	r5, sp
			modOperationalStateDisplayData.HighestCellVoltage = fabs(modOperationalStatePackStatehandle->cellVoltageHigh);
 8006396:	edc7 7a08 	vstr	s15, [r7, #32]
			modDisplayShowInfo(DISP_MODE_BALANCING,modOperationalStateDisplayData);
 800639a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800639c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800639e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80063a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80063a8:	2009      	movs	r0, #9
 80063aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80063ae:	f7fe fd49 	bl	8004e44 <modDisplayShowInfo>
			modEffectChangeState(STAT_LED_POWER,STAT_BLINKSHORTLONG_100_20);								// Indicate balancing
 80063b2:	2106      	movs	r1, #6
 80063b4:	2001      	movs	r0, #1
 80063b6:	f7ff f861 	bl	800547c <modEffectChangeState>
			break;
 80063ba:	f7ff bb91 	b.w	8005ae0 <modOperationalStateTask+0xa8>
				modOperationalStateChargerTimeout = HAL_GetTick();
 80063be:	f004 fcfd 	bl	800adbc <HAL_GetTick>
 80063c2:	4b45      	ldr	r3, [pc, #276]	; (80064d8 <modOperationalStateTask+0xaa0>)
 80063c4:	6018      	str	r0, [r3, #0]
 80063c6:	e754      	b.n	8006272 <modOperationalStateTask+0x83a>
				modOperationalStateChargedTimeout = HAL_GetTick();
 80063c8:	f004 fcf8 	bl	800adbc <HAL_GetTick>
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <modOperationalStateTask+0xaa4>)
 80063ce:	6018      	str	r0, [r3, #0]
 80063d0:	e76b      	b.n	80062aa <modOperationalStateTask+0x872>
				modOperationalStateHandleChargerDisconnect(OP_STATE_INIT);
 80063d2:	2000      	movs	r0, #0
 80063d4:	e770      	b.n	80062b8 <modOperationalStateTask+0x880>
				modPowerElectronicsSetChargePFET(false);
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 fa14 	bl	8006804 <modPowerElectronicsSetChargePFET>
				modPowerElectronicsSetCharge(false);
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 fa01 	bl	80067e4 <modPowerElectronicsSetCharge>
				modPowerElectronicsSetDisCharge(false);
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 f9bc 	bl	8006760 <modPowerElectronicsSetDisCharge>
				modPowerElectronicsSetPreCharge(false);
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f99f 	bl	800672c <modPowerElectronicsSetPreCharge>
				modOperationalStatePackStatehandle->faultState = FAULT_CODE_CHARGE_RETRY;
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	2216      	movs	r2, #22
 80063f2:	765a      	strb	r2, [r3, #25]
 80063f4:	e7ac      	b.n	8006350 <modOperationalStateTask+0x918>
			modDisplayShowInfo(DISP_MODE_CHARGED,modOperationalStateDisplayData);
 80063f6:	4f3c      	ldr	r7, [pc, #240]	; (80064e8 <modOperationalStateTask+0xab0>)
			modOperationalStateHandleChargerDisconnect(OP_STATE_POWER_DOWN);
 80063f8:	2005      	movs	r0, #5
 80063fa:	f7ff fa9d 	bl	8005938 <modOperationalStateHandleChargerDisconnect>
			modDisplayShowInfo(DISP_MODE_CHARGED,modOperationalStateDisplayData);
 80063fe:	f107 060c 	add.w	r6, r7, #12
			modEffectChangeState(STAT_LED_POWER,STAT_BLINKSHORTLONG_1000_4);								// Indicate Charged
 8006402:	2107      	movs	r1, #7
 8006404:	2001      	movs	r0, #1
 8006406:	f7ff f839 	bl	800547c <modEffectChangeState>
			modOperationalStateUpdateStates();
 800640a:	f7ff fa33 	bl	8005874 <modOperationalStateUpdateStates>
			modDisplayShowInfo(DISP_MODE_CHARGED,modOperationalStateDisplayData);
 800640e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006410:	466d      	mov	r5, sp
 8006412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006418:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800641c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006420:	200a      	movs	r0, #10
 8006422:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006426:	f7ff bb59 	b.w	8005adc <modOperationalStateTask+0xa4>
			if(modPowerElectronicsSetDisCharge(true))
 800642a:	2001      	movs	r0, #1
 800642c:	f000 f998 	bl	8006760 <modPowerElectronicsSetDisCharge>
 8006430:	2800      	cmp	r0, #0
 8006432:	d03f      	beq.n	80064b4 <modOperationalStateTask+0xa7c>
				modPowerElectronicsSetPreCharge(false);
 8006434:	2000      	movs	r0, #0
 8006436:	f000 f979 	bl	800672c <modPowerElectronicsSetPreCharge>
			if(fabs(modOperationalStatePackStatehandle->packCurrent) >= fabs(modOperationalStateGeneralConfigHandle->notUsedCurrentThreshold)) {
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	ed93 7a08 	vldr	s14, [r3, #32]
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <modOperationalStateTask+0xa9c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8006448:	eeb0 7ac7 	vabs.f32	s14, s14
 800644c:	eef0 7ae7 	vabs.f32	s15, s15
 8006450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006458:	db32      	blt.n	80064c0 <modOperationalStateTask+0xa88>
				if(modDelayTick1ms(&modOperationalStateNotUsedResetDelay,1000))
 800645a:	4824      	ldr	r0, [pc, #144]	; (80064ec <modOperationalStateTask+0xab4>)
 800645c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006460:	f7fe fb5e 	bl	8004b20 <modDelayTick1ms>
 8006464:	b118      	cbz	r0, 800646e <modOperationalStateTask+0xa36>
					modOperationalStateNotUsedTime = HAL_GetTick();
 8006466:	f004 fca9 	bl	800adbc <HAL_GetTick>
 800646a:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <modOperationalStateTask+0xab8>)
				modOperationalStateNotUsedResetDelay = HAL_GetTick();
 800646c:	6018      	str	r0, [r3, #0]
			if(modOperationalStatePowerDownDelayCheck()) {
 800646e:	f7ff fabb 	bl	80059e8 <modOperationalStatePowerDownDelayCheck>
 8006472:	b148      	cbz	r0, 8006488 <modOperationalStateTask+0xa50>
	modOperationalStateNewFaultState = newFaultState;
 8006474:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <modOperationalStateTask+0xabc>)
 8006476:	2218      	movs	r2, #24
 8006478:	701a      	strb	r2, [r3, #0]
	modOperationalStateNewState = newState;
 800647a:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <modOperationalStateTask+0xac0>)
 800647c:	2205      	movs	r2, #5
 800647e:	701a      	strb	r2, [r3, #0]
				modOperationalStatePackStatehandle->powerDownDesired = true;
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
			modDisplayShowInfo(DISP_MODE_FORCED_ON,modOperationalStateDisplayData);
 8006488:	4f17      	ldr	r7, [pc, #92]	; (80064e8 <modOperationalStateTask+0xab0>)
 800648a:	f107 060c 	add.w	r6, r7, #12
 800648e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006490:	466d      	mov	r5, sp
 8006492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006494:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006498:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800649c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80064a0:	200b      	movs	r0, #11
 80064a2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80064a6:	f7fe fccd 	bl	8004e44 <modDisplayShowInfo>
			modEffectChangeState(STAT_LED_POWER,STAT_BLINKSHORTLONG_1000_4);								// Turn flash fast on debug and power LED
 80064aa:	2107      	movs	r1, #7
 80064ac:	2001      	movs	r0, #1
 80064ae:	f7fe ffe5 	bl	800547c <modEffectChangeState>
 80064b2:	e496      	b.n	8005de2 <modOperationalStateTask+0x3aa>
	modOperationalStateNewState = newState;
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <modOperationalStateTask+0xac0>)
 80064b6:	2202      	movs	r2, #2
 80064b8:	701a      	strb	r2, [r3, #0]
				modPowerElectronicsSetDisCharge(false);
 80064ba:	f000 f951 	bl	8006760 <modPowerElectronicsSetDisCharge>
 80064be:	e7bc      	b.n	800643a <modOperationalStateTask+0xa02>
				modOperationalStateNotUsedResetDelay = HAL_GetTick();
 80064c0:	f004 fc7c 	bl	800adbc <HAL_GetTick>
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <modOperationalStateTask+0xab4>)
 80064c6:	e7d1      	b.n	800646c <modOperationalStateTask+0xa34>
			modOperationalStateSetAllStates(OP_STATE_ERROR);
 80064c8:	2007      	movs	r0, #7
 80064ca:	f7ff f9e7 	bl	800589c <modOperationalStateSetAllStates>
			break;
 80064ce:	f7ff bb07 	b.w	8005ae0 <modOperationalStateTask+0xa8>
 80064d2:	bf00      	nop
 80064d4:	2000497c 	.word	0x2000497c
 80064d8:	20004934 	.word	0x20004934
 80064dc:	2000492c 	.word	0x2000492c
 80064e0:	3dcccccd 	.word	0x3dcccccd
 80064e4:	20004980 	.word	0x20004980
 80064e8:	2000493c 	.word	0x2000493c
 80064ec:	20004988 	.word	0x20004988
 80064f0:	2000498c 	.word	0x2000498c
 80064f4:	20004986 	.word	0x20004986
 80064f8:	20004987 	.word	0x20004987

080064fc <modPowerElectronicsAllowForcedOn>:
	
	return returnValue;
};

void modPowerElectronicsAllowForcedOn(bool allowedState){
	modPowerElectronicsAllowForcedOnState = allowedState;
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <modPowerElectronicsAllowForcedOn+0x8>)
 80064fe:	7018      	strb	r0, [r3, #0]
}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200049ba 	.word	0x200049ba

08006508 <modPowerElectronicsDisableAll>:
		modPowerElectronicsUpdateSwitches();
	}
};

void modPowerElectronicsDisableAll(void) {
	if(modPowerElectronicsPackStateHandle->disChargeDesired | modPowerElectronicsPackStateHandle->preChargeDesired | modPowerElectronicsPackStateHandle->chargeDesired) {
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <modPowerElectronicsDisableAll+0x30>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
 8006510:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8006514:	430a      	orrs	r2, r1
 8006516:	f893 109f 	ldrb.w	r1, [r3, #159]	; 0x9f
 800651a:	430a      	orrs	r2, r1
 800651c:	d00a      	beq.n	8006534 <modPowerElectronicsDisableAll+0x2c>
		modPowerElectronicsPackStateHandle->disChargeDesired = false;
		modPowerElectronicsPackStateHandle->preChargeDesired = false;
 800651e:	2200      	movs	r2, #0
 8006520:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		modPowerElectronicsPackStateHandle->chargeDesired = false;
 8006524:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		modPowerElectronicsPackStateHandle->chargePFETDesired = false;
 8006528:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		modPowerElectronicsPackStateHandle->coolingDesired = false;
 800652c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		driverHWSwitchesDisableAll();
 8006530:	f004 bb48 	b.w	800abc4 <driverHWSwitchesDisableAll>
	}
};
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	200049f0 	.word	0x200049f0

0800653c <modPowerElectronicsCalculateCellStats>:

void modPowerElectronicsCalculateCellStats(void) {
	float cellVoltagesSummed = 0.0f;
	modPowerElectronicsPackStateHandle->cellVoltageHigh = 0.0f;
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <modPowerElectronicsCalculateCellStats+0x74>)
	modPowerElectronicsPackStateHandle->cellVoltageLow = 10.0f;
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <modPowerElectronicsCalculateCellStats+0x78>)
	modPowerElectronicsPackStateHandle->cellVoltageHigh = 0.0f;
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80065b8 <modPowerElectronicsCalculateCellStats+0x7c>
	modPowerElectronicsPackStateHandle->cellVoltageLow = 10.0f;
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
	
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <modPowerElectronicsCalculateCellStats+0x80>)
	modPowerElectronicsPackStateHandle->cellVoltageHigh = 0.0f;
 800654a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 800654e:	6811      	ldr	r1, [r2, #0]
 8006550:	780a      	ldrb	r2, [r1, #0]
 8006552:	78c9      	ldrb	r1, [r1, #3]
 8006554:	2000      	movs	r0, #0
 8006556:	fb12 f201 	smulbb	r2, r2, r1
 800655a:	b2c1      	uxtb	r1, r0
 800655c:	4291      	cmp	r1, r2
		cellVoltagesSummed += modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;
		
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage > modPowerElectronicsPackStateHandle->cellVoltageHigh)
 800655e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8006562:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 8006566:	db0c      	blt.n	8006582 <modPowerElectronicsCalculateCellStats+0x46>
		
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage < modPowerElectronicsPackStateHandle->cellVoltageLow)
			modPowerElectronicsPackStateHandle->cellVoltageLow = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;		
	}
	
	modPowerElectronicsPackStateHandle->cellVoltageAverage = cellVoltagesSummed/(modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules);
 8006568:	ee07 2a90 	vmov	s15, r2
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	modPowerElectronicsPackStateHandle->cellVoltageMisMatch = modPowerElectronicsPackStateHandle->cellVoltageHigh - modPowerElectronicsPackStateHandle->cellVoltageLow;
 8006570:	ee76 6ac6 	vsub.f32	s13, s13, s12
	modPowerElectronicsPackStateHandle->cellVoltageAverage = cellVoltagesSummed/(modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules);
 8006574:	eec7 5a27 	vdiv.f32	s11, s14, s15
	modPowerElectronicsPackStateHandle->cellVoltageMisMatch = modPowerElectronicsPackStateHandle->cellVoltageHigh - modPowerElectronicsPackStateHandle->cellVoltageLow;
 8006578:	edc3 6a10 	vstr	s13, [r3, #64]	; 0x40
	modPowerElectronicsPackStateHandle->cellVoltageAverage = cellVoltagesSummed/(modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules);
 800657c:	edc3 5a0f 	vstr	s11, [r3, #60]	; 0x3c
};
 8006580:	4770      	bx	lr
		cellVoltagesSummed += modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;
 8006582:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006586:	edd1 7a2c 	vldr	s15, [r1, #176]	; 0xb0
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage > modPowerElectronicsPackStateHandle->cellVoltageHigh)
 800658a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage < modPowerElectronicsPackStateHandle->cellVoltageLow)
 8006592:	eef4 7ac6 	vcmpe.f32	s15, s12
			modPowerElectronicsPackStateHandle->cellVoltageHigh = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;
 8006596:	bfc8      	it	gt
 8006598:	edc3 7a0d 	vstrgt	s15, [r3, #52]	; 0x34
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage < modPowerElectronicsPackStateHandle->cellVoltageLow)
 800659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cellVoltagesSummed += modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;
 80065a0:	ee37 7a27 	vadd.f32	s14, s14, s15
			modPowerElectronicsPackStateHandle->cellVoltageLow = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellVoltage;		
 80065a4:	bf48      	it	mi
 80065a6:	edc3 7a0e 	vstrmi	s15, [r3, #56]	; 0x38
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 80065aa:	3001      	adds	r0, #1
 80065ac:	e7d5      	b.n	800655a <modPowerElectronicsCalculateCellStats+0x1e>
 80065ae:	bf00      	nop
 80065b0:	200049f0 	.word	0x200049f0
 80065b4:	41200000 	.word	0x41200000
 80065b8:	00000000 	.word	0x00000000
 80065bc:	200049e8 	.word	0x200049e8

080065c0 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray>:
	uint8_t seriesCount = 0;
	uint8_t moduleCount = 0;
	
	// Clear array
	for(uint8_t moduleClearPointer = 0; moduleClearPointer < NoOfCellMonitorsPossibleOnBMS; moduleClearPointer++)
		modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[moduleClearPointer] = 0;
 80065c0:	4b23      	ldr	r3, [pc, #140]	; (8006650 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x90>)
void modPowerElectronicsCallMonitorsCalcBalanceResistorArray(void) {
 80065c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[moduleClearPointer] = 0;
 80065c6:	681c      	ldr	r4, [r3, #0]
 80065c8:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 80065cc:	2228      	movs	r2, #40	; 0x28
 80065ce:	2100      	movs	r1, #0
 80065d0:	3004      	adds	r0, #4
 80065d2:	f008 ff09 	bl	800f3e8 <memset>
	
	
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 80065d6:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x94>)
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	7805      	ldrb	r5, [r0, #0]
 80065dc:	78c7      	ldrb	r7, [r0, #3]
 80065de:	2600      	movs	r6, #0
 80065e0:	fb15 fc07 	smulbb	ip, r5, r7
		moduleCount = seriesCount*(modPowerElectronicsGeneralConfigHandle->cellMonitorICCount/modPowerElectronicsGeneralConfigHandle->noOfParallelModules);
		modulePointer = moduleCount + (cellPointer % modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)/modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
		cellInMaskPointer = (cellPointer - (seriesCount*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
		
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellBleedActive)
		  modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 80065e4:	f04f 0e01 	mov.w	lr, #1
 80065e8:	b2f1      	uxtb	r1, r6
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 80065ea:	4561      	cmp	r1, ip
 80065ec:	db01      	blt.n	80065f2 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x32>
		else
			modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] &= ~(1 << cellInMaskPointer);
	}
}
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		seriesCount = cellPointer/modPowerElectronicsGeneralConfigHandle->noOfCellsSeries; 
 80065f2:	fbb1 f3f5 	udiv	r3, r1, r5
 80065f6:	b2da      	uxtb	r2, r3
		modulePointer = moduleCount + (cellPointer % modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)/modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
 80065f8:	fb05 1313 	mls	r3, r5, r3, r1
 80065fc:	f890 9002 	ldrb.w	r9, [r0, #2]
		moduleCount = seriesCount*(modPowerElectronicsGeneralConfigHandle->cellMonitorICCount/modPowerElectronicsGeneralConfigHandle->noOfParallelModules);
 8006600:	f890 80f0 	ldrb.w	r8, [r0, #240]	; 0xf0
 8006604:	fbb8 f8f7 	udiv	r8, r8, r7
		modulePointer = moduleCount + (cellPointer % modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)/modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
 8006608:	b2db      	uxtb	r3, r3
 800660a:	fbb3 f3f9 	udiv	r3, r3, r9
 800660e:	fb08 3302 	mla	r3, r8, r2, r3
 8006612:	b2db      	uxtb	r3, r3
		cellInMaskPointer = (cellPointer - (seriesCount*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
 8006614:	fb02 1215 	mls	r2, r2, r5, r1
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellBleedActive)
 8006618:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800661c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		  modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 8006620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
		cellInMaskPointer = (cellPointer - (seriesCount*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
 8006624:	fb92 faf9 	sdiv	sl, r2, r9
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellBleedActive)
 8006628:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
		  modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 800662c:	f8d3 8224 	ldr.w	r8, [r3, #548]	; 0x224
		cellInMaskPointer = (cellPointer - (seriesCount*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries)) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;
 8006630:	fb09 221a 	mls	r2, r9, sl, r2
		  modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	fa0e f202 	lsl.w	r2, lr, r2
		if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellPointer].cellBleedActive)
 800663a:	b129      	cbz	r1, 8006648 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x88>
		  modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] |= (1 << cellInMaskPointer);
 800663c:	ea42 0208 	orr.w	r2, r2, r8
			modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] &= ~(1 << cellInMaskPointer);
 8006640:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	for(uint8_t cellPointer = 0; cellPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; cellPointer++) {
 8006644:	3601      	adds	r6, #1
 8006646:	e7cf      	b.n	80065e8 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x28>
			modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] &= ~(1 << cellInMaskPointer);
 8006648:	ea28 0202 	bic.w	r2, r8, r2
 800664c:	e7f8      	b.n	8006640 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray+0x80>
 800664e:	bf00      	nop
 8006650:	200049f0 	.word	0x200049f0
 8006654:	200049e8 	.word	0x200049e8

08006658 <modPowerElectronicsSubTaskCurrentWatch>:
	}
};

void 	modPowerElectronicsSubTaskCurrentWatch(void){
		// Handle over current limits 
	if(modPowerElectronicsPackStateHandle->packCurrent > modPowerElectronicsGeneralConfigHandle->maxAllowedCurrent){
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <modPowerElectronicsSubTaskCurrentWatch+0x2c>)
 800665a:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <modPowerElectronicsSubTaskCurrentWatch+0x30>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	ed93 7a08 	vldr	s14, [r3, #32]
 8006664:	edd2 7a23 	vldr	s15, [r2, #140]	; 0x8c
 8006668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006670:	dd07      	ble.n	8006682 <modPowerElectronicsSubTaskCurrentWatch+0x2a>
			modPowerElectronicsPackStateHandle->packOperationalCellState = PACK_STATE_ERROR_OVER_CURRENT;
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2c50 	strb.w	r2, [r3, #3152]	; 0xc50
			modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 8006678:	2200      	movs	r2, #0
 800667a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
			modPowerElectronicsPackStateHandle->chargeAllowed = false;
 800667e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	}
};
 8006682:	4770      	bx	lr
 8006684:	200049f0 	.word	0x200049f0
 8006688:	200049e8 	.word	0x200049e8

0800668c <modPowerElectronicsUpdateSwitches>:

// Update switch states, should be called after every desired/allowed switch state change
void modPowerElectronicsUpdateSwitches(void) {
 800668c:	b510      	push	{r4, lr}
	// Do the actual power switching in here
	
	//Handle precharge output
	if(modPowerElectronicsPackStateHandle->preChargeDesired && (modPowerElectronicsPackStateHandle->disChargeLCAllowed || modPowerElectronicsAllowForcedOnState)){
 800668e:	4c25      	ldr	r4, [pc, #148]	; (8006724 <modPowerElectronicsUpdateSwitches+0x98>)
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006696:	b3ba      	cbz	r2, 8006708 <modPowerElectronicsUpdateSwitches+0x7c>
 8006698:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800669c:	b913      	cbnz	r3, 80066a4 <modPowerElectronicsUpdateSwitches+0x18>
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <modPowerElectronicsUpdateSwitches+0x9c>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b38b      	cbz	r3, 8006708 <modPowerElectronicsUpdateSwitches+0x7c>
		driverHWSwitchesSetSwitchState(SWITCH_PRECHARGE,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066a4:	2101      	movs	r1, #1
 80066a6:	2002      	movs	r0, #2
 80066a8:	f004 fa5a 	bl	800ab60 <driverHWSwitchesSetSwitchState>
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGEHV,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066ac:	2101      	movs	r1, #1
	}else{
		driverHWSwitchesSetSwitchState(SWITCH_PRECHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGEHV,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 80066ae:	2004      	movs	r0, #4
 80066b0:	f004 fa56 	bl	800ab60 <driverHWSwitchesSetSwitchState>
	};
	//Handle discharge output
	if(modPowerElectronicsPackStateHandle->disChargeDesired && (modPowerElectronicsPackStateHandle->disChargeLCAllowed || modPowerElectronicsAllowForcedOnState)){
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 80066ba:	b35a      	cbz	r2, 8006714 <modPowerElectronicsUpdateSwitches+0x88>
 80066bc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80066c0:	b913      	cbnz	r3, 80066c8 <modPowerElectronicsUpdateSwitches+0x3c>
 80066c2:	4b19      	ldr	r3, [pc, #100]	; (8006728 <modPowerElectronicsUpdateSwitches+0x9c>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b32b      	cbz	r3, 8006714 <modPowerElectronicsUpdateSwitches+0x88>
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGE,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066c8:	2101      	movs	r1, #1
 80066ca:	2003      	movs	r0, #3
 80066cc:	f004 fa48 	bl	800ab60 <driverHWSwitchesSetSwitchState>
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGEHV,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066d0:	2101      	movs	r1, #1
 80066d2:	2004      	movs	r0, #4
	}else{
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 80066d4:	f004 fa44 	bl	800ab60 <driverHWSwitchesSetSwitchState>
	};
	//Handle charge input
	if(modPowerElectronicsPackStateHandle->chargeDesired && modPowerElectronicsPackStateHandle->chargeAllowed){
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
 80066de:	b1e2      	cbz	r2, 800671a <modPowerElectronicsUpdateSwitches+0x8e>
 80066e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066e4:	b1cb      	cbz	r3, 800671a <modPowerElectronicsUpdateSwitches+0x8e>
		driverHWSwitchesSetSwitchState(SWITCH_CHARGE,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066e6:	2101      	movs	r1, #1
	}else{
		driverHWSwitchesSetSwitchState(SWITCH_CHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 80066e8:	2001      	movs	r0, #1
 80066ea:	f004 fa39 	bl	800ab60 <driverHWSwitchesSetSwitchState>
	}else{
		driverHWSwitchesSetSwitchState(SWITCH_CHARGE_BYPASS,(driverHWSwitchesStateTypedef)SWITCH_RESET);
	};
	//Handle cooling output
	#else
	if(modPowerElectronicsPackStateHandle->coolingDesired && modPowerElectronicsPackStateHandle->coolingAllowed)
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f893 20a2 	ldrb.w	r2, [r3, #162]	; 0xa2
 80066f4:	b19a      	cbz	r2, 800671e <modPowerElectronicsUpdateSwitches+0x92>
 80066f6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80066fa:	b183      	cbz	r3, 800671e <modPowerElectronicsUpdateSwitches+0x92>
		driverHWSwitchesSetSwitchState(SWITCH_COOLING,(driverHWSwitchesStateTypedef)SWITCH_SET);
 80066fc:	2101      	movs	r1, #1
	else
		driverHWSwitchesSetSwitchState(SWITCH_COOLING,(driverHWSwitchesStateTypedef)SWITCH_RESET);
	#endif
};
 80066fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		driverHWSwitchesSetSwitchState(SWITCH_COOLING,(driverHWSwitchesStateTypedef)SWITCH_SET);
 8006702:	2000      	movs	r0, #0
 8006704:	f004 ba2c 	b.w	800ab60 <driverHWSwitchesSetSwitchState>
		driverHWSwitchesSetSwitchState(SWITCH_PRECHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 8006708:	2100      	movs	r1, #0
 800670a:	2002      	movs	r0, #2
 800670c:	f004 fa28 	bl	800ab60 <driverHWSwitchesSetSwitchState>
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGEHV,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 8006710:	2100      	movs	r1, #0
 8006712:	e7cc      	b.n	80066ae <modPowerElectronicsUpdateSwitches+0x22>
		driverHWSwitchesSetSwitchState(SWITCH_DISCHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 8006714:	2100      	movs	r1, #0
 8006716:	2003      	movs	r0, #3
 8006718:	e7dc      	b.n	80066d4 <modPowerElectronicsUpdateSwitches+0x48>
		driverHWSwitchesSetSwitchState(SWITCH_CHARGE,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 800671a:	2100      	movs	r1, #0
 800671c:	e7e4      	b.n	80066e8 <modPowerElectronicsUpdateSwitches+0x5c>
		driverHWSwitchesSetSwitchState(SWITCH_COOLING,(driverHWSwitchesStateTypedef)SWITCH_RESET);
 800671e:	2100      	movs	r1, #0
 8006720:	e7ed      	b.n	80066fe <modPowerElectronicsUpdateSwitches+0x72>
 8006722:	bf00      	nop
 8006724:	200049f0 	.word	0x200049f0
 8006728:	200049ba 	.word	0x200049ba

0800672c <modPowerElectronicsSetPreCharge>:
	if(preChargeLastState != newState) {
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <modPowerElectronicsSetPreCharge+0x28>)
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	4282      	cmp	r2, r0
 8006732:	d00e      	beq.n	8006752 <modPowerElectronicsSetPreCharge+0x26>
		if(modPowerElectronicsGeneralConfigHandle->LCUsePrecharge>=1){
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <modPowerElectronicsSetPreCharge+0x2c>)
		preChargeLastState = newState;
 8006736:	7018      	strb	r0, [r3, #0]
		if(modPowerElectronicsGeneralConfigHandle->LCUsePrecharge>=1){
 8006738:	6812      	ldr	r2, [r2, #0]
			modPowerElectronicsPackStateHandle->preChargeDesired = newState;
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <modPowerElectronicsSetPreCharge+0x30>)
		if(modPowerElectronicsGeneralConfigHandle->LCUsePrecharge>=1){
 800673c:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
			modPowerElectronicsPackStateHandle->preChargeDesired = newState;
 8006740:	681b      	ldr	r3, [r3, #0]
		if(modPowerElectronicsGeneralConfigHandle->LCUsePrecharge>=1){
 8006742:	b11a      	cbz	r2, 800674c <modPowerElectronicsSetPreCharge+0x20>
			modPowerElectronicsPackStateHandle->preChargeDesired = newState;
 8006744:	f883 009c 	strb.w	r0, [r3, #156]	; 0x9c
		modPowerElectronicsUpdateSwitches();
 8006748:	f7ff bfa0 	b.w	800668c <modPowerElectronicsUpdateSwitches>
			modPowerElectronicsPackStateHandle->preChargeDesired = false;
 800674c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006750:	e7fa      	b.n	8006748 <modPowerElectronicsSetPreCharge+0x1c>
};
 8006752:	4770      	bx	lr
 8006754:	20004a04 	.word	0x20004a04
 8006758:	200049e8 	.word	0x200049e8
 800675c:	200049f0 	.word	0x200049f0

08006760 <modPowerElectronicsSetDisCharge>:
	if(dischargeLastState != newState) {
 8006760:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <modPowerElectronicsSetDisCharge+0x70>)
bool modPowerElectronicsSetDisCharge(bool newState) {
 8006762:	b538      	push	{r3, r4, r5, lr}
	if(dischargeLastState != newState) {
 8006764:	7813      	ldrb	r3, [r2, #0]
 8006766:	4d1b      	ldr	r5, [pc, #108]	; (80067d4 <modPowerElectronicsSetDisCharge+0x74>)
 8006768:	4c1b      	ldr	r4, [pc, #108]	; (80067d8 <modPowerElectronicsSetDisCharge+0x78>)
 800676a:	4283      	cmp	r3, r0
 800676c:	d00d      	beq.n	800678a <modPowerElectronicsSetDisCharge+0x2a>
		if(modPowerElectronicsGeneralConfigHandle->LCUseDischarge==1)
 800676e:	6829      	ldr	r1, [r5, #0]
		dischargeLastState = newState;	
 8006770:	7010      	strb	r0, [r2, #0]
		if(modPowerElectronicsGeneralConfigHandle->LCUseDischarge==1)
 8006772:	f891 20e7 	ldrb.w	r2, [r1, #231]	; 0xe7
			modPowerElectronicsPackStateHandle->disChargeDesired = newState;
 8006776:	6823      	ldr	r3, [r4, #0]
		if(modPowerElectronicsGeneralConfigHandle->LCUseDischarge==1)
 8006778:	2a01      	cmp	r2, #1
			modPowerElectronicsPackStateHandle->disChargeDesired = false;
 800677a:	bf16      	itet	ne
 800677c:	2200      	movne	r2, #0
			modPowerElectronicsPackStateHandle->disChargeDesired = newState;
 800677e:	f883 009d 	strbeq.w	r0, [r3, #157]	; 0x9d
			modPowerElectronicsPackStateHandle->disChargeDesired = false;
 8006782:	f883 209d 	strbne.w	r2, [r3, #157]	; 0x9d
		modPowerElectronicsUpdateSwitches();
 8006786:	f7ff ff81 	bl	800668c <modPowerElectronicsUpdateSwitches>
	if((modPowerElectronicsPackStateHandle->loCurrentLoadVoltage < modPowerElectronicsGeneralConfigHandle->minimalPrechargePercentage*(modPowerElectronicsPackStateHandle->packVoltage)) && modPowerElectronicsGeneralConfigHandle->LCUsePrecharge>=1){ 
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	ed92 7a07 	vldr	s14, [r2, #28]
 8006792:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8006796:	4d11      	ldr	r5, [pc, #68]	; (80067dc <modPowerElectronicsSetDisCharge+0x7c>)
 8006798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800679c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 80067a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a8:	d50c      	bpl.n	80067c4 <modPowerElectronicsSetDisCharge+0x64>
 80067aa:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80067ae:	b14b      	cbz	r3, 80067c4 <modPowerElectronicsSetDisCharge+0x64>
		modPowerElectronicsDisChargeLCRetryLastTick = HAL_GetTick();
 80067b0:	f004 fb04 	bl	800adbc <HAL_GetTick>
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <modPowerElectronicsSetDisCharge+0x80>)
 80067b6:	6018      	str	r0, [r3, #0]
		if(modPowerElectronicsFirstDischarge == false){
 80067b8:	7828      	ldrb	r0, [r5, #0]
 80067ba:	b938      	cbnz	r0, 80067cc <modPowerElectronicsSetDisCharge+0x6c>
			modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	f883 009e 	strb.w	r0, [r3, #158]	; 0x9e
};
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
		modPowerElectronicsFirstDischarge = false;
 80067c4:	2300      	movs	r3, #0
 80067c6:	702b      	strb	r3, [r5, #0]
		return true;
 80067c8:	2001      	movs	r0, #1
 80067ca:	e7fa      	b.n	80067c2 <modPowerElectronicsSetDisCharge+0x62>
		return false;	// Load voltage too low (output not precharged enough) return whether or not precharge is needed.
 80067cc:	2000      	movs	r0, #0
 80067ce:	e7f8      	b.n	80067c2 <modPowerElectronicsSetDisCharge+0x62>
 80067d0:	200049b2 	.word	0x200049b2
 80067d4:	200049e8 	.word	0x200049e8
 80067d8:	200049f0 	.word	0x200049f0
 80067dc:	200049e4 	.word	0x200049e4
 80067e0:	200049e0 	.word	0x200049e0

080067e4 <modPowerElectronicsSetCharge>:
	if(chargeLastState != newState) {
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <modPowerElectronicsSetCharge+0x18>)
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	4282      	cmp	r2, r0
 80067ea:	d006      	beq.n	80067fa <modPowerElectronicsSetCharge+0x16>
		chargeLastState = newState;
 80067ec:	7018      	strb	r0, [r3, #0]
		modPowerElectronicsPackStateHandle->chargeDesired = newState;
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <modPowerElectronicsSetCharge+0x1c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f883 009f 	strb.w	r0, [r3, #159]	; 0x9f
		modPowerElectronicsUpdateSwitches();
 80067f6:	f7ff bf49 	b.w	800668c <modPowerElectronicsUpdateSwitches>
};
 80067fa:	4770      	bx	lr
 80067fc:	200049a8 	.word	0x200049a8
 8006800:	200049f0 	.word	0x200049f0

08006804 <modPowerElectronicsSetChargePFET>:
	if(chargePFETLastState != newState) {
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <modPowerElectronicsSetChargePFET+0x18>)
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	4282      	cmp	r2, r0
 800680a:	d006      	beq.n	800681a <modPowerElectronicsSetChargePFET+0x16>
		chargePFETLastState = newState;
 800680c:	7018      	strb	r0, [r3, #0]
		modPowerElectronicsPackStateHandle->chargePFETDesired = newState;
 800680e:	4b04      	ldr	r3, [pc, #16]	; (8006820 <modPowerElectronicsSetChargePFET+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
		modPowerElectronicsUpdateSwitches();
 8006816:	f7ff bf39 	b.w	800668c <modPowerElectronicsUpdateSwitches>
};
 800681a:	4770      	bx	lr
 800681c:	200049a9 	.word	0x200049a9
 8006820:	200049f0 	.word	0x200049f0

08006824 <modPowerElectronicsSetCooling>:
	if(coolingLastState != newState) {
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <modPowerElectronicsSetCooling+0x18>)
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	4282      	cmp	r2, r0
 800682a:	d006      	beq.n	800683a <modPowerElectronicsSetCooling+0x16>
		coolingLastState = newState;
 800682c:	7018      	strb	r0, [r3, #0]
		modPowerElectronicsPackStateHandle->coolingDesired = newState;
 800682e:	4b04      	ldr	r3, [pc, #16]	; (8006840 <modPowerElectronicsSetCooling+0x1c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f883 00a2 	strb.w	r0, [r3, #162]	; 0xa2
		modPowerElectronicsUpdateSwitches();
 8006836:	f7ff bf29 	b.w	800668c <modPowerElectronicsUpdateSwitches>
};
 800683a:	4770      	bx	lr
 800683c:	200049aa 	.word	0x200049aa
 8006840:	200049f0 	.word	0x200049f0

08006844 <modPowerElectronicsSubTaskVoltageWatch>:
void modPowerElectronicsSubTaskVoltageWatch(void) {
 8006844:	b538      	push	{r3, r4, r5, lr}
    modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE; //AE 28.12.2024 Test
 8006846:	4c92      	ldr	r4, [pc, #584]	; (8006a90 <modPowerElectronicsSubTaskVoltageWatch+0x24c>)
 8006848:	4d92      	ldr	r5, [pc, #584]	; (8006a94 <modPowerElectronicsSubTaskVoltageWatch+0x250>)
	modPowerElectronicsCalculateCellStats();
 800684a:	f7ff fe77 	bl	800653c <modPowerElectronicsCalculateCellStats>
    modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE; //AE 28.12.2024 Test
 800684e:	6823      	ldr	r3, [r4, #0]
	if(modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_HARD_CELLVOLTAGE && modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_TEMPERATURE) {
 8006850:	f893 1c50 	ldrb.w	r1, [r3, #3152]	; 0xc50
    modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE; //AE 28.12.2024 Test
 8006854:	2200      	movs	r2, #0
	if(modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_HARD_CELLVOLTAGE && modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_TEMPERATURE) {
 8006856:	f011 0ffb 	tst.w	r1, #251	; 0xfb
    modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE; //AE 28.12.2024 Test
 800685a:	765a      	strb	r2, [r3, #25]
	if(modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_HARD_CELLVOLTAGE && modPowerElectronicsPackStateHandle->packOperationalCellState != PACK_STATE_ERROR_TEMPERATURE) {
 800685c:	f000 80c1 	beq.w	80069e2 <modPowerElectronicsSubTaskVoltageWatch+0x19e>
		if(modPowerElectronicsPackStateHandle->cellVoltageLow <= modPowerElectronicsGeneralConfigHandle->cellLCSoftUnderVoltage) {
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006866:	edd1 7a04 	vldr	s15, [r1, #16]
 800686a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	d808      	bhi.n	8006886 <modPowerElectronicsSubTaskVoltageWatch+0x42>
			modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 8006874:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
			modPowerElectronicsDisChargeLCRetryLastTick = HAL_GetTick();
 8006878:	f004 faa0 	bl	800adbc <HAL_GetTick>
 800687c:	4b86      	ldr	r3, [pc, #536]	; (8006a98 <modPowerElectronicsSubTaskVoltageWatch+0x254>)
 800687e:	6018      	str	r0, [r3, #0]
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_CELL_SOFT_UNDER_VOLTAGE;
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	220a      	movs	r2, #10
 8006884:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->tempBatteryLow <= modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMin){
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	682a      	ldr	r2, [r5, #0]
 800688a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800688e:	edd2 7a25 	vldr	s15, [r2, #148]	; 0x94
 8006892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	d809      	bhi.n	80068b0 <modPowerElectronicsSubTaskVoltageWatch+0x6c>
			modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 800689c:	2200      	movs	r2, #0
 800689e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
			modPowerElectronicsDisChargeLCRetryLastTick = HAL_GetTick();
 80068a2:	f004 fa8b 	bl	800adbc <HAL_GetTick>
 80068a6:	4b7c      	ldr	r3, [pc, #496]	; (8006a98 <modPowerElectronicsSubTaskVoltageWatch+0x254>)
 80068a8:	6018      	str	r0, [r3, #0]
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_DISCHARGE_UNDER_TEMP_CELLS;
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	2211      	movs	r2, #17
 80068ae:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->cellVoltageHigh >= modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage) {
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	682a      	ldr	r2, [r5, #0]
 80068b4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80068b8:	edd2 7a05 	vldr	s15, [r2, #20]
 80068bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	db09      	blt.n	80068da <modPowerElectronicsSubTaskVoltageWatch+0x96>
			modPowerElectronicsPackStateHandle->chargeAllowed = false;
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			modPowerElectronicsChargeRetryLastTick = HAL_GetTick();
 80068cc:	f004 fa76 	bl	800adbc <HAL_GetTick>
 80068d0:	4b72      	ldr	r3, [pc, #456]	; (8006a9c <modPowerElectronicsSubTaskVoltageWatch+0x258>)
 80068d2:	6018      	str	r0, [r3, #0]
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_CELL_SOFT_OVER_VOLTAGE;
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	2209      	movs	r2, #9
 80068d8:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->tempBatteryLow <= modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMin) {
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	682a      	ldr	r2, [r5, #0]
 80068de:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80068e2:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
 80068e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ee:	d809      	bhi.n	8006904 <modPowerElectronicsSubTaskVoltageWatch+0xc0>
			modPowerElectronicsPackStateHandle->chargeAllowed = false;
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			modPowerElectronicsChargeRetryLastTick = HAL_GetTick();
 80068f6:	f004 fa61 	bl	800adbc <HAL_GetTick>
 80068fa:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <modPowerElectronicsSubTaskVoltageWatch+0x258>)
 80068fc:	6018      	str	r0, [r3, #0]
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_CHARGE_UNDER_TEMP_CELLS;
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	2213      	movs	r2, #19
 8006902:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->cellVoltageLow >= (modPowerElectronicsGeneralConfigHandle->cellLCSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->hysteresisDischarge) && modPowerElectronicsPackStateHandle->tempBatteryHigh <= modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMax && modPowerElectronicsPackStateHandle->tempBatteryLow >= modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMin) {
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800690c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006914:	ed92 7a0e 	vldr	s14, [r2, #56]	; 0x38
 8006918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006920:	db1c      	blt.n	800695c <modPowerElectronicsSubTaskVoltageWatch+0x118>
 8006922:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006926:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 800692a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006932:	db13      	blt.n	800695c <modPowerElectronicsSubTaskVoltageWatch+0x118>
 8006934:	ed92 7a21 	vldr	s14, [r2, #132]	; 0x84
 8006938:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800693c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	db0a      	blt.n	800695c <modPowerElectronicsSubTaskVoltageWatch+0x118>
			if(modDelayTick1ms(&modPowerElectronicsDisChargeLCRetryLastTick,modPowerElectronicsGeneralConfigHandle->timeoutDischargeRetry)){
 8006946:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006948:	4853      	ldr	r0, [pc, #332]	; (8006a98 <modPowerElectronicsSubTaskVoltageWatch+0x254>)
 800694a:	f7fe f8e9 	bl	8004b20 <modDelayTick1ms>
 800694e:	b128      	cbz	r0, 800695c <modPowerElectronicsSubTaskVoltageWatch+0x118>
				modPowerElectronicsPackStateHandle->disChargeLCAllowed = true;
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
				modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE;
 8006958:	2200      	movs	r2, #0
 800695a:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->cellVoltageHigh <= (modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage - modPowerElectronicsGeneralConfigHandle->hysteresisCharge) && modPowerElectronicsPackStateHandle->tempBatteryHigh <= modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax && modPowerElectronicsPackStateHandle->tempBatteryLow >= modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMin) {
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8006964:	edd3 7a05 	vldr	s15, [r3, #20]
 8006968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800696c:	ed92 7a0d 	vldr	s14, [r2, #52]	; 0x34
 8006970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	d81c      	bhi.n	80069b4 <modPowerElectronicsSubTaskVoltageWatch+0x170>
 800697a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800697e:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 8006982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698a:	db13      	blt.n	80069b4 <modPowerElectronicsSubTaskVoltageWatch+0x170>
 800698c:	ed92 7a21 	vldr	s14, [r2, #132]	; 0x84
 8006990:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699c:	db0a      	blt.n	80069b4 <modPowerElectronicsSubTaskVoltageWatch+0x170>
			if(modDelayTick1ms(&modPowerElectronicsChargeRetryLastTick,modPowerElectronicsGeneralConfigHandle->timeoutChargeRetry)){
 800699e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80069a0:	483e      	ldr	r0, [pc, #248]	; (8006a9c <modPowerElectronicsSubTaskVoltageWatch+0x258>)
 80069a2:	f7fe f8bd 	bl	8004b20 <modDelayTick1ms>
 80069a6:	b128      	cbz	r0, 80069b4 <modPowerElectronicsSubTaskVoltageWatch+0x170>
				modPowerElectronicsPackStateHandle->chargeAllowed = true;
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
				modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_NONE;
 80069b0:	2200      	movs	r2, #0
 80069b2:	765a      	strb	r2, [r3, #25]
		if(modPowerElectronicsPackStateHandle->tempBatteryHigh <= modPowerElectronicsGeneralConfigHandle->allowedTempBattCoolingMax && modPowerElectronicsPackStateHandle->tempBatteryLow >= modPowerElectronicsGeneralConfigHandle->allowedTempBattCoolingMin){
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	682a      	ldr	r2, [r5, #0]
 80069b8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80069bc:	edd2 7a28 	vldr	s15, [r2, #160]	; 0xa0
 80069c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	d85c      	bhi.n	8006a84 <modPowerElectronicsSubTaskVoltageWatch+0x240>
 80069ca:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80069ce:	edd2 7a29 	vldr	s15, [r2, #164]	; 0xa4
 80069d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	db53      	blt.n	8006a84 <modPowerElectronicsSubTaskVoltageWatch+0x240>
			modPowerElectronicsPackStateHandle->coolingAllowed = false;
 80069dc:	2200      	movs	r2, #0
			modPowerElectronicsPackStateHandle->coolingAllowed = true;
 80069de:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	if(modPowerElectronicsVoltageSenseError || modPowerElectronicsPackStateHandle->cellVoltageHigh > modPowerElectronicsGeneralConfigHandle-> cellHardOverVoltage || modPowerElectronicsPackStateHandle->cellVoltageLow < modPowerElectronicsGeneralConfigHandle-> cellHardUnderVoltage || (modPowerElectronicsPackStateHandle->packVoltage > modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage)) {
 80069e2:	492f      	ldr	r1, [pc, #188]	; (8006aa0 <modPowerElectronicsSubTaskVoltageWatch+0x25c>)
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	7808      	ldrb	r0, [r1, #0]
 80069e8:	682a      	ldr	r2, [r5, #0]
 80069ea:	492e      	ldr	r1, [pc, #184]	; (8006aa4 <modPowerElectronicsSubTaskVoltageWatch+0x260>)
 80069ec:	b9f8      	cbnz	r0, 8006a2e <modPowerElectronicsSubTaskVoltageWatch+0x1ea>
 80069ee:	ed92 7a03 	vldr	s14, [r2, #12]
 80069f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80069f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	dc16      	bgt.n	8006a2e <modPowerElectronicsSubTaskVoltageWatch+0x1ea>
 8006a00:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8006a04:	edd2 7a02 	vldr	s15, [r2, #8]
 8006a08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a10:	d40d      	bmi.n	8006a2e <modPowerElectronicsSubTaskVoltageWatch+0x1ea>
 8006a12:	7814      	ldrb	r4, [r2, #0]
 8006a14:	ee07 4a90 	vmov	s15, r4
 8006a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a20:	ed93 7a07 	vldr	s14, [r3, #28]
 8006a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2c:	dd2c      	ble.n	8006a88 <modPowerElectronicsSubTaskVoltageWatch+0x244>
		if(modPowerElectronicsUnderAndOverVoltageErrorCount++ > modPowerElectronicsGeneralConfigHandle->maxUnderAndOverVoltageErrorCount){
 8006a2e:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8006a32:	7808      	ldrb	r0, [r1, #0]
 8006a34:	4282      	cmp	r2, r0
			modPowerElectronicsPackStateHandle->packOperationalCellState = PACK_STATE_ERROR_HARD_CELLVOLTAGE;
 8006a36:	bf3e      	ittt	cc
 8006a38:	2200      	movcc	r2, #0
 8006a3a:	f883 2c50 	strbcc.w	r2, [r3, #3152]	; 0xc50
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_MAX_UVP_OVP_ERRORS;
 8006a3e:	220b      	movcc	r2, #11
		if(modPowerElectronicsUnderAndOverVoltageErrorCount++ > modPowerElectronicsGeneralConfigHandle->maxUnderAndOverVoltageErrorCount){
 8006a40:	f100 0401 	add.w	r4, r0, #1
			modPowerElectronicsPackStateHandle->faultState = FAULT_CODE_MAX_UVP_OVP_ERRORS;
 8006a44:	bf38      	it	cc
 8006a46:	765a      	strbcc	r2, [r3, #25]
		modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 8006a48:	2200      	movs	r2, #0
		if(modPowerElectronicsUnderAndOverVoltageErrorCount++ > modPowerElectronicsGeneralConfigHandle->maxUnderAndOverVoltageErrorCount){
 8006a4a:	700c      	strb	r4, [r1, #0]
		modPowerElectronicsPackStateHandle->disChargeLCAllowed = false;
 8006a4c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		modPowerElectronicsPackStateHandle->chargeAllowed = false;
 8006a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	if((lastChargeAllowed != modPowerElectronicsPackStateHandle->chargeAllowed) || (lastdisChargeLCAllowed != modPowerElectronicsPackStateHandle->disChargeLCAllowed)) {
 8006a54:	4814      	ldr	r0, [pc, #80]	; (8006aa8 <modPowerElectronicsSubTaskVoltageWatch+0x264>)
 8006a56:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8006a5a:	7801      	ldrb	r1, [r0, #0]
 8006a5c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006a60:	4291      	cmp	r1, r2
 8006a62:	4912      	ldr	r1, [pc, #72]	; (8006aac <modPowerElectronicsSubTaskVoltageWatch+0x268>)
 8006a64:	d102      	bne.n	8006a6c <modPowerElectronicsSubTaskVoltageWatch+0x228>
 8006a66:	780c      	ldrb	r4, [r1, #0]
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d00f      	beq.n	8006a8c <modPowerElectronicsSubTaskVoltageWatch+0x248>
		lastChargeAllowed = modPowerElectronicsPackStateHandle->chargeAllowed;
 8006a6c:	3a00      	subs	r2, #0
 8006a6e:	bf18      	it	ne
 8006a70:	2201      	movne	r2, #1
		lastdisChargeLCAllowed = modPowerElectronicsPackStateHandle->disChargeLCAllowed;
 8006a72:	3b00      	subs	r3, #0
 8006a74:	bf18      	it	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	700b      	strb	r3, [r1, #0]
};
 8006a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lastChargeAllowed = modPowerElectronicsPackStateHandle->chargeAllowed;
 8006a7e:	7002      	strb	r2, [r0, #0]
		modPowerElectronicsUpdateSwitches();
 8006a80:	f7ff be04 	b.w	800668c <modPowerElectronicsUpdateSwitches>
			modPowerElectronicsPackStateHandle->coolingAllowed = true;
 8006a84:	2201      	movs	r2, #1
 8006a86:	e7aa      	b.n	80069de <modPowerElectronicsSubTaskVoltageWatch+0x19a>
		modPowerElectronicsUnderAndOverVoltageErrorCount = 0;
 8006a88:	7008      	strb	r0, [r1, #0]
 8006a8a:	e7e3      	b.n	8006a54 <modPowerElectronicsSubTaskVoltageWatch+0x210>
};
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
 8006a8e:	bf00      	nop
 8006a90:	200049f0 	.word	0x200049f0
 8006a94:	200049e8 	.word	0x200049e8
 8006a98:	200049e0 	.word	0x200049e0
 8006a9c:	200049dc 	.word	0x200049dc
 8006aa0:	20004a03 	.word	0x20004a03
 8006aa4:	20004a01 	.word	0x20004a01
 8006aa8:	200049b8 	.word	0x200049b8
 8006aac:	200049b9 	.word	0x200049b9

08006ab0 <modPowerElectronicsCalcTempStats>:
	float   tempBMSMax;
	float   tempBMSMin;
	float   tempBMSSum = 0.0f;
	uint8_t tempBMSSumCount = 0;
	
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBattery || modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion){
 8006ab0:	4b71      	ldr	r3, [pc, #452]	; (8006c78 <modPowerElectronicsCalcTempStats+0x1c8>)
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	f8d0 c0dc 	ldr.w	ip, [r0, #220]	; 0xdc
void modPowerElectronicsCalcTempStats(void) {
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBattery || modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion){
 8006abc:	f1bc 0f00 	cmp.w	ip, #0
 8006ac0:	d15d      	bne.n	8006b7e <modPowerElectronicsCalcTempStats+0xce>
 8006ac2:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d159      	bne.n	8006b7e <modPowerElectronicsCalcTempStats+0xce>
		tempBatteryMax = -100.0f;
		tempBatteryMin = 100.0f;
	}else{
		tempBatteryMax = 0.0f;
		tempBatteryMin = 0.0f;
 8006aca:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
		tempBatteryMax = 0.0f;
 8006ace:	eeb0 7a67 	vmov.f32	s14, s15
	}
	
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS){
 8006ad2:	f8d0 50d8 	ldr.w	r5, [r0, #216]	; 0xd8
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	d156      	bne.n	8006b88 <modPowerElectronicsCalcTempStats+0xd8>
		tempBMSMax = -100.0f;
		tempBMSMin = 100.0f;
	}else{
		tempBMSMax = 0.0f;
		tempBMSMin = 0.0f;
 8006ada:	eddf 6a68 	vldr	s13, [pc, #416]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
		tempBMSMax = 0.0f;
 8006ade:	eeb0 6a66 	vmov.f32	s12, s13
	
	// BMS temperatures
	
	for(uint8_t sensorPointer = 1; sensorPointer < 16; sensorPointer++){
		if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS & (1 << sensorPointer)){
			modPowerElectronicsPackStateHandle->temperatures[sensorPointer] = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer-1].auxVoltage;
 8006ae2:	4b67      	ldr	r3, [pc, #412]	; (8006c80 <modPowerElectronicsCalcTempStats+0x1d0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f502 67ca 	add.w	r7, r2, #1616	; 0x650
 8006aec:	f102 014c 	add.w	r1, r2, #76	; 0x4c
 8006af0:	463c      	mov	r4, r7
		if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS & (1 << sensorPointer)){
 8006af2:	461e      	mov	r6, r3
 8006af4:	fa06 fe03 	lsl.w	lr, r6, r3
 8006af8:	ea1e 0f05 	tst.w	lr, r5
			modPowerElectronicsPackStateHandle->temperatures[sensorPointer] = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer-1].auxVoltage;
 8006afc:	bf1c      	itt	ne
 8006afe:	f8d4 e000 	ldrne.w	lr, [r4]
 8006b02:	f8c1 e000 	strne.w	lr, [r1]
	for(uint8_t sensorPointer = 1; sensorPointer < 16; sensorPointer++){
 8006b06:	3301      	adds	r3, #1
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	f104 0408 	add.w	r4, r4, #8
 8006b0e:	f101 0104 	add.w	r1, r1, #4
 8006b12:	d1ef      	bne.n	8006af4 <modPowerElectronicsCalcTempStats+0x44>
 8006b14:	2300      	movs	r3, #0
	float   tempBMSSum = 0.0f;
 8006b16:	eddf 4a59 	vldr	s9, [pc, #356]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
 8006b1a:	f102 0448 	add.w	r4, r2, #72	; 0x48
	uint8_t tempBMSSumCount = 0;
 8006b1e:	4619      	mov	r1, r3
		}
	}
	
	for(uint8_t sensorPointer = 0; sensorPointer < 16; sensorPointer++){
	
		if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS & (1 << sensorPointer)){
 8006b20:	2601      	movs	r6, #1
 8006b22:	fa06 fe03 	lsl.w	lr, r6, r3
 8006b26:	ea1e 0f05 	tst.w	lr, r5
 8006b2a:	d013      	beq.n	8006b54 <modPowerElectronicsCalcTempStats+0xa4>
			if(modPowerElectronicsPackStateHandle->temperatures[sensorPointer] > tempBMSMax)
 8006b2c:	edd4 5a00 	vldr	s11, [r4]
				tempBMSMax = modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b30:	eef4 5a46 	vcmp.f32	s11, s12
 8006b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			
			if(modPowerElectronicsPackStateHandle->temperatures[sensorPointer] < tempBMSMin)
				tempBMSMin = modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b38:	eef4 5a66 	vcmp.f32	s11, s13
				tempBMSMax = modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b3c:	bfc8      	it	gt
 8006b3e:	eeb0 6a65 	vmovgt.f32	s12, s11
			
			tempBMSSum += modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
			tempBMSSumCount++;
 8006b42:	3101      	adds	r1, #1
				tempBMSMin = modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tempBMSSum += modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b48:	ee74 4aa5 	vadd.f32	s9, s9, s11
				tempBMSMin = modPowerElectronicsPackStateHandle->temperatures[sensorPointer];
 8006b4c:	bf48      	it	mi
 8006b4e:	eef0 6a65 	vmovmi.f32	s13, s11
			tempBMSSumCount++;
 8006b52:	b2c9      	uxtb	r1, r1
	for(uint8_t sensorPointer = 0; sensorPointer < 16; sensorPointer++){
 8006b54:	3301      	adds	r3, #1
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	f104 0404 	add.w	r4, r4, #4
 8006b5c:	d1e1      	bne.n	8006b22 <modPowerElectronicsCalcTempStats+0x72>
		}
	}

	// Battery temperatures statistics for LTC aux channels without taking into account the first slave board temp measurement
	
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; sensorModulePointer++) {
 8006b5e:	2500      	movs	r5, #0
 8006b60:	f890 80f0 	ldrb.w	r8, [r0, #240]	; 0xf0
	float   tempBatterySum = 0.0f;
 8006b64:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
	uint8_t tempBatterySumCount = 0;
 8006b68:	462b      	mov	r3, r5
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; sensorPointer++) {
			if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBattery & (1 << sensorPointer)){
 8006b6a:	f04f 0901 	mov.w	r9, #1
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; sensorModulePointer++) {
 8006b6e:	b2ec      	uxtb	r4, r5
 8006b70:	45a0      	cmp	r8, r4
 8006b72:	d92f      	bls.n	8006bd4 <modPowerElectronicsCalcTempStats+0x124>
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; sensorPointer++) {
 8006b74:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
 8006b78:	463e      	mov	r6, r7
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	e024      	b.n	8006bc8 <modPowerElectronicsCalcTempStats+0x118>
		tempBatteryMin = 100.0f;
 8006b7e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8006c84 <modPowerElectronicsCalcTempStats+0x1d4>
		tempBatteryMax = -100.0f;
 8006b82:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006c88 <modPowerElectronicsCalcTempStats+0x1d8>
 8006b86:	e7a4      	b.n	8006ad2 <modPowerElectronicsCalcTempStats+0x22>
		tempBMSMin = 100.0f;
 8006b88:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006c84 <modPowerElectronicsCalcTempStats+0x1d4>
		tempBMSMax = -100.0f;
 8006b8c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8006c88 <modPowerElectronicsCalcTempStats+0x1d8>
 8006b90:	e7a7      	b.n	8006ae2 <modPowerElectronicsCalcTempStats+0x32>
			if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBattery & (1 << sensorPointer)){
 8006b92:	fa09 fa04 	lsl.w	sl, r9, r4
 8006b96:	ea1a 0f0c 	tst.w	sl, ip
 8006b9a:	d013      	beq.n	8006bc4 <modPowerElectronicsCalcTempStats+0x114>
				if(modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage > tempBatteryMax)
 8006b9c:	ed96 5a00 	vldr	s10, [r6]
					tempBatteryMax = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;
 8006ba0:	eeb4 5a47 	vcmp.f32	s10, s14
 8006ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				
				if(modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage < tempBatteryMin)
					tempBatteryMin = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;
 8006ba8:	eeb4 5a67 	vcmp.f32	s10, s15
					tempBatteryMax = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;
 8006bac:	bfc8      	it	gt
 8006bae:	eeb0 7a45 	vmovgt.f32	s14, s10
				
				tempBatterySum += modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;		
				tempBatterySumCount++;
 8006bb2:	3301      	adds	r3, #1
					tempBatteryMin = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				tempBatterySum += modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;		
 8006bb8:	ee75 5a85 	vadd.f32	s11, s11, s10
					tempBatteryMin = modPowerElectronicsPackStateHandle->auxVoltagesIndividual[sensorPointer].auxVoltage;
 8006bbc:	bf48      	it	mi
 8006bbe:	eef0 7a45 	vmovmi.f32	s15, s10
				tempBatterySumCount++;
 8006bc2:	b2db      	uxtb	r3, r3
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; sensorPointer++) {
 8006bc4:	3401      	adds	r4, #1
 8006bc6:	3608      	adds	r6, #8
 8006bc8:	fa5f fa84 	uxtb.w	sl, r4
 8006bcc:	45d6      	cmp	lr, sl
 8006bce:	d8e0      	bhi.n	8006b92 <modPowerElectronicsCalcTempStats+0xe2>
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; sensorModulePointer++) {
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7cc      	b.n	8006b6e <modPowerElectronicsCalcTempStats+0xbe>
			}
		}
	}
	
	// Battery temperatures statistics for expansion board
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; sensorModulePointer++) {
 8006bd4:	f890 80e5 	ldrb.w	r8, [r0, #229]	; 0xe5
 8006bd8:	2600      	movs	r6, #0
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; sensorPointer++) {
			if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion & (1 << sensorPointer)){
 8006bda:	f04f 0901 	mov.w	r9, #1
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; sensorModulePointer++) {
 8006bde:	b2f4      	uxtb	r4, r6
 8006be0:	45a0      	cmp	r8, r4
 8006be2:	d927      	bls.n	8006c34 <modPowerElectronicsCalcTempStats+0x184>
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; sensorPointer++) {
 8006be4:	f890 e0e6 	ldrb.w	lr, [r0, #230]	; 0xe6
 8006be8:	f502 6521 	add.w	r5, r2, #2576	; 0xa10
 8006bec:	2400      	movs	r4, #0
 8006bee:	e01c      	b.n	8006c2a <modPowerElectronicsCalcTempStats+0x17a>
			if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion & (1 << sensorPointer)){
 8006bf0:	f8d0 70e0 	ldr.w	r7, [r0, #224]	; 0xe0
 8006bf4:	fa09 fc04 	lsl.w	ip, r9, r4
 8006bf8:	ea1c 0f07 	tst.w	ip, r7
 8006bfc:	d013      	beq.n	8006c26 <modPowerElectronicsCalcTempStats+0x176>
				if(modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage > tempBatteryMax)
 8006bfe:	ed95 5a00 	vldr	s10, [r5]
					tempBatteryMax = modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c02:	eeb4 5a47 	vcmp.f32	s10, s14
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			
				if(modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage < tempBatteryMin)
					tempBatteryMin = modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c0a:	eeb4 5a67 	vcmp.f32	s10, s15
					tempBatteryMax = modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c0e:	bfc8      	it	gt
 8006c10:	eeb0 7a45 	vmovgt.f32	s14, s10
		
			tempBatterySum += modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
			tempBatterySumCount++;		
 8006c14:	3301      	adds	r3, #1
					tempBatteryMin = modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tempBatterySum += modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c1a:	ee75 5a85 	vadd.f32	s11, s11, s10
					tempBatteryMin = modPowerElectronicsPackStateHandle->expVoltagesIndividual[sensorPointer].expVoltage;
 8006c1e:	bf48      	it	mi
 8006c20:	eef0 7a45 	vmovmi.f32	s15, s10
			tempBatterySumCount++;		
 8006c24:	b2db      	uxtb	r3, r3
		for(uint8_t sensorPointer = 0; sensorPointer < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; sensorPointer++) {
 8006c26:	3401      	adds	r4, #1
 8006c28:	3508      	adds	r5, #8
 8006c2a:	b2e7      	uxtb	r7, r4
 8006c2c:	4577      	cmp	r7, lr
 8006c2e:	d3df      	bcc.n	8006bf0 <modPowerElectronicsCalcTempStats+0x140>
	for(uint8_t sensorModulePointer = 0; sensorModulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; sensorModulePointer++) {
 8006c30:	3601      	adds	r6, #1
 8006c32:	e7d4      	b.n	8006bde <modPowerElectronicsCalcTempStats+0x12e>
}
	

	
	// Battery temperatures
	modPowerElectronicsPackStateHandle->tempBatteryHigh    = tempBatteryMax;
 8006c34:	ed82 7a20 	vstr	s14, [r2, #128]	; 0x80
	modPowerElectronicsPackStateHandle->tempBatteryLow     = tempBatteryMin;
 8006c38:	edc2 7a21 	vstr	s15, [r2, #132]	; 0x84
	if(tempBatterySumCount)
 8006c3c:	b1b3      	cbz	r3, 8006c6c <modPowerElectronicsCalcTempStats+0x1bc>
		modPowerElectronicsPackStateHandle->tempBatteryAverage = tempBatterySum/tempBatterySumCount;
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c46:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006c4a:	ed82 7a22 	vstr	s14, [r2, #136]	; 0x88
	else
		modPowerElectronicsPackStateHandle->tempBatteryAverage = 0.0f;
	
	// BMS temperatures
	modPowerElectronicsPackStateHandle->tempBMSHigh        = tempBMSMax;
 8006c4e:	ed82 6a23 	vstr	s12, [r2, #140]	; 0x8c
	modPowerElectronicsPackStateHandle->tempBMSLow         = tempBMSMin;
 8006c52:	edc2 6a24 	vstr	s13, [r2, #144]	; 0x90
	if(tempBMSSumCount)
 8006c56:	b161      	cbz	r1, 8006c72 <modPowerElectronicsCalcTempStats+0x1c2>
		modPowerElectronicsPackStateHandle->tempBMSAverage = tempBMSSum/tempBMSSumCount;
 8006c58:	ee07 1a90 	vmov	s15, r1
 8006c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c60:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8006c64:	ed82 7a25 	vstr	s14, [r2, #148]	; 0x94
	else
		modPowerElectronicsPackStateHandle->tempBMSAverage = 0.0f;
};
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		modPowerElectronicsPackStateHandle->tempBatteryAverage = 0.0f;
 8006c6c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
 8006c70:	e7eb      	b.n	8006c4a <modPowerElectronicsCalcTempStats+0x19a>
		modPowerElectronicsPackStateHandle->tempBMSAverage = 0.0f;
 8006c72:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8006c7c <modPowerElectronicsCalcTempStats+0x1cc>
 8006c76:	e7f5      	b.n	8006c64 <modPowerElectronicsCalcTempStats+0x1b4>
 8006c78:	200049e8 	.word	0x200049e8
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	200049f0 	.word	0x200049f0
 8006c84:	42c80000 	.word	0x42c80000
 8006c88:	c2c80000 	.word	0xc2c80000

08006c8c <modPowerElectronicsMapVariableFloat>:
	
	return (inputVariable - inputLowerLimit) * (outputUpperLimit - outputLowerLimit) / (inputUpperLimit - inputLowerLimit) + outputLowerLimit;
}

float modPowerElectronicsMapVariableFloat(float inputVariable, float inputLowerLimit, float inputUpperLimit, float outputLowerLimit, float outputUpperLimit) {
	inputVariable = inputVariable < inputLowerLimit ? inputLowerLimit : inputVariable;
 8006c8c:	eeb4 0a60 	vcmp.f32	s0, s1
 8006c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c94:	bf48      	it	mi
 8006c96:	eeb0 0a60 	vmovmi.f32	s0, s1
	inputVariable = inputVariable > inputUpperLimit ? inputUpperLimit : inputVariable;
 8006c9a:	eeb4 0a41 	vcmp.f32	s0, s2
 8006c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca2:	bfc8      	it	gt
 8006ca4:	eeb0 0a41 	vmovgt.f32	s0, s2
	
	return (inputVariable - inputLowerLimit) * (outputUpperLimit - outputLowerLimit) / (inputUpperLimit - inputLowerLimit) + outputLowerLimit;
 8006ca8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006cac:	ee32 2a61 	vsub.f32	s4, s4, s3
 8006cb0:	ee31 1a60 	vsub.f32	s2, s2, s1
 8006cb4:	ee20 0a02 	vmul.f32	s0, s0, s4
 8006cb8:	eec0 7a01 	vdiv.f32	s15, s0, s2
}
 8006cbc:	ee37 0aa1 	vadd.f32	s0, s15, s3
 8006cc0:	4770      	bx	lr

08006cc2 <modPowerElectronicsInitISL>:

void modPowerElectronicsInitISL(void) {
 8006cc2:	b082      	sub	sp, #8
	// Init BUS monitor

	driverSWISL28022InitStruct ISLInitStruct;
	ISLInitStruct.ADCSetting = ADC_128_64010US;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	f88d 3006 	strb.w	r3, [sp, #6]
	ISLInitStruct.busVoltageRange = BRNG_60V_1;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	f88d 3004 	strb.w	r3, [sp, #4]
	ISLInitStruct.currentShuntGain = PGA_8_320MV;
 8006cd0:	f88d 3005 	strb.w	r3, [sp, #5]
	ISLInitStruct.Mode = MODE_SHUNTANDBUS_CONTINIOUS;
 8006cd4:	2307      	movs	r3, #7
 8006cd6:	f88d 3007 	strb.w	r3, [sp, #7]
	driverSWISL28022Init(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,ISLInitStruct);
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	2102      	movs	r1, #2
 8006cde:	2040      	movs	r0, #64	; 0x40
}
 8006ce0:	b002      	add	sp, #8
	driverSWISL28022Init(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,ISLInitStruct);
 8006ce2:	f002 bf8f 	b.w	8009c04 <driverSWISL28022Init>
	...

08006ce8 <modPowerElectronicsCheckPackSOA>:
	driverSWINA226Init(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,INAInitStruct);

}
*/

void modPowerElectronicsCheckPackSOA(void) {
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	bool outsideLimitsBMS       = false;
	bool outsideLimitsDischarge = false;
	bool outsideLimitsCharge    = false;	
	
	outsideLimitsBMS |= (modPowerElectronicsVinErrorCount >= VinErrorThreshold) ? true : false;
 8006cea:	4b63      	ldr	r3, [pc, #396]	; (8006e78 <modPowerElectronicsCheckPackSOA+0x190>)
 8006cec:	781e      	ldrb	r6, [r3, #0]
	
	// Check BMS Limits
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS) {
 8006cee:	4b63      	ldr	r3, [pc, #396]	; (8006e7c <modPowerElectronicsCheckPackSOA+0x194>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
	outsideLimitsBMS |= (modPowerElectronicsVinErrorCount >= VinErrorThreshold) ? true : false;
 8006cf6:	2e09      	cmp	r6, #9
 8006cf8:	bf94      	ite	ls
 8006cfa:	2600      	movls	r6, #0
 8006cfc:	2601      	movhi	r6, #1
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBMS) {
 8006cfe:	b32b      	cbz	r3, 8006d4c <modPowerElectronicsCheckPackSOA+0x64>
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSHigh     > (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMax + hysteresysBMS) ) ? true : false;
 8006d00:	4b5f      	ldr	r3, [pc, #380]	; (8006e80 <modPowerElectronicsCheckPackSOA+0x198>)
 8006d02:	4960      	ldr	r1, [pc, #384]	; (8006e84 <modPowerElectronicsCheckPackSOA+0x19c>)
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	edd1 6a00 	vldr	s13, [r1]
 8006d0a:	ed92 7a2a 	vldr	s14, [r2, #168]	; 0xa8
 8006d0e:	edd0 7a23 	vldr	s15, [r0, #140]	; 0x8c
 8006d12:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006d16:	eef4 7ac7 	vcmpe.f32	s15, s14
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSLow      < (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMin - hysteresysBMS) ) ? true : false;
 8006d1a:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
 8006d1e:	ed90 7a24 	vldr	s14, [r0, #144]	; 0x90
 8006d22:	ee77 7ae6 	vsub.f32	s15, s15, s13
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSHigh     > (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMax + hysteresysBMS) ) ? true : false;
 8006d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSLow      < (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMin - hysteresysBMS) ) ? true : false;
 8006d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSHigh     > (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMax + hysteresysBMS) ) ? true : false;
 8006d2e:	bfcc      	ite	gt
 8006d30:	2301      	movgt	r3, #1
 8006d32:	2300      	movle	r3, #0
		outsideLimitsBMS       |= (modPowerElectronicsPackStateHandle->tempBMSLow      < (modPowerElectronicsGeneralConfigHandle->allowedTempBMSMin - hysteresysBMS) ) ? true : false;
 8006d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d38:	bf48      	it	mi
 8006d3a:	f043 0301 	orrmi.w	r3, r3, #1
		
    if(outsideLimitsBMS)
 8006d3e:	431e      	orrs	r6, r3
			hysteresysBMS = -2.0f;
 8006d40:	bf14      	ite	ne
 8006d42:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
		else
			hysteresysBMS = 2.0f;
 8006d46:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8006d4a:	600b      	str	r3, [r1, #0]
	}
	
	// Check Battery Limits discharge
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskBattery || modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion) {
 8006d4c:	e9d2 3437 	ldrd	r3, r4, [r2, #220]	; 0xdc
 8006d50:	4323      	orrs	r3, r4
 8006d52:	d07c      	beq.n	8006e4e <modPowerElectronicsCheckPackSOA+0x166>
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMax + hysteresysDischarge) ) ? true : false;
 8006d54:	484a      	ldr	r0, [pc, #296]	; (8006e80 <modPowerElectronicsCheckPackSOA+0x198>)
 8006d56:	494c      	ldr	r1, [pc, #304]	; (8006e88 <modPowerElectronicsCheckPackSOA+0x1a0>)
 8006d58:	6807      	ldr	r7, [r0, #0]
 8006d5a:	edd1 6a00 	vldr	s13, [r1]
 8006d5e:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 8006d62:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006d66:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMin - hysteresysDischarge) ) ? true : false;
 8006d6e:	edd2 7a25 	vldr	s15, [r2, #148]	; 0x94
 8006d72:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8006d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMax + hysteresysDischarge) ) ? true : false;
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMin - hysteresysDischarge) ) ? true : false;
 8006d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMax + hysteresysDischarge) ) ? true : false;
 8006d82:	bfcc      	ite	gt
 8006d84:	2301      	movgt	r3, #1
 8006d86:	2300      	movle	r3, #0
		outsideLimitsDischarge |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMin - hysteresysDischarge) ) ? true : false;
 8006d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8c:	bf54      	ite	pl
 8006d8e:	461d      	movpl	r5, r3
 8006d90:	f043 0501 	orrmi.w	r5, r3, #1
		
    if(outsideLimitsDischarge)
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	d054      	beq.n	8006e42 <modPowerElectronicsCheckPackSOA+0x15a>
			hysteresysDischarge = -2.0f;
 8006d98:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
		else
			hysteresysDischarge = 2.0f;
 8006d9c:	600b      	str	r3, [r1, #0]
	}
	
	// Check Battery Limits charge
	if(modPowerElectronicsGeneralConfigHandle->tempEnableMaskExpansion) {
 8006d9e:	b30c      	cbz	r4, 8006de4 <modPowerElectronicsCheckPackSOA+0xfc>
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax + hysteresysCharge) ) ? true : false;
 8006da0:	4b3a      	ldr	r3, [pc, #232]	; (8006e8c <modPowerElectronicsCheckPackSOA+0x1a4>)
 8006da2:	6801      	ldr	r1, [r0, #0]
 8006da4:	edd3 6a00 	vldr	s13, [r3]
 8006da8:	ed92 7a26 	vldr	s14, [r2, #152]	; 0x98
 8006dac:	edd1 7a20 	vldr	s15, [r1, #128]	; 0x80
 8006db0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006db4:	eef4 7ac7 	vcmpe.f32	s15, s14
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMin - hysteresysCharge) ) ? true : false;
 8006db8:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
 8006dbc:	ed91 7a21 	vldr	s14, [r1, #132]	; 0x84
 8006dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax + hysteresysCharge) ) ? true : false;
 8006dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMin - hysteresysCharge) ) ? true : false;
 8006dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryHigh > (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax + hysteresysCharge) ) ? true : false;
 8006dcc:	bfcc      	ite	gt
 8006dce:	2401      	movgt	r4, #1
 8006dd0:	2400      	movle	r4, #0
		outsideLimitsCharge    |= (modPowerElectronicsPackStateHandle->tempBatteryLow  < (modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMin - hysteresysCharge) ) ? true : false;
 8006dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd6:	bf48      	it	mi
 8006dd8:	f044 0401 	orrmi.w	r4, r4, #1

    if(outsideLimitsCharge)
 8006ddc:	b3a4      	cbz	r4, 8006e48 <modPowerElectronicsCheckPackSOA+0x160>
			hysteresysCharge = -2.0f;
 8006dde:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
		else
			hysteresysCharge = 2.0f;
 8006de2:	601a      	str	r2, [r3, #0]
	}
	
	// DisCharge delayed response
	if(lastPackInSOADisCharge != !(outsideLimitsBMS || outsideLimitsDischarge)){
 8006de4:	4f2a      	ldr	r7, [pc, #168]	; (8006e90 <modPowerElectronicsCheckPackSOA+0x1a8>)
 8006de6:	783a      	ldrb	r2, [r7, #0]
 8006de8:	bba6      	cbnz	r6, 8006e54 <modPowerElectronicsCheckPackSOA+0x16c>
 8006dea:	f085 0301 	eor.w	r3, r5, #1
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d034      	beq.n	8006e5c <modPowerElectronicsCheckPackSOA+0x174>
		if(modDelayTick1ms(&modPowerElectronicsSOADisChargeChangeLastTick,1000)) {
 8006df2:	4828      	ldr	r0, [pc, #160]	; (8006e94 <modPowerElectronicsCheckPackSOA+0x1ac>)
 8006df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006df8:	f7fd fe92 	bl	8004b20 <modDelayTick1ms>
 8006dfc:	b148      	cbz	r0, 8006e12 <modPowerElectronicsCheckPackSOA+0x12a>
			lastPackInSOADisCharge = modPowerElectronicsPackStateHandle->packInSOADischarge = !(outsideLimitsBMS || outsideLimitsDischarge);
 8006dfe:	bb5e      	cbnz	r6, 8006e58 <modPowerElectronicsCheckPackSOA+0x170>
 8006e00:	f085 0301 	eor.w	r3, r5, #1
 8006e04:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <modPowerElectronicsCheckPackSOA+0x198>)
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	f882 30a9 	strb.w	r3, [r2, #169]	; 0xa9
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	703b      	strb	r3, [r7, #0]
	}else{
		modPowerElectronicsSOADisChargeChangeLastTick = HAL_GetTick();
	}	
	
	// Charge delayed response
	if(lastPackInSOACharge != !(outsideLimitsBMS || outsideLimitsCharge)){
 8006e12:	4d21      	ldr	r5, [pc, #132]	; (8006e98 <modPowerElectronicsCheckPackSOA+0x1b0>)
 8006e14:	782a      	ldrb	r2, [r5, #0]
 8006e16:	bb36      	cbnz	r6, 8006e66 <modPowerElectronicsCheckPackSOA+0x17e>
 8006e18:	f084 0301 	eor.w	r3, r4, #1
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d026      	beq.n	8006e6e <modPowerElectronicsCheckPackSOA+0x186>
		if(modDelayTick1ms(&modPowerElectronicsSOAChargeChangeLastTick,1000)) {
 8006e20:	481e      	ldr	r0, [pc, #120]	; (8006e9c <modPowerElectronicsCheckPackSOA+0x1b4>)
 8006e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e26:	f7fd fe7b 	bl	8004b20 <modDelayTick1ms>
 8006e2a:	b148      	cbz	r0, 8006e40 <modPowerElectronicsCheckPackSOA+0x158>
			lastPackInSOACharge = modPowerElectronicsPackStateHandle->packInSOACharge = !(outsideLimitsBMS || outsideLimitsCharge);
 8006e2c:	b9ee      	cbnz	r6, 8006e6a <modPowerElectronicsCheckPackSOA+0x182>
 8006e2e:	f084 0401 	eor.w	r4, r4, #1
 8006e32:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <modPowerElectronicsCheckPackSOA+0x198>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f883 40aa 	strb.w	r4, [r3, #170]	; 0xaa
 8006e3a:	f004 0401 	and.w	r4, r4, #1
 8006e3e:	702c      	strb	r4, [r5, #0]
		}
	}else{
		modPowerElectronicsSOAChargeChangeLastTick = HAL_GetTick();
	}
}
 8006e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			hysteresysDischarge = 2.0f;
 8006e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e46:	e7a9      	b.n	8006d9c <modPowerElectronicsCheckPackSOA+0xb4>
			hysteresysCharge = 2.0f;
 8006e48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e4c:	e7c9      	b.n	8006de2 <modPowerElectronicsCheckPackSOA+0xfa>
	bool outsideLimitsDischarge = false;
 8006e4e:	461d      	mov	r5, r3
	bool outsideLimitsCharge    = false;	
 8006e50:	461c      	mov	r4, r3
 8006e52:	e7c7      	b.n	8006de4 <modPowerElectronicsCheckPackSOA+0xfc>
	if(lastPackInSOADisCharge != !(outsideLimitsBMS || outsideLimitsDischarge)){
 8006e54:	2300      	movs	r3, #0
 8006e56:	e7ca      	b.n	8006dee <modPowerElectronicsCheckPackSOA+0x106>
			lastPackInSOADisCharge = modPowerElectronicsPackStateHandle->packInSOADischarge = !(outsideLimitsBMS || outsideLimitsDischarge);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e7d3      	b.n	8006e04 <modPowerElectronicsCheckPackSOA+0x11c>
		modPowerElectronicsSOADisChargeChangeLastTick = HAL_GetTick();
 8006e5c:	f003 ffae 	bl	800adbc <HAL_GetTick>
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <modPowerElectronicsCheckPackSOA+0x1ac>)
 8006e62:	6018      	str	r0, [r3, #0]
 8006e64:	e7d5      	b.n	8006e12 <modPowerElectronicsCheckPackSOA+0x12a>
	if(lastPackInSOACharge != !(outsideLimitsBMS || outsideLimitsCharge)){
 8006e66:	2300      	movs	r3, #0
 8006e68:	e7d8      	b.n	8006e1c <modPowerElectronicsCheckPackSOA+0x134>
			lastPackInSOACharge = modPowerElectronicsPackStateHandle->packInSOACharge = !(outsideLimitsBMS || outsideLimitsCharge);
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	e7e1      	b.n	8006e32 <modPowerElectronicsCheckPackSOA+0x14a>
		modPowerElectronicsSOAChargeChangeLastTick = HAL_GetTick();
 8006e6e:	f003 ffa5 	bl	800adbc <HAL_GetTick>
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <modPowerElectronicsCheckPackSOA+0x1b4>)
 8006e74:	6018      	str	r0, [r3, #0]
}
 8006e76:	e7e3      	b.n	8006e40 <modPowerElectronicsCheckPackSOA+0x158>
 8006e78:	20004a02 	.word	0x20004a02
 8006e7c:	200049e8 	.word	0x200049e8
 8006e80:	200049f0 	.word	0x200049f0
 8006e84:	2000001c 	.word	0x2000001c
 8006e88:	20000024 	.word	0x20000024
 8006e8c:	20000020 	.word	0x20000020
 8006e90:	20000029 	.word	0x20000029
 8006e94:	200049f8 	.word	0x200049f8
 8006e98:	20000028 	.word	0x20000028
 8006e9c:	200049f4 	.word	0x200049f4

08006ea0 <modPowerElectronicsHCSafetyCANAndPowerButtonCheck>:

bool modPowerElectronicsHCSafetyCANAndPowerButtonCheck(void) {
	if(modPowerElectronicsGeneralConfigHandle->useCANSafetyInput)
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <modPowerElectronicsHCSafetyCANAndPowerButtonCheck+0x2c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
 8006ea8:	b16a      	cbz	r2, 8006ec6 <modPowerElectronicsHCSafetyCANAndPowerButtonCheck+0x26>
		return (modPowerElectronicsPackStateHandle->safetyOverCANHCSafeNSafe && (modPowerElectronicsPackStateHandle->powerButtonActuated | modPowerElectronicsGeneralConfigHandle->pulseToggleButton));
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <modPowerElectronicsHCSafetyCANAndPowerButtonCheck+0x30>)
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	f892 00a4 	ldrb.w	r0, [r2, #164]	; 0xa4
 8006eb2:	b148      	cbz	r0, 8006ec8 <modPowerElectronicsHCSafetyCANAndPowerButtonCheck+0x28>
 8006eb4:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8006eb8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	bf14      	ite	ne
 8006ec0:	2001      	movne	r0, #1
 8006ec2:	2000      	moveq	r0, #0
 8006ec4:	4770      	bx	lr
	else
		return true;
 8006ec6:	2001      	movs	r0, #1
}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	200049e8 	.word	0x200049e8
 8006ed0:	200049f0 	.word	0x200049f0

08006ed4 <modPowerElectronicsResetBalanceModeActiveTimeout>:

void modPowerElectronicsResetBalanceModeActiveTimeout(void) {
 8006ed4:	b508      	push	{r3, lr}
	modPowerElectronicsBalanceModeActiveLastTick = HAL_GetTick();
 8006ed6:	f003 ff71 	bl	800adbc <HAL_GetTick>
 8006eda:	4b01      	ldr	r3, [pc, #4]	; (8006ee0 <modPowerElectronicsResetBalanceModeActiveTimeout+0xc>)
 8006edc:	6018      	str	r0, [r3, #0]
}
 8006ede:	bd08      	pop	{r3, pc}
 8006ee0:	200049bc 	.word	0x200049bc

08006ee4 <modPowerElectronicsCellMonitorsInit>:

void modPowerElectronicsCellMonitorsInit(void){
 8006ee4:	b530      	push	{r4, r5, lr}

			driverLTC6804ConfigStructTypedef configStruct;
			configStruct.GPIO1                    = true;																														// Do not pull down this pin (false = pull down)
 8006ee6:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
void modPowerElectronicsCellMonitorsInit(void){
 8006eea:	b091      	sub	sp, #68	; 0x44
			configStruct.GPIO2                    = true;																														// 
			configStruct.GPIO3                    = true;																														// 
			configStruct.GPIO4                    = true;																														// 
			configStruct.GPIO5                    = true;																														//
 8006eec:	e9cd 3308 	strd	r3, r3, [sp, #32]
			configStruct.GPIO7                    = true;																														//
			configStruct.GPIO8                    = true;																														//
			configStruct.GPIO9                    = true;																														//
			configStruct.ReferenceON              = true;																														// Reference ON
			configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
			configStruct.noOfCells                = modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;			// Number of cells to monitor (that can cause interrupt)
 8006ef0:	4d18      	ldr	r5, [pc, #96]	; (8006f54 <modPowerElectronicsCellMonitorsInit+0x70>)
			configStruct.GPIO9                    = true;																														//
 8006ef2:	f240 1301 	movw	r3, #257	; 0x101
 8006ef6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
			configStruct.ADCOption                = true;																											  		// ADC Option register for configuration of over sampling ratio
 8006efa:	2301      	movs	r3, #1
 8006efc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
			configStruct.noOfCells                = modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule;			// Number of cells to monitor (that can cause interrupt)
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	789a      	ldrb	r2, [r3, #2]
 8006f04:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			configStruct.DisChargeEnableMask      = 0x00000000;																									// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
			configStruct.DischargeTimout          = 0;																											// Discharge timout value / limit
			configStruct.CellUnderVoltageLimit    = modPowerElectronicsGeneralConfigHandle->cellHardUnderVoltage; // Undervoltage level, cell voltages under this limit will cause interrupt
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	920e      	str	r2, [sp, #56]	; 0x38
			configStruct.CellOverVoltageLimit     = modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage;  // Over voltage limit, cell voltages over this limit will cause interrupt
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	920f      	str	r2, [sp, #60]	; 0x3c
			driverSWLTC6804Init(configStruct, modPowerElectronicsGeneralConfigHandle->cellMonitorICCount, 18, 12, modPowerElectronicsGeneralConfigHandle->cellMonitorType);   
 8006f10:	f893 20ef 	ldrb.w	r2, [r3, #239]	; 0xef
 8006f14:	9207      	str	r2, [sp, #28]
 8006f16:	210c      	movs	r1, #12
 8006f18:	2212      	movs	r2, #18
 8006f1a:	e9cd 2105 	strd	r2, r1, [sp, #20]
			configStruct.DisChargeEnableMask      = 0x00000000;																									// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 8006f1e:	2400      	movs	r4, #0
			driverSWLTC6804Init(configStruct, modPowerElectronicsGeneralConfigHandle->cellMonitorICCount, 18, 12, modPowerElectronicsGeneralConfigHandle->cellMonitorType);   
 8006f20:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006f24:	9304      	str	r3, [sp, #16]
			configStruct.DisChargeEnableMask      = 0x00000000;																									// Set enable state of discharge, 1=EnableDischarge, 0=DisableDischarge
 8006f26:	940c      	str	r4, [sp, #48]	; 0x30
			configStruct.DischargeTimout          = 0;																											// Discharge timout value / limit
 8006f28:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
			driverSWLTC6804Init(configStruct, modPowerElectronicsGeneralConfigHandle->cellMonitorICCount, 18, 12, modPowerElectronicsGeneralConfigHandle->cellMonitorType);   
 8006f2c:	ab10      	add	r3, sp, #64	; 0x40
 8006f2e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8006f32:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8006f36:	ab08      	add	r3, sp, #32
 8006f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f3a:	f002 fd39 	bl	80099b0 <driverSWLTC6804Init>
			
			// Safety signal is managed by the controller, it is configured as open drain and will be kept low by. watchdog will make the output to be released.
			driverHWSwitchesSetSwitchState(SWITCH_SAFETY_OUTPUT,SWITCH_RESET);
 8006f3e:	4621      	mov	r1, r4
 8006f40:	2005      	movs	r0, #5
 8006f42:	f003 fe0d 	bl	800ab60 <driverHWSwitchesSetSwitchState>

	
	modPowerElectronicsCellMonitorsTypeActive = (configCellMonitorICTypeEnum)modPowerElectronicsGeneralConfigHandle->cellMonitorType;
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	f893 20ef 	ldrb.w	r2, [r3, #239]	; 0xef
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <modPowerElectronicsCellMonitorsInit+0x74>)
 8006f4e:	701a      	strb	r2, [r3, #0]
}
 8006f50:	b011      	add	sp, #68	; 0x44
 8006f52:	bd30      	pop	{r4, r5, pc}
 8006f54:	200049e8 	.word	0x200049e8
 8006f58:	200049c8 	.word	0x200049c8

08006f5c <modPowerElectronicsCellMonitorsArrayTranslate>:
				//Read exp voltages
			driverSWADC128D818ReadExpVoltagesArray(modPowerElectronicsPackStateHandle->expModuleVoltages,modPowerElectronicsGeneralConfigHandle->NTC25DegResistance[modConfigNTCGroupExp],modPowerElectronicsGeneralConfigHandle->NTCTopResistor[modConfigNTCGroupExp],modPowerElectronicsGeneralConfigHandle->NTCBetaFactor[modConfigNTCGroupExp],25.0f);
			modPowerElectronicsExpMonitorsArrayTranslate();
}

void modPowerElectronicsCellMonitorsArrayTranslate(void) {
 8006f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t individualCellPointer = 0;
	
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006f5e:	4b23      	ldr	r3, [pc, #140]	; (8006fec <modPowerElectronicsCellMonitorsArrayTranslate+0x90>)
 8006f60:	681d      	ldr	r5, [r3, #0]
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellVoltage = modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][modulePointerCell];
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
			}
		}else{ // use noOfCellsPerModule as usually
			for(uint8_t modulePointerCell = 0; modulePointerCell < modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule; modulePointerCell++) {
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellVoltage = modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][modulePointerCell];
 8006f62:	4b23      	ldr	r3, [pc, #140]	; (8006ff0 <modPowerElectronicsCellMonitorsArrayTranslate+0x94>)
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006f64:	f895 70f0 	ldrb.w	r7, [r5, #240]	; 0xf0
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellVoltage = modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][modulePointerCell];
 8006f68:	681c      	ldr	r4, [r3, #0]
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f604 4654 	addw	r6, r4, #3156	; 0xc54
	uint8_t individualCellPointer = 0;
 8006f70:	4603      	mov	r3, r0
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006f72:	fa5f fc80 	uxtb.w	ip, r0
 8006f76:	4567      	cmp	r7, ip
 8006f78:	d800      	bhi.n	8006f7c <modPowerElectronicsCellMonitorsArrayTranslate+0x20>
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
			}
		};
	}
}
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if((modulePointer+1) % (modPowerElectronicsGeneralConfigHandle->cellMonitorICCount/modPowerElectronicsGeneralConfigHandle->noOfParallelModules)==0 && modulePointer != 0){ // If end of serie string, use lastICNoOfCells instead of noOfCellsPerModule
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	78ea      	ldrb	r2, [r5, #3]
 8006f80:	fbb7 f2f2 	udiv	r2, r7, r2
 8006f84:	fbb0 f1f2 	udiv	r1, r0, r2
 8006f88:	fb02 0211 	mls	r2, r2, r1, r0
 8006f8c:	b962      	cbnz	r2, 8006fa8 <modPowerElectronicsCellMonitorsArrayTranslate+0x4c>
 8006f8e:	f1bc 0f00 	cmp.w	ip, #0
 8006f92:	d009      	beq.n	8006fa8 <modPowerElectronicsCellMonitorsArrayTranslate+0x4c>
 8006f94:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
 8006f98:	441a      	add	r2, r3
 8006f9a:	b2d2      	uxtb	r2, r2
			for(uint8_t modulePointerCell = 0; modulePointerCell < modPowerElectronicsGeneralConfigHandle->lastICNoOfCells; modulePointerCell++) {
 8006f9c:	46b4      	mov	ip, r6
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d116      	bne.n	8006fd0 <modPowerElectronicsCellMonitorsArrayTranslate+0x74>
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006fa2:	3648      	adds	r6, #72	; 0x48
	uint8_t individualCellPointer = 0;
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	e7e4      	b.n	8006f72 <modPowerElectronicsCellMonitorsArrayTranslate+0x16>
 8006fa8:	78aa      	ldrb	r2, [r5, #2]
 8006faa:	441a      	add	r2, r3
 8006fac:	b2d2      	uxtb	r2, r2
			for(uint8_t modulePointerCell = 0; modulePointerCell < modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule; modulePointerCell++) {
 8006fae:	46b4      	mov	ip, r6
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d0f6      	beq.n	8006fa2 <modPowerElectronicsCellMonitorsArrayTranslate+0x46>
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellVoltage = modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][modulePointerCell];
 8006fb4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8006fb8:	f85c eb04 	ldr.w	lr, [ip], #4
 8006fbc:	f8c1 e0b0 	str.w	lr, [r1, #176]	; 0xb0
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	b2c9      	uxtb	r1, r1
 8006fc4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8006fc8:	f88e 30b4 	strb.w	r3, [lr, #180]	; 0xb4
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e7ef      	b.n	8006fb0 <modPowerElectronicsCellMonitorsArrayTranslate+0x54>
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellVoltage = modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][modulePointerCell];
 8006fd0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8006fd4:	f85c eb04 	ldr.w	lr, [ip], #4
 8006fd8:	f8c1 e0b0 	str.w	lr, [r1, #176]	; 0xb0
				modPowerElectronicsPackStateHandle->cellVoltagesIndividual[individualCellPointer].cellNumber = individualCellPointer++;
 8006fdc:	1c59      	adds	r1, r3, #1
 8006fde:	b2c9      	uxtb	r1, r1
 8006fe0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8006fe4:	f88e 30b4 	strb.w	r3, [lr, #180]	; 0xb4
 8006fe8:	460b      	mov	r3, r1
 8006fea:	e7d8      	b.n	8006f9e <modPowerElectronicsCellMonitorsArrayTranslate+0x42>
 8006fec:	200049e8 	.word	0x200049e8
 8006ff0:	200049f0 	.word	0x200049f0

08006ff4 <modPowerElectronicsAuxMonitorsArrayTranslate>:

void modPowerElectronicsAuxMonitorsArrayTranslate(void) {
 8006ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t individualAuxPointer = 0;
	
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <modPowerElectronicsAuxMonitorsArrayTranslate+0x70>)
 8006ffa:	681f      	ldr	r7, [r3, #0]
	  for(uint8_t modulePointerAux = 0; modulePointerAux < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; modulePointerAux++) {
			if(modulePointerAux < 5){		
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux];
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
			}else{ // when above 5, remove reference voltage measurement from Aux register group B : AVBR4 & AVBR5 for LTC6812 & LTC6813
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux+1];
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <modPowerElectronicsAuxMonitorsArrayTranslate+0x74>)
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8006ffe:	f897 c0f0 	ldrb.w	ip, [r7, #240]	; 0xf0
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux+1];
 8007002:	6819      	ldr	r1, [r3, #0]
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8007004:	2500      	movs	r5, #0
 8007006:	f601 7624 	addw	r6, r1, #3876	; 0xf24
	uint8_t individualAuxPointer = 0;
 800700a:	46ae      	mov	lr, r5
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 800700c:	b2eb      	uxtb	r3, r5
 800700e:	459c      	cmp	ip, r3
 8007010:	d925      	bls.n	800705e <modPowerElectronicsAuxMonitorsArrayTranslate+0x6a>
	  for(uint8_t modulePointerAux = 0; modulePointerAux < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; modulePointerAux++) {
 8007012:	f897 80e4 	ldrb.w	r8, [r7, #228]	; 0xe4
 8007016:	4634      	mov	r4, r6
 8007018:	46f1      	mov	r9, lr
 800701a:	2300      	movs	r3, #0
 800701c:	e016      	b.n	800704c <modPowerElectronicsAuxMonitorsArrayTranslate+0x58>
			if(modulePointerAux < 5){		
 800701e:	f109 02ca 	add.w	r2, r9, #202	; 0xca
 8007022:	2b04      	cmp	r3, #4
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 8007024:	f109 0001 	add.w	r0, r9, #1
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux+1];
 8007028:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux];
 800702c:	bf94      	ite	ls
 800702e:	f8d4 a000 	ldrls.w	sl, [r4]
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxVoltage = modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][modulePointerAux+1];
 8007032:	f8d4 a004 	ldrhi.w	sl, [r4, #4]
 8007036:	f8c2 a000 	str.w	sl, [r2]
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 800703a:	b2c0      	uxtb	r0, r0
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 800703c:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	  for(uint8_t modulePointerAux = 0; modulePointerAux < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; modulePointerAux++) {
 8007040:	3301      	adds	r3, #1
				modPowerElectronicsPackStateHandle->auxVoltagesIndividual[individualAuxPointer].auxNumber = individualAuxPointer++;
 8007042:	f882 9654 	strb.w	r9, [r2, #1620]	; 0x654
	  for(uint8_t modulePointerAux = 0; modulePointerAux < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerModule; modulePointerAux++) {
 8007046:	b2db      	uxtb	r3, r3
 8007048:	3404      	adds	r4, #4
 800704a:	4681      	mov	r9, r0
 800704c:	4598      	cmp	r8, r3
 800704e:	d1e6      	bne.n	800701e <modPowerElectronicsAuxMonitorsArrayTranslate+0x2a>
 8007050:	eb0e 0308 	add.w	r3, lr, r8
 8007054:	fa5f fe83 	uxtb.w	lr, r3
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->cellMonitorICCount; modulePointer++) {
 8007058:	3501      	adds	r5, #1
 800705a:	3630      	adds	r6, #48	; 0x30
 800705c:	e7d6      	b.n	800700c <modPowerElectronicsAuxMonitorsArrayTranslate+0x18>
			}
		}
	}
}
 800705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007062:	bf00      	nop
 8007064:	200049e8 	.word	0x200049e8
 8007068:	200049f0 	.word	0x200049f0

0800706c <modPowerElectronicsExpMonitorsArrayTranslate>:

void modPowerElectronicsExpMonitorsArrayTranslate(void) {
	uint8_t individualExpPointer = 0;
	
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 800706c:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <modPowerElectronicsExpMonitorsArrayTranslate+0x54>)
void modPowerElectronicsExpMonitorsArrayTranslate(void) {
 800706e:	b5f0      	push	{r4, r5, r6, r7, lr}
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 8007070:	681f      	ldr	r7, [r3, #0]
	  for(uint8_t modulePointerExp = 0; modulePointerExp < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; modulePointerExp++) {	
			modPowerElectronicsPackStateHandle->expVoltagesIndividual[individualExpPointer].expVoltage = modPowerElectronicsPackStateHandle->expModuleVoltages[modulePointer][modulePointerExp];
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <modPowerElectronicsExpMonitorsArrayTranslate+0x58>)
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 8007074:	f897 c0e5 	ldrb.w	ip, [r7, #229]	; 0xe5
			modPowerElectronicsPackStateHandle->expVoltagesIndividual[individualExpPointer].expVoltage = modPowerElectronicsPackStateHandle->expModuleVoltages[modulePointer][modulePointerExp];
 8007078:	681d      	ldr	r5, [r3, #0]
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 800707a:	2000      	movs	r0, #0
 800707c:	f505 5288 	add.w	r2, r5, #4352	; 0x1100
 8007080:	3204      	adds	r2, #4
	uint8_t individualExpPointer = 0;
 8007082:	4603      	mov	r3, r0
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 8007084:	b2c1      	uxtb	r1, r0
 8007086:	458c      	cmp	ip, r1
 8007088:	d919      	bls.n	80070be <modPowerElectronicsExpMonitorsArrayTranslate+0x52>
 800708a:	f897 10e6 	ldrb.w	r1, [r7, #230]	; 0xe6
 800708e:	4419      	add	r1, r3
 8007090:	b2c9      	uxtb	r1, r1
	  for(uint8_t modulePointerExp = 0; modulePointerExp < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; modulePointerExp++) {	
 8007092:	4616      	mov	r6, r2
 8007094:	e00e      	b.n	80070b4 <modPowerElectronicsExpMonitorsArrayTranslate+0x48>
			modPowerElectronicsPackStateHandle->expVoltagesIndividual[individualExpPointer].expVoltage = modPowerElectronicsPackStateHandle->expModuleVoltages[modulePointer][modulePointerExp];
 8007096:	f503 74a1 	add.w	r4, r3, #322	; 0x142
 800709a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800709e:	f856 eb04 	ldr.w	lr, [r6], #4
 80070a2:	f8c4 e000 	str.w	lr, [r4]
			modPowerElectronicsPackStateHandle->expVoltagesIndividual[individualExpPointer].expNumber = individualExpPointer++;
 80070a6:	1c5c      	adds	r4, r3, #1
 80070a8:	b2e4      	uxtb	r4, r4
 80070aa:	eb05 0ec4 	add.w	lr, r5, r4, lsl #3
 80070ae:	f88e 3a14 	strb.w	r3, [lr, #2580]	; 0xa14
 80070b2:	4623      	mov	r3, r4
	  for(uint8_t modulePointerExp = 0; modulePointerExp < modPowerElectronicsGeneralConfigHandle->noOfTempSensorPerExpansionBoard; modulePointerExp++) {	
 80070b4:	428b      	cmp	r3, r1
 80070b6:	d1ee      	bne.n	8007096 <modPowerElectronicsExpMonitorsArrayTranslate+0x2a>
  for(uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 80070b8:	3001      	adds	r0, #1
 80070ba:	3220      	adds	r2, #32
 80070bc:	e7e2      	b.n	8007084 <modPowerElectronicsExpMonitorsArrayTranslate+0x18>
		}
	}
}
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c0:	200049e8 	.word	0x200049e8
 80070c4:	200049f0 	.word	0x200049f0

080070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>:
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
	driverSWLTC6804ReadVoltageFlags(underVoltageFlags,overVoltageFlags, modPowerElectronicsGeneralConfigHandle->lastICMask, modPowerElectronicsGeneralConfigHandle->noOfParallelModules, modPowerElectronicsPackStateHandle->dieTemperature);
}

void modPowerElectronicsCellMonitorsCheckAndSolveInitState(void){
  if(modPowerElectronicsCellMonitorsTypeActive != modPowerElectronicsGeneralConfigHandle->cellMonitorType){
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <modPowerElectronicsCellMonitorsCheckAndSolveInitState+0x18>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f893 20ef 	ldrb.w	r2, [r3, #239]	; 0xef
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <modPowerElectronicsCellMonitorsCheckAndSolveInitState+0x1c>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <modPowerElectronicsCellMonitorsCheckAndSolveInitState+0x14>
		modPowerElectronicsCellMonitorsInit();
 80070d8:	f7ff bf04 	b.w	8006ee4 <modPowerElectronicsCellMonitorsInit>
	}
}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200049e8 	.word	0x200049e8
 80070e4:	200049c8 	.word	0x200049c8

080070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>:
void modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData(void){
 80070e8:	b538      	push	{r3, r4, r5, lr}
			driverSWLTC6804ReadCellVoltagesArray(modPowerElectronicsPackStateHandle->cellModuleVoltages);
 80070ea:	4c17      	ldr	r4, [pc, #92]	; (8007148 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData+0x60>)
			driverSWLTC6804ReadAuxVoltagesArray(modPowerElectronicsPackStateHandle->auxModuleVoltages,modPowerElectronicsGeneralConfigHandle->NTC25DegResistance[modConfigNTCGroupLTCExt],modPowerElectronicsGeneralConfigHandle->NTCTopResistor[modConfigNTCGroupLTCExt],modPowerElectronicsGeneralConfigHandle->NTCBetaFactor[modConfigNTCGroupLTCExt],25.0f);
 80070ec:	4d17      	ldr	r5, [pc, #92]	; (800714c <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData+0x64>)
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 80070ee:	f7ff ffeb 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
			driverSWLTC6804ReadCellVoltagesArray(modPowerElectronicsPackStateHandle->cellModuleVoltages);
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	f600 4054 	addw	r0, r0, #3156	; 0xc54
 80070f8:	f002 f9fc 	bl	80094f4 <driverSWLTC6804ReadCellVoltagesArray>
			modPowerElectronicsCellMonitorsArrayTranslate();
 80070fc:	f7ff ff2e 	bl	8006f5c <modPowerElectronicsCellMonitorsArrayTranslate>
			driverSWLTC6804ReadAuxVoltagesArray(modPowerElectronicsPackStateHandle->auxModuleVoltages,modPowerElectronicsGeneralConfigHandle->NTC25DegResistance[modConfigNTCGroupLTCExt],modPowerElectronicsGeneralConfigHandle->NTCTopResistor[modConfigNTCGroupLTCExt],modPowerElectronicsGeneralConfigHandle->NTCBetaFactor[modConfigNTCGroupLTCExt],25.0f);
 8007100:	6829      	ldr	r1, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	f8b1 3130 	ldrh.w	r3, [r1, #304]	; 0x130
 8007108:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 800710c:	f8d1 1120 	ldr.w	r1, [r1, #288]	; 0x120
 8007110:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8007114:	f600 7024 	addw	r0, r0, #3876	; 0xf24
 8007118:	f002 fd00 	bl	8009b1c <driverSWLTC6804ReadAuxVoltagesArray>
			modPowerElectronicsAuxMonitorsArrayTranslate();
 800711c:	f7ff ff6a 	bl	8006ff4 <modPowerElectronicsAuxMonitorsArrayTranslate>
			driverSWADC128D818ReadExpVoltagesArray(modPowerElectronicsPackStateHandle->expModuleVoltages,modPowerElectronicsGeneralConfigHandle->NTC25DegResistance[modConfigNTCGroupExp],modPowerElectronicsGeneralConfigHandle->NTCTopResistor[modConfigNTCGroupExp],modPowerElectronicsGeneralConfigHandle->NTCBetaFactor[modConfigNTCGroupExp],25.0f);
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	6829      	ldr	r1, [r5, #0]
 8007124:	f500 5088 	add.w	r0, r0, #4352	; 0x1100
 8007128:	f8b1 3134 	ldrh.w	r3, [r1, #308]	; 0x134
 800712c:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
 8007130:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 8007134:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8007138:	3004      	adds	r0, #4
 800713a:	f002 ff69 	bl	800a010 <driverSWADC128D818ReadExpVoltagesArray>
}
 800713e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			modPowerElectronicsExpMonitorsArrayTranslate();
 8007142:	f7ff bf93 	b.w	800706c <modPowerElectronicsExpMonitorsArrayTranslate>
 8007146:	bf00      	nop
 8007148:	200049f0 	.word	0x200049f0
 800714c:	200049e8 	.word	0x200049e8

08007150 <modPowerElectronicsCellMonitorsStartCellConversion>:
void modPowerElectronicsCellMonitorsStartCellConversion(void) {
 8007150:	b508      	push	{r3, lr}
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 8007152:	f7ff ffb9 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
	driverSWLTC6804ResetCellVoltageRegisters();
 8007156:	f002 f871 	bl	800923c <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 800715a:	2200      	movs	r2, #0
}
 800715c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	driverSWLTC6804StartCellVoltageConversion(MD_FILTERED,DCP_DISABLED,CELL_CH_ALL);
 8007160:	4611      	mov	r1, r2
 8007162:	2003      	movs	r0, #3
 8007164:	f002 b89e 	b.w	80092a4 <driverSWLTC6804StartCellVoltageConversion>

08007168 <modPowerElectronicsInit>:
	modPowerElectronicsUnderAndOverVoltageErrorCount				= 0;
 8007168:	4b5c      	ldr	r3, [pc, #368]	; (80072dc <modPowerElectronicsInit+0x174>)
	modPowerElectronicsChargeDiodeBypassHysteresis					= 0.0f;
 800716a:	4a5d      	ldr	r2, [pc, #372]	; (80072e0 <modPowerElectronicsInit+0x178>)
void modPowerElectronicsInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer) {
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	modPowerElectronicsUnderAndOverVoltageErrorCount				= 0;
 8007170:	2500      	movs	r5, #0
 8007172:	701d      	strb	r5, [r3, #0]
	modPowerElectronicsUnderAndOverTemperatureErrorCount				= 0;
 8007174:	4b5b      	ldr	r3, [pc, #364]	; (80072e4 <modPowerElectronicsInit+0x17c>)
	modPowerElectronicsGeneralConfigHandle						= generalConfigPointer;
 8007176:	4f5c      	ldr	r7, [pc, #368]	; (80072e8 <modPowerElectronicsInit+0x180>)
	modPowerElectronicsUnderAndOverTemperatureErrorCount				= 0;
 8007178:	701d      	strb	r5, [r3, #0]
	modPowerElectronicsAllowForcedOnState						= false;
 800717a:	4b5c      	ldr	r3, [pc, #368]	; (80072ec <modPowerElectronicsInit+0x184>)
	modPowerElectronicsGeneralConfigHandle						= generalConfigPointer;
 800717c:	6039      	str	r1, [r7, #0]
	modPowerElectronicsAllowForcedOnState						= false;
 800717e:	701d      	strb	r5, [r3, #0]
	modPowerElectronicsVinErrorCount						= 0;
 8007180:	4b5b      	ldr	r3, [pc, #364]	; (80072f0 <modPowerElectronicsInit+0x188>)
	modPowerElectronicsPackStateHandle						= packState;
 8007182:	4e5c      	ldr	r6, [pc, #368]	; (80072f4 <modPowerElectronicsInit+0x18c>)
	modPowerElectronicsVinErrorCount						= 0;
 8007184:	701d      	strb	r5, [r3, #0]
	modPowerElectronicsChargeDiodeBypassHysteresis					= 0.0f;
 8007186:	2300      	movs	r3, #0
 8007188:	6013      	str	r3, [r2, #0]
	modPowerElectronicsVoltageSenseError						= false;
 800718a:	4a5b      	ldr	r2, [pc, #364]	; (80072f8 <modPowerElectronicsInit+0x190>)
	modPowerElectronicsPackStateHandle						= packState;
 800718c:	6030      	str	r0, [r6, #0]
	modPowerElectronicsVoltageSenseError						= false;
 800718e:	7015      	strb	r5, [r2, #0]
	modPowerElectronicsChargeDeratingActive						= false;
 8007190:	4a5a      	ldr	r2, [pc, #360]	; (80072fc <modPowerElectronicsInit+0x194>)
	modPowerElectronicsPackStateHandle->SoC						= 0.0f;
 8007192:	6103      	str	r3, [r0, #16]
	modPowerElectronicsChargeDeratingActive						= false;
 8007194:	7015      	strb	r5, [r2, #0]
	modPowerElectronicsFirstDischarge						= true;
 8007196:	4a5a      	ldr	r2, [pc, #360]	; (8007300 <modPowerElectronicsInit+0x198>)
	modPowerElectronicsPackStateHandle->SoCCapacityAh				= 0.0f;
 8007198:	6143      	str	r3, [r0, #20]
void modPowerElectronicsInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer) {
 800719a:	4688      	mov	r8, r1
	modPowerElectronicsFirstDischarge						= true;
 800719c:	2101      	movs	r1, #1
 800719e:	7011      	strb	r1, [r2, #0]
	modPowerElectronicsPackStateHandle->packOperationalCellState			= PACK_STATE_NORMAL;
 80071a0:	2203      	movs	r2, #3
 80071a2:	f880 2c50 	strb.w	r2, [r0, #3152]	; 0xc50
	modPowerElectronicsPackStateHandle->temperatures[0]				= -50.0f;
 80071a6:	4a57      	ldr	r2, [pc, #348]	; (8007304 <modPowerElectronicsInit+0x19c>)
	modPowerElectronicsPackStateHandle->packVoltage					= 0.0f;
 80071a8:	61c3      	str	r3, [r0, #28]
	modPowerElectronicsPackStateHandle->packCurrent					= 0.0f;
 80071aa:	6203      	str	r3, [r0, #32]
	modPowerElectronicsPackStateHandle->packPower					= 0.0f;
 80071ac:	6243      	str	r3, [r0, #36]	; 0x24
	modPowerElectronicsPackStateHandle->loCurrentLoadCurrent			= 0.0f;
 80071ae:	6283      	str	r3, [r0, #40]	; 0x28
	modPowerElectronicsPackStateHandle->loCurrentLoadVoltage			= 0.0f;
 80071b0:	62c3      	str	r3, [r0, #44]	; 0x2c
	modPowerElectronicsPackStateHandle->chargerVoltage				= 0.0f;
 80071b2:	6303      	str	r3, [r0, #48]	; 0x30
	modPowerElectronicsPackStateHandle->cellVoltageHigh				= 0.0f;
 80071b4:	6343      	str	r3, [r0, #52]	; 0x34
	modPowerElectronicsPackStateHandle->cellVoltageLow				= 0.0f;
 80071b6:	6383      	str	r3, [r0, #56]	; 0x38
	modPowerElectronicsPackStateHandle->cellVoltageAverage				= 0.0;
 80071b8:	63c3      	str	r3, [r0, #60]	; 0x3c
	modPowerElectronicsPackStateHandle->temperatures[0]				= -50.0f;
 80071ba:	6482      	str	r2, [r0, #72]	; 0x48
	modPowerElectronicsPackStateHandle->temperatures[1]				= -50.0f;
 80071bc:	64c2      	str	r2, [r0, #76]	; 0x4c
	modPowerElectronicsPackStateHandle->temperatures[2]				= -50.0f;
 80071be:	6502      	str	r2, [r0, #80]	; 0x50
	modPowerElectronicsPackStateHandle->temperatures[3]				= -50.0f;
 80071c0:	6542      	str	r2, [r0, #84]	; 0x54
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery	= 0;
 80071c2:	e9c0 5500 	strd	r5, r5, [r0]
	modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage		= 0;
 80071c6:	6085      	str	r5, [r0, #8]
	modPowerElectronicsPackStateHandle->throttleDutyDischarge			= 0;
 80071c8:	8185      	strh	r5, [r0, #12]
	modPowerElectronicsPackStateHandle->operationalState				= OP_STATE_INIT;
 80071ca:	8305      	strh	r5, [r0, #24]
	modPowerElectronicsPackStateHandle->chargePFETDesired				= false;
 80071cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	modPowerElectronicsPackStateHandle->tempBatteryHigh				= 0.0f;
 80071d0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	modPowerElectronicsPackStateHandle->tempBatteryLow				= 0.0f;
 80071d4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	modPowerElectronicsPackStateHandle->tempBatteryAverage				= 0.0f;
 80071d8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	modPowerElectronicsPackStateHandle->tempBMSHigh					= 0.0f;
 80071dc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	modPowerElectronicsPackStateHandle->tempBMSLow					= 0.0f;
 80071e0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
	modPowerElectronicsPackStateHandle->tempBMSAverage				= 0.0f;
 80071e4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	modPowerElectronicsPackStateHandle->humidity					= 0.0f;
 80071e8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	modPowerElectronicsPackStateHandle->chargePFETDesired				= false;
 80071ec:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 80071f0:	e9c0 2327 	strd	r2, r3, [r0, #156]	; 0x9c
	modPowerElectronicsPackStateHandle->powerButtonActuated				= false;
 80071f4:	f5a3 037f 	sub.w	r3, r3, #16711680	; 0xff0000
 80071f8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 80071fc:	f500 5991 	add.w	r9, r0, #4640	; 0x1220
	modPowerElectronicsPackStateHandle->watchDogTime				= 255;
 8007200:	23ff      	movs	r3, #255	; 0xff
 8007202:	f500 5a92 	add.w	sl, r0, #4672	; 0x1240
 8007206:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
void modPowerElectronicsInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer) {
 800720a:	4604      	mov	r4, r0
	modPowerElectronicsPackStateHandle->safetyOverCANHCSafeNSafe			= false;
 800720c:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
	modPowerElectronicsPackStateHandle->powerOnLongButtonPress			= false;
 8007210:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8007214:	f600 4354 	addw	r3, r0, #3156	; 0xc54
 8007218:	f109 0904 	add.w	r9, r9, #4
 800721c:	f10a 0a0c 	add.w	sl, sl, #12
			modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 8007220:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007224:	4618      	mov	r0, r3
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	2100      	movs	r1, #0
 800722a:	f008 f8dd 	bl	800f3e8 <memset>
		modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask[modulePointer] = 0;
 800722e:	f849 5b04 	str.w	r5, [r9], #4
			modPowerElectronicsPackStateHandle->cellModuleVoltages[modulePointer][cellPointer] = 0.0f;
 8007232:	4603      	mov	r3, r0
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++) {
 8007234:	45d1      	cmp	r9, sl
		modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMaskTest[modulePointer] = 0;
 8007236:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++) {
 800723a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800723e:	d1ef      	bne.n	8007220 <modPowerElectronicsInit+0xb8>
 8007240:	f604 7324 	addw	r3, r4, #3876	; 0xf24
 8007244:	f504 5488 	add.w	r4, r4, #4352	; 0x1100
 8007248:	3404      	adds	r4, #4
			modPowerElectronicsPackStateHandle->auxModuleVoltages[modulePointer][auxPointer] = 0.0f;
 800724a:	f898 20e4 	ldrb.w	r2, [r8, #228]	; 0xe4
 800724e:	4618      	mov	r0, r3
 8007250:	0092      	lsls	r2, r2, #2
 8007252:	2100      	movs	r1, #0
 8007254:	f008 f8c8 	bl	800f3e8 <memset>
 8007258:	4603      	mov	r3, r0
	for( uint8_t modulePointer = 0; modulePointer < NoOfCellMonitorsPossibleOnBMS; modulePointer++) {
 800725a:	3330      	adds	r3, #48	; 0x30
 800725c:	42a3      	cmp	r3, r4
 800725e:	d1f4      	bne.n	800724a <modPowerElectronicsInit+0xe2>
	for( uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 8007260:	f898 50e5 	ldrb.w	r5, [r8, #229]	; 0xe5
 8007264:	2400      	movs	r4, #0
 8007266:	b2e2      	uxtb	r2, r4
 8007268:	4295      	cmp	r5, r2
 800726a:	d90a      	bls.n	8007282 <modPowerElectronicsInit+0x11a>
			modPowerElectronicsPackStateHandle->expModuleVoltages[modulePointer][expPointer] = 0.0f;
 800726c:	f898 20e6 	ldrb.w	r2, [r8, #230]	; 0xe6
 8007270:	4618      	mov	r0, r3
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	2100      	movs	r1, #0
 8007276:	f008 f8b7 	bl	800f3e8 <memset>
 800727a:	4603      	mov	r3, r0
	for( uint8_t modulePointer = 0; modulePointer < modPowerElectronicsGeneralConfigHandle->noOfExpansionBoard; modulePointer++) {
 800727c:	3401      	adds	r4, #1
 800727e:	3320      	adds	r3, #32
 8007280:	e7f1      	b.n	8007266 <modPowerElectronicsInit+0xfe>
	modPowerElectronicsCellMonitorsStartCellConversion();
 8007282:	f7ff ff65 	bl	8007150 <modPowerElectronicsCellMonitorsStartCellConversion>
  modPowerElectronicsInitISL();
 8007286:	f7ff fd1c 	bl	8006cc2 <modPowerElectronicsInitISL>
	driverHWADCInit();
 800728a:	f002 ff73 	bl	800a174 <driverHWADCInit>
	driverHWSwitchesInit();
 800728e:	f003 fc75 	bl	800ab7c <driverHWSwitchesInit>
	modPowerElectronicsCellMonitorsInit();
 8007292:	f7ff fe27 	bl	8006ee4 <modPowerElectronicsCellMonitorsInit>
	modPowerElectronicsChargeCurrentDetectionLastTick = HAL_GetTick();
 8007296:	f003 fd91 	bl	800adbc <HAL_GetTick>
 800729a:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <modPowerElectronicsInit+0x1a0>)
 800729c:	6018      	str	r0, [r3, #0]
	modPowerElectronicsBalanceModeActiveLastTick      = HAL_GetTick();
 800729e:	f003 fd8d 	bl	800adbc <HAL_GetTick>
 80072a2:	4b1a      	ldr	r3, [pc, #104]	; (800730c <modPowerElectronicsInit+0x1a4>)
 80072a4:	6018      	str	r0, [r3, #0]
	modPowerElectronicsSOAChargeChangeLastTick        = HAL_GetTick();
 80072a6:	f003 fd89 	bl	800adbc <HAL_GetTick>
 80072aa:	4b19      	ldr	r3, [pc, #100]	; (8007310 <modPowerElectronicsInit+0x1a8>)
 80072ac:	6018      	str	r0, [r3, #0]
	modPowerElectronicsSOADisChargeChangeLastTick     = HAL_GetTick();	
 80072ae:	f003 fd85 	bl	800adbc <HAL_GetTick>
 80072b2:	4b18      	ldr	r3, [pc, #96]	; (8007314 <modPowerElectronicsInit+0x1ac>)
	driverSWISL28022GetBusVoltage(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,&modPowerElectronicsPackStateHandle->packVoltage,modPowerElectronicsGeneralConfigHandle->voltageLCOffset, modPowerElectronicsGeneralConfigHandle->voltageLCFactor);
 80072b4:	6832      	ldr	r2, [r6, #0]
	modPowerElectronicsSOADisChargeChangeLastTick     = HAL_GetTick();	
 80072b6:	6018      	str	r0, [r3, #0]
	driverSWISL28022GetBusVoltage(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,&modPowerElectronicsPackStateHandle->packVoltage,modPowerElectronicsGeneralConfigHandle->voltageLCOffset, modPowerElectronicsGeneralConfigHandle->voltageLCFactor);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	321c      	adds	r2, #28
 80072bc:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80072c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80072c4:	2102      	movs	r1, #2
 80072c6:	2040      	movs	r0, #64	; 0x40
 80072c8:	f002 fd20 	bl	8009d0c <driverSWISL28022GetBusVoltage>
};
 80072cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	modTerminalRegisterCommandCallBack("testbms","Test the cell connection between cell monitor and pack and pack vs cell measurement.","[error (V)] [bal drop (mV)]",modPowerElectronicsTerminalCellConnectionTest);
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <modPowerElectronicsInit+0x1b0>)
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <modPowerElectronicsInit+0x1b4>)
 80072d4:	4912      	ldr	r1, [pc, #72]	; (8007320 <modPowerElectronicsInit+0x1b8>)
 80072d6:	4813      	ldr	r0, [pc, #76]	; (8007324 <modPowerElectronicsInit+0x1bc>)
 80072d8:	f001 bcb2 	b.w	8008c40 <modTerminalRegisterCommandCallBack>
 80072dc:	20004a01 	.word	0x20004a01
 80072e0:	200049d4 	.word	0x200049d4
 80072e4:	20004a00 	.word	0x20004a00
 80072e8:	200049e8 	.word	0x200049e8
 80072ec:	200049ba 	.word	0x200049ba
 80072f0:	20004a02 	.word	0x20004a02
 80072f4:	200049f0 	.word	0x200049f0
 80072f8:	20004a03 	.word	0x20004a03
 80072fc:	200049d0 	.word	0x200049d0
 8007300:	200049e4 	.word	0x200049e4
 8007304:	c2480000 	.word	0xc2480000
 8007308:	200049cc 	.word	0x200049cc
 800730c:	200049bc 	.word	0x200049bc
 8007310:	200049f4 	.word	0x200049f4
 8007314:	200049f8 	.word	0x200049f8
 8007318:	0800739d 	.word	0x0800739d
 800731c:	080135a4 	.word	0x080135a4
 8007320:	080135c0 	.word	0x080135c0
 8007324:	08013615 	.word	0x08013615

08007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>:
void modPowerElectronicsCellMonitorsStartLoadedCellConversion(bool PUP) {
 8007328:	b507      	push	{r0, r1, r2, lr}
 800732a:	9001      	str	r0, [sp, #4]
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 800732c:	f7ff fecc 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
	driverSWLTC6804ResetCellVoltageRegisters();
 8007330:	f001 ff84 	bl	800923c <driverSWLTC6804ResetCellVoltageRegisters>
	driverSWLTC6804StartLoadedCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL,PUP);
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	2101      	movs	r1, #1
 800733a:	2003      	movs	r0, #3
}
 800733c:	b003      	add	sp, #12
 800733e:	f85d eb04 	ldr.w	lr, [sp], #4
	driverSWLTC6804StartLoadedCellVoltageConversion(MD_FILTERED,DCP_ENABLED,CELL_CH_ALL,PUP);
 8007342:	f001 bfd4 	b.w	80092ee <driverSWLTC6804StartLoadedCellVoltageConversion>

08007346 <modPowerElectronicsCellMonitorsStartTemperatureConversion>:
void modPowerElectronicsCellMonitorsStartTemperatureConversion(void) {
 8007346:	b508      	push	{r3, lr}
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 8007348:	f7ff febe 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
				driverSWLTC6804ResetAuxRegisters();
 800734c:	f001 ff90 	bl	8009270 <driverSWLTC6804ResetAuxRegisters>
}
 8007350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				driverSWLTC6804StartAuxVoltageConversion(MD_FILTERED, AUX_CH_ALL);
 8007354:	2100      	movs	r1, #0
 8007356:	2003      	movs	r0, #3
 8007358:	f001 bfef 	b.w	800933a <driverSWLTC6804StartAuxVoltageConversion>

0800735c <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest>:
void modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest(uint32_t balanceEnableMask){
 800735c:	b510      	push	{r4, lr}
		modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMaskTest[moduleClearPointer] = balanceEnableMask;
 800735e:	4c0d      	ldr	r4, [pc, #52]	; (8007394 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest+0x38>)
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	f503 5292 	add.w	r2, r3, #4672	; 0x1240
 8007366:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800736a:	320c      	adds	r2, #12
 800736c:	3314      	adds	r3, #20
 800736e:	f842 0b04 	str.w	r0, [r2], #4
	for(uint8_t moduleClearPointer = 0; moduleClearPointer < NoOfCellMonitorsPossibleOnBMS; moduleClearPointer++) 
 8007372:	429a      	cmp	r2, r3
 8007374:	d1fb      	bne.n	800736e <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest+0x12>
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 8007376:	f7ff fea7 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
	driverSWLTC6804EnableBalanceResistorsArray(modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMaskTest, modPowerElectronicsGeneralConfigHandle->cellMonitorType);	
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest+0x3c>)
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f500 5092 	add.w	r0, r0, #4672	; 0x1240
}
 8007384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driverSWLTC6804EnableBalanceResistorsArray(modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMaskTest, modPowerElectronicsGeneralConfigHandle->cellMonitorType);	
 8007388:	f893 10ef 	ldrb.w	r1, [r3, #239]	; 0xef
 800738c:	300c      	adds	r0, #12
 800738e:	f002 baf9 	b.w	8009984 <driverSWLTC6804EnableBalanceResistorsArray>
 8007392:	bf00      	nop
 8007394:	200049f0 	.word	0x200049f0
 8007398:	200049e8 	.word	0x200049e8

0800739c <modPowerElectronicsTerminalCellConnectionTest>:

void modPowerElectronicsTerminalCellConnectionTest(int argc, const char **argv) {
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	ed2d 8b06 	vpush	{d8-d10}
 80073a4:	b091      	sub	sp, #68	; 0x44
 80073a6:	af06      	add	r7, sp, #24
 80073a8:	4680      	mov	r8, r0
 80073aa:	460e      	mov	r6, r1
	(void)argc;
	(void)argv;
	uint32_t delayLastTick = HAL_GetTick();
	float conversionResults[5][modPowerElectronicsGeneralConfigHandle->noOfCellsSeries]; // unloaded, 100uAloaded, balance resistor load even and uneven.
 80073ac:	4dca      	ldr	r5, [pc, #808]	; (80076d8 <modPowerElectronicsTerminalCellConnectionTest+0x33c>)
	uint32_t delayLastTick = HAL_GetTick();
 80073ae:	f003 fd05 	bl	800adbc <HAL_GetTick>
	float conversionResults[5][modPowerElectronicsGeneralConfigHandle->noOfCellsSeries]; // unloaded, 100uAloaded, balance resistor load even and uneven.
 80073b2:	682b      	ldr	r3, [r5, #0]
	uint32_t delayLastTick = HAL_GetTick();
 80073b4:	61f8      	str	r0, [r7, #28]
	float conversionResults[5][modPowerElectronicsGeneralConfigHandle->noOfCellsSeries]; // unloaded, 100uAloaded, balance resistor load even and uneven.
 80073b6:	781b      	ldrb	r3, [r3, #0]
	
	float   argErrorVoltage = 1.0f;
	int32_t argBalanceDropMiliVoltage = 2;
	
	// Handle argument inputs
	modCommandsPrintf("---------     Test inputs:     ---------");
 80073b8:	48c8      	ldr	r0, [pc, #800]	; (80076dc <modPowerElectronicsTerminalCellConnectionTest+0x340>)
	float conversionResults[5][modPowerElectronicsGeneralConfigHandle->noOfCellsSeries]; // unloaded, 100uAloaded, balance resistor load even and uneven.
 80073ba:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80073be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	3307      	adds	r3, #7
 80073c6:	466a      	mov	r2, sp
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80073ce:	469d      	mov	sp, r3
	float   argErrorVoltage = 1.0f;
 80073d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80073d4:	623b      	str	r3, [r7, #32]
	int32_t argBalanceDropMiliVoltage = 2;
 80073d6:	2302      	movs	r3, #2
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
	modCommandsPrintf("---------     Test inputs:     ---------");
 80073da:	f7fc f8c5 	bl	8003568 <modCommandsPrintf>
	if(argc == 3){
 80073de:	f1b8 0f03 	cmp.w	r8, #3
	float conversionResults[5][modPowerElectronicsGeneralConfigHandle->noOfCellsSeries]; // unloaded, 100uAloaded, balance resistor load even and uneven.
 80073e2:	ac06      	add	r4, sp, #24
	if(argc == 3){
 80073e4:	f040 81b1 	bne.w	800774a <modPowerElectronicsTerminalCellConnectionTest+0x3ae>
		// Two arguments given, taking this as balance and error threshold.
		sscanf(argv[1], "%f", &argErrorVoltage);
 80073e8:	49bd      	ldr	r1, [pc, #756]	; (80076e0 <modPowerElectronicsTerminalCellConnectionTest+0x344>)
 80073ea:	6870      	ldr	r0, [r6, #4]
 80073ec:	f107 0220 	add.w	r2, r7, #32
 80073f0:	f008 fe1a 	bl	8010028 <siscanf>
		sscanf(argv[2], "%d", &argBalanceDropMiliVoltage);
 80073f4:	49bb      	ldr	r1, [pc, #748]	; (80076e4 <modPowerElectronicsTerminalCellConnectionTest+0x348>)
 80073f6:	68b0      	ldr	r0, [r6, #8]
 80073f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80073fc:	f008 fe14 	bl	8010028 <siscanf>
	}else{
	  modCommandsPrintf("No valid test arguments given. Using defaults:");
	}

	modCommandsPrintf("Error threshold:   %.1fV",argErrorVoltage);
 8007400:	6a38      	ldr	r0, [r7, #32]
	// end of argument inputs
	
	
	// Start of general voltage test
	modCommandsPrintf("---  Starting voltage measure test  ---");	
	modCommandsPrintf("Pack voltage Direct   : %.2fV",modPowerElectronicsPackStateHandle->packVoltage);
 8007402:	4eb9      	ldr	r6, [pc, #740]	; (80076e8 <modPowerElectronicsTerminalCellConnectionTest+0x34c>)
	modCommandsPrintf("Error threshold:   %.1fV",argErrorVoltage);
 8007404:	f7fa fb80 	bl	8001b08 <__aeabi_f2d>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	48b7      	ldr	r0, [pc, #732]	; (80076ec <modPowerElectronicsTerminalCellConnectionTest+0x350>)
 800740e:	f7fc f8ab 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("Balance threshold: %dmV",argBalanceDropMiliVoltage);
 8007412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007414:	48b6      	ldr	r0, [pc, #728]	; (80076f0 <modPowerElectronicsTerminalCellConnectionTest+0x354>)
 8007416:	f7fc f8a7 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("---  Starting voltage measure test  ---");	
 800741a:	48b6      	ldr	r0, [pc, #728]	; (80076f4 <modPowerElectronicsTerminalCellConnectionTest+0x358>)
 800741c:	f7fc f8a4 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("Pack voltage Direct   : %.2fV",modPowerElectronicsPackStateHandle->packVoltage);
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	69d8      	ldr	r0, [r3, #28]
 8007424:	f7fa fb70 	bl	8001b08 <__aeabi_f2d>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	48b2      	ldr	r0, [pc, #712]	; (80076f8 <modPowerElectronicsTerminalCellConnectionTest+0x35c>)
 800742e:	f7fc f89b 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("Pack voltage CVAverage: %.2fV",modPowerElectronicsPackStateHandle->cellVoltageAverage*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries);
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	6833      	ldr	r3, [r6, #0]
 800743c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007440:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007448:	ee17 0a90 	vmov	r0, s15
 800744c:	f7fa fb5c 	bl	8001b08 <__aeabi_f2d>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	48a9      	ldr	r0, [pc, #676]	; (80076fc <modPowerElectronicsTerminalCellConnectionTest+0x360>)
 8007456:	f7fc f887 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("Measure error         : %.2fV",fabs(modPowerElectronicsPackStateHandle->cellVoltageAverage*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-modPowerElectronicsPackStateHandle->packVoltage));
 800745a:	682a      	ldr	r2, [r5, #0]
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	7812      	ldrb	r2, [r2, #0]
 8007460:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8007464:	edd3 7a07 	vldr	s15, [r3, #28]
 8007468:	ee07 2a10 	vmov	s14, r2
 800746c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007470:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8007474:	eef0 7ae7 	vabs.f32	s15, s15
 8007478:	ee17 0a90 	vmov	r0, s15
 800747c:	f7fa fb44 	bl	8001b08 <__aeabi_f2d>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	489e      	ldr	r0, [pc, #632]	; (8007700 <modPowerElectronicsTerminalCellConnectionTest+0x364>)
 8007486:	f7fc f86f 	bl	8003568 <modCommandsPrintf>
	
	if(fabs(modPowerElectronicsPackStateHandle->cellVoltageAverage*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-modPowerElectronicsPackStateHandle->packVoltage) > argErrorVoltage){
 800748a:	682a      	ldr	r2, [r5, #0]
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	edd3 7a07 	vldr	s15, [r3, #28]
 8007494:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
		passFail = overAllPassFail = false;
	}else{
		passFail = true;
	}
	modCommandsPrintf("Result                : %s",passFail ? "Pass" : "Fail");// Tell whether test passed / failed
 8007498:	4b9a      	ldr	r3, [pc, #616]	; (8007704 <modPowerElectronicsTerminalCellConnectionTest+0x368>)
 800749a:	499b      	ldr	r1, [pc, #620]	; (8007708 <modPowerElectronicsTerminalCellConnectionTest+0x36c>)
 800749c:	489b      	ldr	r0, [pc, #620]	; (800770c <modPowerElectronicsTerminalCellConnectionTest+0x370>)
	if(fabs(modPowerElectronicsPackStateHandle->cellVoltageAverage*modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-modPowerElectronicsPackStateHandle->packVoltage) > argErrorVoltage){
 800749e:	ee07 2a10 	vmov	s14, r2
 80074a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074a6:	eed6 7a87 	vfnms.f32	s15, s13, s14
 80074aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80074ae:	eef0 7ae7 	vabs.f32	s15, s15
	bool overAllPassFail = true;
 80074b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	modCommandsPrintf("Result                : %s",passFail ? "Pass" : "Fail");// Tell whether test passed / failed
 80074ba:	bfd6      	itet	le
 80074bc:	4619      	movle	r1, r3
	bool overAllPassFail = true;
 80074be:	f04f 0b00 	movgt.w	fp, #0
 80074c2:	f04f 0b01 	movle.w	fp, #1
	modCommandsPrintf("Result                : %s",passFail ? "Pass" : "Fail");// Tell whether test passed / failed
 80074c6:	f7fc f84f 	bl	8003568 <modCommandsPrintf>
	
	
	// Start of connection test
	while(!modDelayTick100ms(&delayLastTick,2)){};                     // Wait 
 80074ca:	2102      	movs	r1, #2
 80074cc:	f107 001c 	add.w	r0, r7, #28
 80074d0:	f7fd fb36 	bl	8004b40 <modDelayTick100ms>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d0f8      	beq.n	80074ca <modPowerElectronicsTerminalCellConnectionTest+0x12e>
	modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 80074d8:	f7ff fe06 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartCellConversion();              // Start ADC conversion
 80074dc:	f7ff fe38 	bl	8007150 <modPowerElectronicsCellMonitorsStartCellConversion>
	while(!modDelayTick100ms(&delayLastTick,2)){};                     // Wait
 80074e0:	2102      	movs	r1, #2
 80074e2:	f107 001c 	add.w	r0, r7, #28
 80074e6:	f7fd fb2b 	bl	8004b40 <modDelayTick100ms>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d0f8      	beq.n	80074e0 <modPowerElectronicsTerminalCellConnectionTest+0x144>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 80074ee:	f7ff fdfb 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80074f2:	682a      	ldr	r2, [r5, #0]
	  conversionResults[4][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 80074f4:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80074f8:	7812      	ldrb	r2, [r2, #0]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	6833      	ldr	r3, [r6, #0]
 80074fe:	eb04 0189 	add.w	r1, r4, r9, lsl #2
 8007502:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007506:	4293      	cmp	r3, r2
 8007508:	f040 8123 	bne.w	8007752 <modPowerElectronicsTerminalCellConnectionTest+0x3b6>
	}
		
	
	modCommandsPrintf("------  Starting connectionTest  ------");
 800750c:	4880      	ldr	r0, [pc, #512]	; (8007710 <modPowerElectronicsTerminalCellConnectionTest+0x374>)
 800750e:	f7fc f82b 	bl	8003568 <modCommandsPrintf>
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait 
 8007512:	2103      	movs	r1, #3
 8007514:	f107 001c 	add.w	r0, r7, #28
 8007518:	f7fd fb12 	bl	8004b40 <modDelayTick100ms>
 800751c:	2800      	cmp	r0, #0
 800751e:	d0f8      	beq.n	8007512 <modPowerElectronicsTerminalCellConnectionTest+0x176>
	modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007520:	f7ff fde2 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartLoadedCellConversion(false);   // Start ADC conversion
 8007524:	2000      	movs	r0, #0
 8007526:	f7ff feff 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait 
 800752a:	2103      	movs	r1, #3
 800752c:	f107 001c 	add.w	r0, r7, #28
 8007530:	f7fd fb06 	bl	8004b40 <modDelayTick100ms>
 8007534:	2800      	cmp	r0, #0
 8007536:	d0f8      	beq.n	800752a <modPowerElectronicsTerminalCellConnectionTest+0x18e>
	modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007538:	f7ff fdd6 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartLoadedCellConversion(false);   // Start ADC conversion
 800753c:	2000      	movs	r0, #0
 800753e:	f7ff fef3 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 8007542:	2103      	movs	r1, #3
 8007544:	f107 001c 	add.w	r0, r7, #28
 8007548:	f7fd fafa 	bl	8004b40 <modDelayTick100ms>
 800754c:	2800      	cmp	r0, #0
 800754e:	d0f8      	beq.n	8007542 <modPowerElectronicsTerminalCellConnectionTest+0x1a6>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007550:	f7ff fdca 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007554:	682a      	ldr	r2, [r5, #0]
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	7812      	ldrb	r2, [r2, #0]
 800755a:	33b0      	adds	r3, #176	; 0xb0
 800755c:	4621      	mov	r1, r4
 800755e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007562:	4291      	cmp	r1, r2
 8007564:	f103 0308 	add.w	r3, r3, #8
 8007568:	f040 80f9 	bne.w	800775e <modPowerElectronicsTerminalCellConnectionTest+0x3c2>
	  conversionResults[0][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
	}

	
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 800756c:	2103      	movs	r1, #3
 800756e:	f107 001c 	add.w	r0, r7, #28
 8007572:	f7fd fae5 	bl	8004b40 <modDelayTick100ms>
 8007576:	2800      	cmp	r0, #0
 8007578:	d0f8      	beq.n	800756c <modPowerElectronicsTerminalCellConnectionTest+0x1d0>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 800757a:	f7ff fdb5 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartLoadedCellConversion(true);    // Start ADC conversion
 800757e:	2001      	movs	r0, #1
 8007580:	f7ff fed2 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 8007584:	2103      	movs	r1, #3
 8007586:	f107 001c 	add.w	r0, r7, #28
 800758a:	f7fd fad9 	bl	8004b40 <modDelayTick100ms>
 800758e:	2800      	cmp	r0, #0
 8007590:	d0f8      	beq.n	8007584 <modPowerElectronicsTerminalCellConnectionTest+0x1e8>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007592:	f7ff fda9 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartLoadedCellConversion(true);    // Start ADC conversion
 8007596:	2001      	movs	r0, #1
 8007598:	f7ff fec6 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 800759c:	2103      	movs	r1, #3
 800759e:	f107 001c 	add.w	r0, r7, #28
 80075a2:	f7fd facd 	bl	8004b40 <modDelayTick100ms>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0f8      	beq.n	800759c <modPowerElectronicsTerminalCellConnectionTest+0x200>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 80075aa:	f7ff fd9d 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsStartLoadedCellConversion(true);    // Start ADC conversion
 80075ae:	2001      	movs	r0, #1
 80075b0:	f7ff feba 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
		
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80075b4:	eb04 0209 	add.w	r2, r4, r9
 80075b8:	60ba      	str	r2, [r7, #8]
 80075ba:	4611      	mov	r1, r2
 80075bc:	682a      	ldr	r2, [r5, #0]
	  conversionResults[1][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 80075be:	6833      	ldr	r3, [r6, #0]
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80075c6:	4293      	cmp	r3, r2
 80075c8:	f040 80ce 	bne.w	8007768 <modPowerElectronicsTerminalCellConnectionTest+0x3cc>
 80075cc:	2300      	movs	r3, #0
	}
	
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80075ce:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80076d8 <modPowerElectronicsTerminalCellConnectionTest+0x33c>
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	f8d8 1000 	ldr.w	r1, [r8]
 80075d8:	783b      	ldrb	r3, [r7, #0]
 80075da:	780a      	ldrb	r2, [r1, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	f200 80c9 	bhi.w	8007774 <modPowerElectronicsTerminalCellConnectionTest+0x3d8>
			  passFail = true;
		}
		
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[0][cellIDPointer],conversionResults[1][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
	}
	modCommandsPrintf("------    End connectionTest     ------");
 80075e2:	484c      	ldr	r0, [pc, #304]	; (8007714 <modPowerElectronicsTerminalCellConnectionTest+0x378>)
 80075e4:	f7fb ffc0 	bl	8003568 <modCommandsPrintf>
	modCommandsPrintf("------    Start balance test     ------");
 80075e8:	484b      	ldr	r0, [pc, #300]	; (8007718 <modPowerElectronicsTerminalCellConnectionTest+0x37c>)
 80075ea:	f7fb ffbd 	bl	8003568 <modCommandsPrintf>
	
	uint32_t cellBalanceMaskEnableRegister = 0;
	for(int outputPointer = 0 ; outputPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries; outputPointer++) {
 80075ee:	f8d8 3000 	ldr.w	r3, [r8]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	2300      	movs	r3, #0
	uint32_t cellBalanceMaskEnableRegister = 0;
 80075f6:	461e      	mov	r6, r3
		cellBalanceMaskEnableRegister |= (1 << outputPointer);
 80075f8:	2101      	movs	r1, #1
	for(int outputPointer = 0 ; outputPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries; outputPointer++) {
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f300 811f 	bgt.w	800783e <modPowerElectronicsTerminalCellConnectionTest+0x4a2>
	}

	// Even cells
	modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();
 8007600:	f7ff fd72 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest(cellBalanceMaskEnableRegister & 0x0002AAAA);
 8007604:	4845      	ldr	r0, [pc, #276]	; (800771c <modPowerElectronicsTerminalCellConnectionTest+0x380>)
 8007606:	4030      	ands	r0, r6
 8007608:	f7ff fea8 	bl	800735c <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest>
 800760c:	2505      	movs	r5, #5
	
	for(int delay = 0; delay < 5; delay++){
		while(!modDelayTick100ms(&delayLastTick,3)){};                   // Wait
 800760e:	2103      	movs	r1, #3
 8007610:	f107 001c 	add.w	r0, r7, #28
 8007614:	f7fd fa94 	bl	8004b40 <modDelayTick100ms>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0f8      	beq.n	800760e <modPowerElectronicsTerminalCellConnectionTest+0x272>
		modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	 // Read cell voltages from monitor
 800761c:	f7ff fd64 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
		modPowerElectronicsCellMonitorsStartLoadedCellConversion(false);            // Start ADC conversion
 8007620:	2000      	movs	r0, #0
 8007622:	f7ff fe81 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
	for(int delay = 0; delay < 5; delay++){
 8007626:	3d01      	subs	r5, #1
 8007628:	d1f1      	bne.n	800760e <modPowerElectronicsTerminalCellConnectionTest+0x272>
	}
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 800762a:	2103      	movs	r1, #3
 800762c:	f107 001c 	add.w	r0, r7, #28
 8007630:	f7fd fa86 	bl	8004b40 <modDelayTick100ms>
 8007634:	2800      	cmp	r0, #0
 8007636:	d0f8      	beq.n	800762a <modPowerElectronicsTerminalCellConnectionTest+0x28e>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007638:	f7ff fd56 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
		
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
	  conversionResults[2][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 800763c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80076e8 <modPowerElectronicsTerminalCellConnectionTest+0x34c>
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007640:	f8d8 2000 	ldr.w	r2, [r8]
 8007644:	68bd      	ldr	r5, [r7, #8]
	  conversionResults[2][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 8007646:	f8da 3000 	ldr.w	r3, [sl]
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	444d      	add	r5, r9
 800764e:	4629      	mov	r1, r5
 8007650:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007654:	429a      	cmp	r2, r3
 8007656:	f040 80f7 	bne.w	8007848 <modPowerElectronicsTerminalCellConnectionTest+0x4ac>
	}
	
	// Uneven cells
	modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();
 800765a:	f7ff fd45 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
	modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest(cellBalanceMaskEnableRegister & 0x00015555);
 800765e:	4830      	ldr	r0, [pc, #192]	; (8007720 <modPowerElectronicsTerminalCellConnectionTest+0x384>)
 8007660:	4030      	ands	r0, r6
 8007662:	f7ff fe7b 	bl	800735c <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest>
 8007666:	2605      	movs	r6, #5
	
	
	for(int delay = 0; delay < 5; delay++){
		while(!modDelayTick100ms(&delayLastTick,3)){};                   // Wait
 8007668:	2103      	movs	r1, #3
 800766a:	f107 001c 	add.w	r0, r7, #28
 800766e:	f7fd fa67 	bl	8004b40 <modDelayTick100ms>
 8007672:	2800      	cmp	r0, #0
 8007674:	d0f8      	beq.n	8007668 <modPowerElectronicsTerminalCellConnectionTest+0x2cc>
		modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	 // Read cell voltages from monitor
 8007676:	f7ff fd37 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
		modPowerElectronicsCellMonitorsStartLoadedCellConversion(false); // Start ADC conversion
 800767a:	2000      	movs	r0, #0
 800767c:	f7ff fe54 	bl	8007328 <modPowerElectronicsCellMonitorsStartLoadedCellConversion>
	for(int delay = 0; delay < 5; delay++){
 8007680:	3e01      	subs	r6, #1
 8007682:	d1f1      	bne.n	8007668 <modPowerElectronicsTerminalCellConnectionTest+0x2cc>
	}
		
	while(!modDelayTick100ms(&delayLastTick,3)){};                     // Wait
 8007684:	2103      	movs	r1, #3
 8007686:	f107 001c 	add.w	r0, r7, #28
 800768a:	f7fd fa59 	bl	8004b40 <modDelayTick100ms>
 800768e:	2800      	cmp	r0, #0
 8007690:	d0f8      	beq.n	8007684 <modPowerElectronicsTerminalCellConnectionTest+0x2e8>
  modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();	   // Read cell voltages from monitor
 8007692:	f7ff fd29 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
		
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007696:	f8d8 2000 	ldr.w	r2, [r8]
	  conversionResults[3][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 800769a:	f8da 3000 	ldr.w	r3, [sl]
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	444d      	add	r5, r9
 80076a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80076a6:	4293      	cmp	r3, r2
 80076a8:	f040 80d4 	bne.w	8007854 <modPowerElectronicsTerminalCellConnectionTest+0x4b8>
	}

	modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest(0);
 80076ac:	2000      	movs	r0, #0
 80076ae:	f7ff fe55 	bl	800735c <modPowerElectronicsCellMonitorsEnableBalanceResistorsArrayTest>
	
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
		float difference = fabs(conversionResults[4][cellIDPointer] - conversionResults[2][cellIDPointer]) + fabs(conversionResults[4][cellIDPointer] - conversionResults[3][cellIDPointer]);                                          // Calculate difference
 80076b2:	68fb      	ldr	r3, [r7, #12]
		
		if(difference >= (0.001f*argBalanceDropMiliVoltage))
 80076b4:	ed9f aa1b 	vldr	s20, [pc, #108]	; 8007724 <modPowerElectronicsTerminalCellConnectionTest+0x388>
		float difference = fabs(conversionResults[4][cellIDPointer] - conversionResults[2][cellIDPointer]) + fabs(conversionResults[4][cellIDPointer] - conversionResults[3][cellIDPointer]);                                          // Calculate difference
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 80076c2:	f8d8 3000 	ldr.w	r3, [r8]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b2f5      	uxtb	r5, r6
 80076ca:	42ab      	cmp	r3, r5
 80076cc:	f200 80c8 	bhi.w	8007860 <modPowerElectronicsTerminalCellConnectionTest+0x4c4>
			overAllPassFail = passFail = false;
		
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[2][cellIDPointer],conversionResults[3][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
	}
	
	modCommandsPrintf("------    End balance test     ------");
 80076d0:	4815      	ldr	r0, [pc, #84]	; (8007728 <modPowerElectronicsTerminalCellConnectionTest+0x38c>)
 80076d2:	f7fb ff49 	bl	8003568 <modCommandsPrintf>
 80076d6:	e029      	b.n	800772c <modPowerElectronicsTerminalCellConnectionTest+0x390>
 80076d8:	200049e8 	.word	0x200049e8
 80076dc:	08013627 	.word	0x08013627
 80076e0:	08013650 	.word	0x08013650
 80076e4:	08013653 	.word	0x08013653
 80076e8:	200049f0 	.word	0x200049f0
 80076ec:	08013685 	.word	0x08013685
 80076f0:	0801369e 	.word	0x0801369e
 80076f4:	080136b6 	.word	0x080136b6
 80076f8:	080136de 	.word	0x080136de
 80076fc:	080136fc 	.word	0x080136fc
 8007700:	0801371a 	.word	0x0801371a
 8007704:	08013622 	.word	0x08013622
 8007708:	0801361d 	.word	0x0801361d
 800770c:	08013738 	.word	0x08013738
 8007710:	08013753 	.word	0x08013753
 8007714:	0801379e 	.word	0x0801379e
 8007718:	080137c6 	.word	0x080137c6
 800771c:	0002aaaa 	.word	0x0002aaaa
 8007720:	00015555 	.word	0x00015555
 8007724:	3a83126f 	.word	0x3a83126f
 8007728:	080137ee 	.word	0x080137ee
	modCommandsPrintf("------     Overall: %s       ------",overAllPassFail ? "Pass" : "Fail");// Tell whether test passed / failed
 800772c:	4b77      	ldr	r3, [pc, #476]	; (800790c <modPowerElectronicsTerminalCellConnectionTest+0x570>)
 800772e:	4978      	ldr	r1, [pc, #480]	; (8007910 <modPowerElectronicsTerminalCellConnectionTest+0x574>)
 8007730:	4878      	ldr	r0, [pc, #480]	; (8007914 <modPowerElectronicsTerminalCellConnectionTest+0x578>)
 8007732:	f1bb 0f00 	cmp.w	fp, #0
 8007736:	bf08      	it	eq
 8007738:	4619      	moveq	r1, r3
 800773a:	f7fb ff15 	bl	8003568 <modCommandsPrintf>
}
 800773e:	372c      	adds	r7, #44	; 0x2c
 8007740:	46bd      	mov	sp, r7
 8007742:	ecbd 8b06 	vpop	{d8-d10}
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  modCommandsPrintf("No valid test arguments given. Using defaults:");
 800774a:	4873      	ldr	r0, [pc, #460]	; (8007918 <modPowerElectronicsTerminalCellConnectionTest+0x57c>)
 800774c:	f7fb ff0c 	bl	8003568 <modCommandsPrintf>
 8007750:	e656      	b.n	8007400 <modPowerElectronicsTerminalCellConnectionTest+0x64>
	  conversionResults[4][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 8007752:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8007756:	f841 0b04 	str.w	r0, [r1], #4
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 800775a:	3308      	adds	r3, #8
 800775c:	e6d3      	b.n	8007506 <modPowerElectronicsTerminalCellConnectionTest+0x16a>
	  conversionResults[0][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 800775e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8007762:	f841 0b04 	str.w	r0, [r1], #4
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007766:	e6fc      	b.n	8007562 <modPowerElectronicsTerminalCellConnectionTest+0x1c6>
	  conversionResults[1][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 8007768:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800776c:	f841 0b04 	str.w	r0, [r1], #4
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007770:	3308      	adds	r3, #8
 8007772:	e728      	b.n	80075c6 <modPowerElectronicsTerminalCellConnectionTest+0x22a>
		difference = conversionResults[0][cellIDPointer] - conversionResults[1][cellIDPointer];                                          // Calculate difference
 8007774:	68fd      	ldr	r5, [r7, #12]
 8007776:	441d      	add	r5, r3
 8007778:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800777c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8007780:	682e      	ldr	r6, [r5, #0]
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	ee07 6a10 	vmov	s14, r6
 8007788:	ee07 0a90 	vmov	s15, r0
 800778c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		if((conversionResults[0][cellIDPointer] >= modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage) || (conversionResults[0][cellIDPointer] <= modPowerElectronicsGeneralConfigHandle->cellHardUnderVoltage)) {
 8007790:	ee07 0a10 	vmov	s14, r0
		difference = conversionResults[0][cellIDPointer] - conversionResults[1][cellIDPointer];                                          // Calculate difference
 8007794:	ee17 5a90 	vmov	r5, s15
		if((conversionResults[0][cellIDPointer] >= modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage) || (conversionResults[0][cellIDPointer] <= modPowerElectronicsGeneralConfigHandle->cellHardUnderVoltage)) {
 8007798:	edd1 7a03 	vldr	s15, [r1, #12]
 800779c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if((cellIDPointer != 0) && (cellIDPointer != (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-1)) && ((cellIDPointer+1) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule != 0) && (fabs(difference) >= 0.05f))
 80077a4:	f103 0a01 	add.w	sl, r3, #1
		if((conversionResults[0][cellIDPointer] >= modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage) || (conversionResults[0][cellIDPointer] <= modPowerElectronicsGeneralConfigHandle->cellHardUnderVoltage)) {
 80077a8:	da06      	bge.n	80077b8 <modPowerElectronicsTerminalCellConnectionTest+0x41c>
 80077aa:	edd1 7a02 	vldr	s15, [r1, #8]
 80077ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	d80f      	bhi.n	80077d8 <modPowerElectronicsTerminalCellConnectionTest+0x43c>
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[0][cellIDPointer],conversionResults[1][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80077b8:	f7fa f9a6 	bl	8001b08 <__aeabi_f2d>
 80077bc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7fa f9a1 	bl	8001b08 <__aeabi_f2d>
 80077c6:	ec41 0b18 	vmov	d8, r0, r1
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7fa f99c 	bl	8001b08 <__aeabi_f2d>
			overAllPassFail = passFail = false;
 80077d0:	f04f 0b00 	mov.w	fp, #0
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[0][cellIDPointer],conversionResults[1][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80077d4:	4b4d      	ldr	r3, [pc, #308]	; (800790c <modPowerElectronicsTerminalCellConnectionTest+0x570>)
 80077d6:	e00d      	b.n	80077f4 <modPowerElectronicsTerminalCellConnectionTest+0x458>
			if((cellIDPointer != 0) && (cellIDPointer != (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-1)) && ((cellIDPointer+1) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule != 0) && (fabs(difference) >= 0.05f))
 80077d8:	b9db      	cbnz	r3, 8007812 <modPowerElectronicsTerminalCellConnectionTest+0x476>
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[0][cellIDPointer],conversionResults[1][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80077da:	f7fa f995 	bl	8001b08 <__aeabi_f2d>
 80077de:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7fa f990 	bl	8001b08 <__aeabi_f2d>
 80077e8:	ec41 0b18 	vmov	d8, r0, r1
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7fa f98b 	bl	8001b08 <__aeabi_f2d>
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <modPowerElectronicsTerminalCellConnectionTest+0x574>)
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fa:	ed8d 8b00 	vstr	d8, [sp]
 80077fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007802:	4846      	ldr	r0, [pc, #280]	; (800791c <modPowerElectronicsTerminalCellConnectionTest+0x580>)
 8007804:	4651      	mov	r1, sl
 8007806:	f7fb feaf 	bl	8003568 <modCommandsPrintf>
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	3301      	adds	r3, #1
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	e6e0      	b.n	80075d4 <modPowerElectronicsTerminalCellConnectionTest+0x238>
			if((cellIDPointer != 0) && (cellIDPointer != (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries-1)) && ((cellIDPointer+1) % modPowerElectronicsGeneralConfigHandle->noOfCellsPerModule != 0) && (fabs(difference) >= 0.05f))
 8007812:	3a01      	subs	r2, #1
 8007814:	4293      	cmp	r3, r2
 8007816:	d0e0      	beq.n	80077da <modPowerElectronicsTerminalCellConnectionTest+0x43e>
 8007818:	788a      	ldrb	r2, [r1, #2]
 800781a:	fbba f3f2 	udiv	r3, sl, r2
 800781e:	fb02 a313 	mls	r3, r2, r3, sl
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0d9      	beq.n	80077da <modPowerElectronicsTerminalCellConnectionTest+0x43e>
 8007826:	ee07 5a90 	vmov	s15, r5
 800782a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8007920 <modPowerElectronicsTerminalCellConnectionTest+0x584>
 800782e:	eef0 7ae7 	vabs.f32	s15, s15
 8007832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783a:	dbce      	blt.n	80077da <modPowerElectronicsTerminalCellConnectionTest+0x43e>
 800783c:	e7bc      	b.n	80077b8 <modPowerElectronicsTerminalCellConnectionTest+0x41c>
		cellBalanceMaskEnableRegister |= (1 << outputPointer);
 800783e:	fa01 f003 	lsl.w	r0, r1, r3
 8007842:	4306      	orrs	r6, r0
	for(int outputPointer = 0 ; outputPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries; outputPointer++) {
 8007844:	3301      	adds	r3, #1
 8007846:	e6d8      	b.n	80075fa <modPowerElectronicsTerminalCellConnectionTest+0x25e>
	  conversionResults[2][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 8007848:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800784c:	f841 0b04 	str.w	r0, [r1], #4
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007850:	3308      	adds	r3, #8
 8007852:	e6ff      	b.n	8007654 <modPowerElectronicsTerminalCellConnectionTest+0x2b8>
	  conversionResults[3][cellIDPointer] = modPowerElectronicsPackStateHandle->cellVoltagesIndividual[cellIDPointer].cellVoltage;
 8007854:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007858:	f845 1b04 	str.w	r1, [r5], #4
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 800785c:	3308      	adds	r3, #8
 800785e:	e722      	b.n	80076a6 <modPowerElectronicsTerminalCellConnectionTest+0x30a>
		float difference = fabs(conversionResults[4][cellIDPointer] - conversionResults[2][cellIDPointer]) + fabs(conversionResults[4][cellIDPointer] - conversionResults[3][cellIDPointer]);                                          // Calculate difference
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007866:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800786a:	edd3 7a00 	vldr	s15, [r3]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	442b      	add	r3, r5
 8007872:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007876:	ed93 7a00 	vldr	s14, [r3]
 800787a:	eb0a 0305 	add.w	r3, sl, r5
 800787e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007882:	edd3 8a00 	vldr	s17, [r3]
 8007886:	ee37 8ac7 	vsub.f32	s16, s15, s14
 800788a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800788e:	eeb0 8ac8 	vabs.f32	s16, s16
 8007892:	eef0 7ae7 	vabs.f32	s15, s15
 8007896:	ee38 8a27 	vadd.f32	s16, s16, s15
		if(difference >= (0.001f*argBalanceDropMiliVoltage))
 800789a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800789e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[2][cellIDPointer],conversionResults[3][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80078a2:	ee17 0a10 	vmov	r0, s14
		if(difference >= (0.001f*argBalanceDropMiliVoltage))
 80078a6:	ee67 7a8a 	vmul.f32	s15, s15, s20
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[2][cellIDPointer],conversionResults[3][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80078aa:	3501      	adds	r5, #1
		if(difference >= (0.001f*argBalanceDropMiliVoltage))
 80078ac:	eef4 7ac8 	vcmpe.f32	s15, s16
 80078b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			overAllPassFail = passFail = false;
 80078b4:	bf86      	itte	hi
 80078b6:	f04f 0b00 	movhi.w	fp, #0
 80078ba:	46d9      	movhi	r9, fp
			passFail = true;
 80078bc:	f04f 0901 	movls.w	r9, #1
	  modCommandsPrintf("[%2d] %.3fV - %.3fV = % .3fV -> %s",cellIDPointer+1,conversionResults[2][cellIDPointer],conversionResults[3][cellIDPointer],difference,passFail ? "Pass" : "Fail");  // Print the results
 80078c0:	f7fa f922 	bl	8001b08 <__aeabi_f2d>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	ee18 0a90 	vmov	r0, s17
 80078cc:	e9c7 2300 	strd	r2, r3, [r7]
 80078d0:	f7fa f91a 	bl	8001b08 <__aeabi_f2d>
 80078d4:	ec41 0b19 	vmov	d9, r0, r1
 80078d8:	ee18 0a10 	vmov	r0, s16
 80078dc:	f7fa f914 	bl	8001b08 <__aeabi_f2d>
 80078e0:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8007910 <modPowerElectronicsTerminalCellConnectionTest+0x574>
 80078e4:	f8df c024 	ldr.w	ip, [pc, #36]	; 800790c <modPowerElectronicsTerminalCellConnectionTest+0x570>
 80078e8:	f1b9 0f00 	cmp.w	r9, #0
 80078ec:	bf18      	it	ne
 80078ee:	46f4      	movne	ip, lr
 80078f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f4:	ed8d 9b00 	vstr	d9, [sp]
 80078f8:	f8cd c010 	str.w	ip, [sp, #16]
 80078fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007900:	4806      	ldr	r0, [pc, #24]	; (800791c <modPowerElectronicsTerminalCellConnectionTest+0x580>)
 8007902:	4629      	mov	r1, r5
 8007904:	f7fb fe30 	bl	8003568 <modCommandsPrintf>
	for(cellIDPointer = 0; cellIDPointer < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries ; cellIDPointer++){
 8007908:	3601      	adds	r6, #1
 800790a:	e6da      	b.n	80076c2 <modPowerElectronicsTerminalCellConnectionTest+0x326>
 800790c:	0801361d 	.word	0x0801361d
 8007910:	08013622 	.word	0x08013622
 8007914:	08013814 	.word	0x08013814
 8007918:	08013656 	.word	0x08013656
 800791c:	0801377b 	.word	0x0801377b
 8007920:	3d4ccccd 	.word	0x3d4ccccd

08007924 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArray>:
void modPowerElectronicsCellMonitorsEnableBalanceResistorsArray(){
 8007924:	b508      	push	{r3, lr}
	modPowerElectronicsCellMonitorsCheckAndSolveInitState();
 8007926:	f7ff fbcf 	bl	80070c8 <modPowerElectronicsCellMonitorsCheckAndSolveInitState>
	driverSWLTC6804EnableBalanceResistorsArray(modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask, modPowerElectronicsGeneralConfigHandle->cellMonitorType);	
 800792a:	4a06      	ldr	r2, [pc, #24]	; (8007944 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArray+0x20>)
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArray+0x24>)
 800792e:	6810      	ldr	r0, [r2, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f500 5091 	add.w	r0, r0, #4640	; 0x1220
 8007936:	f893 10ef 	ldrb.w	r1, [r3, #239]	; 0xef
 800793a:	3004      	adds	r0, #4
}
 800793c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	driverSWLTC6804EnableBalanceResistorsArray(modPowerElectronicsPackStateHandle->cellModuleBalanceResistorEnableMask, modPowerElectronicsGeneralConfigHandle->cellMonitorType);	
 8007940:	f002 b820 	b.w	8009984 <driverSWLTC6804EnableBalanceResistorsArray>
 8007944:	200049f0 	.word	0x200049f0
 8007948:	200049e8 	.word	0x200049e8

0800794c <modPowerElectronicsSubTaskBalancing>:
void modPowerElectronicsSubTaskBalancing(void) {
 800794c:	b570      	push	{r4, r5, r6, lr}
	if(modDelayTick1ms(&modPowerElectronicsCellBalanceUpdateLastTick,delayTimeHolder)) {
 800794e:	4d35      	ldr	r5, [pc, #212]	; (8007a24 <modPowerElectronicsSubTaskBalancing+0xd8>)
 8007950:	4835      	ldr	r0, [pc, #212]	; (8007a28 <modPowerElectronicsSubTaskBalancing+0xdc>)
 8007952:	6829      	ldr	r1, [r5, #0]
 8007954:	f7fd f8e4 	bl	8004b20 <modDelayTick1ms>
 8007958:	2800      	cmp	r0, #0
 800795a:	d061      	beq.n	8007a20 <modPowerElectronicsSubTaskBalancing+0xd4>
		delaytoggle ^= true;
 800795c:	4a33      	ldr	r2, [pc, #204]	; (8007a2c <modPowerElectronicsSubTaskBalancing+0xe0>)
 800795e:	4c34      	ldr	r4, [pc, #208]	; (8007a30 <modPowerElectronicsSubTaskBalancing+0xe4>)
 8007960:	7813      	ldrb	r3, [r2, #0]
 8007962:	f083 0301 	eor.w	r3, r3, #1
 8007966:	7013      	strb	r3, [r2, #0]
		delayTimeHolder = delaytoggle ? modPowerElectronicsGeneralConfigHandle->cellBalanceUpdateInterval : 200;
 8007968:	b19b      	cbz	r3, 8007992 <modPowerElectronicsSubTaskBalancing+0x46>
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800796e:	602a      	str	r2, [r5, #0]
			if((modPowerElectronicsPackStateHandle->chargeDesired && !modPowerElectronicsPackStateHandle->disChargeDesired) || modPowerStateChargerDetected() || modPowerElectronicsGeneralConfigHandle->cellBalanceAllTime) {	
 8007970:	4d30      	ldr	r5, [pc, #192]	; (8007a34 <modPowerElectronicsSubTaskBalancing+0xe8>)
 8007972:	682a      	ldr	r2, [r5, #0]
		if(delaytoggle) {
 8007974:	b97b      	cbnz	r3, 8007996 <modPowerElectronicsSubTaskBalancing+0x4a>
		for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 8007976:	6821      	ldr	r1, [r4, #0]
 8007978:	7808      	ldrb	r0, [r1, #0]
 800797a:	78c9      	ldrb	r1, [r1, #3]
 800797c:	461c      	mov	r4, r3
 800797e:	fb10 f001 	smulbb	r0, r0, r1
 8007982:	b2d9      	uxtb	r1, r3
 8007984:	4281      	cmp	r1, r0
 8007986:	f103 0301 	add.w	r3, r3, #1
 800798a:	db44      	blt.n	8007a16 <modPowerElectronicsSubTaskBalancing+0xca>
		modPowerElectronicsPackStateHandle->balanceActive = false;
 800798c:	f882 40a7 	strb.w	r4, [r2, #167]	; 0xa7
 8007990:	e038      	b.n	8007a04 <modPowerElectronicsSubTaskBalancing+0xb8>
		delayTimeHolder = delaytoggle ? modPowerElectronicsGeneralConfigHandle->cellBalanceUpdateInterval : 200;
 8007992:	22c8      	movs	r2, #200	; 0xc8
 8007994:	e7eb      	b.n	800796e <modPowerElectronicsSubTaskBalancing+0x22>
			if((modPowerElectronicsPackStateHandle->chargeDesired && !modPowerElectronicsPackStateHandle->disChargeDesired) || modPowerStateChargerDetected() || modPowerElectronicsGeneralConfigHandle->cellBalanceAllTime) {	
 8007996:	f892 309f 	ldrb.w	r3, [r2, #159]	; 0x9f
 800799a:	b353      	cbz	r3, 80079f2 <modPowerElectronicsSubTaskBalancing+0xa6>
 800799c:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80079a0:	bb3b      	cbnz	r3, 80079f2 <modPowerElectronicsSubTaskBalancing+0xa6>
				for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 80079a2:	6821      	ldr	r1, [r4, #0]
					if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellVoltage >= (modPowerElectronicsPackStateHandle->cellVoltageLow + modPowerElectronicsGeneralConfigHandle->cellBalanceDifferenceThreshold)) {
 80079a4:	682c      	ldr	r4, [r5, #0]
				for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 80079a6:	7808      	ldrb	r0, [r1, #0]
 80079a8:	78cb      	ldrb	r3, [r1, #3]
					if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellVoltage >= (modPowerElectronicsPackStateHandle->cellVoltageLow + modPowerElectronicsGeneralConfigHandle->cellBalanceDifferenceThreshold)) {
 80079aa:	2200      	movs	r2, #0
				for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 80079ac:	fb10 f003 	smulbb	r0, r0, r3
						modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellBleedActive = false;
 80079b0:	4615      	mov	r5, r2
							modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellBleedActive = true;
 80079b2:	2601      	movs	r6, #1
				for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 80079b4:	b2d3      	uxtb	r3, r2
 80079b6:	4283      	cmp	r3, r0
 80079b8:	da24      	bge.n	8007a04 <modPowerElectronicsSubTaskBalancing+0xb8>
					if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellVoltage >= (modPowerElectronicsPackStateHandle->cellVoltageLow + modPowerElectronicsGeneralConfigHandle->cellBalanceDifferenceThreshold)) {
 80079ba:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80079be:	edd1 6a06 	vldr	s13, [r1, #24]
 80079c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80079c6:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	db1b      	blt.n	8007a10 <modPowerElectronicsSubTaskBalancing+0xc4>
						if(modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellVoltage >= modPowerElectronicsGeneralConfigHandle->cellBalanceStart) {
 80079d8:	edd1 7a07 	vldr	s15, [r1, #28]
 80079dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	db14      	blt.n	8007a10 <modPowerElectronicsSubTaskBalancing+0xc4>
							modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellBleedActive = true;
 80079e6:	f883 60b5 	strb.w	r6, [r3, #181]	; 0xb5
							modPowerElectronicsPackStateHandle->balanceActive = true;
 80079ea:	f884 60a7 	strb.w	r6, [r4, #167]	; 0xa7
				for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 80079ee:	3201      	adds	r2, #1
 80079f0:	e7e0      	b.n	80079b4 <modPowerElectronicsSubTaskBalancing+0x68>
			if((modPowerElectronicsPackStateHandle->chargeDesired && !modPowerElectronicsPackStateHandle->disChargeDesired) || modPowerStateChargerDetected() || modPowerElectronicsGeneralConfigHandle->cellBalanceAllTime) {	
 80079f2:	f000 fafb 	bl	8007fec <modPowerStateChargerDetected>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d1d3      	bne.n	80079a2 <modPowerElectronicsSubTaskBalancing+0x56>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1ce      	bne.n	80079a2 <modPowerElectronicsSubTaskBalancing+0x56>
		modPowerElectronicsCallMonitorsCalcBalanceResistorArray();
 8007a04:	f7fe fddc 	bl	80065c0 <modPowerElectronicsCallMonitorsCalcBalanceResistorArray>
};
 8007a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modPowerElectronicsCellMonitorsEnableBalanceResistorsArray();
 8007a0c:	f7ff bf8a 	b.w	8007924 <modPowerElectronicsCellMonitorsEnableBalanceResistorsArray>
						modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellBleedActive = false;
 8007a10:	f883 50b5 	strb.w	r5, [r3, #181]	; 0xb5
 8007a14:	e7eb      	b.n	80079ee <modPowerElectronicsSubTaskBalancing+0xa2>
		modPowerElectronicsPackStateHandle->cellVoltagesIndividual[i].cellBleedActive = false;
 8007a16:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007a1a:	f881 40b5 	strb.w	r4, [r1, #181]	; 0xb5
		for(uint8_t i = 0; i < modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->noOfParallelModules; i++) {
 8007a1e:	e7b0      	b.n	8007982 <modPowerElectronicsSubTaskBalancing+0x36>
};
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	bf00      	nop
 8007a24:	20000018 	.word	0x20000018
 8007a28:	200049c4 	.word	0x200049c4
 8007a2c:	200049b1 	.word	0x200049b1
 8007a30:	200049e8 	.word	0x200049e8
 8007a34:	200049f0 	.word	0x200049f0

08007a38 <modPowerElectronicsSamplePackVoltage>:
		}
	}
}

void modPowerElectronicsSamplePackVoltage(float *voltagePointer) {
	switch(modPowerElectronicsGeneralConfigHandle->packVoltageDataSource) {
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <modPowerElectronicsSamplePackVoltage+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007a40:	2a04      	cmp	r2, #4
 8007a42:	d81f      	bhi.n	8007a84 <modPowerElectronicsSamplePackVoltage+0x4c>
 8007a44:	2a02      	cmp	r2, #2
 8007a46:	d81b      	bhi.n	8007a80 <modPowerElectronicsSamplePackVoltage+0x48>
 8007a48:	2a01      	cmp	r2, #1
 8007a4a:	d002      	beq.n	8007a52 <modPowerElectronicsSamplePackVoltage+0x1a>
 8007a4c:	2a02      	cmp	r2, #2
 8007a4e:	d009      	beq.n	8007a64 <modPowerElectronicsSamplePackVoltage+0x2c>
 8007a50:	4770      	bx	lr
		case sourcePackVoltageNone:
			break;
		case sourcePackVoltageISL28022:
				driverSWISL28022GetBusVoltage(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,voltagePointer,modPowerElectronicsGeneralConfigHandle->voltageLCOffset, modPowerElectronicsGeneralConfigHandle->voltageLCFactor);
 8007a52:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8007a56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	2040      	movs	r0, #64	; 0x40
 8007a60:	f002 b954 	b.w	8009d0c <driverSWISL28022GetBusVoltage>
			break;
		case sourcePackVoltageSumOfIndividualCellVoltages:
			*voltagePointer = modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsPackStateHandle->cellVoltageAverage;
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <modPowerElectronicsSamplePackVoltage+0x54>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a72:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a7a:	edc0 7a00 	vstr	s15, [r0]
			break;
 8007a7e:	4770      	bx	lr
		case sourcePackVoltageCANDieBieShunt:
			*voltagePointer = 0.0f;
 8007a80:	2300      	movs	r3, #0
 8007a82:	6003      	str	r3, [r0, #0]
				//driverSWINA226GetBusVoltage(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,voltagePointer,modPowerElectronicsGeneralConfigHandle->voltageLCOffset, modPowerElectronicsGeneralConfigHandle->voltageLCFactor);
			break;		
		default:
			break;
	}
}
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	200049e8 	.word	0x200049e8
 8007a8c:	200049f0 	.word	0x200049f0

08007a90 <modPowerElectronicsCalcPackCurrent>:

float modPowerElectronicsCalcPackCurrent(void){
 8007a90:	b570      	push	{r4, r5, r6, lr}
	float returnCurrent = 0.0f;
	float returnCurrentTemp = 0.0f;

	switch(modPowerElectronicsGeneralConfigHandle->packCurrentDataSource){
 8007a92:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <modPowerElectronicsCalcPackCurrent+0x70>)
float modPowerElectronicsCalcPackCurrent(void){
 8007a94:	ed2d 8b02 	vpush	{d8}
	switch(modPowerElectronicsGeneralConfigHandle->packCurrentDataSource){
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d003      	beq.n	8007aaa <modPowerElectronicsCalcPackCurrent+0x1a>
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d008      	beq.n	8007ab8 <modPowerElectronicsCalcPackCurrent+0x28>
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d127      	bne.n	8007afa <modPowerElectronicsCalcPackCurrent+0x6a>
		case sourcePackCurrentINA226:
			returnCurrent = modPowerElectronicsPackStateHandle->loCurrentLoadCurrent;
			break;
		case sourcePackCurrentCANVESC:
			if(modPowerStateChargerDetected()){
				returnCurrent = modPowerElectronicsPackStateHandle->loCurrentLoadCurrent;
 8007aaa:	4b16      	ldr	r3, [pc, #88]	; (8007b04 <modPowerElectronicsCalcPackCurrent+0x74>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
		default:
			break;
	}
	
	return returnCurrent;
}
 8007ab2:	ecbd 8b02 	vpop	{d8}
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
			if(modPowerStateChargerDetected()){
 8007ab8:	f000 fa98 	bl	8007fec <modPowerStateChargerDetected>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1f4      	bne.n	8007aaa <modPowerElectronicsCalcPackCurrent+0x1a>
	float returnCurrentTemp = 0.0f;
 8007ac0:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8007b08 <modPowerElectronicsCalcPackCurrent+0x78>
					if (msg->id >= 0 && modDelayTick1msNoRST(&modPowerElectronicsCANCurrentVESCLastTick,2000)) {
 8007ac4:	4e11      	ldr	r6, [pc, #68]	; (8007b0c <modPowerElectronicsCalcPackCurrent+0x7c>)
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8007ac6:	4604      	mov	r4, r0
					can_status_msg_4 *msg = comm_can_get_status_msg_4_index(i);
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f7fb fd15 	bl	80034f8 <comm_can_get_status_msg_4_index>
					if (msg->id >= 0 && modDelayTick1msNoRST(&modPowerElectronicsCANCurrentVESCLastTick,2000)) {
 8007ace:	6803      	ldr	r3, [r0, #0]
 8007ad0:	2b00      	cmp	r3, #0
					can_status_msg_4 *msg = comm_can_get_status_msg_4_index(i);
 8007ad2:	4605      	mov	r5, r0
					if (msg->id >= 0 && modDelayTick1msNoRST(&modPowerElectronicsCANCurrentVESCLastTick,2000)) {
 8007ad4:	db09      	blt.n	8007aea <modPowerElectronicsCalcPackCurrent+0x5a>
 8007ad6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7fd f84a 	bl	8004b74 <modDelayTick1msNoRST>
 8007ae0:	b118      	cbz	r0, 8007aea <modPowerElectronicsCalcPackCurrent+0x5a>
						returnCurrentTemp += msg->current_in;
 8007ae2:	edd5 7a04 	vldr	s15, [r5, #16]
 8007ae6:	ee38 8a27 	vadd.f32	s16, s16, s15
				for (int i = 0;i < CAN_STATUS_MSGS_TO_STORE;i++) {
 8007aea:	3401      	adds	r4, #1
 8007aec:	2c0a      	cmp	r4, #10
 8007aee:	d1eb      	bne.n	8007ac8 <modPowerElectronicsCalcPackCurrent+0x38>
				returnCurrent = returnCurrentTemp/CAN_STATUS_MSGS_TO_STORE;
 8007af0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8007af4:	ee88 0a27 	vdiv.f32	s0, s16, s15
	return returnCurrent;
 8007af8:	e7db      	b.n	8007ab2 <modPowerElectronicsCalcPackCurrent+0x22>
	switch(modPowerElectronicsGeneralConfigHandle->packCurrentDataSource){
 8007afa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007b08 <modPowerElectronicsCalcPackCurrent+0x78>
	return returnCurrent;
 8007afe:	e7d8      	b.n	8007ab2 <modPowerElectronicsCalcPackCurrent+0x22>
 8007b00:	200049e8 	.word	0x200049e8
 8007b04:	200049f0 	.word	0x200049f0
 8007b08:	00000000 	.word	0x00000000
 8007b0c:	200049c0 	.word	0x200049c0

08007b10 <modPowerElectronicsLCSenseSample>:

void modPowerElectronicsLCSenseSample(void) {
 8007b10:	b570      	push	{r4, r5, r6, lr}
		driverSWISL28022GetBusCurrent(ISL28022_MASTER_ADDRES,ISL28022_MASTER_BUS,&modPowerElectronicsPackStateHandle->loCurrentLoadCurrent,currentOffset, modPowerElectronicsGeneralConfigHandle->shuntLCFactor);
 8007b12:	4e12      	ldr	r6, [pc, #72]	; (8007b5c <modPowerElectronicsLCSenseSample+0x4c>)
 8007b14:	4c12      	ldr	r4, [pc, #72]	; (8007b60 <modPowerElectronicsLCSenseSample+0x50>)
 8007b16:	6833      	ldr	r3, [r6, #0]
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	4d12      	ldr	r5, [pc, #72]	; (8007b64 <modPowerElectronicsLCSenseSample+0x54>)
 8007b1c:	edd3 0a0e 	vldr	s1, [r3, #56]	; 0x38
 8007b20:	ed95 0a00 	vldr	s0, [r5]
 8007b24:	3228      	adds	r2, #40	; 0x28
 8007b26:	2102      	movs	r1, #2
 8007b28:	2040      	movs	r0, #64	; 0x40
 8007b2a:	f002 f8a1 	bl	8009c70 <driverSWISL28022GetBusCurrent>
		driverHWADCGetLoadVoltage(&modPowerElectronicsPackStateHandle->loCurrentLoadVoltage, modPowerElectronicsGeneralConfigHandle->loadVoltageOffset, modPowerElectronicsGeneralConfigHandle->loadVoltageFactor);
 8007b2e:	6833      	ldr	r3, [r6, #0]
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	edd3 0a11 	vldr	s1, [r3, #68]	; 0x44
 8007b36:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 8007b3a:	302c      	adds	r0, #44	; 0x2c
 8007b3c:	f002 fb6c 	bl	800a218 <driverHWADCGetLoadVoltage>
	#if (HAS_CHARGER_VOLTAGE_MEASUREMENT)
		driverHWADCGetChargerVoltage(&modPowerElectronicsPackStateHandle->chargerVoltage, modPowerElectronicsGeneralConfigHandle->chargerVoltageOffset, modPowerElectronicsGeneralConfigHandle->chargerVoltageFactor);
	#endif
	
	//Calculate the zero current offset
	if(currentOffsetCounter < 2){
 8007b40:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <modPowerElectronicsLCSenseSample+0x58>)
 8007b42:	7813      	ldrb	r3, [r2, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d807      	bhi.n	8007b58 <modPowerElectronicsLCSenseSample+0x48>
		//currentOffsetTemp += modPowerElectronicsPackStateHandle->loCurrentLoadCurrent;
		currentOffsetCounter++;
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
		if(currentOffsetCounter == 2){
 8007b4c:	2b02      	cmp	r3, #2
		currentOffsetCounter++;
 8007b4e:	7013      	strb	r3, [r2, #0]
			currentOffset = modPowerElectronicsPackStateHandle->loCurrentLoadCurrent;
 8007b50:	bf02      	ittt	eq
 8007b52:	6823      	ldreq	r3, [r4, #0]
 8007b54:	6a9b      	ldreq	r3, [r3, #40]	; 0x28
 8007b56:	602b      	streq	r3, [r5, #0]
		}
	}
}
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200049e8 	.word	0x200049e8
 8007b60:	200049f0 	.word	0x200049f0
 8007b64:	200049ac 	.word	0x200049ac
 8007b68:	200049b0 	.word	0x200049b0

08007b6c <modPowerElectronicsSamplePackAndLCData>:
void modPowerElectronicsSamplePackAndLCData(void) {
 8007b6c:	b513      	push	{r0, r1, r4, lr}
	modPowerElectronicsPackStateHandle->packVoltage = tempPackVoltage;
 8007b6e:	4c1b      	ldr	r4, [pc, #108]	; (8007bdc <modPowerElectronicsSamplePackAndLCData+0x70>)
	modPowerElectronicsSamplePackVoltage(&tempPackVoltage);
 8007b70:	a801      	add	r0, sp, #4
 8007b72:	f7ff ff61 	bl	8007a38 <modPowerElectronicsSamplePackVoltage>
	modPowerElectronicsPackStateHandle->packVoltage = tempPackVoltage;
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	9a01      	ldr	r2, [sp, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
	modPowerElectronicsLCSenseSample();
 8007b7c:	f7ff ffc8 	bl	8007b10 <modPowerElectronicsLCSenseSample>
	if(fabs(tempPackVoltage - modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsPackStateHandle->cellVoltageAverage) < 0.2f*(modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsPackStateHandle->cellVoltageAverage)) {    // If the error is different than 20% continue normal operation. 
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <modPowerElectronicsSamplePackAndLCData+0x74>)
 8007b82:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007be4 <modPowerElectronicsSamplePackAndLCData+0x78>
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b94:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007b98:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <modPowerElectronicsSamplePackAndLCData+0x7c>)
 8007b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b9e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007ba2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007baa:	eeb0 7ac7 	vabs.f32	s14, s14
 8007bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb6:	d503      	bpl.n	8007bc0 <modPowerElectronicsSamplePackAndLCData+0x54>
		modPowerElectronicsVinErrorCount = 0;																								// Reset error count.
 8007bb8:	2200      	movs	r2, #0
			modPowerElectronicsVoltageSenseError = true;
 8007bba:	701a      	strb	r2, [r3, #0]
}
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd10      	pop	{r4, pc}
		if(modPowerElectronicsVinErrorCount++ >= VinErrorThreshold){												// Increase error count
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	1c51      	adds	r1, r2, #1
 8007bc4:	2a09      	cmp	r2, #9
 8007bc6:	7019      	strb	r1, [r3, #0]
 8007bc8:	d904      	bls.n	8007bd4 <modPowerElectronicsSamplePackAndLCData+0x68>
			modPowerElectronicsVinErrorCount = VinErrorThreshold;
 8007bca:	220a      	movs	r2, #10
 8007bcc:	701a      	strb	r2, [r3, #0]
			modPowerElectronicsVoltageSenseError = true;
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <modPowerElectronicsSamplePackAndLCData+0x80>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	e7f2      	b.n	8007bba <modPowerElectronicsSamplePackAndLCData+0x4e>
			modPowerElectronicsInitISL();																												// Reinit I2C and ISL
 8007bd4:	f7ff f875 	bl	8006cc2 <modPowerElectronicsInitISL>
}
 8007bd8:	e7f0      	b.n	8007bbc <modPowerElectronicsSamplePackAndLCData+0x50>
 8007bda:	bf00      	nop
 8007bdc:	200049f0 	.word	0x200049f0
 8007be0:	200049e8 	.word	0x200049e8
 8007be4:	3e4ccccd 	.word	0x3e4ccccd
 8007be8:	20004a02 	.word	0x20004a02
 8007bec:	20004a03 	.word	0x20004a03

08007bf0 <modPowerElectronicsLowestInThree>:

uint16_t modPowerElectronicsLowestInThree(uint16_t num1,uint16_t num2,uint16_t num3) {
	if(num1 < num2 && num1 < num3) {
 8007bf0:	4288      	cmp	r0, r1
 8007bf2:	d201      	bcs.n	8007bf8 <modPowerElectronicsLowestInThree+0x8>
 8007bf4:	4290      	cmp	r0, r2
 8007bf6:	d303      	bcc.n	8007c00 <modPowerElectronicsLowestInThree+0x10>
		return num1;
	}	else if(num2 < num3) {
 8007bf8:	4291      	cmp	r1, r2
 8007bfa:	bf28      	it	cs
 8007bfc:	4611      	movcs	r1, r2
 8007bfe:	4608      	mov	r0, r1
		return num2;
	}	else{
		return num3;
	}
}
 8007c00:	4770      	bx	lr
	...

08007c04 <modPowerElectronicsCalcThrottle>:
void modPowerElectronicsCalcThrottle(void) {
 8007c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float     cellSoftUnderVoltage = modPowerElectronicsGeneralConfigHandle->cellLCSoftUnderVoltage;
 8007c08:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007dc8 <modPowerElectronicsCalcThrottle+0x1c4>
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007dcc <modPowerElectronicsCalcThrottle+0x1c8>
	float     cellSoftUnderVoltage = modPowerElectronicsGeneralConfigHandle->cellLCSoftUnderVoltage;
 8007c10:	f8d9 5000 	ldr.w	r5, [r9]
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c14:	f8d8 3000 	ldr.w	r3, [r8]
	float inputLowerLimitChargeVoltage               = modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperMargin - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperStart;
 8007c18:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8007c1c:	edd5 6a05 	vldr	s13, [r5, #20]
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c20:	ed95 1a2a 	vldr	s2, [r5, #168]	; 0xa8
	float inputLowerLimitDisChargeVoltage            = cellSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerMargin;
 8007c24:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c28:	eddf 1a60 	vldr	s3, [pc, #384]	; 8007dac <modPowerElectronicsCalcThrottle+0x1a8>
 8007c2c:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8007db0 <modPowerElectronicsCalcThrottle+0x1ac>
 8007c30:	ed93 0a23 	vldr	s0, [r3, #140]	; 0x8c
	float inputLowerLimitChargeVoltage               = modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperMargin - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperStart;
 8007c34:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
	float inputLowerLimitChargeTemperatureBattery    = modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax - 3.0f;
 8007c38:	edd5 4a26 	vldr	s9, [r5, #152]	; 0x98
	float inputLowerLimitDisChargeTemperatureBattery = modPowerElectronicsGeneralConfigHandle->allowedTempBattDischargingMax - 3.0f;
 8007c3c:	ed95 5a24 	vldr	s10, [r5, #144]	; 0x90
  float inputUpperLimitDisChargeVoltage            = cellSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerMargin + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerStart;
 8007c40:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
	float inputLowerLimitChargeVoltage               = modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperMargin - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperStart;
 8007c44:	ee76 6ae7 	vsub.f32	s13, s13, s15
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c48:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
	float inputLowerLimitDisChargeVoltage            = cellSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerMargin;
 8007c4c:	edd5 7a04 	vldr	s15, [r5, #16]
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c50:	ee71 0a60 	vsub.f32	s1, s2, s1
	float inputLowerLimitDisChargeVoltage            = cellSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerMargin;
 8007c54:	ee37 7a27 	vadd.f32	s14, s14, s15
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c58:	f7ff f818 	bl	8006c8c <modPowerElectronicsMapVariableFloat>
 8007c5c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	float inputLowerLimitChargeVoltage               = modPowerElectronicsGeneralConfigHandle->cellSoftOverVoltage - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperMargin - modPowerElectronicsGeneralConfigHandle->cellThrottleUpperStart;
 8007c60:	ee76 5ae5 	vsub.f32	s11, s13, s11
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c64:	ee10 2a10 	vmov	r2, s0
 8007c68:	b297      	uxth	r7, r2
	modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage               = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageHigh,inputLowerLimitChargeVoltage,inputUpperLimitChargeVoltage,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c6a:	eeb0 1a66 	vmov.f32	s2, s13
 8007c6e:	eef0 0a65 	vmov.f32	s1, s11
 8007c72:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8007db4 <modPowerElectronicsCalcThrottle+0x1b0>
 8007c76:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
	modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS       = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBMSHigh,inputLowerLimitTemperatureBMS,inputUpperLimitTemperatureBMS,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007c7a:	801f      	strh	r7, [r3, #0]
	modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage               = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageHigh,inputLowerLimitChargeVoltage,inputUpperLimitChargeVoltage,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c7c:	f7ff f806 	bl	8006c8c <modPowerElectronicsMapVariableFloat>
 8007c80:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery    = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitChargeTemperatureBattery,inputUpperLimitChargeTemperatureBattery,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c84:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8007c88:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8007db4 <modPowerElectronicsCalcThrottle+0x1b0>
	modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage               = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageHigh,inputLowerLimitChargeVoltage,inputUpperLimitChargeVoltage,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c8c:	ee10 2a10 	vmov	r2, s0
	float inputLowerLimitChargeTemperatureBattery    = modPowerElectronicsGeneralConfigHandle->allowedTempBattChargingMax - 3.0f;
 8007c90:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
	modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage               = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageHigh,inputLowerLimitChargeVoltage,inputUpperLimitChargeVoltage,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c94:	b291      	uxth	r1, r2
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery    = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitChargeTemperatureBattery,inputUpperLimitChargeTemperatureBattery,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c96:	ee74 0ae5 	vsub.f32	s1, s9, s11
 8007c9a:	eeb0 1a64 	vmov.f32	s2, s9
	modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage               = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageHigh,inputLowerLimitChargeVoltage,inputUpperLimitChargeVoltage,outputLowerLimitCharge,outputUpperLimitCharge);
 8007c9e:	8059      	strh	r1, [r3, #2]
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery    = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitChargeTemperatureBattery,inputUpperLimitChargeTemperatureBattery,outputLowerLimitCharge,outputUpperLimitCharge);
 8007ca0:	eeb0 0a66 	vmov.f32	s0, s13
 8007ca4:	f7fe fff2 	bl	8006c8c <modPowerElectronicsMapVariableFloat>
 8007ca8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
  float inputUpperLimitDisChargeVoltage            = cellSoftUnderVoltage + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerMargin + modPowerElectronicsGeneralConfigHandle->cellThrottleLowerStart;
 8007cac:	ee37 6a06 	vadd.f32	s12, s14, s12
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery    = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitChargeTemperatureBattery,inputUpperLimitChargeTemperatureBattery,outputLowerLimitCharge,outputUpperLimitCharge);
 8007cb0:	ee10 2a10 	vmov	r2, s0
 8007cb4:	b292      	uxth	r2, r2
	modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage            = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageLow,inputLowerLimitDisChargeVoltage,inputUpperLimitDisChargeVoltage,outputLowerLimitDisCharge,outputUpperLimitDisCharge);
 8007cb6:	eeb0 2a61 	vmov.f32	s4, s3
 8007cba:	eeb0 1a46 	vmov.f32	s2, s12
 8007cbe:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8007db0 <modPowerElectronicsCalcThrottle+0x1ac>
 8007cc2:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
	modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery    = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitChargeTemperatureBattery,inputUpperLimitChargeTemperatureBattery,outputLowerLimitCharge,outputUpperLimitCharge);
 8007cc6:	809a      	strh	r2, [r3, #4]
	modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage            = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageLow,inputLowerLimitDisChargeVoltage,inputUpperLimitDisChargeVoltage,outputLowerLimitDisCharge,outputUpperLimitDisCharge);
 8007cc8:	eef0 0a47 	vmov.f32	s1, s14
 8007ccc:	f7fe ffde 	bl	8006c8c <modPowerElectronicsMapVariableFloat>
 8007cd0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	modPowerElectronicsPackStateHandle->throttleDutyDischargeTemperatureBattery = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitDisChargeTemperatureBattery,inputUpperLimitDisChargeTemperatureBattery,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007cd4:	eeb0 2a61 	vmov.f32	s4, s3
	modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage            = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageLow,inputLowerLimitDisChargeVoltage,inputUpperLimitDisChargeVoltage,outputLowerLimitDisCharge,outputUpperLimitDisCharge);
 8007cd8:	ee10 0a10 	vmov	r0, s0
 8007cdc:	fa1f fb80 	uxth.w	fp, r0
	modPowerElectronicsPackStateHandle->throttleDutyDischargeTemperatureBattery = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitDisChargeTemperatureBattery,inputUpperLimitDisChargeTemperatureBattery,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007ce0:	eddf 1a32 	vldr	s3, [pc, #200]	; 8007dac <modPowerElectronicsCalcThrottle+0x1a8>
	modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage            = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->cellVoltageLow,inputLowerLimitDisChargeVoltage,inputUpperLimitDisChargeVoltage,outputLowerLimitDisCharge,outputUpperLimitDisCharge);
 8007ce4:	f8a3 b008 	strh.w	fp, [r3, #8]
	modPowerElectronicsPackStateHandle->throttleDutyDischargeTemperatureBattery = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitDisChargeTemperatureBattery,inputUpperLimitDisChargeTemperatureBattery,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007ce8:	ee75 0a65 	vsub.f32	s1, s10, s11
 8007cec:	eeb0 1a45 	vmov.f32	s2, s10
 8007cf0:	eeb0 0a66 	vmov.f32	s0, s13
 8007cf4:	f7fe ffca 	bl	8006c8c <modPowerElectronicsMapVariableFloat>
 8007cf8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	if(modPowerElectronicsPackStateHandle->packInSOACharge){
 8007cfc:	f893 60aa 	ldrb.w	r6, [r3, #170]	; 0xaa
	modPowerElectronicsPackStateHandle->throttleDutyDischargeTemperatureBattery = (uint16_t)modPowerElectronicsMapVariableFloat(modPowerElectronicsPackStateHandle->tempBatteryHigh,inputLowerLimitDisChargeTemperatureBattery,inputUpperLimitDisChargeTemperatureBattery,outputUpperLimitDisCharge,outputLowerLimitDisCharge);
 8007d00:	ee10 0a10 	vmov	r0, s0
 8007d04:	b284      	uxth	r4, r0
 8007d06:	815c      	strh	r4, [r3, #10]
	if(modPowerElectronicsPackStateHandle->packInSOACharge){
 8007d08:	b11e      	cbz	r6, 8007d12 <modPowerElectronicsCalcThrottle+0x10e>
		calculatedChargeThrottle = modPowerElectronicsLowestInThree(modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS,modPowerElectronicsPackStateHandle->throttleDutyChargeVoltage,modPowerElectronicsPackStateHandle->throttleDutyChargeTemperatureBattery);
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f7ff ff70 	bl	8007bf0 <modPowerElectronicsLowestInThree>
 8007d10:	4606      	mov	r6, r0
 8007d12:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dd0 <modPowerElectronicsCalcThrottle+0x1cc>
	if(modPowerElectronicsPackStateHandle->packInSOADischarge){
 8007d16:	f893 00a9 	ldrb.w	r0, [r3, #169]	; 0xa9
 8007d1a:	f8aa 6000 	strh.w	r6, [sl]
 8007d1e:	b120      	cbz	r0, 8007d2a <modPowerElectronicsCalcThrottle+0x126>
		calculatedDisChargeThrottle = modPowerElectronicsLowestInThree(modPowerElectronicsPackStateHandle->throttleDutyGeneralTemperatureBMS,modPowerElectronicsPackStateHandle->throttleDutyDischargeVoltage,modPowerElectronicsPackStateHandle->throttleDutyDischargeTemperatureBattery);
 8007d20:	4622      	mov	r2, r4
 8007d22:	4659      	mov	r1, fp
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff ff63 	bl	8007bf0 <modPowerElectronicsLowestInThree>
	if(calculatedChargeThrottle >= filteredChargeThrottle) {
 8007d2a:	4f23      	ldr	r7, [pc, #140]	; (8007db8 <modPowerElectronicsCalcThrottle+0x1b4>)
 8007d2c:	883b      	ldrh	r3, [r7, #0]
 8007d2e:	42b3      	cmp	r3, r6
		calculatedDisChargeThrottle = 0;
 8007d30:	4604      	mov	r4, r0
	if(calculatedChargeThrottle >= filteredChargeThrottle) {
 8007d32:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <modPowerElectronicsCalcThrottle+0x1b8>)
 8007d34:	d833      	bhi.n	8007d9e <modPowerElectronicsCalcThrottle+0x19a>
		if(modPowerElectronicsChargeDeratingActive) {
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	bb6b      	cbnz	r3, 8007d96 <modPowerElectronicsCalcThrottle+0x192>
			chargeIncreaseRate         = modPowerElectronicsGeneralConfigHandle->throttleChargeIncreaseRate;
 8007d3a:	f895 5054 	ldrb.w	r5, [r5, #84]	; 0x54
		  chargeIncreaseIntervalTime = 100;
 8007d3e:	2164      	movs	r1, #100	; 0x64
		if(modDelayTick1ms(&modPowerElectronicsChargeIncreaseLastTick,chargeIncreaseIntervalTime)){
 8007d40:	481f      	ldr	r0, [pc, #124]	; (8007dc0 <modPowerElectronicsCalcThrottle+0x1bc>)
 8007d42:	f7fc feed 	bl	8004b20 <modDelayTick1ms>
 8007d46:	b158      	cbz	r0, 8007d60 <modPowerElectronicsCalcThrottle+0x15c>
			if(abs(calculatedChargeThrottle-filteredChargeThrottle) > chargeIncreaseRate) {
 8007d48:	883b      	ldrh	r3, [r7, #0]
 8007d4a:	f8ba 1000 	ldrh.w	r1, [sl]
 8007d4e:	1aca      	subs	r2, r1, r3
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	bfb8      	it	lt
 8007d54:	4252      	neglt	r2, r2
 8007d56:	42aa      	cmp	r2, r5
				filteredChargeThrottle += chargeIncreaseRate;		
 8007d58:	bfc6      	itte	gt
 8007d5a:	195b      	addgt	r3, r3, r5
 8007d5c:	803b      	strhgt	r3, [r7, #0]
				filteredChargeThrottle = calculatedChargeThrottle;
 8007d5e:	8039      	strhle	r1, [r7, #0]
	if(calculatedDisChargeThrottle >= filteredDisChargeThrottle){
 8007d60:	4a18      	ldr	r2, [pc, #96]	; (8007dc4 <modPowerElectronicsCalcThrottle+0x1c0>)
 8007d62:	8813      	ldrh	r3, [r2, #0]
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d81e      	bhi.n	8007da6 <modPowerElectronicsCalcThrottle+0x1a2>
		if((calculatedDisChargeThrottle-filteredDisChargeThrottle) > modPowerElectronicsGeneralConfigHandle->throttleDisChargeIncreaseRate) {
 8007d68:	f8d9 1000 	ldr.w	r1, [r9]
 8007d6c:	f891 1055 	ldrb.w	r1, [r1, #85]	; 0x55
 8007d70:	1ae0      	subs	r0, r4, r3
 8007d72:	4288      	cmp	r0, r1
 8007d74:	dd17      	ble.n	8007da6 <modPowerElectronicsCalcThrottle+0x1a2>
			filteredDisChargeThrottle += modPowerElectronicsGeneralConfigHandle->throttleDisChargeIncreaseRate;
 8007d76:	440b      	add	r3, r1
 8007d78:	8013      	strh	r3, [r2, #0]
	if(modPowerElectronicsPackStateHandle->chargeAllowed)
 8007d7a:	f8d8 1000 	ldr.w	r1, [r8]
 8007d7e:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
 8007d82:	b103      	cbz	r3, 8007d86 <modPowerElectronicsCalcThrottle+0x182>
		modPowerElectronicsPackStateHandle->throttleDutyCharge = filteredChargeThrottle;
 8007d84:	883b      	ldrh	r3, [r7, #0]
 8007d86:	80cb      	strh	r3, [r1, #6]
	if(modPowerElectronicsPackStateHandle->disChargeLCAllowed)
 8007d88:	f891 309e 	ldrb.w	r3, [r1, #158]	; 0x9e
 8007d8c:	b103      	cbz	r3, 8007d90 <modPowerElectronicsCalcThrottle+0x18c>
		modPowerElectronicsPackStateHandle->throttleDutyDischarge = filteredDisChargeThrottle;
 8007d8e:	8813      	ldrh	r3, [r2, #0]
 8007d90:	818b      	strh	r3, [r1, #12]
}
 8007d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			chargeIncreaseRate         = 1;
 8007d96:	2501      	movs	r5, #1
			chargeIncreaseIntervalTime = 5000;
 8007d98:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d9c:	e7d0      	b.n	8007d40 <modPowerElectronicsCalcThrottle+0x13c>
		modPowerElectronicsChargeDeratingActive = true;
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
		filteredChargeThrottle = calculatedChargeThrottle;
 8007da2:	803e      	strh	r6, [r7, #0]
 8007da4:	e7dc      	b.n	8007d60 <modPowerElectronicsCalcThrottle+0x15c>
		filteredDisChargeThrottle = calculatedDisChargeThrottle;
 8007da6:	8014      	strh	r4, [r2, #0]
 8007da8:	e7e7      	b.n	8007d7a <modPowerElectronicsCalcThrottle+0x176>
 8007daa:	bf00      	nop
 8007dac:	447a0000 	.word	0x447a0000
 8007db0:	42480000 	.word	0x42480000
 8007db4:	42c80000 	.word	0x42c80000
 8007db8:	200049b4 	.word	0x200049b4
 8007dbc:	200049d0 	.word	0x200049d0
 8007dc0:	200049d8 	.word	0x200049d8
 8007dc4:	200049b6 	.word	0x200049b6
 8007dc8:	200049e8 	.word	0x200049e8
 8007dcc:	200049f0 	.word	0x200049f0
 8007dd0:	200049a6 	.word	0x200049a6

08007dd4 <modPowerElectronicsTask>:
bool modPowerElectronicsTask(void) {
 8007dd4:	b570      	push	{r4, r5, r6, lr}
	if(modDelayTick1ms(&modPowerElectronicsMeasureIntervalLastTick,100)) {
 8007dd6:	482b      	ldr	r0, [pc, #172]	; (8007e84 <modPowerElectronicsTask+0xb0>)
 8007dd8:	2164      	movs	r1, #100	; 0x64
 8007dda:	f7fc fea1 	bl	8004b20 <modDelayTick1ms>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d04e      	beq.n	8007e80 <modPowerElectronicsTask+0xac>
		modPowerElectronicsTempMeasureDelayLastTick = HAL_GetTick();
 8007de2:	f002 ffeb 	bl	800adbc <HAL_GetTick>
		if(modPowerElectronicsPackStateHandle->packVoltage >= (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage)) {
 8007de6:	4d28      	ldr	r5, [pc, #160]	; (8007e88 <modPowerElectronicsTask+0xb4>)
		modPowerElectronicsTempMeasureDelayLastTick = HAL_GetTick();
 8007de8:	4b28      	ldr	r3, [pc, #160]	; (8007e8c <modPowerElectronicsTask+0xb8>)
		if(modPowerElectronicsPackStateHandle->packVoltage >= (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage)) {
 8007dea:	4c29      	ldr	r4, [pc, #164]	; (8007e90 <modPowerElectronicsTask+0xbc>)
		modPowerElectronicsTempMeasureDelayLastTick = HAL_GetTick();
 8007dec:	6018      	str	r0, [r3, #0]
		modPowerElectronicsSamplePackAndLCData();
 8007dee:	f7ff febd 	bl	8007b6c <modPowerElectronicsSamplePackAndLCData>
		if(modPowerElectronicsPackStateHandle->packVoltage >= (modPowerElectronicsGeneralConfigHandle->noOfCellsSeries*modPowerElectronicsGeneralConfigHandle->cellHardOverVoltage)) {
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	6826      	ldr	r6, [r4, #0]
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	ed93 7a03 	vldr	s14, [r3, #12]
 8007dfc:	ee07 2a90 	vmov	s15, r2
 8007e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e08:	ed96 7a07 	vldr	s14, [r6, #28]
 8007e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			modPowerElectronicsVoltageSenseError = true;
 8007e14:	bfa2      	ittt	ge
 8007e16:	4b1f      	ldrge	r3, [pc, #124]	; (8007e94 <modPowerElectronicsTask+0xc0>)
 8007e18:	2201      	movge	r2, #1
 8007e1a:	701a      	strbge	r2, [r3, #0]
		modPowerElectronicsPackStateHandle->packCurrent = modPowerElectronicsCalcPackCurrent();
 8007e1c:	f7ff fe38 	bl	8007a90 <modPowerElectronicsCalcPackCurrent>
		modPowerElectronicsPackStateHandle->packPower   = modPowerElectronicsPackStateHandle->packCurrent * modPowerElectronicsPackStateHandle->packVoltage;
 8007e20:	6823      	ldr	r3, [r4, #0]
		modPowerElectronicsPackStateHandle->packCurrent = modPowerElectronicsCalcPackCurrent();
 8007e22:	ed86 0a08 	vstr	s0, [r6, #32]
		modPowerElectronicsPackStateHandle->packPower   = modPowerElectronicsPackStateHandle->packCurrent * modPowerElectronicsPackStateHandle->packVoltage;
 8007e26:	ed93 7a07 	vldr	s14, [r3, #28]
 8007e2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8007e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData();
 8007e36:	f7ff f957 	bl	80070e8 <modPowerElectronicsCellMonitorsCheckConfigAndReadAnalogData>
			driverHWADCGetNTCValue(&modPowerElectronicsPackStateHandle->temperatures[0],modPowerElectronicsGeneralConfigHandle->NTC25DegResistance[modConfigNTCGroupMasterPCB],modPowerElectronicsGeneralConfigHandle->NTCTopResistor[modConfigNTCGroupMasterPCB],modPowerElectronicsGeneralConfigHandle->NTCBetaFactor[modConfigNTCGroupMasterPCB],25.0f);
 8007e3a:	6829      	ldr	r1, [r5, #0]
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	f8b1 3132 	ldrh.w	r3, [r1, #306]	; 0x132
 8007e42:	f8d1 2110 	ldr.w	r2, [r1, #272]	; 0x110
 8007e46:	f8d1 1124 	ldr.w	r1, [r1, #292]	; 0x124
 8007e4a:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8007e4e:	3048      	adds	r0, #72	; 0x48
 8007e50:	f002 fa1a 	bl	800a288 <driverHWADCGetNTCValue>
		modPowerElectronicsCalcThrottle();
 8007e54:	f7ff fed6 	bl	8007c04 <modPowerElectronicsCalcThrottle>
		modPowerElectronicsSubTaskBalancing();
 8007e58:	f7ff fd78 	bl	800794c <modPowerElectronicsSubTaskBalancing>
		modPowerElectronicsCellMonitorsStartCellConversion();
 8007e5c:	f7ff f978 	bl	8007150 <modPowerElectronicsCellMonitorsStartCellConversion>
		modPowerElectronicsCellMonitorsStartTemperatureConversion();
 8007e60:	f7ff fa71 	bl	8007346 <modPowerElectronicsCellMonitorsStartTemperatureConversion>
		modPowerElectronicsCalcTempStats();
 8007e64:	f7fe fe24 	bl	8006ab0 <modPowerElectronicsCalcTempStats>
		modPowerElectronicsSubTaskVoltageWatch();
 8007e68:	f7fe fcec 	bl	8006844 <modPowerElectronicsSubTaskVoltageWatch>
		modPowerElectronicsSubTaskCurrentWatch();
 8007e6c:	f7fe fbf4 	bl	8006658 <modPowerElectronicsSubTaskCurrentWatch>
		modPowerElectronicsCheckPackSOA();
 8007e70:	f7fe ff3a 	bl	8006ce8 <modPowerElectronicsCheckPackSOA>
		modPowerElectronicsPackStateHandle->powerButtonActuated = modPowerStateGetButtonPressedState();
 8007e74:	f000 f8b4 	bl	8007fe0 <modPowerStateGetButtonPressedState>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	f883 00a8 	strb.w	r0, [r3, #168]	; 0xa8
		returnValue = true;
 8007e7e:	2001      	movs	r0, #1
};
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	bf00      	nop
 8007e84:	200049ec 	.word	0x200049ec
 8007e88:	200049e8 	.word	0x200049e8
 8007e8c:	200049fc 	.word	0x200049fc
 8007e90:	200049f0 	.word	0x200049f0
 8007e94:	20004a03 	.word	0x20004a03

08007e98 <modPowerElectronicsResetCurrentOffset>:

void  modPowerElectronicsResetCurrentOffset(void){
	currentOffset = modPowerElectronicsPackStateHandle->loCurrentLoadCurrent;
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <modPowerElectronicsResetCurrentOffset+0xc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9e:	4b02      	ldr	r3, [pc, #8]	; (8007ea8 <modPowerElectronicsResetCurrentOffset+0x10>)
 8007ea0:	601a      	str	r2, [r3, #0]
}
 8007ea2:	4770      	bx	lr
 8007ea4:	200049f0 	.word	0x200049f0
 8007ea8:	200049ac 	.word	0x200049ac

08007eac <modPowerStateSetConfigHandle>:
};



void modPowerStateSetConfigHandle(modConfigGeneralConfigStructTypedef *generalConfigPointer) {
	modPowerStateGeneralConfigHandle = generalConfigPointer;
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <modPowerStateSetConfigHandle+0x24>)
	
	modPowerStateButtonPulsToggleMode   = modPowerStateGeneralConfigHandle->pulseToggleButton;
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <modPowerStateSetConfigHandle+0x28>)
	modPowerStateGeneralConfigHandle = generalConfigPointer;
 8007eb0:	6018      	str	r0, [r3, #0]
	modPowerStateButtonPulsToggleMode   = modPowerStateGeneralConfigHandle->pulseToggleButton;
 8007eb2:	f890 30eb 	ldrb.w	r3, [r0, #235]	; 0xeb
 8007eb6:	3b00      	subs	r3, #0
 8007eb8:	bf18      	it	ne
 8007eba:	2301      	movne	r3, #1
 8007ebc:	7013      	strb	r3, [r2, #0]
	modPowerStatePowerModeDirectHCDelay = modPowerStateGeneralConfigHandle->togglePowerModeDirectHCDelay;
 8007ebe:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8007ec2:	4a05      	ldr	r2, [pc, #20]	; (8007ed8 <modPowerStateSetConfigHandle+0x2c>)
 8007ec4:	3b00      	subs	r3, #0
 8007ec6:	bf18      	it	ne
 8007ec8:	2301      	movne	r3, #1
 8007eca:	7013      	strb	r3, [r2, #0]
}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20004a14 	.word	0x20004a14
 8007ed4:	20004a11 	.word	0x20004a11
 8007ed8:	20004a20 	.word	0x20004a20

08007edc <modPowerStateTask>:

void modPowerStateTask(void) {
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//bool tempButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
	tempButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8007ede:	2001      	movs	r0, #1
	
	if(modPowerStateLastButtonPressedVar != tempButtonPressed) {
 8007ee0:	4e33      	ldr	r6, [pc, #204]	; (8007fb0 <modPowerStateTask+0xd4>)
	tempButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8007ee2:	4c34      	ldr	r4, [pc, #208]	; (8007fb4 <modPowerStateTask+0xd8>)
 8007ee4:	f002 fd88 	bl	800a9f8 <driverHWPowerStateReadInput>
	if(modPowerStateLastButtonPressedVar != tempButtonPressed) {
 8007ee8:	7835      	ldrb	r5, [r6, #0]
	tempButtonPressed = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8007eea:	7020      	strb	r0, [r4, #0]
	if(modPowerStateLastButtonPressedVar != tempButtonPressed) {
 8007eec:	42a8      	cmp	r0, r5
 8007eee:	d009      	beq.n	8007f04 <modPowerStateTask+0x28>
		if(modPowerStateLastButtonPressedVar){ 																	// If is was high and now low (actuated)
 8007ef0:	4f31      	ldr	r7, [pc, #196]	; (8007fb8 <modPowerStateTask+0xdc>)
 8007ef2:	2d00      	cmp	r5, #0
 8007ef4:	d033      	beq.n	8007f5e <modPowerStateTask+0x82>
			modPowerStateLastButtonFirstPress = false;
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <modPowerStateTask+0xe0>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
			modPowerStateButtonActuated = true;
 8007efc:	2301      	movs	r3, #1
 8007efe:	703b      	strb	r3, [r7, #0]
		}else{ 																																	// If is was low and now high (non actuated)
			modPowerStateButtonPressedTimeStamp = HAL_GetTick();
			modPowerStateButtonActuated = false;
		}
		modPowerStateLastButtonPressedVar = tempButtonPressed;
 8007f00:	7823      	ldrb	r3, [r4, #0]
 8007f02:	7033      	strb	r3, [r6, #0]
	}
	
	if(tempButtonPressed) {
 8007f04:	7824      	ldrb	r4, [r4, #0]
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	d044      	beq.n	8007f94 <modPowerStateTask+0xb8>
		modPowerStateButtonPressedDuration = HAL_GetTick() - modPowerStateButtonPressedTimeStamp;
 8007f0a:	f002 ff57 	bl	800adbc <HAL_GetTick>
 8007f0e:	4b2c      	ldr	r3, [pc, #176]	; (8007fc0 <modPowerStateTask+0xe4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	1ac0      	subs	r0, r0, r3
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <modPowerStateTask+0xe8>)
		
		if((modPowerStateButtonPressedDuration > POWERBUTTON_DEBOUNCE_TIME) && (modPowerStateLastButtonFirstPress == false))
 8007f16:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
		modPowerStateButtonPressedDuration = HAL_GetTick() - modPowerStateButtonPressedTimeStamp;
 8007f1a:	6018      	str	r0, [r3, #0]
		if((modPowerStateButtonPressedDuration > POWERBUTTON_DEBOUNCE_TIME) && (modPowerStateLastButtonFirstPress == false))
 8007f1c:	d935      	bls.n	8007f8a <modPowerStateTask+0xae>
 8007f1e:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <modPowerStateTask+0xe0>)
 8007f20:	7811      	ldrb	r1, [r2, #0]
 8007f22:	bb11      	cbnz	r1, 8007f6a <modPowerStateTask+0x8e>
			modPowerStateButtonPressedVar = true;
 8007f24:	4d28      	ldr	r5, [pc, #160]	; (8007fc8 <modPowerStateTask+0xec>)
 8007f26:	2401      	movs	r4, #1
	
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_POWERDOWN_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == false) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f28:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
			modPowerStateButtonPressedVar = true;
 8007f2c:	702c      	strb	r4, [r5, #0]
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_POWERDOWN_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == false) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f2e:	d224      	bcs.n	8007f7a <modPowerStateTask+0x9e>
			modPowerStatePulsePowerDownDesired = true;
			modPowerStateButtonPressedDuration = 0;
		}
		
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_FORCEON_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == true) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f30:	f241 3187 	movw	r1, #4999	; 0x1387
 8007f34:	4288      	cmp	r0, r1
 8007f36:	d928      	bls.n	8007f8a <modPowerStateTask+0xae>
 8007f38:	7812      	ldrb	r2, [r2, #0]
 8007f3a:	b332      	cbz	r2, 8007f8a <modPowerStateTask+0xae>
 8007f3c:	4a23      	ldr	r2, [pc, #140]	; (8007fcc <modPowerStateTask+0xf0>)
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8007f44:	b309      	cbz	r1, 8007f8a <modPowerStateTask+0xae>
			if(modPowerStateGeneralConfigHandle->allowForceOn) {
 8007f46:	f892 20ea 	ldrb.w	r2, [r2, #234]	; 0xea
 8007f4a:	b112      	cbz	r2, 8007f52 <modPowerStateTask+0x76>
				modPowerStateForceOnDesired = true;
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <modPowerStateTask+0xf4>)
 8007f4e:	2101      	movs	r1, #1
 8007f50:	7011      	strb	r1, [r2, #0]
			}
			
			modPowerStateLongStartupButtonPress = true;
 8007f52:	4a20      	ldr	r2, [pc, #128]	; (8007fd4 <modPowerStateTask+0xf8>)
 8007f54:	2101      	movs	r1, #1
 8007f56:	7011      	strb	r1, [r2, #0]
			modPowerStateButtonPressedDuration = 0;
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	e015      	b.n	8007f8a <modPowerStateTask+0xae>
			modPowerStateButtonPressedTimeStamp = HAL_GetTick();
 8007f5e:	f002 ff2d 	bl	800adbc <HAL_GetTick>
 8007f62:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <modPowerStateTask+0xe4>)
			modPowerStateButtonActuated = false;
 8007f64:	703d      	strb	r5, [r7, #0]
			modPowerStateButtonPressedTimeStamp = HAL_GetTick();
 8007f66:	6018      	str	r0, [r3, #0]
			modPowerStateButtonActuated = false;
 8007f68:	e7ca      	b.n	8007f00 <modPowerStateTask+0x24>
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_POWERDOWN_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == false) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007f6e:	d3df      	bcc.n	8007f30 <modPowerStateTask+0x54>
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_FORCEON_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == true) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f70:	f241 3287 	movw	r2, #4999	; 0x1387
 8007f74:	4290      	cmp	r0, r2
 8007f76:	d8e1      	bhi.n	8007f3c <modPowerStateTask+0x60>
 8007f78:	e007      	b.n	8007f8a <modPowerStateTask+0xae>
		if((modPowerStateButtonPressedDuration >= POWERBUTTON_POWERDOWN_THRESHOLD_TIME) && (modPowerStateLastButtonFirstPress == false) && modPowerStateGeneralConfigHandle->pulseToggleButton) {
 8007f7a:	4a14      	ldr	r2, [pc, #80]	; (8007fcc <modPowerStateTask+0xf0>)
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	f892 20eb 	ldrb.w	r2, [r2, #235]	; 0xeb
 8007f82:	b112      	cbz	r2, 8007f8a <modPowerStateTask+0xae>
			modPowerStatePulsePowerDownDesired = true;
 8007f84:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <modPowerStateTask+0xfc>)
			modPowerStateButtonPressedDuration = 0;
 8007f86:	6019      	str	r1, [r3, #0]
			modPowerStatePulsePowerDownDesired = true;
 8007f88:	7014      	strb	r4, [r2, #0]
		}
		
		modPowerStatePowerDownTimeout = HAL_GetTick();
 8007f8a:	f002 ff17 	bl	800adbc <HAL_GetTick>
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <modPowerStateTask+0x100>)
 8007f90:	6018      	str	r0, [r3, #0]
	}else{
		if(modDelayTick1ms(&modPowerStatePowerDownTimeout,500) && modPowerStateButtonActuated)
			modPowerStateButtonPressedVar = false;
	}
};
 8007f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(modDelayTick1ms(&modPowerStatePowerDownTimeout,500) && modPowerStateButtonActuated)
 8007f94:	4811      	ldr	r0, [pc, #68]	; (8007fdc <modPowerStateTask+0x100>)
 8007f96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007f9a:	f7fc fdc1 	bl	8004b20 <modDelayTick1ms>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d0f7      	beq.n	8007f92 <modPowerStateTask+0xb6>
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <modPowerStateTask+0xdc>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f3      	beq.n	8007f92 <modPowerStateTask+0xb6>
			modPowerStateButtonPressedVar = false;
 8007faa:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <modPowerStateTask+0xec>)
 8007fac:	701c      	strb	r4, [r3, #0]
};
 8007fae:	e7f0      	b.n	8007f92 <modPowerStateTask+0xb6>
 8007fb0:	20004a19 	.word	0x20004a19
 8007fb4:	20004a28 	.word	0x20004a28
 8007fb8:	20004a05 	.word	0x20004a05
 8007fbc:	20004a18 	.word	0x20004a18
 8007fc0:	20004a0c 	.word	0x20004a0c
 8007fc4:	20004a08 	.word	0x20004a08
 8007fc8:	20004a10 	.word	0x20004a10
 8007fcc:	20004a14 	.word	0x20004a14
 8007fd0:	20004a12 	.word	0x20004a12
 8007fd4:	20004a1a 	.word	0x20004a1a
 8007fd8:	20004a21 	.word	0x20004a21
 8007fdc:	20004a1c 	.word	0x20004a1c

08007fe0 <modPowerStateGetButtonPressedState>:

bool modPowerStateGetButtonPressedState(void) {
	return modPowerStateButtonPressedVar;
};
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <modPowerStateGetButtonPressedState+0x8>)
 8007fe2:	7818      	ldrb	r0, [r3, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20004a10 	.word	0x20004a10

08007fec <modPowerStateChargerDetected>:

bool modPowerStateChargerDetected(void) {
	static bool chargeDetect = false;
	chargeDetect = driverHWPowerStateReadInput(P_STAT_CHARGE_DETECT);
 8007fec:	2002      	movs	r0, #2
 8007fee:	f002 bd03 	b.w	800a9f8 <driverHWPowerStateReadInput>
	...

08007ff4 <modPowerStatePowerdownRequest>:
};

bool modPowerStatePowerdownRequest(void) {
	bool returnValue = false;
	
	if(modPowerStateGeneralConfigHandle->pulseToggleButton){
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <modPowerStatePowerdownRequest+0x1c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8007ffc:	b113      	cbz	r3, 8008004 <modPowerStatePowerdownRequest+0x10>
		returnValue = modPowerStatePulsePowerDownDesired;
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <modPowerStatePowerdownRequest+0x20>)
 8008000:	7818      	ldrb	r0, [r3, #0]
 8008002:	4770      	bx	lr
	}else{
			returnValue = !modPowerStateButtonPressedVar;
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <modPowerStatePowerdownRequest+0x24>)
 8008006:	7818      	ldrb	r0, [r3, #0]
 8008008:	f080 0001 	eor.w	r0, r0, #1
		}
	return returnValue;
};
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20004a14 	.word	0x20004a14
 8008014:	20004a21 	.word	0x20004a21
 8008018:	20004a10 	.word	0x20004a10

0800801c <modPowerStateForceOnRequest>:

bool modPowerStateForceOnRequest(void) {
	static bool firstTrigger = true;
	
	if(modPowerStateForceOnDesired && firstTrigger){
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <modPowerStateForceOnRequest+0x14>)
 800801e:	7808      	ldrb	r0, [r1, #0]
 8008020:	b128      	cbz	r0, 800802e <modPowerStateForceOnRequest+0x12>
 8008022:	4b04      	ldr	r3, [pc, #16]	; (8008034 <modPowerStateForceOnRequest+0x18>)
 8008024:	7818      	ldrb	r0, [r3, #0]
 8008026:	b110      	cbz	r0, 800802e <modPowerStateForceOnRequest+0x12>
		modPowerStateForceOnDesired = false;
 8008028:	2200      	movs	r2, #0
 800802a:	700a      	strb	r2, [r1, #0]
		firstTrigger = false;
 800802c:	701a      	strb	r2, [r3, #0]
		return true;
	}else{
		return false;
	}
};
 800802e:	4770      	bx	lr
 8008030:	20004a12 	.word	0x20004a12
 8008034:	2000002a 	.word	0x2000002a

08008038 <modPowerStateSetState>:

void modPowerStateSetState(PowerStateStateTypedef newState) {
 8008038:	4601      	mov	r1, r0
	driverHWPowerStateSetOutput(P_STAT_POWER_ENABLE,newState);
 800803a:	2000      	movs	r0, #0
 800803c:	f002 bcce 	b.w	800a9dc <driverHWPowerStateSetOutput>

08008040 <modPowerStateInit>:
void modPowerStateInit(PowerStateStateTypedef desiredPowerState) {
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4604      	mov	r4, r0
	modPowerStateStartupDelay = HAL_GetTick();
 8008044:	f002 feba 	bl	800adbc <HAL_GetTick>
 8008048:	4d19      	ldr	r5, [pc, #100]	; (80080b0 <modPowerStateInit+0x70>)
 800804a:	6028      	str	r0, [r5, #0]
	modPowerStatePowerDownTimeout = HAL_GetTick();
 800804c:	f002 feb6 	bl	800adbc <HAL_GetTick>
 8008050:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <modPowerStateInit+0x74>)
	modPowerStatePulsePowerDownDesired = false;
 8008052:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <modPowerStateInit+0x78>)
	modPowerStatePowerDownTimeout = HAL_GetTick();
 8008054:	6018      	str	r0, [r3, #0]
	modPowerStatePulsePowerDownDesired = false;
 8008056:	2300      	movs	r3, #0
 8008058:	7013      	strb	r3, [r2, #0]
	modPowerStateForceOnDesired  = false;
 800805a:	4a18      	ldr	r2, [pc, #96]	; (80080bc <modPowerStateInit+0x7c>)
	modPowerStateButtonPressedVar = true;
 800805c:	4918      	ldr	r1, [pc, #96]	; (80080c0 <modPowerStateInit+0x80>)
	modPowerStateForceOnDesired  = false;
 800805e:	7013      	strb	r3, [r2, #0]
	modPowerStateButtonPressedVar = true;
 8008060:	2201      	movs	r2, #1
 8008062:	700a      	strb	r2, [r1, #0]
	modPowerStateLongStartupButtonPress = false;
 8008064:	4917      	ldr	r1, [pc, #92]	; (80080c4 <modPowerStateInit+0x84>)
 8008066:	700b      	strb	r3, [r1, #0]
	modPowerStateButtonPulsToggleMode = true;
 8008068:	4917      	ldr	r1, [pc, #92]	; (80080c8 <modPowerStateInit+0x88>)
 800806a:	700a      	strb	r2, [r1, #0]
	modPowerStateButtonPressedDuration = 0;
 800806c:	4a17      	ldr	r2, [pc, #92]	; (80080cc <modPowerStateInit+0x8c>)
 800806e:	6013      	str	r3, [r2, #0]
	modPowerStateButtonPressedTimeStamp = 0;
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <modPowerStateInit+0x90>)
 8008072:	6013      	str	r3, [r2, #0]
	modPowerStateButtonActuated = false;
 8008074:	4a17      	ldr	r2, [pc, #92]	; (80080d4 <modPowerStateInit+0x94>)
 8008076:	7013      	strb	r3, [r2, #0]
	driverHWPowerStateInit();
 8008078:	f002 fc5e 	bl	800a938 <driverHWPowerStateInit>
	while(!modDelayTick1ms(&modPowerStateStartupDelay,20));										// Needed for power button signal to reach uC
 800807c:	2114      	movs	r1, #20
 800807e:	4628      	mov	r0, r5
 8008080:	f7fc fd4e 	bl	8004b20 <modDelayTick1ms>
 8008084:	2800      	cmp	r0, #0
 8008086:	d0f9      	beq.n	800807c <modPowerStateInit+0x3c>
	modPowerStateLastButtonFirstPress = modPowerStateLastButtonPressedVar = driverHWPowerStateReadInput(P_STAT_BUTTON_INPUT);
 8008088:	2001      	movs	r0, #1
 800808a:	f002 fcb5 	bl	800a9f8 <driverHWPowerStateReadInput>
 800808e:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <modPowerStateInit+0x98>)
 8008090:	7010      	strb	r0, [r2, #0]
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <modPowerStateInit+0x9c>)
 8008094:	7010      	strb	r0, [r2, #0]
	if(!modPowerStateLastButtonFirstPress) {
 8008096:	b930      	cbnz	r0, 80080a6 <modPowerStateInit+0x66>
		while(!modDelayTick1ms(&modPowerStateStartupDelay,100));
 8008098:	4d05      	ldr	r5, [pc, #20]	; (80080b0 <modPowerStateInit+0x70>)
 800809a:	2164      	movs	r1, #100	; 0x64
 800809c:	4628      	mov	r0, r5
 800809e:	f7fc fd3f 	bl	8004b20 <modDelayTick1ms>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0f9      	beq.n	800809a <modPowerStateInit+0x5a>
	modPowerStateSetState(desiredPowerState);
 80080a6:	4620      	mov	r0, r4
};
 80080a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	modPowerStateSetState(desiredPowerState);
 80080ac:	f7ff bfc4 	b.w	8008038 <modPowerStateSetState>
 80080b0:	20004a24 	.word	0x20004a24
 80080b4:	20004a1c 	.word	0x20004a1c
 80080b8:	20004a21 	.word	0x20004a21
 80080bc:	20004a12 	.word	0x20004a12
 80080c0:	20004a10 	.word	0x20004a10
 80080c4:	20004a1a 	.word	0x20004a1a
 80080c8:	20004a11 	.word	0x20004a11
 80080cc:	20004a08 	.word	0x20004a08
 80080d0:	20004a0c 	.word	0x20004a0c
 80080d4:	20004a05 	.word	0x20004a05
 80080d8:	20004a19 	.word	0x20004a19
 80080dc:	20004a18 	.word	0x20004a18

080080e0 <modPowerStateButtonPressedOnTurnon>:
};

bool modPowerStateButtonPressedOnTurnon(void) {
	return modPowerStateLastButtonFirstPress;
};
 80080e0:	4b01      	ldr	r3, [pc, #4]	; (80080e8 <modPowerStateButtonPressedOnTurnon+0x8>)
 80080e2:	7818      	ldrb	r0, [r3, #0]
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20004a18 	.word	0x20004a18

080080ec <modPowerStateGetLongButtonPressState>:

bool modPowerStateGetLongButtonPressState(void) {
  return modPowerStateLongStartupButtonPress;
}
 80080ec:	4b01      	ldr	r3, [pc, #4]	; (80080f4 <modPowerStateGetLongButtonPressState+0x8>)
 80080ee:	7818      	ldrb	r0, [r3, #0]
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20004a1a 	.word	0x20004a1a

080080f8 <modStateOfChargeInit>:
uint32_t modStateOfChargeLargeCoulombTick;
uint32_t modStateOfChargeStoreSoCTick;

bool modStateOfChargePowerDownSavedFlag = false;

modStateOfChargeStructTypeDef* modStateOfChargeInit(modPowerElectronicsPackStateTypedef *packState, modConfigGeneralConfigStructTypedef *generalConfigPointer){
 80080f8:	b508      	push	{r3, lr}
	modStateOfChargePackStatehandle = packState;
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <modStateOfChargeInit+0x24>)
 80080fc:	6018      	str	r0, [r3, #0]
	modStateOfChargeGeneralConfigHandle = generalConfigPointer;
 80080fe:	4b08      	ldr	r3, [pc, #32]	; (8008120 <modStateOfChargeInit+0x28>)
 8008100:	6019      	str	r1, [r3, #0]
	driverSWStorageManagerStateOfChargeStructSize = (sizeof(modStateOfChargeStructTypeDef)/sizeof(uint16_t)); // Calculate the space needed for the config struct in EEPROM
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <modStateOfChargeInit+0x2c>)
 8008104:	2208      	movs	r2, #8
 8008106:	801a      	strh	r2, [r3, #0]
	
	modStateOfChargeLargeCoulombTick = HAL_GetTick();
 8008108:	f002 fe58 	bl	800adbc <HAL_GetTick>
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <modStateOfChargeInit+0x30>)
 800810e:	6018      	str	r0, [r3, #0]
	modStateOfChargeStoreSoCTick = HAL_GetTick();
 8008110:	f002 fe54 	bl	800adbc <HAL_GetTick>
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <modStateOfChargeInit+0x34>)
 8008116:	6018      	str	r0, [r3, #0]
	
	return &modStateOfChargeGeneralStateOfCharge;
};
 8008118:	4805      	ldr	r0, [pc, #20]	; (8008130 <modStateOfChargeInit+0x38>)
 800811a:	bd08      	pop	{r3, pc}
 800811c:	20004a44 	.word	0x20004a44
 8008120:	20004a2c 	.word	0x20004a2c
 8008124:	20004bf0 	.word	0x20004bf0
 8008128:	20004a40 	.word	0x20004a40
 800812c:	20004a4c 	.word	0x20004a4c
 8008130:	20004a30 	.word	0x20004a30

08008134 <modStateOfChargeStoreStateOfCharge>:
	modStateOfChargeLoadStateOfCharge();
	return returnVal;
};

bool modStateOfChargeStoreStateOfCharge(void){
	return driverSWStorageManagerStoreStruct(&modStateOfChargeGeneralStateOfCharge,STORAGE_STATEOFCHARGE);
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <modStateOfChargeStoreStateOfCharge+0x8>)
 8008136:	2101      	movs	r1, #1
 8008138:	f000 be54 	b.w	8008de4 <driverSWStorageManagerStoreStruct>
 800813c:	20004a30 	.word	0x20004a30

08008140 <modStateOfChargeProcess>:
void modStateOfChargeProcess(void){
 8008140:	b570      	push	{r4, r5, r6, lr}
	uint32_t dt = HAL_GetTick() - modStateOfChargeLargeCoulombTick;
 8008142:	4e31      	ldr	r6, [pc, #196]	; (8008208 <modStateOfChargeProcess+0xc8>)
	lastGeneralStateOfCharge = modStateOfChargeGeneralStateOfCharge;
 8008144:	4c31      	ldr	r4, [pc, #196]	; (800820c <modStateOfChargeProcess+0xcc>)
void modStateOfChargeProcess(void){
 8008146:	ed2d 8b02 	vpush	{d8}
	uint32_t dt = HAL_GetTick() - modStateOfChargeLargeCoulombTick;
 800814a:	f002 fe37 	bl	800adbc <HAL_GetTick>
 800814e:	6835      	ldr	r5, [r6, #0]
	lastGeneralStateOfCharge = modStateOfChargeGeneralStateOfCharge;
 8008150:	ed94 8a02 	vldr	s16, [r4, #8]
	uint32_t dt = HAL_GetTick() - modStateOfChargeLargeCoulombTick;
 8008154:	1b45      	subs	r5, r0, r5
	modStateOfChargeLargeCoulombTick = HAL_GetTick();
 8008156:	f002 fe31 	bl	800adbc <HAL_GetTick>
	modStateOfChargeGeneralStateOfCharge.remainingCapacityAh += dt*modStateOfChargePackStatehandle->packCurrent/(3600*1000);// (miliseconds * amps)/(3600*1000) accumulatedCharge in AmpHour.
 800815a:	4b2d      	ldr	r3, [pc, #180]	; (8008210 <modStateOfChargeProcess+0xd0>)
 800815c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008214 <modStateOfChargeProcess+0xd4>
 8008160:	681b      	ldr	r3, [r3, #0]
	if(modStateOfChargeGeneralStateOfCharge.remainingCapacityAh > modStateOfChargeGeneralConfigHandle->batteryCapacity)
 8008162:	4a2d      	ldr	r2, [pc, #180]	; (8008218 <modStateOfChargeProcess+0xd8>)
	modStateOfChargeLargeCoulombTick = HAL_GetTick();
 8008164:	6030      	str	r0, [r6, #0]
	modStateOfChargeGeneralStateOfCharge.remainingCapacityAh += dt*modStateOfChargePackStatehandle->packCurrent/(3600*1000);// (miliseconds * amps)/(3600*1000) accumulatedCharge in AmpHour.
 8008166:	ee07 5a90 	vmov	s15, r5
 800816a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800816e:	edd3 7a08 	vldr	s15, [r3, #32]
	if(modStateOfChargeGeneralStateOfCharge.remainingCapacityAh > modStateOfChargeGeneralConfigHandle->batteryCapacity)
 8008172:	6812      	ldr	r2, [r2, #0]
	if(modDelayTick1ms(&modStateOfChargeStoreSoCTick,modStateOfChargeGeneralConfigHandle->stateOfChargeStoreInterval) && !modStateOfChargePowerDownSavedFlag && (lastGeneralStateOfCharge.remainingCapacityAh != modStateOfChargeGeneralStateOfCharge.remainingCapacityAh))
 8008174:	4829      	ldr	r0, [pc, #164]	; (800821c <modStateOfChargeProcess+0xdc>)
 8008176:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
	modStateOfChargeGeneralStateOfCharge.remainingCapacityAh += dt*modStateOfChargePackStatehandle->packCurrent/(3600*1000);// (miliseconds * amps)/(3600*1000) accumulatedCharge in AmpHour.
 800817a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800817e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008182:	ed94 7a02 	vldr	s14, [r4, #8]
	if(modStateOfChargeGeneralStateOfCharge.remainingCapacityAh > modStateOfChargeGeneralConfigHandle->batteryCapacity)
 8008186:	edd2 6a01 	vldr	s13, [r2, #4]
	modStateOfChargeGeneralStateOfCharge.remainingCapacityAh += dt*modStateOfChargePackStatehandle->packCurrent/(3600*1000);// (miliseconds * amps)/(3600*1000) accumulatedCharge in AmpHour.
 800818a:	ee77 7a87 	vadd.f32	s15, s15, s14
		modStateOfChargeGeneralStateOfCharge.remainingCapacityAh = 0.0f;
 800818e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008220 <modStateOfChargeProcess+0xe0>
		modStateOfChargeGeneralStateOfCharge.remainingCapacityAh = modStateOfChargeGeneralConfigHandle->batteryCapacity;
 8008192:	eef4 7a66 	vcmp.f32	s15, s13
 8008196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819a:	bfc8      	it	gt
 800819c:	eef0 7a66 	vmovgt.f32	s15, s13
		modStateOfChargeGeneralStateOfCharge.remainingCapacityAh = 0.0f;
 80081a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a8:	bf48      	it	mi
 80081aa:	eef0 7a47 	vmovmi.f32	s15, s14
	modStateOfChargeGeneralStateOfCharge.generalStateOfCharge = modStateOfChargeGeneralStateOfCharge.remainingCapacityAh / modStateOfChargeGeneralConfigHandle->batteryCapacity * 100.0f;
 80081ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80081b2:	eeb0 6a67 	vmov.f32	s12, s15
		modStateOfChargeGeneralStateOfCharge.remainingCapacityAh = 0.0f;
 80081b6:	edc4 7a02 	vstr	s15, [r4, #8]
	modStateOfChargeGeneralStateOfCharge.generalStateOfCharge = modStateOfChargeGeneralStateOfCharge.remainingCapacityAh / modStateOfChargeGeneralConfigHandle->batteryCapacity * 100.0f;
 80081ba:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008224 <modStateOfChargeProcess+0xe4>
	modStateOfChargePackStatehandle->SoCCapacityAh = modStateOfChargeGeneralStateOfCharge.remainingCapacityAh;
 80081be:	ed83 6a05 	vstr	s12, [r3, #20]
	modStateOfChargeGeneralStateOfCharge.generalStateOfCharge = modStateOfChargeGeneralStateOfCharge.remainingCapacityAh / modStateOfChargeGeneralConfigHandle->batteryCapacity * 100.0f;
 80081c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ce:	bfb8      	it	lt
 80081d0:	eef0 7a47 	vmovlt.f32	s15, s14
	modStateOfChargePackStatehandle->SoC = modStateOfChargeGeneralStateOfCharge.generalStateOfCharge;
 80081d4:	edc3 7a04 	vstr	s15, [r3, #16]
	modStateOfChargeGeneralStateOfCharge.generalStateOfCharge = modStateOfChargeGeneralStateOfCharge.remainingCapacityAh / modStateOfChargeGeneralConfigHandle->batteryCapacity * 100.0f;
 80081d8:	edc4 7a00 	vstr	s15, [r4]
	if(modDelayTick1ms(&modStateOfChargeStoreSoCTick,modStateOfChargeGeneralConfigHandle->stateOfChargeStoreInterval) && !modStateOfChargePowerDownSavedFlag && (lastGeneralStateOfCharge.remainingCapacityAh != modStateOfChargeGeneralStateOfCharge.remainingCapacityAh))
 80081dc:	f7fc fca0 	bl	8004b20 <modDelayTick1ms>
 80081e0:	b178      	cbz	r0, 8008202 <modStateOfChargeProcess+0xc2>
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <modStateOfChargeProcess+0xe8>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b963      	cbnz	r3, 8008202 <modStateOfChargeProcess+0xc2>
 80081e8:	edd4 7a02 	vldr	s15, [r4, #8]
 80081ec:	eef4 7a48 	vcmp.f32	s15, s16
 80081f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f4:	d005      	beq.n	8008202 <modStateOfChargeProcess+0xc2>
};
 80081f6:	ecbd 8b02 	vpop	{d8}
 80081fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modStateOfChargeStoreStateOfCharge();
 80081fe:	f7ff bf99 	b.w	8008134 <modStateOfChargeStoreStateOfCharge>
};
 8008202:	ecbd 8b02 	vpop	{d8}
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	20004a40 	.word	0x20004a40
 800820c:	20004a30 	.word	0x20004a30
 8008210:	20004a44 	.word	0x20004a44
 8008214:	4a5bba00 	.word	0x4a5bba00
 8008218:	20004a2c 	.word	0x20004a2c
 800821c:	20004a4c 	.word	0x20004a4c
 8008220:	00000000 	.word	0x00000000
 8008224:	42c80000 	.word	0x42c80000
 8008228:	20004a48 	.word	0x20004a48

0800822c <modStateOfChargeLoadStateOfCharge>:
};

bool modStateOfChargeLoadStateOfCharge(void){
	return driverSWStorageManagerGetStruct(&modStateOfChargeGeneralStateOfCharge,STORAGE_STATEOFCHARGE);
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <modStateOfChargeLoadStateOfCharge+0x8>)
 800822e:	2101      	movs	r1, #1
 8008230:	f000 bdfe 	b.w	8008e30 <driverSWStorageManagerGetStruct>
 8008234:	20004a30 	.word	0x20004a30

08008238 <modStateOfChargeStoreAndLoadDefaultStateOfCharge>:
bool modStateOfChargeStoreAndLoadDefaultStateOfCharge(void){
 8008238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(driverSWStorageManagerStateOfChargeEmpty){
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <modStateOfChargeStoreAndLoadDefaultStateOfCharge+0x3c>)
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	b172      	cbz	r2, 800825e <modStateOfChargeStoreAndLoadDefaultStateOfCharge+0x26>
		defaultStateOfCharge.generalStateOfCharge = 100.0f;
 8008240:	4a0d      	ldr	r2, [pc, #52]	; (8008278 <modStateOfChargeStoreAndLoadDefaultStateOfCharge+0x40>)
 8008242:	9200      	str	r2, [sp, #0]
		defaultStateOfCharge.generalStateOfHealth = 100.0f;
 8008244:	9201      	str	r2, [sp, #4]
		defaultStateOfCharge.remainingCapacityAh = modStateOfChargeGeneralConfigHandle->batteryCapacity;
 8008246:	4a0d      	ldr	r2, [pc, #52]	; (800827c <modStateOfChargeStoreAndLoadDefaultStateOfCharge+0x44>)
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	6852      	ldr	r2, [r2, #4]
 800824c:	9202      	str	r2, [sp, #8]
		defaultStateOfCharge.remainingCapacityWh = 0.0f;
 800824e:	2200      	movs	r2, #0
 8008250:	9203      	str	r2, [sp, #12]
		driverSWStorageManagerStoreStruct(&defaultStateOfCharge,STORAGE_STATEOFCHARGE);
 8008252:	2101      	movs	r1, #1
		driverSWStorageManagerStateOfChargeEmpty = false;
 8008254:	2200      	movs	r2, #0
		driverSWStorageManagerStoreStruct(&defaultStateOfCharge,STORAGE_STATEOFCHARGE);
 8008256:	4668      	mov	r0, sp
		driverSWStorageManagerStateOfChargeEmpty = false;
 8008258:	701a      	strb	r2, [r3, #0]
		driverSWStorageManagerStoreStruct(&defaultStateOfCharge,STORAGE_STATEOFCHARGE);
 800825a:	f000 fdc3 	bl	8008de4 <driverSWStorageManagerStoreStruct>
	driverSWStorageManagerGetStruct(&tempStateOfCharge,STORAGE_STATEOFCHARGE);
 800825e:	2101      	movs	r1, #1
 8008260:	4668      	mov	r0, sp
 8008262:	f000 fde5 	bl	8008e30 <driverSWStorageManagerGetStruct>
	modStateOfChargeLoadStateOfCharge();
 8008266:	f7ff ffe1 	bl	800822c <modStateOfChargeLoadStateOfCharge>
};
 800826a:	2000      	movs	r0, #0
 800826c:	b005      	add	sp, #20
 800826e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008272:	bf00      	nop
 8008274:	20004bee 	.word	0x20004bee
 8008278:	42c80000 	.word	0x42c80000
 800827c:	20004a2c 	.word	0x20004a2c

08008280 <modStateOfChargePowerDownSave>:
};

bool modStateOfChargePowerDownSave(void) {
	if(!modStateOfChargePowerDownSavedFlag) {
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <modStateOfChargePowerDownSave+0x18>)
 8008282:	781a      	ldrb	r2, [r3, #0]
bool modStateOfChargePowerDownSave(void) {
 8008284:	b510      	push	{r4, lr}
	if(!modStateOfChargePowerDownSavedFlag) {
 8008286:	b92a      	cbnz	r2, 8008294 <modStateOfChargePowerDownSave+0x14>
		modStateOfChargePowerDownSavedFlag = true;
 8008288:	2401      	movs	r4, #1
 800828a:	701c      	strb	r4, [r3, #0]
		modStateOfChargeStoreStateOfCharge();
 800828c:	f7ff ff52 	bl	8008134 <modStateOfChargeStoreStateOfCharge>
		// TODO_EEPROM
		return true;
 8008290:	4620      	mov	r0, r4
	}else
		return false;
};
 8008292:	bd10      	pop	{r4, pc}
		return false;
 8008294:	2000      	movs	r0, #0
 8008296:	e7fc      	b.n	8008292 <modStateOfChargePowerDownSave+0x12>
 8008298:	20004a48 	.word	0x20004a48

0800829c <modStateOfChargeVoltageEvent>:

void modStateOfChargeVoltageEvent(modStateOfChargeVoltageEventTypeDef eventType) {
	switch(eventType) {
 800829c:	b920      	cbnz	r0, 80082a8 <modStateOfChargeVoltageEvent+0xc>
		case EVENT_EMPTY:
			break;
		case EVENT_FULL:
			modStateOfChargeGeneralStateOfCharge.remainingCapacityAh = modStateOfChargeGeneralConfigHandle->batteryCapacity;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <modStateOfChargeVoltageEvent+0x10>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <modStateOfChargeVoltageEvent+0x14>)
 80082a6:	609a      	str	r2, [r3, #8]
			break;
		default:
			break;
	}
};
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20004a2c 	.word	0x20004a2c
 80082b0:	20004a30 	.word	0x20004a30

080082b4 <modTerminalProcessString>:
extern modConfigGeneralConfigStructTypedef *generalConfig;
extern modStateOfChargeStructTypeDef *generalStateOfCharge;
extern modPowerElectronicsPackStateTypedef packState;
extern OperationalStateTypedef modOperationalStateCurrentState;

void modTerminalProcessString(char *str) {
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum { kMaxArgs = 64 };
	int argc = 0;
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 80082b8:	497b      	ldr	r1, [pc, #492]	; (80084a8 <modTerminalProcessString+0x1f4>)
	while (p2 && argc < kMaxArgs) {
		argv[argc++] = p2;
		p2 = strtok(0, " ");
 80082ba:	4e7b      	ldr	r6, [pc, #492]	; (80084a8 <modTerminalProcessString+0x1f4>)
void modTerminalProcessString(char *str) {
 80082bc:	b0cc      	sub	sp, #304	; 0x130
	char *p2 = strtok(str, " ");
 80082be:	f007 ff2d 	bl	801011c <strtok>
	while (p2 && argc < kMaxArgs) {
 80082c2:	ac0c      	add	r4, sp, #48	; 0x30
	int argc = 0;
 80082c4:	2500      	movs	r5, #0
 80082c6:	46a0      	mov	r8, r4
	while (p2 && argc < kMaxArgs) {
 80082c8:	b190      	cbz	r0, 80082f0 <modTerminalProcessString+0x3c>
 80082ca:	2d40      	cmp	r5, #64	; 0x40
 80082cc:	d108      	bne.n	80082e0 <modTerminalProcessString+0x2c>
	if (argc == 0) {
		modCommandsPrintf("No command received\n");
		return;
	}

	if (strcmp(argv[0], "ping") == 0) {
 80082ce:	f8d8 4000 	ldr.w	r4, [r8]
 80082d2:	4976      	ldr	r1, [pc, #472]	; (80084ac <modTerminalProcessString+0x1f8>)
 80082d4:	4620      	mov	r0, r4
 80082d6:	f7f9 fcdf 	bl	8001c98 <strcmp>
 80082da:	b988      	cbnz	r0, 8008300 <modTerminalProcessString+0x4c>
		modCommandsPrintf("pong\n");
 80082dc:	4874      	ldr	r0, [pc, #464]	; (80084b0 <modTerminalProcessString+0x1fc>)
 80082de:	e00a      	b.n	80082f6 <modTerminalProcessString+0x42>
		argv[argc++] = p2;
 80082e0:	f844 0b04 	str.w	r0, [r4], #4
		p2 = strtok(0, " ");
 80082e4:	4631      	mov	r1, r6
 80082e6:	2000      	movs	r0, #0
		argv[argc++] = p2;
 80082e8:	3501      	adds	r5, #1
		p2 = strtok(0, " ");
 80082ea:	f007 ff17 	bl	801011c <strtok>
 80082ee:	e7eb      	b.n	80082c8 <modTerminalProcessString+0x14>
	if (argc == 0) {
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	d1ec      	bne.n	80082ce <modTerminalProcessString+0x1a>
		modCommandsPrintf("No command received\n");
 80082f4:	486f      	ldr	r0, [pc, #444]	; (80084b4 <modTerminalProcessString+0x200>)
		modCommandsPrintf("pong\n");
 80082f6:	f7fb f937 	bl	8003568 <modCommandsPrintf>

		if (!found) {
			modCommandsPrintf("Invalid command: %s\n type help to list all available commands\n", argv[0]);
		}
	}
}
 80082fa:	b04c      	add	sp, #304	; 0x130
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (strcmp(argv[0], "status") == 0) {
 8008300:	496d      	ldr	r1, [pc, #436]	; (80084b8 <modTerminalProcessString+0x204>)
 8008302:	4620      	mov	r0, r4
 8008304:	f7f9 fcc8 	bl	8001c98 <strcmp>
 8008308:	4606      	mov	r6, r0
 800830a:	2800      	cmp	r0, #0
 800830c:	f040 811a 	bne.w	8008544 <modTerminalProcessString+0x290>
		bool disChargeEnabled = packState.disChargeDesired && packState.disChargeLCAllowed;
 8008310:	4c6a      	ldr	r4, [pc, #424]	; (80084bc <modTerminalProcessString+0x208>)
 8008312:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8008316:	2b00      	cmp	r3, #0
 8008318:	d065      	beq.n	80083e6 <modTerminalProcessString+0x132>
 800831a:	f894 809e 	ldrb.w	r8, [r4, #158]	; 0x9e
 800831e:	f1b8 0800 	subs.w	r8, r8, #0
 8008322:	bf18      	it	ne
 8008324:	f04f 0801 	movne.w	r8, #1
		bool chargeEnabled = packState.chargeDesired && packState.chargeAllowed;
 8008328:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800832c:	b123      	cbz	r3, 8008338 <modTerminalProcessString+0x84>
 800832e:	f894 60a1 	ldrb.w	r6, [r4, #161]	; 0xa1
 8008332:	3e00      	subs	r6, #0
 8008334:	bf18      	it	ne
 8008336:	2601      	movne	r6, #1
		modCommandsPrintf("-----Battery Pack Status-----");		
 8008338:	4861      	ldr	r0, [pc, #388]	; (80084c0 <modTerminalProcessString+0x20c>)
		modCommandsPrintf("State of charge       : %.1f%%",generalStateOfCharge->generalStateOfCharge);
 800833a:	4d62      	ldr	r5, [pc, #392]	; (80084c4 <modTerminalProcessString+0x210>)
		modCommandsPrintf("-----Battery Pack Status-----");		
 800833c:	f7fb f914 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Pack voltage Direct   : %.2fV",packState.packVoltage);
 8008340:	69e0      	ldr	r0, [r4, #28]
 8008342:	f7f9 fbe1 	bl	8001b08 <__aeabi_f2d>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	485f      	ldr	r0, [pc, #380]	; (80084c8 <modTerminalProcessString+0x214>)
 800834c:	f7fb f90c 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Pack voltage CVAverage: %.2fV",packState.cellVoltageAverage*generalConfig->noOfCellsSeries);		
 8008350:	4b5e      	ldr	r3, [pc, #376]	; (80084cc <modTerminalProcessString+0x218>)
 8008352:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008366:	ee17 0a90 	vmov	r0, s15
 800836a:	f7f9 fbcd 	bl	8001b08 <__aeabi_f2d>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4857      	ldr	r0, [pc, #348]	; (80084d0 <modTerminalProcessString+0x21c>)
 8008374:	f7fb f8f8 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Pack current          : %.2fA",packState.packCurrent);
 8008378:	6a20      	ldr	r0, [r4, #32]
 800837a:	f7f9 fbc5 	bl	8001b08 <__aeabi_f2d>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4854      	ldr	r0, [pc, #336]	; (80084d4 <modTerminalProcessString+0x220>)
 8008384:	f7fb f8f0 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("LC Load voltage       : %.2fV",packState.loCurrentLoadVoltage);	
 8008388:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800838a:	f7f9 fbbd 	bl	8001b08 <__aeabi_f2d>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4851      	ldr	r0, [pc, #324]	; (80084d8 <modTerminalProcessString+0x224>)
 8008394:	f7fb f8e8 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Low  current          : %.2fA",packState.loCurrentLoadCurrent);	
 8008398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800839a:	f7f9 fbb5 	bl	8001b08 <__aeabi_f2d>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	484e      	ldr	r0, [pc, #312]	; (80084dc <modTerminalProcessString+0x228>)
 80083a4:	f7fb f8e0 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("State of charge       : %.1f%%",generalStateOfCharge->generalStateOfCharge);
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	f7f9 fbac 	bl	8001b08 <__aeabi_f2d>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	484a      	ldr	r0, [pc, #296]	; (80084e0 <modTerminalProcessString+0x22c>)
 80083b6:	f7fb f8d7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Remaining capacity    : %.2fAh",generalStateOfCharge->remainingCapacityAh);
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	6898      	ldr	r0, [r3, #8]
 80083be:	f7f9 fba3 	bl	8001b08 <__aeabi_f2d>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4847      	ldr	r0, [pc, #284]	; (80084e4 <modTerminalProcessString+0x230>)
 80083c8:	f7fb f8ce 	bl	8003568 <modCommandsPrintf>
		switch(modOperationalStateCurrentState) {
 80083cc:	4b46      	ldr	r3, [pc, #280]	; (80084e8 <modTerminalProcessString+0x234>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	2b0a      	cmp	r3, #10
 80083d4:	d865      	bhi.n	80084a2 <modTerminalProcessString+0x1ee>
 80083d6:	e8df f003 	tbb	[pc, r3]
 80083da:	6408      	.short	0x6408
 80083dc:	62606454 	.word	0x62606454
 80083e0:	56585a5c 	.word	0x56585a5c
 80083e4:	5e          	.byte	0x5e
 80083e5:	00          	.byte	0x00
		bool disChargeEnabled = packState.disChargeDesired && packState.disChargeLCAllowed;
 80083e6:	4680      	mov	r8, r0
 80083e8:	e79e      	b.n	8008328 <modTerminalProcessString+0x74>
				modCommandsPrintf("Operational state     : %s","Charging");
 80083ea:	4940      	ldr	r1, [pc, #256]	; (80084ec <modTerminalProcessString+0x238>)
				modCommandsPrintf("Operational state     : %s","Unknown");
 80083ec:	4840      	ldr	r0, [pc, #256]	; (80084f0 <modTerminalProcessString+0x23c>)
		modCommandsPrintf("Discharge enabled     : %s",disChargeEnabled ? "True" : "False");
 80083ee:	4f41      	ldr	r7, [pc, #260]	; (80084f4 <modTerminalProcessString+0x240>)
 80083f0:	4d41      	ldr	r5, [pc, #260]	; (80084f8 <modTerminalProcessString+0x244>)
				modCommandsPrintf("Operational state     : %s","Unknown");
 80083f2:	f7fb f8b9 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage high     : %.3fV",packState.cellVoltageHigh);
 80083f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80083f8:	f7f9 fb86 	bl	8001b08 <__aeabi_f2d>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	483e      	ldr	r0, [pc, #248]	; (80084fc <modTerminalProcessString+0x248>)
 8008402:	f7fb f8b1 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage low      : %.3fV",packState.cellVoltageLow);
 8008406:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008408:	f7f9 fb7e 	bl	8001b08 <__aeabi_f2d>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	483b      	ldr	r0, [pc, #236]	; (8008500 <modTerminalProcessString+0x24c>)
 8008412:	f7fb f8a9 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage average  : %.3fV",packState.cellVoltageAverage);
 8008416:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008418:	f7f9 fb76 	bl	8001b08 <__aeabi_f2d>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4838      	ldr	r0, [pc, #224]	; (8008504 <modTerminalProcessString+0x250>)
 8008422:	f7fb f8a1 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage mismatch : %.3fV",packState.cellVoltageMisMatch);
 8008426:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008428:	f7f9 fb6e 	bl	8001b08 <__aeabi_f2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4835      	ldr	r0, [pc, #212]	; (8008508 <modTerminalProcessString+0x254>)
 8008432:	f7fb f899 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Discharge enabled     : %s",disChargeEnabled ? "True" : "False");
 8008436:	4835      	ldr	r0, [pc, #212]	; (800850c <modTerminalProcessString+0x258>)
 8008438:	f1b8 0f00 	cmp.w	r8, #0
 800843c:	bf14      	ite	ne
 800843e:	4639      	movne	r1, r7
 8008440:	4629      	moveq	r1, r5
 8008442:	f7fb f891 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Charge enabled        : %s",chargeEnabled ? "True" : "False");	
 8008446:	4832      	ldr	r0, [pc, #200]	; (8008510 <modTerminalProcessString+0x25c>)
 8008448:	2e00      	cmp	r6, #0
 800844a:	bf14      	ite	ne
 800844c:	4639      	movne	r1, r7
 800844e:	4629      	moveq	r1, r5
 8008450:	f7fb f88a 	bl	8003568 <modCommandsPrintf>
    modCommandsPrintf("Power button pressed  : %s",packState.powerButtonActuated ? "True" : "False");	
 8008454:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 8008458:	482e      	ldr	r0, [pc, #184]	; (8008514 <modTerminalProcessString+0x260>)
 800845a:	2900      	cmp	r1, #0
 800845c:	bf14      	ite	ne
 800845e:	4639      	movne	r1, r7
 8008460:	4629      	moveq	r1, r5
 8008462:	f7fb f881 	bl	8003568 <modCommandsPrintf>
    modCommandsPrintf("CAN safety state      : %s",packState.safetyOverCANHCSafeNSafe	? "True" : "False");
 8008466:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 800846a:	482b      	ldr	r0, [pc, #172]	; (8008518 <modTerminalProcessString+0x264>)
 800846c:	2900      	cmp	r1, #0
 800846e:	bf14      	ite	ne
 8008470:	4639      	movne	r1, r7
 8008472:	4629      	moveq	r1, r5
 8008474:	f7fb f878 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("---End Battery Pack Status---");
 8008478:	4828      	ldr	r0, [pc, #160]	; (800851c <modTerminalProcessString+0x268>)
			modCommandsPrintf("Error restored config.");
 800847a:	f7fb f875 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf(" ");
 800847e:	480a      	ldr	r0, [pc, #40]	; (80084a8 <modTerminalProcessString+0x1f4>)
 8008480:	e739      	b.n	80082f6 <modTerminalProcessString+0x42>
				modCommandsPrintf("Operational state     : %s","Load enabled");
 8008482:	4927      	ldr	r1, [pc, #156]	; (8008520 <modTerminalProcessString+0x26c>)
 8008484:	e7b2      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Charged");
 8008486:	4927      	ldr	r1, [pc, #156]	; (8008524 <modTerminalProcessString+0x270>)
 8008488:	e7b0      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Balancing");
 800848a:	4927      	ldr	r1, [pc, #156]	; (8008528 <modTerminalProcessString+0x274>)
 800848c:	e7ae      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Pre charge error");
 800848e:	4927      	ldr	r1, [pc, #156]	; (800852c <modTerminalProcessString+0x278>)
 8008490:	e7ac      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Error");
 8008492:	4927      	ldr	r1, [pc, #156]	; (8008530 <modTerminalProcessString+0x27c>)
 8008494:	e7aa      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Forced on");
 8008496:	4927      	ldr	r1, [pc, #156]	; (8008534 <modTerminalProcessString+0x280>)
 8008498:	e7a8      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Power down");
 800849a:	4927      	ldr	r1, [pc, #156]	; (8008538 <modTerminalProcessString+0x284>)
 800849c:	e7a6      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","External (USB or CAN)");
 800849e:	4927      	ldr	r1, [pc, #156]	; (800853c <modTerminalProcessString+0x288>)
 80084a0:	e7a4      	b.n	80083ec <modTerminalProcessString+0x138>
				modCommandsPrintf("Operational state     : %s","Unknown");
 80084a2:	4927      	ldr	r1, [pc, #156]	; (8008540 <modTerminalProcessString+0x28c>)
 80084a4:	e7a2      	b.n	80083ec <modTerminalProcessString+0x138>
 80084a6:	bf00      	nop
 80084a8:	08017a68 	.word	0x08017a68
 80084ac:	08013858 	.word	0x08013858
 80084b0:	0801385d 	.word	0x0801385d
 80084b4:	08013843 	.word	0x08013843
 80084b8:	08013863 	.word	0x08013863
 80084bc:	20000238 	.word	0x20000238
 80084c0:	0801386a 	.word	0x0801386a
 80084c4:	20000220 	.word	0x20000220
 80084c8:	080136de 	.word	0x080136de
 80084cc:	2000021c 	.word	0x2000021c
 80084d0:	080136fc 	.word	0x080136fc
 80084d4:	08013888 	.word	0x08013888
 80084d8:	080138a6 	.word	0x080138a6
 80084dc:	080138c4 	.word	0x080138c4
 80084e0:	080138e2 	.word	0x080138e2
 80084e4:	08013901 	.word	0x08013901
 80084e8:	20004939 	.word	0x20004939
 80084ec:	08013920 	.word	0x08013920
 80084f0:	08013929 	.word	0x08013929
 80084f4:	08013838 	.word	0x08013838
 80084f8:	0801383d 	.word	0x0801383d
 80084fc:	080139ad 	.word	0x080139ad
 8008500:	080139cb 	.word	0x080139cb
 8008504:	080139e9 	.word	0x080139e9
 8008508:	08013a07 	.word	0x08013a07
 800850c:	08013a25 	.word	0x08013a25
 8008510:	08013a40 	.word	0x08013a40
 8008514:	08013a5b 	.word	0x08013a5b
 8008518:	08013a76 	.word	0x08013a76
 800851c:	08013a91 	.word	0x08013a91
 8008520:	08013944 	.word	0x08013944
 8008524:	08013951 	.word	0x08013951
 8008528:	08013959 	.word	0x08013959
 800852c:	08013963 	.word	0x08013963
 8008530:	08013974 	.word	0x08013974
 8008534:	0801397a 	.word	0x0801397a
 8008538:	08013984 	.word	0x08013984
 800853c:	0801398f 	.word	0x0801398f
 8008540:	080139a5 	.word	0x080139a5
	} else if (strcmp(argv[0], "sens") == 0) {		
 8008544:	49bf      	ldr	r1, [pc, #764]	; (8008844 <modTerminalProcessString+0x590>)
 8008546:	4620      	mov	r0, r4
 8008548:	f7f9 fba6 	bl	8001c98 <strcmp>
 800854c:	2800      	cmp	r0, #0
 800854e:	f040 80bd 	bne.w	80086cc <modTerminalProcessString+0x418>
		modCommandsPrintf("Sensor[0]  : % 3.1f C - I - 'Sensor 0: ON BOARD NTC'",packState.temperatures[0]);
 8008552:	4cbd      	ldr	r4, [pc, #756]	; (8008848 <modTerminalProcessString+0x594>)
		modCommandsPrintf("-----       Sensors         -----");
 8008554:	48bd      	ldr	r0, [pc, #756]	; (800884c <modTerminalProcessString+0x598>)
 8008556:	f7fb f807 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[0]  : % 3.1f C - I - 'Sensor 0: ON BOARD NTC'",packState.temperatures[0]);
 800855a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800855c:	f7f9 fad4 	bl	8001b08 <__aeabi_f2d>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	48ba      	ldr	r0, [pc, #744]	; (8008850 <modTerminalProcessString+0x59c>)
 8008566:	f7fa ffff 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[1]  : % 3.1f C - I - 'Sensor 1'",packState.temperatures[1]);
 800856a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800856c:	f7f9 facc 	bl	8001b08 <__aeabi_f2d>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	48b7      	ldr	r0, [pc, #732]	; (8008854 <modTerminalProcessString+0x5a0>)
 8008576:	f7fa fff7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[2]  : % 3.1f C - I - 'Sensor 2: LTC Internal'",packState.temperatures[2]);
 800857a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800857c:	f7f9 fac4 	bl	8001b08 <__aeabi_f2d>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	48b4      	ldr	r0, [pc, #720]	; (8008858 <modTerminalProcessString+0x5a4>)
 8008586:	f7fa ffef 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[3]  : % 3.1f C - I - 'Sensor 3: STM NTC'",packState.temperatures[3]);
 800858a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800858c:	f7f9 fabc 	bl	8001b08 <__aeabi_f2d>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	48b1      	ldr	r0, [pc, #708]	; (800885c <modTerminalProcessString+0x5a8>)
 8008596:	f7fa ffe7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[4]  : % 3.1f C - I - 'Sensor 4'",packState.temperatures[4]);
 800859a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859c:	f7f9 fab4 	bl	8001b08 <__aeabi_f2d>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	48ae      	ldr	r0, [pc, #696]	; (8008860 <modTerminalProcessString+0x5ac>)
 80085a6:	f7fa ffdf 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[5]  : % 3.1f C - I - 'Sensor 5'",packState.temperatures[5]);
 80085aa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80085ac:	f7f9 faac 	bl	8001b08 <__aeabi_f2d>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	48ab      	ldr	r0, [pc, #684]	; (8008864 <modTerminalProcessString+0x5b0>)
 80085b6:	f7fa ffd7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[6]  : % 3.1f C - I - 'Sensor 6'",packState.temperatures[6]);
 80085ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80085bc:	f7f9 faa4 	bl	8001b08 <__aeabi_f2d>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	48a8      	ldr	r0, [pc, #672]	; (8008868 <modTerminalProcessString+0x5b4>)
 80085c6:	f7fa ffcf 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Sensor[7]  : % 3.1f C - I - 'Sensor 4'",packState.temperatures[7]);
 80085ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80085cc:	f7f9 fa9c 	bl	8001b08 <__aeabi_f2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	48a5      	ldr	r0, [pc, #660]	; (800886c <modTerminalProcessString+0x5b8>)
 80085d6:	f7fa ffc7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[0][0]  : % 3.1f C - I - 'auxModuleVoltages 0-0'",packState.auxModuleVoltages[0][0]);
 80085da:	f604 7324 	addw	r3, r4, #3876	; 0xf24
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f7f9 fa92 	bl	8001b08 <__aeabi_f2d>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	48a1      	ldr	r0, [pc, #644]	; (8008870 <modTerminalProcessString+0x5bc>)
 80085ea:	f7fa ffbd 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[1][0]  : % 3.1f C - I - 'auxModuleVoltages 0-1'",packState.auxModuleVoltages[0][1]);
 80085ee:	f604 7328 	addw	r3, r4, #3880	; 0xf28
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	f7f9 fa88 	bl	8001b08 <__aeabi_f2d>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	489d      	ldr	r0, [pc, #628]	; (8008874 <modTerminalProcessString+0x5c0>)
 80085fe:	f7fa ffb3 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[2][0]  : % 3.1f C - I - 'auxModuleVoltages 0-2'",packState.auxModuleVoltages[0][2]);
 8008602:	f604 732c 	addw	r3, r4, #3884	; 0xf2c
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	f7f9 fa7e 	bl	8001b08 <__aeabi_f2d>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4899      	ldr	r0, [pc, #612]	; (8008878 <modTerminalProcessString+0x5c4>)
 8008612:	f7fa ffa9 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[3][0]  : % 3.1f C - I - 'auxModuleVoltages 0-3'",packState.auxModuleVoltages[0][3]);
 8008616:	f504 6373 	add.w	r3, r4, #3888	; 0xf30
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	f7f9 fa74 	bl	8001b08 <__aeabi_f2d>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4895      	ldr	r0, [pc, #596]	; (800887c <modTerminalProcessString+0x5c8>)
 8008626:	f7fa ff9f 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[4][0]  : % 3.1f C - I - 'auxModuleVoltages 0-4'",packState.auxModuleVoltages[0][4]);
 800862a:	f604 7334 	addw	r3, r4, #3892	; 0xf34
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	f7f9 fa6a 	bl	8001b08 <__aeabi_f2d>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4891      	ldr	r0, [pc, #580]	; (8008880 <modTerminalProcessString+0x5cc>)
 800863a:	f7fa ff95 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[5][0]  : % 3.1f C - I - 'auxModuleVoltages 0-5'",packState.auxModuleVoltages[0][5]);
 800863e:	f604 7338 	addw	r3, r4, #3896	; 0xf38
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f7f9 fa60 	bl	8001b08 <__aeabi_f2d>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	488d      	ldr	r0, [pc, #564]	; (8008884 <modTerminalProcessString+0x5d0>)
 800864e:	f7fa ff8b 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[6][0]  : % 3.1f C - I - 'auxModuleVoltages 0-6'",packState.auxModuleVoltages[0][6]);
 8008652:	f604 733c 	addw	r3, r4, #3900	; 0xf3c
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f7f9 fa56 	bl	8001b08 <__aeabi_f2d>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4889      	ldr	r0, [pc, #548]	; (8008888 <modTerminalProcessString+0x5d4>)
 8008662:	f7fa ff81 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[7][0]  : % 3.1f C - I - 'auxModuleVoltages 0-7'",packState.auxModuleVoltages[0][7]);
 8008666:	f504 6374 	add.w	r3, r4, #3904	; 0xf40
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	f7f9 fa4c 	bl	8001b08 <__aeabi_f2d>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4885      	ldr	r0, [pc, #532]	; (800888c <modTerminalProcessString+0x5d8>)
 8008676:	f7fa ff77 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[0][1]  : % 3.1f C - I - 'auxModuleVoltages 1-0'",packState.auxModuleVoltages[1][0]);
 800867a:	f604 7354 	addw	r3, r4, #3924	; 0xf54
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	f7f9 fa42 	bl	8001b08 <__aeabi_f2d>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	4881      	ldr	r0, [pc, #516]	; (8008890 <modTerminalProcessString+0x5dc>)
 800868a:	f7fa ff6d 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[1][1]  : % 3.1f C - I - 'auxModuleVoltages 1-1'",packState.auxModuleVoltages[1][1]);
 800868e:	f604 7358 	addw	r3, r4, #3928	; 0xf58
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	f7f9 fa38 	bl	8001b08 <__aeabi_f2d>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	487d      	ldr	r0, [pc, #500]	; (8008894 <modTerminalProcessString+0x5e0>)
 800869e:	f7fa ff63 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[2][1]  : % 3.1f C - I - 'auxModuleVoltages 1-2'",packState.auxModuleVoltages[1][2]);
 80086a2:	f604 735c 	addw	r3, r4, #3932	; 0xf5c
		modCommandsPrintf("auxModuleVoltages[3][1]  : % 3.1f C - I - 'auxModuleVoltages 1-3'",packState.auxModuleVoltages[1][3]);
 80086a6:	f504 6476 	add.w	r4, r4, #3936	; 0xf60
		modCommandsPrintf("auxModuleVoltages[2][1]  : % 3.1f C - I - 'auxModuleVoltages 1-2'",packState.auxModuleVoltages[1][2]);
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	f7f9 fa2c 	bl	8001b08 <__aeabi_f2d>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4878      	ldr	r0, [pc, #480]	; (8008898 <modTerminalProcessString+0x5e4>)
 80086b6:	f7fa ff57 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("auxModuleVoltages[3][1]  : % 3.1f C - I - 'auxModuleVoltages 1-3'",packState.auxModuleVoltages[1][3]);
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	f7f9 fa24 	bl	8001b08 <__aeabi_f2d>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4875      	ldr	r0, [pc, #468]	; (800889c <modTerminalProcessString+0x5e8>)
 80086c6:	f7fa ff4f 	bl	8003568 <modCommandsPrintf>
 80086ca:	e616      	b.n	80082fa <modTerminalProcessString+0x46>
	} else if (strcmp(argv[0], "cells") == 0) {
 80086cc:	4974      	ldr	r1, [pc, #464]	; (80088a0 <modTerminalProcessString+0x5ec>)
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7f9 fae2 	bl	8001c98 <strcmp>
 80086d4:	4606      	mov	r6, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d140      	bne.n	800875c <modTerminalProcessString+0x4a8>
		modCommandsPrintf("-----   Cell voltages   -----");				
 80086da:	4872      	ldr	r0, [pc, #456]	; (80088a4 <modTerminalProcessString+0x5f0>)
		for(cellPointer = 0 ; cellPointer < generalConfig->noOfCellsSeries*generalConfig->noOfParallelModules ; cellPointer++) {
 80086dc:	4f72      	ldr	r7, [pc, #456]	; (80088a8 <modTerminalProcessString+0x5f4>)
 80086de:	4d5a      	ldr	r5, [pc, #360]	; (8008848 <modTerminalProcessString+0x594>)
			modCommandsPrintf("Cell voltage%2d             : %.3fV",cellPointer,packState.cellVoltagesIndividual[cellPointer].cellVoltage);
 80086e0:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800890c <modTerminalProcessString+0x658>
		modCommandsPrintf("-----   Cell voltages   -----");				
 80086e4:	f7fa ff40 	bl	8003568 <modCommandsPrintf>
		for(cellPointer = 0 ; cellPointer < generalConfig->noOfCellsSeries*generalConfig->noOfParallelModules ; cellPointer++) {
 80086e8:	4634      	mov	r4, r6
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	7813      	ldrb	r3, [r2, #0]
 80086ee:	78d2      	ldrb	r2, [r2, #3]
 80086f0:	b2e6      	uxtb	r6, r4
 80086f2:	fb13 f302 	smulbb	r3, r3, r2
 80086f6:	429e      	cmp	r6, r3
 80086f8:	f104 0401 	add.w	r4, r4, #1
 80086fc:	db21      	blt.n	8008742 <modTerminalProcessString+0x48e>
		modCommandsPrintf("Cell voltage high          : %.3fV",packState.cellVoltageHigh);
 80086fe:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8008700:	f7f9 fa02 	bl	8001b08 <__aeabi_f2d>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4868      	ldr	r0, [pc, #416]	; (80088ac <modTerminalProcessString+0x5f8>)
 800870a:	f7fa ff2d 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage low           : %.3fV",packState.cellVoltageLow);
 800870e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008710:	f7f9 f9fa 	bl	8001b08 <__aeabi_f2d>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4865      	ldr	r0, [pc, #404]	; (80088b0 <modTerminalProcessString+0x5fc>)
 800871a:	f7fa ff25 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage average       : %.3fV",packState.cellVoltageAverage);
 800871e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8008720:	f7f9 f9f2 	bl	8001b08 <__aeabi_f2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4862      	ldr	r0, [pc, #392]	; (80088b4 <modTerminalProcessString+0x600>)
 800872a:	f7fa ff1d 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Cell voltage mismatch      : %.3fV",packState.cellVoltageMisMatch);
 800872e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8008730:	f7f9 f9ea 	bl	8001b08 <__aeabi_f2d>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	485f      	ldr	r0, [pc, #380]	; (80088b8 <modTerminalProcessString+0x604>)
 800873a:	f7fa ff15 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("----- End Cell voltages -----");	
 800873e:	485f      	ldr	r0, [pc, #380]	; (80088bc <modTerminalProcessString+0x608>)
 8008740:	e69b      	b.n	800847a <modTerminalProcessString+0x1c6>
			modCommandsPrintf("Cell voltage%2d             : %.3fV",cellPointer,packState.cellVoltagesIndividual[cellPointer].cellVoltage);
 8008742:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 8008746:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800874a:	f7f9 f9dd 	bl	8001b08 <__aeabi_f2d>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4640      	mov	r0, r8
 8008754:	4631      	mov	r1, r6
 8008756:	f7fa ff07 	bl	8003568 <modCommandsPrintf>
		for(cellPointer = 0 ; cellPointer < generalConfig->noOfCellsSeries*generalConfig->noOfParallelModules ; cellPointer++) {
 800875a:	e7c6      	b.n	80086ea <modTerminalProcessString+0x436>
	} else if (strcmp(argv[0], "config") == 0) {
 800875c:	4958      	ldr	r1, [pc, #352]	; (80088c0 <modTerminalProcessString+0x60c>)
 800875e:	4620      	mov	r0, r4
 8008760:	f7f9 fa9a 	bl	8001c98 <strcmp>
 8008764:	2800      	cmp	r0, #0
 8008766:	d14f      	bne.n	8008808 <modTerminalProcessString+0x554>
		modCommandsPrintf("NoOfCells                  : %u",generalConfig->noOfCellsSeries);
 8008768:	4c4f      	ldr	r4, [pc, #316]	; (80088a8 <modTerminalProcessString+0x5f4>)
		modCommandsPrintf("---   BMS Configuration   ---");
 800876a:	4856      	ldr	r0, [pc, #344]	; (80088c4 <modTerminalProcessString+0x610>)
 800876c:	f7fa fefc 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("NoOfCells                  : %u",generalConfig->noOfCellsSeries);
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	4855      	ldr	r0, [pc, #340]	; (80088c8 <modTerminalProcessString+0x614>)
 8008774:	7819      	ldrb	r1, [r3, #0]
 8008776:	f7fa fef7 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("batteryCapacity            : %.2fAh",generalConfig->batteryCapacity);
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	6858      	ldr	r0, [r3, #4]
 800877e:	f7f9 f9c3 	bl	8001b08 <__aeabi_f2d>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4851      	ldr	r0, [pc, #324]	; (80088cc <modTerminalProcessString+0x618>)
 8008788:	f7fa feee 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellHardUnderVoltage       : %.3fV",generalConfig->cellHardUnderVoltage);
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	6898      	ldr	r0, [r3, #8]
 8008790:	f7f9 f9ba 	bl	8001b08 <__aeabi_f2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	484d      	ldr	r0, [pc, #308]	; (80088d0 <modTerminalProcessString+0x61c>)
 800879a:	f7fa fee5 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellHardOverVoltage        : %.3fV",generalConfig->cellHardOverVoltage);
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	68d8      	ldr	r0, [r3, #12]
 80087a2:	f7f9 f9b1 	bl	8001b08 <__aeabi_f2d>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	484a      	ldr	r0, [pc, #296]	; (80088d4 <modTerminalProcessString+0x620>)
 80087ac:	f7fa fedc 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellLCSoftUnderVoltage     : %.3fV",generalConfig->cellLCSoftUnderVoltage);
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	6918      	ldr	r0, [r3, #16]
 80087b4:	f7f9 f9a8 	bl	8001b08 <__aeabi_f2d>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4846      	ldr	r0, [pc, #280]	; (80088d8 <modTerminalProcessString+0x624>)
 80087be:	f7fa fed3 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellSoftOverVoltage        : %.3fV",generalConfig->cellSoftOverVoltage);
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6958      	ldr	r0, [r3, #20]
 80087c6:	f7f9 f99f 	bl	8001b08 <__aeabi_f2d>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4843      	ldr	r0, [pc, #268]	; (80088dc <modTerminalProcessString+0x628>)
 80087d0:	f7fa feca 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellBalanceStart           : %.3fV",generalConfig->cellBalanceStart);
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	69d8      	ldr	r0, [r3, #28]
 80087d8:	f7f9 f996 	bl	8001b08 <__aeabi_f2d>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	483f      	ldr	r0, [pc, #252]	; (80088e0 <modTerminalProcessString+0x62c>)
 80087e2:	f7fa fec1 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cellBalanceDiffThreshold   : %.3fV",generalConfig->cellBalanceDifferenceThreshold);
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	6998      	ldr	r0, [r3, #24]
 80087ea:	f7f9 f98d 	bl	8001b08 <__aeabi_f2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	483c      	ldr	r0, [pc, #240]	; (80088e4 <modTerminalProcessString+0x630>)
 80087f4:	f7fa feb8 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("CAN ID                     : %u",generalConfig->CANID);
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	483b      	ldr	r0, [pc, #236]	; (80088e8 <modTerminalProcessString+0x634>)
 80087fc:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
 8008800:	f7fa feb2 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("--- End BMS Configuration ---");
 8008804:	4839      	ldr	r0, [pc, #228]	; (80088ec <modTerminalProcessString+0x638>)
 8008806:	e638      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "config_default") == 0) {
 8008808:	4939      	ldr	r1, [pc, #228]	; (80088f0 <modTerminalProcessString+0x63c>)
 800880a:	4620      	mov	r0, r4
 800880c:	f7f9 fa44 	bl	8001c98 <strcmp>
 8008810:	b948      	cbnz	r0, 8008826 <modTerminalProcessString+0x572>
		modCommandsPrintf("--Restoring default config--");
 8008812:	4838      	ldr	r0, [pc, #224]	; (80088f4 <modTerminalProcessString+0x640>)
 8008814:	f7fa fea8 	bl	8003568 <modCommandsPrintf>
		if(modConfigStoreDefaultConfig())
 8008818:	f7fc f950 	bl	8004abc <modConfigStoreDefaultConfig>
 800881c:	b108      	cbz	r0, 8008822 <modTerminalProcessString+0x56e>
			modCommandsPrintf("Succesfully restored config, new config wil be used on powercycle (or use config_read to apply it now).");
 800881e:	4836      	ldr	r0, [pc, #216]	; (80088f8 <modTerminalProcessString+0x644>)
 8008820:	e62b      	b.n	800847a <modTerminalProcessString+0x1c6>
			modCommandsPrintf("Error restored config.");
 8008822:	4836      	ldr	r0, [pc, #216]	; (80088fc <modTerminalProcessString+0x648>)
 8008824:	e629      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "config_write") == 0) {
 8008826:	4936      	ldr	r1, [pc, #216]	; (8008900 <modTerminalProcessString+0x64c>)
 8008828:	4620      	mov	r0, r4
 800882a:	f7f9 fa35 	bl	8001c98 <strcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	d170      	bne.n	8008914 <modTerminalProcessString+0x660>
		modCommandsPrintf("---    Writing config    ---");
 8008832:	4834      	ldr	r0, [pc, #208]	; (8008904 <modTerminalProcessString+0x650>)
 8008834:	f7fa fe98 	bl	8003568 <modCommandsPrintf>
		if(modConfigStoreConfig())
 8008838:	f7fb ffe6 	bl	8004808 <modConfigStoreConfig>
 800883c:	2800      	cmp	r0, #0
 800883e:	d067      	beq.n	8008910 <modTerminalProcessString+0x65c>
			modCommandsPrintf("Succesfully written config.");
 8008840:	4831      	ldr	r0, [pc, #196]	; (8008908 <modTerminalProcessString+0x654>)
 8008842:	e61a      	b.n	800847a <modTerminalProcessString+0x1c6>
 8008844:	08013aaf 	.word	0x08013aaf
 8008848:	20000238 	.word	0x20000238
 800884c:	08013ab4 	.word	0x08013ab4
 8008850:	08013ad6 	.word	0x08013ad6
 8008854:	08013b0b 	.word	0x08013b0b
 8008858:	08013b32 	.word	0x08013b32
 800885c:	08013b67 	.word	0x08013b67
 8008860:	08013b97 	.word	0x08013b97
 8008864:	08013bbe 	.word	0x08013bbe
 8008868:	08013be5 	.word	0x08013be5
 800886c:	08013c0c 	.word	0x08013c0c
 8008870:	08013c33 	.word	0x08013c33
 8008874:	08013c75 	.word	0x08013c75
 8008878:	08013cb7 	.word	0x08013cb7
 800887c:	08013cf9 	.word	0x08013cf9
 8008880:	08013d3b 	.word	0x08013d3b
 8008884:	08013d7d 	.word	0x08013d7d
 8008888:	08013dbf 	.word	0x08013dbf
 800888c:	08013e01 	.word	0x08013e01
 8008890:	08013e43 	.word	0x08013e43
 8008894:	08013e85 	.word	0x08013e85
 8008898:	08013ec7 	.word	0x08013ec7
 800889c:	08013f09 	.word	0x08013f09
 80088a0:	0801431a 	.word	0x0801431a
 80088a4:	08013f4b 	.word	0x08013f4b
 80088a8:	2000021c 	.word	0x2000021c
 80088ac:	08013f8d 	.word	0x08013f8d
 80088b0:	08013fb0 	.word	0x08013fb0
 80088b4:	08013fd3 	.word	0x08013fd3
 80088b8:	08013ff6 	.word	0x08013ff6
 80088bc:	08014019 	.word	0x08014019
 80088c0:	08014037 	.word	0x08014037
 80088c4:	0801403e 	.word	0x0801403e
 80088c8:	0801405c 	.word	0x0801405c
 80088cc:	0801407c 	.word	0x0801407c
 80088d0:	080140a0 	.word	0x080140a0
 80088d4:	080140c3 	.word	0x080140c3
 80088d8:	080140e6 	.word	0x080140e6
 80088dc:	08014109 	.word	0x08014109
 80088e0:	0801412c 	.word	0x0801412c
 80088e4:	0801414f 	.word	0x0801414f
 80088e8:	08014172 	.word	0x08014172
 80088ec:	08014192 	.word	0x08014192
 80088f0:	080141b0 	.word	0x080141b0
 80088f4:	080141bf 	.word	0x080141bf
 80088f8:	080141dc 	.word	0x080141dc
 80088fc:	08014244 	.word	0x08014244
 8008900:	0801425b 	.word	0x0801425b
 8008904:	08014268 	.word	0x08014268
 8008908:	08014285 	.word	0x08014285
 800890c:	08013f69 	.word	0x08013f69
			modCommandsPrintf("Error writing config.");
 8008910:	4891      	ldr	r0, [pc, #580]	; (8008b58 <modTerminalProcessString+0x8a4>)
 8008912:	e5b2      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "config_read") == 0) {
 8008914:	4991      	ldr	r1, [pc, #580]	; (8008b5c <modTerminalProcessString+0x8a8>)
 8008916:	4620      	mov	r0, r4
 8008918:	f7f9 f9be 	bl	8001c98 <strcmp>
 800891c:	b948      	cbnz	r0, 8008932 <modTerminalProcessString+0x67e>
		modCommandsPrintf("---    Reading config    ---");
 800891e:	4890      	ldr	r0, [pc, #576]	; (8008b60 <modTerminalProcessString+0x8ac>)
 8008920:	f7fa fe22 	bl	8003568 <modCommandsPrintf>
		if(modConfigLoadConfig())
 8008924:	f7fb ff76 	bl	8004814 <modConfigLoadConfig>
 8008928:	b108      	cbz	r0, 800892e <modTerminalProcessString+0x67a>
			modCommandsPrintf("Succesfully read config.");
 800892a:	488e      	ldr	r0, [pc, #568]	; (8008b64 <modTerminalProcessString+0x8b0>)
 800892c:	e5a5      	b.n	800847a <modTerminalProcessString+0x1c6>
			modCommandsPrintf("Error reading config.");
 800892e:	488e      	ldr	r0, [pc, #568]	; (8008b68 <modTerminalProcessString+0x8b4>)
 8008930:	e5a3      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "config_set_cells") == 0) {
 8008932:	498e      	ldr	r1, [pc, #568]	; (8008b6c <modTerminalProcessString+0x8b8>)
 8008934:	4620      	mov	r0, r4
 8008936:	f7f9 f9af 	bl	8001c98 <strcmp>
 800893a:	b9e0      	cbnz	r0, 8008976 <modTerminalProcessString+0x6c2>
		modCommandsPrintf("---Setting new cell count---");
 800893c:	488c      	ldr	r0, [pc, #560]	; (8008b70 <modTerminalProcessString+0x8bc>)
 800893e:	f7fa fe13 	bl	8003568 <modCommandsPrintf>
		if (argc == 2) {
 8008942:	2d02      	cmp	r5, #2
 8008944:	d115      	bne.n	8008972 <modTerminalProcessString+0x6be>
			uint32_t newNumberOfCells = 0;
 8008946:	2300      	movs	r3, #0
			sscanf(argv[1], "%u", &newNumberOfCells);
 8008948:	498a      	ldr	r1, [pc, #552]	; (8008b74 <modTerminalProcessString+0x8c0>)
 800894a:	f8d8 0004 	ldr.w	r0, [r8, #4]
			uint32_t newNumberOfCells = 0;
 800894e:	930b      	str	r3, [sp, #44]	; 0x2c
			sscanf(argv[1], "%u", &newNumberOfCells);
 8008950:	aa0b      	add	r2, sp, #44	; 0x2c
 8008952:	f007 fb69 	bl	8010028 <siscanf>
			if(newNumberOfCells < 13 && newNumberOfCells > 2) {
 8008956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008958:	1ecb      	subs	r3, r1, #3
 800895a:	2b09      	cmp	r3, #9
 800895c:	d807      	bhi.n	800896e <modTerminalProcessString+0x6ba>
				modCommandsPrintf("Number of cells is set to: %u.",newNumberOfCells);
 800895e:	4886      	ldr	r0, [pc, #536]	; (8008b78 <modTerminalProcessString+0x8c4>)
 8008960:	f7fa fe02 	bl	8003568 <modCommandsPrintf>
				generalConfig->noOfCellsSeries = newNumberOfCells;
 8008964:	4b85      	ldr	r3, [pc, #532]	; (8008b7c <modTerminalProcessString+0x8c8>)
 8008966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e587      	b.n	800847e <modTerminalProcessString+0x1ca>
				modCommandsPrintf("Invalid number of cells (should be anything from 3 to 12).");
 800896e:	4884      	ldr	r0, [pc, #528]	; (8008b80 <modTerminalProcessString+0x8cc>)
 8008970:	e583      	b.n	800847a <modTerminalProcessString+0x1c6>
			modCommandsPrintf("This command requires one argument.");
 8008972:	4884      	ldr	r0, [pc, #528]	; (8008b84 <modTerminalProcessString+0x8d0>)
 8008974:	e581      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "hwinfo") == 0) {
 8008976:	4984      	ldr	r1, [pc, #528]	; (8008b88 <modTerminalProcessString+0x8d4>)
 8008978:	4620      	mov	r0, r4
 800897a:	f7f9 f98d 	bl	8001c98 <strcmp>
 800897e:	2800      	cmp	r0, #0
 8008980:	d131      	bne.n	80089e6 <modTerminalProcessString+0x732>
		modCommandsPrintf("-------    BMS Info   -------");		
 8008982:	4882      	ldr	r0, [pc, #520]	; (8008b8c <modTerminalProcessString+0x8d8>)
 8008984:	f7fa fdf0 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Firmware: %s", FW_REAL_VERSION);
 8008988:	4981      	ldr	r1, [pc, #516]	; (8008b90 <modTerminalProcessString+0x8dc>)
 800898a:	4882      	ldr	r0, [pc, #520]	; (8008b94 <modTerminalProcessString+0x8e0>)
 800898c:	f7fa fdec 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Name    : %s", HW_NAME);
 8008990:	4981      	ldr	r1, [pc, #516]	; (8008b98 <modTerminalProcessString+0x8e4>)
 8008992:	4882      	ldr	r0, [pc, #520]	; (8008b9c <modTerminalProcessString+0x8e8>)
 8008994:	f7fa fde8 	bl	8003568 <modCommandsPrintf>
				STM32_UUID_8[0], STM32_UUID_8[1], STM32_UUID_8[2], STM32_UUID_8[3],
 8008998:	4881      	ldr	r0, [pc, #516]	; (8008ba0 <modTerminalProcessString+0x8ec>)
		modCommandsPrintf("UUID: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X",
 800899a:	f890 40b7 	ldrb.w	r4, [r0, #183]	; 0xb7
 800899e:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 80089a2:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80089a6:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 80089aa:	9408      	str	r4, [sp, #32]
 80089ac:	f890 40b6 	ldrb.w	r4, [r0, #182]	; 0xb6
 80089b0:	9407      	str	r4, [sp, #28]
 80089b2:	f890 40b5 	ldrb.w	r4, [r0, #181]	; 0xb5
 80089b6:	9406      	str	r4, [sp, #24]
 80089b8:	f890 40b4 	ldrb.w	r4, [r0, #180]	; 0xb4
 80089bc:	9405      	str	r4, [sp, #20]
 80089be:	f890 40b3 	ldrb.w	r4, [r0, #179]	; 0xb3
 80089c2:	9404      	str	r4, [sp, #16]
 80089c4:	f890 40b2 	ldrb.w	r4, [r0, #178]	; 0xb2
 80089c8:	9403      	str	r4, [sp, #12]
 80089ca:	f890 40b1 	ldrb.w	r4, [r0, #177]	; 0xb1
 80089ce:	9402      	str	r4, [sp, #8]
 80089d0:	f890 40b0 	ldrb.w	r4, [r0, #176]	; 0xb0
 80089d4:	9401      	str	r4, [sp, #4]
 80089d6:	f890 00af 	ldrb.w	r0, [r0, #175]	; 0xaf
 80089da:	9000      	str	r0, [sp, #0]
 80089dc:	4871      	ldr	r0, [pc, #452]	; (8008ba4 <modTerminalProcessString+0x8f0>)
 80089de:	f7fa fdc3 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("------- End BMS Info  -------");
 80089e2:	4871      	ldr	r0, [pc, #452]	; (8008ba8 <modTerminalProcessString+0x8f4>)
 80089e4:	e549      	b.n	800847a <modTerminalProcessString+0x1c6>
	} else if (strcmp(argv[0], "reboot") == 0) {
 80089e6:	4971      	ldr	r1, [pc, #452]	; (8008bac <modTerminalProcessString+0x8f8>)
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7f9 f955 	bl	8001c98 <strcmp>
 80089ee:	b978      	cbnz	r0, 8008a10 <modTerminalProcessString+0x75c>
		modCommandsPrintf("------  Rebooting BMS  ------");
 80089f0:	486f      	ldr	r0, [pc, #444]	; (8008bb0 <modTerminalProcessString+0x8fc>)
 80089f2:	f7fa fdb9 	bl	8003568 <modCommandsPrintf>
  __ASM volatile ("dsb 0xF":::"memory");
 80089f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80089fa:	496e      	ldr	r1, [pc, #440]	; (8008bb4 <modTerminalProcessString+0x900>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80089fc:	4b6e      	ldr	r3, [pc, #440]	; (8008bb8 <modTerminalProcessString+0x904>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80089fe:	68ca      	ldr	r2, [r1, #12]
 8008a00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60cb      	str	r3, [r1, #12]
 8008a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <modTerminalProcessString+0x758>
	} else if (strcmp(argv[0], "bootloader_erase") == 0) {
 8008a10:	496a      	ldr	r1, [pc, #424]	; (8008bbc <modTerminalProcessString+0x908>)
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7f9 f940 	bl	8001c98 <strcmp>
 8008a18:	b958      	cbnz	r0, 8008a32 <modTerminalProcessString+0x77e>
		modCommandsPrintf("------  erasing new app space  ------");
 8008a1a:	4869      	ldr	r0, [pc, #420]	; (8008bc0 <modTerminalProcessString+0x90c>)
 8008a1c:	f7fa fda4 	bl	8003568 <modCommandsPrintf>
		if(modFlashEraseNewAppData(0x00002000) == HAL_OK)
 8008a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008a24:	f7fc fe7a 	bl	800571c <modFlashEraseNewAppData>
 8008a28:	b908      	cbnz	r0, 8008a2e <modTerminalProcessString+0x77a>
			modCommandsPrintf("--Erase done.");
 8008a2a:	4866      	ldr	r0, [pc, #408]	; (8008bc4 <modTerminalProcessString+0x910>)
 8008a2c:	e463      	b.n	80082f6 <modTerminalProcessString+0x42>
			modCommandsPrintf("--Erase error.");
 8008a2e:	4866      	ldr	r0, [pc, #408]	; (8008bc8 <modTerminalProcessString+0x914>)
 8008a30:	e461      	b.n	80082f6 <modTerminalProcessString+0x42>
	} else if (strcmp(argv[0], "bootloader_jump") == 0) {
 8008a32:	4966      	ldr	r1, [pc, #408]	; (8008bcc <modTerminalProcessString+0x918>)
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7f9 f92f 	bl	8001c98 <strcmp>
 8008a3a:	b910      	cbnz	r0, 8008a42 <modTerminalProcessString+0x78e>
		modFlashJumpToBootloader();
 8008a3c:	f7fc fed2 	bl	80057e4 <modFlashJumpToBootloader>
 8008a40:	e45b      	b.n	80082fa <modTerminalProcessString+0x46>
	} else if (strcmp(argv[0], "help") == 0) {
 8008a42:	4963      	ldr	r1, [pc, #396]	; (8008bd0 <modTerminalProcessString+0x91c>)
 8008a44:	4f63      	ldr	r7, [pc, #396]	; (8008bd4 <modTerminalProcessString+0x920>)
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7f9 f926 	bl	8001c98 <strcmp>
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	b150      	cbz	r0, 8008a66 <modTerminalProcessString+0x7b2>
		for (int i = 0;i < callback_write;i++) {
 8008a50:	f8d7 a000 	ldr.w	sl, [r7]
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 8008a54:	4f60      	ldr	r7, [pc, #384]	; (8008bd8 <modTerminalProcessString+0x924>)
		for (int i = 0;i < callback_write;i++) {
 8008a56:	2600      	movs	r6, #0
 8008a58:	45b2      	cmp	sl, r6
 8008a5a:	dc6c      	bgt.n	8008b36 <modTerminalProcessString+0x882>
			modCommandsPrintf("Invalid command: %s\n type help to list all available commands\n", argv[0]);
 8008a5c:	485f      	ldr	r0, [pc, #380]	; (8008bdc <modTerminalProcessString+0x928>)
 8008a5e:	4621      	mov	r1, r4
 8008a60:	f7fa fd82 	bl	8003568 <modCommandsPrintf>
 8008a64:	e449      	b.n	80082fa <modTerminalProcessString+0x46>
		modCommandsPrintf("------- Start of help -------");
 8008a66:	485e      	ldr	r0, [pc, #376]	; (8008be0 <modTerminalProcessString+0x92c>)
 8008a68:	4c5b      	ldr	r4, [pc, #364]	; (8008bd8 <modTerminalProcessString+0x924>)
				modCommandsPrintf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 8008a6a:	4d5e      	ldr	r5, [pc, #376]	; (8008be4 <modTerminalProcessString+0x930>)
				modCommandsPrintf("  There is no help available for this command.");
 8008a6c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8008c38 <modTerminalProcessString+0x984>
				modCommandsPrintf("  %s", callbacks[i].help);
 8008a70:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8008c3c <modTerminalProcessString+0x988>
		modCommandsPrintf("------- Start of help -------");
 8008a74:	f7fa fd78 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("Valid commands for ENNOID-BMS are:");
 8008a78:	485b      	ldr	r0, [pc, #364]	; (8008be8 <modTerminalProcessString+0x934>)
 8008a7a:	f7fa fd75 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("help");
 8008a7e:	4854      	ldr	r0, [pc, #336]	; (8008bd0 <modTerminalProcessString+0x91c>)
 8008a80:	f7fa fd72 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Show this help.");
 8008a84:	4859      	ldr	r0, [pc, #356]	; (8008bec <modTerminalProcessString+0x938>)
 8008a86:	f7fa fd6f 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("ping");
 8008a8a:	4859      	ldr	r0, [pc, #356]	; (8008bf0 <modTerminalProcessString+0x93c>)
 8008a8c:	f7fa fd6c 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print pong here to see if the reply works.");
 8008a90:	4858      	ldr	r0, [pc, #352]	; (8008bf4 <modTerminalProcessString+0x940>)
 8008a92:	f7fa fd69 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("slave_scan");
 8008a96:	4858      	ldr	r0, [pc, #352]	; (8008bf8 <modTerminalProcessString+0x944>)
 8008a98:	f7fa fd66 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Scan the I2C devices on the slave.");
 8008a9c:	4857      	ldr	r0, [pc, #348]	; (8008bfc <modTerminalProcessString+0x948>)
 8008a9e:	f7fa fd63 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("status");
 8008aa2:	4857      	ldr	r0, [pc, #348]	; (8008c00 <modTerminalProcessString+0x94c>)
 8008aa4:	f7fa fd60 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print battery measurements summary.");
 8008aa8:	4856      	ldr	r0, [pc, #344]	; (8008c04 <modTerminalProcessString+0x950>)
 8008aaa:	f7fa fd5d 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("sens");
 8008aae:	4856      	ldr	r0, [pc, #344]	; (8008c08 <modTerminalProcessString+0x954>)
 8008ab0:	f7fa fd5a 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print all sensor values.");
 8008ab4:	4855      	ldr	r0, [pc, #340]	; (8008c0c <modTerminalProcessString+0x958>)
 8008ab6:	f7fa fd57 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("cells");
 8008aba:	4855      	ldr	r0, [pc, #340]	; (8008c10 <modTerminalProcessString+0x95c>)
 8008abc:	f7fa fd54 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print cell voltage measurements.");
 8008ac0:	4854      	ldr	r0, [pc, #336]	; (8008c14 <modTerminalProcessString+0x960>)
 8008ac2:	f7fa fd51 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("config");
 8008ac6:	4854      	ldr	r0, [pc, #336]	; (8008c18 <modTerminalProcessString+0x964>)
 8008ac8:	f7fa fd4e 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print BMS configuration.");
 8008acc:	4853      	ldr	r0, [pc, #332]	; (8008c1c <modTerminalProcessString+0x968>)
 8008ace:	f7fa fd4b 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("config_default");
 8008ad2:	4853      	ldr	r0, [pc, #332]	; (8008c20 <modTerminalProcessString+0x96c>)
 8008ad4:	f7fa fd48 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Load default BMS configuration.");
 8008ad8:	4852      	ldr	r0, [pc, #328]	; (8008c24 <modTerminalProcessString+0x970>)
 8008ada:	f7fa fd45 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("config_write");
 8008ade:	4852      	ldr	r0, [pc, #328]	; (8008c28 <modTerminalProcessString+0x974>)
 8008ae0:	f7fa fd42 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Store current BMS configuration to EEPROM.");
 8008ae4:	4851      	ldr	r0, [pc, #324]	; (8008c2c <modTerminalProcessString+0x978>)
 8008ae6:	f7fa fd3f 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("config_read");
 8008aea:	481c      	ldr	r0, [pc, #112]	; (8008b5c <modTerminalProcessString+0x8a8>)
 8008aec:	f7fa fd3c 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Read BMS configuration from EEPROM.");
 8008af0:	484f      	ldr	r0, [pc, #316]	; (8008c30 <modTerminalProcessString+0x97c>)
 8008af2:	f7fa fd39 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("hwinfo");
 8008af6:	4824      	ldr	r0, [pc, #144]	; (8008b88 <modTerminalProcessString+0x8d4>)
 8008af8:	f7fa fd36 	bl	8003568 <modCommandsPrintf>
		modCommandsPrintf("  Print some hardware information.");
 8008afc:	484d      	ldr	r0, [pc, #308]	; (8008c34 <modTerminalProcessString+0x980>)
 8008afe:	f7fa fd33 	bl	8003568 <modCommandsPrintf>
		for (int i = 0;i < callback_write;i++) {
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	42b3      	cmp	r3, r6
 8008b06:	f77f acba 	ble.w	800847e <modTerminalProcessString+0x1ca>
			if (callbacks[i].arg_names) {
 8008b0a:	68a2      	ldr	r2, [r4, #8]
				modCommandsPrintf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 8008b0c:	6821      	ldr	r1, [r4, #0]
			if (callbacks[i].arg_names) {
 8008b0e:	b152      	cbz	r2, 8008b26 <modTerminalProcessString+0x872>
				modCommandsPrintf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7fa fd29 	bl	8003568 <modCommandsPrintf>
			if (callbacks[i].help) {
 8008b16:	6861      	ldr	r1, [r4, #4]
 8008b18:	b149      	cbz	r1, 8008b2e <modTerminalProcessString+0x87a>
				modCommandsPrintf("  %s", callbacks[i].help);
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	f7fa fd24 	bl	8003568 <modCommandsPrintf>
		for (int i = 0;i < callback_write;i++) {
 8008b20:	3601      	adds	r6, #1
 8008b22:	3410      	adds	r4, #16
 8008b24:	e7ed      	b.n	8008b02 <modTerminalProcessString+0x84e>
				modCommandsPrintf(callbacks[i].command);
 8008b26:	4608      	mov	r0, r1
 8008b28:	f7fa fd1e 	bl	8003568 <modCommandsPrintf>
 8008b2c:	e7f3      	b.n	8008b16 <modTerminalProcessString+0x862>
				modCommandsPrintf("  There is no help available for this command.");
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7fa fd1a 	bl	8003568 <modCommandsPrintf>
 8008b34:	e7f4      	b.n	8008b20 <modTerminalProcessString+0x86c>
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 8008b36:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f859 1007 	ldr.w	r1, [r9, r7]
 8008b40:	f7f9 f8aa 	bl	8001c98 <strcmp>
 8008b44:	b930      	cbnz	r0, 8008b54 <modTerminalProcessString+0x8a0>
				callbacks[i].cbf(argc, (const char**)argv);
 8008b46:	444f      	add	r7, r9
 8008b48:	4641      	mov	r1, r8
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	4798      	blx	r3
		if (!found) {
 8008b50:	f7ff bbd3 	b.w	80082fa <modTerminalProcessString+0x46>
		for (int i = 0;i < callback_write;i++) {
 8008b54:	3601      	adds	r6, #1
 8008b56:	e77f      	b.n	8008a58 <modTerminalProcessString+0x7a4>
 8008b58:	080142a1 	.word	0x080142a1
 8008b5c:	080142b7 	.word	0x080142b7
 8008b60:	080142c3 	.word	0x080142c3
 8008b64:	080142e0 	.word	0x080142e0
 8008b68:	080142f9 	.word	0x080142f9
 8008b6c:	0801430f 	.word	0x0801430f
 8008b70:	08014320 	.word	0x08014320
 8008b74:	0801418f 	.word	0x0801418f
 8008b78:	0801433d 	.word	0x0801433d
 8008b7c:	2000021c 	.word	0x2000021c
 8008b80:	0801435c 	.word	0x0801435c
 8008b84:	08014397 	.word	0x08014397
 8008b88:	080143bb 	.word	0x080143bb
 8008b8c:	080143c2 	.word	0x080143c2
 8008b90:	080143e0 	.word	0x080143e0
 8008b94:	080143e5 	.word	0x080143e5
 8008b98:	080133e4 	.word	0x080133e4
 8008b9c:	080143f2 	.word	0x080143f2
 8008ba0:	1ffff700 	.word	0x1ffff700
 8008ba4:	080143ff 	.word	0x080143ff
 8008ba8:	08014441 	.word	0x08014441
 8008bac:	0801445f 	.word	0x0801445f
 8008bb0:	08014466 	.word	0x08014466
 8008bb4:	e000ed00 	.word	0xe000ed00
 8008bb8:	05fa0004 	.word	0x05fa0004
 8008bbc:	08014484 	.word	0x08014484
 8008bc0:	08014495 	.word	0x08014495
 8008bc4:	080144bb 	.word	0x080144bb
 8008bc8:	080144c9 	.word	0x080144c9
 8008bcc:	080144d8 	.word	0x080144d8
 8008bd0:	080144e8 	.word	0x080144e8
 8008bd4:	20004a50 	.word	0x20004a50
 8008bd8:	20004a54 	.word	0x20004a54
 8008bdc:	080146ee 	.word	0x080146ee
 8008be0:	080144ed 	.word	0x080144ed
 8008be4:	080146b4 	.word	0x080146b4
 8008be8:	0801450b 	.word	0x0801450b
 8008bec:	0801452e 	.word	0x0801452e
 8008bf0:	08013858 	.word	0x08013858
 8008bf4:	08014540 	.word	0x08014540
 8008bf8:	0801456d 	.word	0x0801456d
 8008bfc:	08014578 	.word	0x08014578
 8008c00:	08013863 	.word	0x08013863
 8008c04:	0801459d 	.word	0x0801459d
 8008c08:	08013aaf 	.word	0x08013aaf
 8008c0c:	080145c3 	.word	0x080145c3
 8008c10:	0801431a 	.word	0x0801431a
 8008c14:	080145de 	.word	0x080145de
 8008c18:	08014037 	.word	0x08014037
 8008c1c:	08014601 	.word	0x08014601
 8008c20:	080141b0 	.word	0x080141b0
 8008c24:	0801461c 	.word	0x0801461c
 8008c28:	0801425b 	.word	0x0801425b
 8008c2c:	0801463e 	.word	0x0801463e
 8008c30:	0801466b 	.word	0x0801466b
 8008c34:	08014691 	.word	0x08014691
 8008c38:	080146bf 	.word	0x080146bf
 8008c3c:	080146ba 	.word	0x080146ba

08008c40 <modTerminalRegisterCommandCallBack>:
 */
void modTerminalRegisterCommandCallBack(
		const char* command,
		const char *help,
		const char *arg_names,
		void(*cbf)(int argc, const char **argv)) {
 8008c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	int callback_num = callback_write;
 8008c44:	4e15      	ldr	r6, [pc, #84]	; (8008c9c <modTerminalRegisterCommandCallBack+0x5c>)
 8008c46:	f8df b058 	ldr.w	fp, [pc, #88]	; 8008ca0 <modTerminalRegisterCommandCallBack+0x60>
 8008c4a:	6837      	ldr	r7, [r6, #0]
		void(*cbf)(int argc, const char **argv)) {
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	468a      	mov	sl, r1
 8008c50:	4691      	mov	r9, r2
 8008c52:	4698      	mov	r8, r3

	for (int i = 0;i < callback_write;i++) {
 8008c54:	2400      	movs	r4, #0
 8008c56:	42bc      	cmp	r4, r7
 8008c58:	db13      	blt.n	8008c82 <modTerminalRegisterCommandCallBack+0x42>
 8008c5a:	463c      	mov	r4, r7
			callback_num = i;
			break;
		}
	}

	callbacks[callback_num].command = command;
 8008c5c:	eb0b 1004 	add.w	r0, fp, r4, lsl #4
 8008c60:	0123      	lsls	r3, r4, #4
	callbacks[callback_num].help = help;
	callbacks[callback_num].arg_names = arg_names;
	callbacks[callback_num].cbf = cbf;

	if (callback_num == callback_write) {
 8008c62:	42bc      	cmp	r4, r7
	callbacks[callback_num].arg_names = arg_names;
 8008c64:	e9c0 a901 	strd	sl, r9, [r0, #4]
	callbacks[callback_num].command = command;
 8008c68:	f84b 5003 	str.w	r5, [fp, r3]
	callbacks[callback_num].cbf = cbf;
 8008c6c:	f8c0 800c 	str.w	r8, [r0, #12]
	if (callback_num == callback_write) {
 8008c70:	d105      	bne.n	8008c7e <modTerminalRegisterCommandCallBack+0x3e>
		callback_write++;
 8008c72:	3401      	adds	r4, #1
		if (callback_write >= CALLBACK_LEN) {
 8008c74:	2c18      	cmp	r4, #24
			callback_write = 0;
 8008c76:	bfca      	itet	gt
 8008c78:	2300      	movgt	r3, #0
		callback_write++;
 8008c7a:	6034      	strle	r4, [r6, #0]
			callback_write = 0;
 8008c7c:	6033      	strgt	r3, [r6, #0]
		}
	}
}
 8008c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (callbacks[i].command == command) {
 8008c82:	0123      	lsls	r3, r4, #4
 8008c84:	f85b 0003 	ldr.w	r0, [fp, r3]
 8008c88:	42a8      	cmp	r0, r5
 8008c8a:	d0e7      	beq.n	8008c5c <modTerminalRegisterCommandCallBack+0x1c>
		if (strcmp(callbacks[i].command, command) == 0) {
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7f9 f803 	bl	8001c98 <strcmp>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0e2      	beq.n	8008c5c <modTerminalRegisterCommandCallBack+0x1c>
	for (int i = 0;i < callback_write;i++) {
 8008c96:	3401      	adds	r4, #1
 8008c98:	e7dd      	b.n	8008c56 <modTerminalRegisterCommandCallBack+0x16>
 8008c9a:	bf00      	nop
 8008c9c:	20004a50 	.word	0x20004a50
 8008ca0:	20004a54 	.word	0x20004a54

08008ca4 <modUARTSendPacketWrapper>:
	if(driverHWUART2GetChar(&inputChar))
		libPacketProcessByte(inputChar,PACKET_HANDLER_UART);
};

void modUARTSendPacketWrapper(unsigned char *data, unsigned int len) {
	libPacketSendPacket(data, len, PACKET_HANDLER_UART);
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f006 b815 	b.w	800ecd4 <libPacketSendPacket>
	...

08008cac <modUARTProcessPacket>:
}

void modUARTProcessPacket(unsigned char *data, unsigned int len) {
 8008cac:	b513      	push	{r0, r1, r4, lr}
 8008cae:	4604      	mov	r4, r0
	modCommandsSetSendFunction(modUARTSendPacketWrapper);
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <modUARTProcessPacket+0x1c>)
void modUARTProcessPacket(unsigned char *data, unsigned int len) {
 8008cb2:	9101      	str	r1, [sp, #4]
	modCommandsSetSendFunction(modUARTSendPacketWrapper);
 8008cb4:	f7fa fc4a 	bl	800354c <modCommandsSetSendFunction>
	modCommandsProcessPacket(data, len);
 8008cb8:	9901      	ldr	r1, [sp, #4]
 8008cba:	4620      	mov	r0, r4
}
 8008cbc:	b002      	add	sp, #8
 8008cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	modCommandsProcessPacket(data, len);
 8008cc2:	f7fa bcd7 	b.w	8003674 <modCommandsProcessPacket>
 8008cc6:	bf00      	nop
 8008cc8:	08008ca5 	.word	0x08008ca5

08008ccc <modUARTSendPacket>:

void modUARTSendPacket(unsigned char *data, unsigned int len) {
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4604      	mov	r4, r0
 8008cd0:	1845      	adds	r5, r0, r1
	uint32_t outputCharPointer;
	
	for(outputCharPointer = 0; outputCharPointer < len; outputCharPointer++) {
 8008cd2:	42ac      	cmp	r4, r5
 8008cd4:	d100      	bne.n	8008cd8 <modUARTSendPacket+0xc>
	  driverHWUART2SendChar(data[outputCharPointer]);
	}
}
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
	  driverHWUART2SendChar(data[outputCharPointer]);
 8008cd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008cdc:	f002 f80e 	bl	800acfc <driverHWUART2SendChar>
	for(outputCharPointer = 0; outputCharPointer < len; outputCharPointer++) {
 8008ce0:	e7f7      	b.n	8008cd2 <modUARTSendPacket+0x6>
	...

08008ce4 <modUARTInit>:
void modUARTInit(void) {	
 8008ce4:	b508      	push	{r3, lr}
	libPacketInit(modUARTSendPacket, modUARTProcessPacket, PACKET_HANDLER_UART);
 8008ce6:	4805      	ldr	r0, [pc, #20]	; (8008cfc <modUARTInit+0x18>)
 8008ce8:	4905      	ldr	r1, [pc, #20]	; (8008d00 <modUARTInit+0x1c>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	f005 ffe6 	bl	800ecbc <libPacketInit>
};
 8008cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	driverSWUART2Init(115200);																								// Configure the UART driver
 8008cf4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8008cf8:	f001 b9fe 	b.w	800a0f8 <driverSWUART2Init>
 8008cfc:	08008ccd 	.word	0x08008ccd
 8008d00:	08008cad 	.word	0x08008cad

08008d04 <modUARTTask>:
void modUARTTask(void) {
 8008d04:	b507      	push	{r0, r1, r2, lr}
	while(driverSWUART2Task()){};
 8008d06:	f001 fa09 	bl	800a11c <driverSWUART2Task>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d1fb      	bne.n	8008d06 <modUARTTask+0x2>
	if(driverHWUART2GetChar(&inputChar))
 8008d0e:	f10d 0007 	add.w	r0, sp, #7
 8008d12:	f002 f803 	bl	800ad1c <driverHWUART2GetChar>
 8008d16:	b120      	cbz	r0, 8008d22 <modUARTTask+0x1e>
		libPacketProcessByte(inputChar,PACKET_HANDLER_UART);
 8008d18:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	f006 f81f 	bl	800ed60 <libPacketProcessByte>
};
 8008d22:	b003      	add	sp, #12
 8008d24:	f85d fb04 	ldr.w	pc, [sp], #4

08008d28 <driverSWStorageManagerInit>:
uint16_t driverSWStorageManagerDataSize = 0;
uint16_t driverSWStorageManagerConfigStructSize = 0;
uint16_t driverSWStorageManagerStateOfChargeStructSize = 0;

void driverSWStorageManagerInit(void) {
	driverSWStorageManagerDataSize = driverSWStorageManagerConfigStructSize + driverSWStorageManagerStateOfChargeStructSize;// Calculate the total desired space
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <driverSWStorageManagerInit+0x58>)
void driverSWStorageManagerInit(void) {
 8008d2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	driverSWStorageManagerDataSize = driverSWStorageManagerConfigStructSize + driverSWStorageManagerStateOfChargeStructSize;// Calculate the total desired space
 8008d2c:	8818      	ldrh	r0, [r3, #0]
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <driverSWStorageManagerInit+0x5c>)
 8008d30:	4c15      	ldr	r4, [pc, #84]	; (8008d88 <driverSWStorageManagerInit+0x60>)
 8008d32:	881b      	ldrh	r3, [r3, #0]
	
	// Generate EEPROM enviroment
	driverHWEEPROMVirtAddVarTab = malloc(driverSWStorageManagerDataSize*sizeof(uint16_t));												// Make room for the addres array
 8008d34:	4d15      	ldr	r5, [pc, #84]	; (8008d8c <driverSWStorageManagerInit+0x64>)
	driverSWStorageManagerDataSize = driverSWStorageManagerConfigStructSize + driverSWStorageManagerStateOfChargeStructSize;// Calculate the total desired space
 8008d36:	4418      	add	r0, r3
 8008d38:	b280      	uxth	r0, r0
 8008d3a:	8020      	strh	r0, [r4, #0]
	driverHWEEPROMVirtAddVarTab = malloc(driverSWStorageManagerDataSize*sizeof(uint16_t));												// Make room for the addres array
 8008d3c:	0040      	lsls	r0, r0, #1
 8008d3e:	f006 fb25 	bl	800f38c <malloc>
 8008d42:	6028      	str	r0, [r5, #0]
	HAL_FLASH_Unlock();																																														// Unlock FLASH to allow EEPROM lib to write
 8008d44:	f003 fb5e 	bl	800c404 <HAL_FLASH_Unlock>
	
	if(driverHWEEPROMInit(driverSWStorageManagerDataSize) != HAL_OK)																							// Init EEPROM and tell EEPROM manager the disered size
 8008d48:	8820      	ldrh	r0, [r4, #0]
 8008d4a:	f001 fbb9 	bl	800a4c0 <driverHWEEPROMInit>
 8008d4e:	b988      	cbnz	r0, 8008d74 <driverSWStorageManagerInit+0x4c>
		while(true);																																																// Something went wrong in the init
	
	for(uint16_t addresPointer=0 ; addresPointer<driverSWStorageManagerDataSize ; addresPointer++)
		driverHWEEPROMVirtAddVarTab[addresPointer] = addresPointer;																									// Generate addres array
 8008d50:	682b      	ldr	r3, [r5, #0]
	for(uint16_t addresPointer=0 ; addresPointer<driverSWStorageManagerDataSize ; addresPointer++)
 8008d52:	8821      	ldrh	r1, [r4, #0]
 8008d54:	b282      	uxth	r2, r0
 8008d56:	4291      	cmp	r1, r2
 8008d58:	d80d      	bhi.n	8008d76 <driverSWStorageManagerInit+0x4e>
	
	// Check EEPROM Contents
	uint16_t readVariable;																																												// Define variable to write EEPROM contents to if any
	if(driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[0], &readVariable) == 1) {													// Try to read from first memory location
 8008d5a:	8818      	ldrh	r0, [r3, #0]
 8008d5c:	f10d 0106 	add.w	r1, sp, #6
 8008d60:	f001 fb84 	bl	800a46c <driverHWEEPROMReadVariable>
 8008d64:	2801      	cmp	r0, #1
		driverSWStorageManagerConfigEmpty = true;
 8008d66:	bf01      	itttt	eq
 8008d68:	4b09      	ldreq	r3, [pc, #36]	; (8008d90 <driverSWStorageManagerInit+0x68>)
 8008d6a:	7018      	strbeq	r0, [r3, #0]
		driverSWStorageManagerStateOfChargeEmpty = true;
 8008d6c:	4b09      	ldreq	r3, [pc, #36]	; (8008d94 <driverSWStorageManagerInit+0x6c>)
 8008d6e:	7018      	strbeq	r0, [r3, #0]
	}
};
 8008d70:	b003      	add	sp, #12
 8008d72:	bd30      	pop	{r4, r5, pc}
		while(true);																																																// Something went wrong in the init
 8008d74:	e7fe      	b.n	8008d74 <driverSWStorageManagerInit+0x4c>
		driverHWEEPROMVirtAddVarTab[addresPointer] = addresPointer;																									// Generate addres array
 8008d76:	b281      	uxth	r1, r0
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for(uint16_t addresPointer=0 ; addresPointer<driverSWStorageManagerDataSize ; addresPointer++)
 8008d7e:	e7e8      	b.n	8008d52 <driverSWStorageManagerInit+0x2a>
 8008d80:	20004bea 	.word	0x20004bea
 8008d84:	20004bf0 	.word	0x20004bf0
 8008d88:	20004bec 	.word	0x20004bec
 8008d8c:	20004be4 	.word	0x20004be4
 8008d90:	20004be8 	.word	0x20004be8
 8008d94:	20004bee 	.word	0x20004bee

08008d98 <driverSWStorageManagerEraseData>:

bool driverSWStorageManagerEraseData(void) {
 8008d98:	b508      	push	{r3, lr}
	return (driverHWEEPROMEraseFlash() == HAL_OK);
 8008d9a:	f001 fb55 	bl	800a448 <driverHWEEPROMEraseFlash>
}
 8008d9e:	fab0 f080 	clz	r0, r0
 8008da2:	0940      	lsrs	r0, r0, #5
 8008da4:	bd08      	pop	{r3, pc}
	...

08008da8 <driverSWStorageManagerGetOffsetFromLocation>:
	return (returnStatus == HAL_OK);
};

uint16_t driverSWStorageManagerGetOffsetFromLocation(StorageLocationTypedef storageLocation) {
	int16_t locationPointer = -1;
	switch(storageLocation) {
 8008da8:	b130      	cbz	r0, 8008db8 <driverSWStorageManagerGetOffsetFromLocation+0x10>
 8008daa:	2801      	cmp	r0, #1
		case STORAGE_CONFIG:
		  locationPointer = 0;																																												// StorageStruct starts at addres 0
			break;
		case STORAGE_STATEOFCHARGE:
			locationPointer = driverSWStorageManagerConfigStructSize;																										// StateOfCharge starts after configStruct
 8008dac:	bf06      	itte	eq
 8008dae:	4b03      	ldreq	r3, [pc, #12]	; (8008dbc <driverSWStorageManagerGetOffsetFromLocation+0x14>)
 8008db0:	f9b3 0000 	ldrsheq.w	r0, [r3]
	int16_t locationPointer = -1;
 8008db4:	f04f 30ff 	movne.w	r0, #4294967295
		default:
			break;
	};
	
	return locationPointer;
};
 8008db8:	b280      	uxth	r0, r0
 8008dba:	4770      	bx	lr
 8008dbc:	20004bea 	.word	0x20004bea

08008dc0 <driverSWStorageManagerGetStructSize>:

uint16_t driverSWStorageManagerGetStructSize(StorageLocationTypedef storageLocation) {
	int16_t sizeIndicator = -1;
	switch(storageLocation) {
 8008dc0:	b128      	cbz	r0, 8008dce <driverSWStorageManagerGetStructSize+0xe>
 8008dc2:	2801      	cmp	r0, #1
 8008dc4:	d007      	beq.n	8008dd6 <driverSWStorageManagerGetStructSize+0x16>
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
		default:
			break;
	};
	
	return sizeIndicator;
};
 8008dca:	b280      	uxth	r0, r0
 8008dcc:	4770      	bx	lr
		  sizeIndicator = driverSWStorageManagerConfigStructSize;																											// Config struct size
 8008dce:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <driverSWStorageManagerGetStructSize+0x1c>)
			sizeIndicator = driverSWStorageManagerStateOfChargeStructSize;																							// StateOfCharge struct size
 8008dd0:	f9b3 0000 	ldrsh.w	r0, [r3]
			break;
 8008dd4:	e7f9      	b.n	8008dca <driverSWStorageManagerGetStructSize+0xa>
			sizeIndicator = driverSWStorageManagerStateOfChargeStructSize;																							// StateOfCharge struct size
 8008dd6:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <driverSWStorageManagerGetStructSize+0x20>)
 8008dd8:	e7fa      	b.n	8008dd0 <driverSWStorageManagerGetStructSize+0x10>
 8008dda:	bf00      	nop
 8008ddc:	20004bea 	.word	0x20004bea
 8008de0:	20004bf0 	.word	0x20004bf0

08008de4 <driverSWStorageManagerStoreStruct>:
bool driverSWStorageManagerStoreStruct(void *configStruct, StorageLocationTypedef storageLocation) {
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	4604      	mov	r4, r0
	uint16_t dataOffset = driverSWStorageManagerGetOffsetFromLocation(storageLocation);															// Get addres offset
 8008dea:	4608      	mov	r0, r1
 8008dec:	f7ff ffdc 	bl	8008da8 <driverSWStorageManagerGetOffsetFromLocation>
 8008df0:	4606      	mov	r6, r0
	uint16_t dataSize = driverSWStorageManagerGetStructSize(storageLocation);																				// Get data size
 8008df2:	4608      	mov	r0, r1
 8008df4:	f7ff ffe4 	bl	8008dc0 <driverSWStorageManagerGetStructSize>
		returnStatus |= driverHWEEPROMWriteVariable(driverHWEEPROMVirtAddVarTab[addresPointer+dataOffset],dataPointer[addresPointer]);// Store data in EEPROM
 8008df8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8008e2c <driverSWStorageManagerStoreStruct+0x48>
 8008dfc:	eb04 0740 	add.w	r7, r4, r0, lsl #1
 8008e00:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
	uint8_t returnStatus = 0;
 8008e04:	2500      	movs	r5, #0
	for(uint16_t addresPointer=0 ; addresPointer<dataSize ; addresPointer++) {																			// Scan trough all adresses
 8008e06:	42bc      	cmp	r4, r7
 8008e08:	d104      	bne.n	8008e14 <driverSWStorageManagerStoreStruct+0x30>
};
 8008e0a:	fab5 f085 	clz	r0, r5
 8008e0e:	0940      	lsrs	r0, r0, #5
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		returnStatus |= driverHWEEPROMWriteVariable(driverHWEEPROMVirtAddVarTab[addresPointer+dataOffset],dataPointer[addresPointer]);// Store data in EEPROM
 8008e14:	f8d8 3000 	ldr.w	r3, [r8]
 8008e18:	4423      	add	r3, r4
 8008e1a:	f834 1b02 	ldrh.w	r1, [r4], #2
 8008e1e:	5b98      	ldrh	r0, [r3, r6]
 8008e20:	f001 fc22 	bl	800a668 <driverHWEEPROMWriteVariable>
 8008e24:	4305      	orrs	r5, r0
 8008e26:	b2ed      	uxtb	r5, r5
	for(uint16_t addresPointer=0 ; addresPointer<dataSize ; addresPointer++) {																			// Scan trough all adresses
 8008e28:	e7ed      	b.n	8008e06 <driverSWStorageManagerStoreStruct+0x22>
 8008e2a:	bf00      	nop
 8008e2c:	20004be4 	.word	0x20004be4

08008e30 <driverSWStorageManagerGetStruct>:
bool driverSWStorageManagerGetStruct(void *configStruct, StorageLocationTypedef storageLocation) {
 8008e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e34:	4604      	mov	r4, r0
	uint16_t dataOffset = driverSWStorageManagerGetOffsetFromLocation(storageLocation);															// Get addres offset
 8008e36:	4608      	mov	r0, r1
 8008e38:	f7ff ffb6 	bl	8008da8 <driverSWStorageManagerGetOffsetFromLocation>
 8008e3c:	4606      	mov	r6, r0
	uint16_t dataSize = driverSWStorageManagerGetStructSize(storageLocation);																				// Get data size
 8008e3e:	4608      	mov	r0, r1
 8008e40:	f7ff ffbe 	bl	8008dc0 <driverSWStorageManagerGetStructSize>
		returnStatus |= driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[addresPointer+dataOffset],&dataPointer[addresPointer]);// Get data from EEPROM
 8008e44:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8008e78 <driverSWStorageManagerGetStruct+0x48>
 8008e48:	eb04 0740 	add.w	r7, r4, r0, lsl #1
 8008e4c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
	uint8_t returnStatus = 0;
 8008e50:	2500      	movs	r5, #0
	for(uint16_t addresPointer=0 ; addresPointer<dataSize ; addresPointer++)																				// Scan trough all adresses
 8008e52:	42bc      	cmp	r4, r7
 8008e54:	d104      	bne.n	8008e60 <driverSWStorageManagerGetStruct+0x30>
};
 8008e56:	fab5 f085 	clz	r0, r5
 8008e5a:	0940      	lsrs	r0, r0, #5
 8008e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		returnStatus |= driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[addresPointer+dataOffset],&dataPointer[addresPointer]);// Get data from EEPROM
 8008e60:	f8d8 3000 	ldr.w	r3, [r8]
 8008e64:	4423      	add	r3, r4
 8008e66:	4621      	mov	r1, r4
 8008e68:	5b98      	ldrh	r0, [r3, r6]
 8008e6a:	f001 faff 	bl	800a46c <driverHWEEPROMReadVariable>
 8008e6e:	4305      	orrs	r5, r0
 8008e70:	b2ed      	uxtb	r5, r5
	for(uint16_t addresPointer=0 ; addresPointer<dataSize ; addresPointer++)																				// Scan trough all adresses
 8008e72:	3402      	adds	r4, #2
 8008e74:	e7ed      	b.n	8008e52 <driverSWStorageManagerGetStruct+0x22>
 8008e76:	bf00      	nop
 8008e78:	20004be4 	.word	0x20004be4

08008e7c <driverSWSSD1306Command>:
  driverSWSSD1306Command(SSD1306_NORMALDISPLAY);                 // 0xA6
  driverSWSSD1306Command(SSD1306_DEACTIVATE_SCROLL);
  driverSWSSD1306Command(SSD1306_DISPLAYON);//--turn on oled panel
};

void driverSWSSD1306Command(uint8_t c){
 8008e7c:	b507      	push	{r0, r1, r2, lr}
	uint8_t writeData[2] = {0x00,c};
	driverHWI2C1Write(_i2caddr,false,writeData,2);
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <driverSWSSD1306Command+0x24>)
	uint8_t writeData[2] = {0x00,c};
 8008e80:	f88d 0005 	strb.w	r0, [sp, #5]
	driverHWI2C1Write(_i2caddr,false,writeData,2);
 8008e84:	f993 0000 	ldrsb.w	r0, [r3]
	uint8_t writeData[2] = {0x00,c};
 8008e88:	2100      	movs	r1, #0
	driverHWI2C1Write(_i2caddr,false,writeData,2);
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	aa01      	add	r2, sp, #4
 8008e8e:	b280      	uxth	r0, r0
	uint8_t writeData[2] = {0x00,c};
 8008e90:	f88d 1004 	strb.w	r1, [sp, #4]
	driverHWI2C1Write(_i2caddr,false,writeData,2);
 8008e94:	f001 fcb0 	bl	800a7f8 <driverHWI2C1Write>
};
 8008e98:	b003      	add	sp, #12
 8008e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e9e:	bf00      	nop
 8008ea0:	20004bf2 	.word	0x20004bf2

08008ea4 <driverSWSSD1306Init>:
void driverSWSSD1306Init(uint8_t switchvcc, uint8_t i2caddr){
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	4604      	mov	r4, r0
	driverHWI2C1Init();
 8008eaa:	f001 fc4f 	bl	800a74c <driverHWI2C1Init>
  _vccstate = switchvcc;
 8008eae:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <driverSWSSD1306Init+0xc4>)
 8008eb0:	701c      	strb	r4, [r3, #0]
  _i2caddr = i2caddr;
 8008eb2:	4b2e      	ldr	r3, [pc, #184]	; (8008f6c <driverSWSSD1306Init+0xc8>)
  driverSWSSD1306Command(SSD1306_DISPLAYOFF);                    // 0xAE
 8008eb4:	20ae      	movs	r0, #174	; 0xae
  _i2caddr = i2caddr;
 8008eb6:	701d      	strb	r5, [r3, #0]
  driverSWSSD1306Command(SSD1306_DISPLAYOFF);                    // 0xAE
 8008eb8:	f7ff ffe0 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8008ebc:	20d5      	movs	r0, #213	; 0xd5
 8008ebe:	f7ff ffdd 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(0x80);                                  // the suggested ratio 0x80
 8008ec2:	2080      	movs	r0, #128	; 0x80
 8008ec4:	f7ff ffda 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8008ec8:	20a8      	movs	r0, #168	; 0xa8
 8008eca:	f7ff ffd7 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_LCDHEIGHT - 1);
 8008ece:	203f      	movs	r0, #63	; 0x3f
 8008ed0:	f7ff ffd4 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8008ed4:	20d3      	movs	r0, #211	; 0xd3
 8008ed6:	f7ff ffd1 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(0x0);                                   // no offset
 8008eda:	2000      	movs	r0, #0
 8008edc:	f7ff ffce 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8008ee0:	2040      	movs	r0, #64	; 0x40
 8008ee2:	f7ff ffcb 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_CHARGEPUMP);                    // 0x8D
 8008ee6:	208d      	movs	r0, #141	; 0x8d
 8008ee8:	f7ff ffc8 	bl	8008e7c <driverSWSSD1306Command>
  if (switchvcc == SSD1306_EXTERNALVCC)
 8008eec:	2c01      	cmp	r4, #1
    { driverSWSSD1306Command(0x10); }
 8008eee:	bf0c      	ite	eq
 8008ef0:	2010      	moveq	r0, #16
    { driverSWSSD1306Command(0x14); }
 8008ef2:	2014      	movne	r0, #20
 8008ef4:	f7ff ffc2 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_MEMORYMODE);                    // 0x20
 8008ef8:	2020      	movs	r0, #32
 8008efa:	f7ff ffbf 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(0x00);                                  // 0x0 act like ks0108
 8008efe:	2000      	movs	r0, #0
 8008f00:	f7ff ffbc 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SEGREMAP | 0x1);
 8008f04:	20a1      	movs	r0, #161	; 0xa1
 8008f06:	f7ff ffb9 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_COMSCANDEC);
 8008f0a:	20c8      	movs	r0, #200	; 0xc8
 8008f0c:	f7ff ffb6 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETCOMPINS);                    // 0xDA
 8008f10:	20da      	movs	r0, #218	; 0xda
 8008f12:	f7ff ffb3 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(0x12);
 8008f16:	2012      	movs	r0, #18
 8008f18:	f7ff ffb0 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETCONTRAST);                   // 0x81
 8008f1c:	2081      	movs	r0, #129	; 0x81
 8008f1e:	f7ff ffad 	bl	8008e7c <driverSWSSD1306Command>
  if (switchvcc == SSD1306_EXTERNALVCC)
 8008f22:	2c01      	cmp	r4, #1
    { driverSWSSD1306Command(0x9F); }
 8008f24:	bf0c      	ite	eq
 8008f26:	209f      	moveq	r0, #159	; 0x9f
    { driverSWSSD1306Command(0xCF); }
 8008f28:	20cf      	movne	r0, #207	; 0xcf
 8008f2a:	f7ff ffa7 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETPRECHARGE);                  // 0xd9
 8008f2e:	20d9      	movs	r0, #217	; 0xd9
 8008f30:	f7ff ffa4 	bl	8008e7c <driverSWSSD1306Command>
  if (switchvcc == SSD1306_EXTERNALVCC)
 8008f34:	2c01      	cmp	r4, #1
    { driverSWSSD1306Command(0x22); }
 8008f36:	bf0c      	ite	eq
 8008f38:	2022      	moveq	r0, #34	; 0x22
    { driverSWSSD1306Command(0xF1); }
 8008f3a:	20f1      	movne	r0, #241	; 0xf1
 8008f3c:	f7ff ff9e 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8008f40:	20db      	movs	r0, #219	; 0xdb
 8008f42:	f7ff ff9b 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(0x40);
 8008f46:	2040      	movs	r0, #64	; 0x40
 8008f48:	f7ff ff98 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8008f4c:	20a4      	movs	r0, #164	; 0xa4
 8008f4e:	f7ff ff95 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8008f52:	20a6      	movs	r0, #166	; 0xa6
 8008f54:	f7ff ff92 	bl	8008e7c <driverSWSSD1306Command>
  driverSWSSD1306Command(SSD1306_DEACTIVATE_SCROLL);
 8008f58:	202e      	movs	r0, #46	; 0x2e
 8008f5a:	f7ff ff8f 	bl	8008e7c <driverSWSSD1306Command>
};
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  driverSWSSD1306Command(SSD1306_DISPLAYON);//--turn on oled panel
 8008f62:	20af      	movs	r0, #175	; 0xaf
 8008f64:	f7ff bf8a 	b.w	8008e7c <driverSWSSD1306Command>
 8008f68:	20004bf3 	.word	0x20004bf3
 8008f6c:	20004bf2 	.word	0x20004bf2

08008f70 <driverSWSSD1306ClearDisplayBuffers>:

void driverSWSSD1306ClearDisplayBuffers(void){
  memset((uint8_t *)displayBufferReal, 0xFF, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));	
 8008f70:	4802      	ldr	r0, [pc, #8]	; (8008f7c <driverSWSSD1306ClearDisplayBuffers+0xc>)
 8008f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f76:	21ff      	movs	r1, #255	; 0xff
 8008f78:	f006 ba36 	b.w	800f3e8 <memset>
 8008f7c:	20004ff4 	.word	0x20004ff4

08008f80 <driverSWSSD1306ClearDisplay>:
}

void driverSWSSD1306ClearDisplay(void){
  memset((uint8_t *)displayBufferDesired, 0x00, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 8008f80:	4802      	ldr	r0, [pc, #8]	; (8008f8c <driverSWSSD1306ClearDisplay+0xc>)
 8008f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f86:	2100      	movs	r1, #0
 8008f88:	f006 ba2e 	b.w	800f3e8 <memset>
 8008f8c:	20004bf4 	.word	0x20004bf4

08008f90 <driverSWSSD1306FillBuffer>:
};

void driverSWSSD1306FillBuffer(const uint8_t *newContents,uint16_t size){
 8008f90:	460a      	mov	r2, r1
	memcpy((uint8_t *)displayBufferDesired,newContents,size);
 8008f92:	4601      	mov	r1, r0
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <driverSWSSD1306FillBuffer+0xc>)
 8008f96:	f006 ba19 	b.w	800f3cc <memcpy>
 8008f9a:	bf00      	nop
 8008f9c:	20004bf4 	.word	0x20004bf4

08008fa0 <driverSWSSD1306DisplayAsync>:

bool driverSWSSD1306DisplayAsync(void) {
	static uint8_t writeData[1+16];
	static uint16_t pixelByte = 0;
	bool returnResult = HAL_OK;
	writeData[0] = SSD1306_SETSTARTLINE;
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <driverSWSSD1306DisplayAsync+0x8c>)
	
	if(memcmp((uint8_t *)displayBufferReal,(uint8_t *)displayBufferDesired,SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)) {
 8008fa2:	4923      	ldr	r1, [pc, #140]	; (8009030 <driverSWSSD1306DisplayAsync+0x90>)
 8008fa4:	4823      	ldr	r0, [pc, #140]	; (8009034 <driverSWSSD1306DisplayAsync+0x94>)
	writeData[0] = SSD1306_SETSTARTLINE;
 8008fa6:	2240      	movs	r2, #64	; 0x40
bool driverSWSSD1306DisplayAsync(void) {
 8008fa8:	b570      	push	{r4, r5, r6, lr}
	writeData[0] = SSD1306_SETSTARTLINE;
 8008faa:	701a      	strb	r2, [r3, #0]
	if(memcmp((uint8_t *)displayBufferReal,(uint8_t *)displayBufferDesired,SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)) {
 8008fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fb0:	f006 f9fc 	bl	800f3ac <memcmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d037      	beq.n	8009028 <driverSWSSD1306DisplayAsync+0x88>
		if(!pixelByte) {
 8008fb8:	4c1f      	ldr	r4, [pc, #124]	; (8009038 <driverSWSSD1306DisplayAsync+0x98>)
 8008fba:	8825      	ldrh	r5, [r4, #0]
 8008fbc:	b98d      	cbnz	r5, 8008fe2 <driverSWSSD1306DisplayAsync+0x42>
			driverSWSSD1306Command(SSD1306_COLUMNADDR);
 8008fbe:	2021      	movs	r0, #33	; 0x21
 8008fc0:	f7ff ff5c 	bl	8008e7c <driverSWSSD1306Command>
			driverSWSSD1306Command(0);   // Column start address (0 = reset)
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff ff59 	bl	8008e7c <driverSWSSD1306Command>
			driverSWSSD1306Command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8008fca:	207f      	movs	r0, #127	; 0x7f
 8008fcc:	f7ff ff56 	bl	8008e7c <driverSWSSD1306Command>

			driverSWSSD1306Command(SSD1306_PAGEADDR);
 8008fd0:	2022      	movs	r0, #34	; 0x22
 8008fd2:	f7ff ff53 	bl	8008e7c <driverSWSSD1306Command>
			driverSWSSD1306Command(0); // Page start address (0 = reset)
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7ff ff50 	bl	8008e7c <driverSWSSD1306Command>
			#if SSD1306_LCDHEIGHT == 64
				driverSWSSD1306Command(7); // Page end address
 8008fdc:	2007      	movs	r0, #7
 8008fde:	f7ff ff4d 	bl	8008e7c <driverSWSSD1306Command>
			#if SSD1306_LCDHEIGHT == 16
				driverSWSSD1306Command(1); // Page end address
			#endif
		}
		
		memcpy(writeData + 1,(uint8_t *)displayBufferDesired + pixelByte,16);									// Dont overwrite the register pointer
 8008fe2:	8825      	ldrh	r5, [r4, #0]
 8008fe4:	4b12      	ldr	r3, [pc, #72]	; (8009030 <driverSWSSD1306DisplayAsync+0x90>)
 8008fe6:	4a15      	ldr	r2, [pc, #84]	; (800903c <driverSWSSD1306DisplayAsync+0x9c>)
 8008fe8:	442b      	add	r3, r5
 8008fea:	4619      	mov	r1, r3
 8008fec:	f103 0010 	add.w	r0, r3, #16
 8008ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff4:	f842 6b04 	str.w	r6, [r2], #4
 8008ff8:	4281      	cmp	r1, r0
 8008ffa:	d1f9      	bne.n	8008ff0 <driverSWSSD1306DisplayAsync+0x50>
		memcpy((uint8_t *)displayBufferReal + pixelByte,(uint8_t *)displayBufferDesired + pixelByte,16);	// Update what is written to the display
 8008ffc:	4a0d      	ldr	r2, [pc, #52]	; (8009034 <driverSWSSD1306DisplayAsync+0x94>)
 8008ffe:	442a      	add	r2, r5
 8009000:	f853 1b04 	ldr.w	r1, [r3], #4
 8009004:	f842 1b04 	str.w	r1, [r2], #4
 8009008:	4283      	cmp	r3, r0
 800900a:	d1f9      	bne.n	8009000 <driverSWSSD1306DisplayAsync+0x60>
		returnResult = driverHWI2C1Write(_i2caddr,false,writeData,(1+16));
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <driverSWSSD1306DisplayAsync+0xa0>)
 800900e:	4a07      	ldr	r2, [pc, #28]	; (800902c <driverSWSSD1306DisplayAsync+0x8c>)
 8009010:	f993 0000 	ldrsb.w	r0, [r3]
 8009014:	2100      	movs	r1, #0
 8009016:	2311      	movs	r3, #17
 8009018:	b280      	uxth	r0, r0
 800901a:	f001 fbed 	bl	800a7f8 <driverHWI2C1Write>
		
		pixelByte += 16;
 800901e:	8823      	ldrh	r3, [r4, #0]
 8009020:	3310      	adds	r3, #16
		pixelByte %= SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8;
 8009022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009026:	8023      	strh	r3, [r4, #0]
	};
	
	return returnResult;
};
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	bf00      	nop
 800902c:	200053f6 	.word	0x200053f6
 8009030:	20004bf4 	.word	0x20004bf4
 8009034:	20004ff4 	.word	0x20004ff4
 8009038:	200053f4 	.word	0x200053f4
 800903c:	200053f7 	.word	0x200053f7
 8009040:	20004bf2 	.word	0x20004bf2

08009044 <driverSWSSD1306DrawPixel>:
  // it is useful to dim the display
  driverSWSSD1306Command(SSD1306_SETCONTRAST);
  driverSWSSD1306Command(contrast);
};

void driverSWSSD1306DrawPixel(int16_t x, int16_t y, uint16_t color){
 8009044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	4617      	mov	r7, r2
	uint16_t WIDTH = libGraphicsWidth();
 800904e:	f005 fe29 	bl	800eca4 <libGraphicsWidth>
 8009052:	4680      	mov	r8, r0
	uint16_t HEIGHT = libGraphicsHeight();	
 8009054:	f005 fe20 	bl	800ec98 <libGraphicsHeight>
	
  if ((x < 0) || (x >= libGraphicsWidth()) || (y < 0) || (y >= libGraphicsHeight()))
 8009058:	2d00      	cmp	r5, #0
	uint16_t HEIGHT = libGraphicsHeight();	
 800905a:	4606      	mov	r6, r0
  if ((x < 0) || (x >= libGraphicsWidth()) || (y < 0) || (y >= libGraphicsHeight()))
 800905c:	db2f      	blt.n	80090be <driverSWSSD1306DrawPixel+0x7a>
 800905e:	f005 fe21 	bl	800eca4 <libGraphicsWidth>
 8009062:	42a8      	cmp	r0, r5
 8009064:	dd2b      	ble.n	80090be <driverSWSSD1306DrawPixel+0x7a>
 8009066:	2c00      	cmp	r4, #0
 8009068:	db29      	blt.n	80090be <driverSWSSD1306DrawPixel+0x7a>
 800906a:	f005 fe15 	bl	800ec98 <libGraphicsHeight>
 800906e:	42a0      	cmp	r0, r4
 8009070:	dd25      	ble.n	80090be <driverSWSSD1306DrawPixel+0x7a>
    return;

  // check rotation, move pixel around if necessary
  switch (libGraphicsGetRotation()) {
 8009072:	f005 fe1d 	bl	800ecb0 <libGraphicsGetRotation>
 8009076:	2802      	cmp	r0, #2
	uint16_t WIDTH = libGraphicsWidth();
 8009078:	fa1f f888 	uxth.w	r8, r8
	uint16_t HEIGHT = libGraphicsHeight();	
 800907c:	b2b6      	uxth	r6, r6
  switch (libGraphicsGetRotation()) {
 800907e:	d020      	beq.n	80090c2 <driverSWSSD1306DrawPixel+0x7e>
 8009080:	2803      	cmp	r0, #3
 8009082:	d025      	beq.n	80090d0 <driverSWSSD1306DrawPixel+0x8c>
 8009084:	2801      	cmp	r0, #1
 8009086:	d104      	bne.n	8009092 <driverSWSSD1306DrawPixel+0x4e>
  case 1:
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
 8009088:	43e4      	mvns	r4, r4
 800908a:	44a0      	add	r8, r4
    break;
 800908c:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
 800908e:	fa0f f588 	sxth.w	r5, r8
    y = HEIGHT - y - 1;
    break;
  }

  // x is which column
    switch (color)
 8009092:	2f01      	cmp	r7, #1
 8009094:	d021      	beq.n	80090da <driverSWSSD1306DrawPixel+0x96>
 8009096:	2f02      	cmp	r7, #2
 8009098:	d031      	beq.n	80090fe <driverSWSSD1306DrawPixel+0xba>
 800909a:	b987      	cbnz	r7, 80090be <driverSWSSD1306DrawPixel+0x7a>
    {
      case WHITE:   displayBufferDesired[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
      case BLACK:   displayBufferDesired[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 800909c:	2c00      	cmp	r4, #0
 800909e:	4623      	mov	r3, r4
 80090a0:	bfb8      	it	lt
 80090a2:	1de3      	addlt	r3, r4, #7
 80090a4:	10db      	asrs	r3, r3, #3
 80090a6:	2080      	movs	r0, #128	; 0x80
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <driverSWSSD1306DrawPixel+0xdc>)
 80090aa:	fb13 5500 	smlabb	r5, r3, r0, r5
 80090ae:	f004 0107 	and.w	r1, r4, #7
 80090b2:	5d53      	ldrb	r3, [r2, r5]
 80090b4:	2401      	movs	r4, #1
 80090b6:	408c      	lsls	r4, r1
 80090b8:	ea23 0404 	bic.w	r4, r3, r4
 80090bc:	5554      	strb	r4, [r2, r5]
      case INVERSE: displayBufferDesired[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
    }
};
 80090be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    x = WIDTH - x - 1;
 80090c2:	43ed      	mvns	r5, r5
    y = HEIGHT - y - 1;
 80090c4:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
 80090c6:	4445      	add	r5, r8
    y = HEIGHT - y - 1;
 80090c8:	4434      	add	r4, r6
    x = WIDTH - x - 1;
 80090ca:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 80090cc:	b224      	sxth	r4, r4
    break;
 80090ce:	e7e0      	b.n	8009092 <driverSWSSD1306DrawPixel+0x4e>
    y = HEIGHT - y - 1;
 80090d0:	43ed      	mvns	r5, r5
 80090d2:	442e      	add	r6, r5
    break;
 80090d4:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
 80090d6:	b234      	sxth	r4, r6
    break;
 80090d8:	e7db      	b.n	8009092 <driverSWSSD1306DrawPixel+0x4e>
      case WHITE:   displayBufferDesired[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 80090da:	2c00      	cmp	r4, #0
 80090dc:	4623      	mov	r3, r4
 80090de:	bfb8      	it	lt
 80090e0:	1de3      	addlt	r3, r4, #7
 80090e2:	10db      	asrs	r3, r3, #3
 80090e4:	2080      	movs	r0, #128	; 0x80
 80090e6:	fb13 5500 	smlabb	r5, r3, r0, r5
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <driverSWSSD1306DrawPixel+0xdc>)
 80090ec:	f004 0107 	and.w	r1, r4, #7
 80090f0:	5d5a      	ldrb	r2, [r3, r5]
 80090f2:	2401      	movs	r4, #1
 80090f4:	408c      	lsls	r4, r1
 80090f6:	4314      	orrs	r4, r2
      case INVERSE: displayBufferDesired[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 80090f8:	b2e4      	uxtb	r4, r4
 80090fa:	555c      	strb	r4, [r3, r5]
 80090fc:	e7df      	b.n	80090be <driverSWSSD1306DrawPixel+0x7a>
 80090fe:	2c00      	cmp	r4, #0
 8009100:	4623      	mov	r3, r4
 8009102:	bfb8      	it	lt
 8009104:	1de3      	addlt	r3, r4, #7
 8009106:	10db      	asrs	r3, r3, #3
 8009108:	2080      	movs	r0, #128	; 0x80
 800910a:	fb13 5500 	smlabb	r5, r3, r0, r5
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <driverSWSSD1306DrawPixel+0xdc>)
 8009110:	f004 0407 	and.w	r4, r4, #7
 8009114:	5d5a      	ldrb	r2, [r3, r5]
 8009116:	2101      	movs	r1, #1
 8009118:	fa01 f404 	lsl.w	r4, r1, r4
 800911c:	4054      	eors	r4, r2
 800911e:	e7eb      	b.n	80090f8 <driverSWSSD1306DrawPixel+0xb4>
 8009120:	20004bf4 	.word	0x20004bf4

08009124 <driverSWLTC6804DelayMS>:
uint8_t driverSWLTC6804MaxNoOfCellPerModule = 0;
uint8_t driverSWLTC6804MaxNoOfTempSensorPerModule = 0;

driverLTC6804ConfigStructTypedef driverSWLTC6804ConfigStruct;

void driverSWLTC6804DelayMS(uint32_t delayMS) {
 8009124:	b513      	push	{r0, r1, r4, lr}
 8009126:	4604      	mov	r4, r0
	uint32_t currentTick = HAL_GetTick();
 8009128:	f001 fe48 	bl	800adbc <HAL_GetTick>
 800912c:	9001      	str	r0, [sp, #4]
	while(!modDelayTick1ms(&currentTick,delayMS)){};
 800912e:	4621      	mov	r1, r4
 8009130:	a801      	add	r0, sp, #4
 8009132:	f7fb fcf5 	bl	8004b20 <modDelayTick1ms>
 8009136:	2800      	cmp	r0, #0
 8009138:	d0f9      	beq.n	800912e <driverSWLTC6804DelayMS+0xa>
}
 800913a:	b002      	add	sp, #8
 800913c:	bd10      	pop	{r4, pc}
	...

08009140 <driverSWLTC6804CalcPEC15>:
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
	}
}

uint16_t driverSWLTC6804CalcPEC15(uint8_t len, uint8_t *data) {
 8009140:	b530      	push	{r4, r5, lr}
	
	remainder = 16;//initialize the PEC
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address 
		remainder = (remainder<<8)^crc15Table[addr];
 8009142:	4d09      	ldr	r5, [pc, #36]	; (8009168 <driverSWLTC6804CalcPEC15+0x28>)
 8009144:	4408      	add	r0, r1
	remainder = 16;//initialize the PEC
 8009146:	2310      	movs	r3, #16
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8009148:	4281      	cmp	r1, r0
 800914a:	d102      	bne.n	8009152 <driverSWLTC6804CalcPEC15+0x12>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800914c:	0058      	lsls	r0, r3, #1
 800914e:	b280      	uxth	r0, r0
}
 8009150:	bd30      	pop	{r4, r5, pc}
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address 
 8009152:	f811 2b01 	ldrb.w	r2, [r1], #1
		remainder = (remainder<<8)^crc15Table[addr];
 8009156:	021c      	lsls	r4, r3, #8
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address 
 8009158:	ea82 13d3 	eor.w	r3, r2, r3, lsr #7
		remainder = (remainder<<8)^crc15Table[addr];
 800915c:	b2db      	uxtb	r3, r3
 800915e:	b2a4      	uxth	r4, r4
 8009160:	f835 3023 	ldrh.w	r3, [r5, r3, lsl #2]
 8009164:	4063      	eors	r3, r4
	for(uint8_t i = 0; i<len;i++) // loops for each byte in data array
 8009166:	e7ef      	b.n	8009148 <driverSWLTC6804CalcPEC15+0x8>
 8009168:	08014730 	.word	0x08014730

0800916c <driverSWLTC6804Write>:
  return(pec_error);
}

// Coupling of drivers
void driverSWLTC6804Write(uint8_t *writeBytes, uint8_t writeLength) {
	driverHWSPI1Write(writeBytes,writeLength,LTC6804_CS_GPIO_Port,LTC6804_CS_Pin);
 800916c:	2310      	movs	r3, #16
 800916e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009172:	f001 bc7f 	b.w	800aa74 <driverHWSPI1Write>

08009176 <driverSWLTC6804WriteRead>:
};

// Coupling of drivers
void driverSWLTC6804WriteRead(uint8_t *writeBytes, uint8_t writeLength, uint8_t *readBytes, uint8_t readLength) {
 8009176:	b513      	push	{r0, r1, r4, lr}
	driverHWSPI1WriteRead(writeBytes,writeLength,readBytes,readLength,LTC6804_CS_GPIO_Port,LTC6804_CS_Pin);
 8009178:	f04f 0c10 	mov.w	ip, #16
 800917c:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8009180:	e9cd 4c00 	strd	r4, ip, [sp]
 8009184:	f001 fca4 	bl	800aad0 <driverHWSPI1WriteRead>
};
 8009188:	b002      	add	sp, #8
 800918a:	bd10      	pop	{r4, pc}

0800918c <driverSWLTC6804ReadConfigRegister>:
int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 800918c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009190:	4607      	mov	r7, r0
  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8009192:	00c0      	lsls	r0, r0, #3
int8_t driverSWLTC6804ReadConfigRegister(uint8_t total_ic, uint8_t r_config[][8]) {
 8009194:	460c      	mov	r4, r1
  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8009196:	f006 f8f9 	bl	800f38c <malloc>
  cmd[1] = 0x02;
 800919a:	2302      	movs	r3, #2
 800919c:	f88d 3005 	strb.w	r3, [sp, #5]
  cmd[2] = 0x2b;
 80091a0:	232b      	movs	r3, #43	; 0x2b
 80091a2:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = 0x0A;
 80091a6:	230a      	movs	r3, #10
 80091a8:	f88d 3007 	strb.w	r3, [sp, #7]
	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 80091ac:	2104      	movs	r1, #4
 80091ae:	00fb      	lsls	r3, r7, #3
  rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 80091b0:	4680      	mov	r8, r0
	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 80091b2:	4602      	mov	r2, r0
  cmd[0] = 0x00;
 80091b4:	2500      	movs	r5, #0
	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 80091b6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80091ba:	eb0d 0001 	add.w	r0, sp, r1
  cmd[0] = 0x00;
 80091be:	f88d 5004 	strb.w	r5, [sp, #4]
	driverSWLTC6804WriteRead(cmd, 4, rx_data, (BYTES_IN_REG*total_ic));
 80091c2:	f7ff ffd8 	bl	8009176 <driverSWLTC6804WriteRead>
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors																
 80091c6:	46c1      	mov	r9, r8
 80091c8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80091cc:	42a7      	cmp	r7, r4
 80091ce:	d106      	bne.n	80091de <driverSWLTC6804ReadConfigRegister+0x52>
  free(rx_data);
 80091d0:	4640      	mov	r0, r8
 80091d2:	f006 f8e3 	bl	800f39c <free>
}
 80091d6:	4628      	mov	r0, r5
 80091d8:	b003      	add	sp, #12
 80091da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80091de:	f8d9 3000 	ldr.w	r3, [r9]
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80091e8:	6063      	str	r3, [r4, #4]
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80091ea:	79a3      	ldrb	r3, [r4, #6]
 80091ec:	79e6      	ldrb	r6, [r4, #7]
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 80091ee:	4621      	mov	r1, r4
 80091f0:	2006      	movs	r0, #6
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80091f2:	eb06 2603 	add.w	r6, r6, r3, lsl #8
    data_pec = driverSWLTC6804CalcPEC15(6, &r_config[current_ic][0]);
 80091f6:	f7ff ffa3 	bl	8009140 <driverSWLTC6804CalcPEC15>
    received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80091fa:	b2b6      	uxth	r6, r6
      pec_error = -1;
 80091fc:	4286      	cmp	r6, r0
 80091fe:	bf18      	it	ne
 8009200:	f04f 35ff 	movne.w	r5, #4294967295
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) { 			//executes for each LTC6804 in the daisy chain and packs the data into the r_config array as well as check the received Config data for any bit errors																
 8009204:	3408      	adds	r4, #8
 8009206:	f109 0908 	add.w	r9, r9, #8
 800920a:	e7df      	b.n	80091cc <driverSWLTC6804ReadConfigRegister+0x40>

0800920c <driverSWLTC6804WakeIC>:

void driverSWLTC6804WakeIC(void){
 800920c:	b508      	push	{r3, lr}
	driverSWLTC6804DelayMS(1);
 800920e:	2001      	movs	r0, #1
 8009210:	f7ff ff88 	bl	8009124 <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(LTC6804_CS_GPIO_Port,LTC6804_CS_Pin,GPIO_PIN_RESET);
 8009214:	2200      	movs	r2, #0
 8009216:	2110      	movs	r1, #16
 8009218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800921c:	f003 fab6 	bl	800c78c <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
 8009220:	2001      	movs	r0, #1
 8009222:	f7ff ff7f 	bl	8009124 <driverSWLTC6804DelayMS>
	HAL_GPIO_WritePin(LTC6804_CS_GPIO_Port,LTC6804_CS_Pin,GPIO_PIN_SET);	
 8009226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800922a:	2201      	movs	r2, #1
 800922c:	2110      	movs	r1, #16
 800922e:	f003 faad 	bl	800c78c <HAL_GPIO_WritePin>
	driverSWLTC6804DelayMS(1);
}
 8009232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	driverSWLTC6804DelayMS(1);
 8009236:	2001      	movs	r0, #1
 8009238:	f7ff bf74 	b.w	8009124 <driverSWLTC6804DelayMS>

0800923c <driverSWLTC6804ResetCellVoltageRegisters>:
void driverSWLTC6804ResetCellVoltageRegisters(void) {
 800923c:	b507      	push	{r0, r1, r2, lr}
  cmd[0] = 0x07;
 800923e:	2307      	movs	r3, #7
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8009240:	a901      	add	r1, sp, #4
  cmd[0] = 0x07;
 8009242:	f88d 3004 	strb.w	r3, [sp, #4]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8009246:	2002      	movs	r0, #2
  cmd[1] = 0x11;
 8009248:	2311      	movs	r3, #17
 800924a:	f88d 3005 	strb.w	r3, [sp, #5]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 800924e:	f7ff ff77 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8009252:	0a03      	lsrs	r3, r0, #8
 8009254:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = (uint8_t)(cmd_pec );
 8009258:	f88d 0007 	strb.w	r0, [sp, #7]
	driverSWLTC6804WakeIC();
 800925c:	f7ff ffd6 	bl	800920c <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8009260:	2104      	movs	r1, #4
 8009262:	eb0d 0001 	add.w	r0, sp, r1
 8009266:	f7ff ff81 	bl	800916c <driverSWLTC6804Write>
}
 800926a:	b003      	add	sp, #12
 800926c:	f85d fb04 	ldr.w	pc, [sp], #4

08009270 <driverSWLTC6804ResetAuxRegisters>:
void driverSWLTC6804ResetAuxRegisters(void) {
 8009270:	b507      	push	{r0, r1, r2, lr}
  cmd[0] = 0x07;
 8009272:	2307      	movs	r3, #7
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8009274:	a901      	add	r1, sp, #4
  cmd[0] = 0x07;
 8009276:	f88d 3004 	strb.w	r3, [sp, #4]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 800927a:	2002      	movs	r0, #2
  cmd[1] = 0x12;
 800927c:	2312      	movs	r3, #18
 800927e:	f88d 3005 	strb.w	r3, [sp, #5]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8009282:	f7ff ff5d 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8009286:	0a03      	lsrs	r3, r0, #8
 8009288:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = (uint8_t)(cmd_pec );
 800928c:	f88d 0007 	strb.w	r0, [sp, #7]
	driverSWLTC6804WakeIC();
 8009290:	f7ff ffbc 	bl	800920c <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8009294:	2104      	movs	r1, #4
 8009296:	eb0d 0001 	add.w	r0, sp, r1
 800929a:	f7ff ff67 	bl	800916c <driverSWLTC6804Write>
}
 800929e:	b003      	add	sp, #12
 80092a0:	f85d fb04 	ldr.w	pc, [sp], #4

080092a4 <driverSWLTC6804StartCellVoltageConversion>:
void driverSWLTC6804StartCellVoltageConversion(uint8_t MD,uint8_t DCP, uint8_t CH) {	
 80092a4:	b507      	push	{r0, r1, r2, lr}
  ADCV[1] = ((MD & 0x01) << 7) + 0x60 + (DCP<<4) + CH;
 80092a6:	3260      	adds	r2, #96	; 0x60
 80092a8:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 80092ac:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80092b0:	b2c9      	uxtb	r1, r1
  ADCV[0] = ((MD & 0x02) >> 1) + 0x02;
 80092b2:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80092b6:	3302      	adds	r3, #2
  ADCV[1] = ((MD & 0x01) << 7) + 0x60 + (DCP<<4) + CH;
 80092b8:	f88d 1001 	strb.w	r1, [sp, #1]
  cmd[1] = ADCV[1];
 80092bc:	f88d 1005 	strb.w	r1, [sp, #5]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCV);
 80092c0:	2002      	movs	r0, #2
 80092c2:	4669      	mov	r1, sp
  ADCV[0] = ((MD & 0x02) >> 1) + 0x02;
 80092c4:	f88d 3000 	strb.w	r3, [sp]
  cmd[0] = ADCV[0];
 80092c8:	f88d 3004 	strb.w	r3, [sp, #4]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADCV);
 80092cc:	f7ff ff38 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80092d0:	0a03      	lsrs	r3, r0, #8
 80092d2:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = (uint8_t)(cmd_pec);
 80092d6:	f88d 0007 	strb.w	r0, [sp, #7]
	driverSWLTC6804WakeIC();
 80092da:	f7ff ff97 	bl	800920c <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 80092de:	2104      	movs	r1, #4
 80092e0:	eb0d 0001 	add.w	r0, sp, r1
 80092e4:	f7ff ff42 	bl	800916c <driverSWLTC6804Write>
}
 80092e8:	b003      	add	sp, #12
 80092ea:	f85d fb04 	ldr.w	pc, [sp], #4

080092ee <driverSWLTC6804StartLoadedCellVoltageConversion>:
void driverSWLTC6804StartLoadedCellVoltageConversion(uint8_t MD,uint8_t DCP, uint8_t CH,uint8_t PUP) {	
 80092ee:	b513      	push	{r0, r1, r4, lr}
  ADOW[1] = ((MD & 0x01) << 7) + 0x28 + (DCP<<4) + CH + (PUP<<6);
 80092f0:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 80092f4:	3328      	adds	r3, #40	; 0x28
 80092f6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80092fa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80092fe:	b2c9      	uxtb	r1, r1
  ADOW[0] = ((MD & 0x02) >> 1) + 0x02;
 8009300:	f3c0 0440 	ubfx	r4, r0, #1, #1
 8009304:	3402      	adds	r4, #2
  ADOW[1] = ((MD & 0x01) << 7) + 0x28 + (DCP<<4) + CH + (PUP<<6);
 8009306:	f88d 1001 	strb.w	r1, [sp, #1]
  cmd[1] = ADOW[1];
 800930a:	f88d 1005 	strb.w	r1, [sp, #5]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADOW);
 800930e:	2002      	movs	r0, #2
 8009310:	4669      	mov	r1, sp
  ADOW[0] = ((MD & 0x02) >> 1) + 0x02;
 8009312:	f88d 4000 	strb.w	r4, [sp]
  cmd[0] = ADOW[0];
 8009316:	f88d 4004 	strb.w	r4, [sp, #4]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADOW);
 800931a:	f7ff ff11 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800931e:	0a03      	lsrs	r3, r0, #8
 8009320:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = (uint8_t)(cmd_pec);
 8009324:	f88d 0007 	strb.w	r0, [sp, #7]
	driverSWLTC6804WakeIC();
 8009328:	f7ff ff70 	bl	800920c <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 800932c:	2104      	movs	r1, #4
 800932e:	eb0d 0001 	add.w	r0, sp, r1
 8009332:	f7ff ff1b 	bl	800916c <driverSWLTC6804Write>
}
 8009336:	b002      	add	sp, #8
 8009338:	bd10      	pop	{r4, pc}

0800933a <driverSWLTC6804StartAuxVoltageConversion>:
void driverSWLTC6804StartAuxVoltageConversion(uint8_t MD, uint8_t CHG) {
 800933a:	b507      	push	{r0, r1, r2, lr}
  ADAX[1] = ((MD & 0x01) << 7) + 0x60 + CHG ;
 800933c:	3160      	adds	r1, #96	; 0x60
 800933e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 8009342:	b2c9      	uxtb	r1, r1
  ADAX[0] = ((MD & 0x02) >> 1) + 0x04;
 8009344:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8009348:	3304      	adds	r3, #4
  ADAX[1] = ((MD & 0x01) << 7) + 0x60 + CHG ;
 800934a:	f88d 1001 	strb.w	r1, [sp, #1]
  cmd[1] = ADAX[1];
 800934e:	f88d 1005 	strb.w	r1, [sp, #5]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADAX);
 8009352:	2002      	movs	r0, #2
 8009354:	4669      	mov	r1, sp
  ADAX[0] = ((MD & 0x02) >> 1) + 0x04;
 8009356:	f88d 3000 	strb.w	r3, [sp]
  cmd[0] = ADAX[0];
 800935a:	f88d 3004 	strb.w	r3, [sp, #4]
  cmd_pec = driverSWLTC6804CalcPEC15(2, ADAX);
 800935e:	f7ff feef 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8009362:	0a03      	lsrs	r3, r0, #8
 8009364:	f88d 3006 	strb.w	r3, [sp, #6]
  cmd[3] = (uint8_t)(cmd_pec);
 8009368:	f88d 0007 	strb.w	r0, [sp, #7]
	driverSWLTC6804WakeIC();
 800936c:	f7ff ff4e 	bl	800920c <driverSWLTC6804WakeIC>
  driverSWLTC6804Write(cmd,4);
 8009370:	2104      	movs	r1, #4
 8009372:	eb0d 0001 	add.w	r0, sp, r1
 8009376:	f7ff fef9 	bl	800916c <driverSWLTC6804Write>
}
 800937a:	b003      	add	sp, #12
 800937c:	f85d fb04 	ldr.w	pc, [sp], #4

08009380 <driverSWLTC6804ReadCellVoltageGroups>:
  if (reg == 1) {      //1: RDCVA |AE08.12.2024: LTC6810 (6ch) has only registers A & B
 8009380:	2801      	cmp	r0, #1
void driverSWLTC6804ReadCellVoltageGroups(uint8_t reg, uint8_t total_ic, uint8_t *data ) {
 8009382:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009384:	460c      	mov	r4, r1
  if (reg == 1) {      //1: RDCVA |AE08.12.2024: LTC6810 (6ch) has only registers A & B
 8009386:	d11b      	bne.n	80093c0 <driverSWLTC6804ReadCellVoltageGroups+0x40>
    cmd[1] = 0x04;
 8009388:	2304      	movs	r3, #4
    cmd[1] = 0x06;
 800938a:	f88d 300d 	strb.w	r3, [sp, #13]
    cmd[0] = 0x00;
 800938e:	2300      	movs	r3, #0
 8009390:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 8009394:	a903      	add	r1, sp, #12
 8009396:	2002      	movs	r0, #2
 8009398:	9201      	str	r2, [sp, #4]
 800939a:	f7ff fed1 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800939e:	0a03      	lsrs	r3, r0, #8
 80093a0:	f88d 300e 	strb.w	r3, [sp, #14]
  cmd[3] = (uint8_t)(cmd_pec); 
 80093a4:	f88d 000f 	strb.w	r0, [sp, #15]
  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80093a8:	f7ff ff30 	bl	800920c <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 80093ac:	00e3      	lsls	r3, r4, #3
 80093ae:	9a01      	ldr	r2, [sp, #4]
 80093b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80093b4:	2104      	movs	r1, #4
 80093b6:	a803      	add	r0, sp, #12
 80093b8:	f7ff fedd 	bl	8009176 <driverSWLTC6804WriteRead>
}
 80093bc:	b004      	add	sp, #16
 80093be:	bd10      	pop	{r4, pc}
  }else if(reg == 2) { //2: RDCVB |AE08.12.2024: LTC6810 (6ch) has only registers A & B
 80093c0:	2802      	cmp	r0, #2
 80093c2:	d1e7      	bne.n	8009394 <driverSWLTC6804ReadCellVoltageGroups+0x14>
    cmd[1] = 0x06;
 80093c4:	2306      	movs	r3, #6
 80093c6:	e7e0      	b.n	800938a <driverSWLTC6804ReadCellVoltageGroups+0xa>

080093c8 <driverSWLTC6804ReadCellVoltageRegisters>:
uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4b48      	ldr	r3, [pc, #288]	; (80094f0 <driverSWLTC6804ReadCellVoltageRegisters+0x128>)
 80093ce:	b085      	sub	sp, #20
 80093d0:	4604      	mov	r4, r0
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80093d2:	00c8      	lsls	r0, r1, #3
uint8_t driverSWLTC6804ReadCellVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t cell_codes[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80093d4:	781f      	ldrb	r7, [r3, #0]
 80093d6:	460e      	mov	r6, r1
 80093d8:	4692      	mov	sl, r2
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80093da:	f005 ffd7 	bl	800f38c <malloc>
 80093de:	b23f      	sxth	r7, r7
 80093e0:	4605      	mov	r5, r0
  if (reg == 0) {
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	d14a      	bne.n	800947c <driverSWLTC6804ReadCellVoltageRegisters+0xb4>
 80093e6:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 80093ea:	007f      	lsls	r7, r7, #1
 80093ec:	9300      	str	r3, [sp, #0]
  int8_t  pec_error = 0;
 80093ee:	46a1      	mov	r9, r4
 80093f0:	f04f 0b06 	mov.w	fp, #6
      driverSWLTC6804ReadCellVoltageGroups(cell_reg, total_ic,cell_data );								                     //Reads a single Cell voltage register
 80093f4:	462a      	mov	r2, r5
 80093f6:	4631      	mov	r1, r6
 80093f8:	1c60      	adds	r0, r4, #1
 80093fa:	f7ff ffc1 	bl	8009380 <driverSWLTC6804ReadCellVoltageGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80093fe:	f04f 0806 	mov.w	r8, #6
 8009402:	fb0b a204 	mla	r2, fp, r4, sl
 8009406:	4629      	mov	r1, r5
 8009408:	9800      	ldr	r0, [sp, #0]
 800940a:	f1a8 0306 	sub.w	r3, r8, #6
 800940e:	4288      	cmp	r0, r1
 8009410:	b2db      	uxtb	r3, r3
 8009412:	d10a      	bne.n	800942a <driverSWLTC6804ReadCellVoltageRegisters+0x62>
    for(uint8_t cell_reg = 1; cell_reg<3; cell_reg++) {                                                //executes once for each of the LTC6804 cell voltage registers
 8009414:	b13c      	cbz	r4, 8009426 <driverSWLTC6804ReadCellVoltageRegisters+0x5e>
  free(cell_data);
 8009416:	4628      	mov	r0, r5
 8009418:	f005 ffc0 	bl	800f39c <free>
}
 800941c:	fa5f f089 	uxtb.w	r0, r9
 8009420:	b005      	add	sp, #20
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	2401      	movs	r4, #1
 8009428:	e7e4      	b.n	80093f4 <driverSWLTC6804ReadCellVoltageRegisters+0x2c>
 800942a:	4694      	mov	ip, r2
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code													 
 800942c:	18e8      	adds	r0, r5, r3
 800942e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8009432:	5ce8      	ldrb	r0, [r5, r3]
          data_counter = data_counter + 2;											                           //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 8009434:	3302      	adds	r3, #2
 8009436:	b2db      	uxtb	r3, r3
          parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);      //Each cell code is received as two bytes and is combined to create the parsed cell voltage code													 
 8009438:	eb00 200e 	add.w	r0, r0, lr, lsl #8
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register 
 800943c:	4543      	cmp	r3, r8
          cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800943e:	f82c 0b02 	strh.w	r0, [ip], #2
		    for(uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) {	 	       // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register 
 8009442:	d1f3      	bne.n	800942c <driverSWLTC6804ReadCellVoltageRegisters+0x64>
        received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 8009444:	eb05 0308 	add.w	r3, r5, r8
 8009448:	f815 0008 	ldrb.w	r0, [r5, r8]
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	9203      	str	r2, [sp, #12]
 8009450:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8009454:	b29b      	uxth	r3, r3
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8009456:	2006      	movs	r0, #6
 8009458:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800945c:	f7ff fe70 	bl	8009140 <driverSWLTC6804CalcPEC15>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	9901      	ldr	r1, [sp, #4]
 8009464:	9a03      	ldr	r2, [sp, #12]
 8009466:	f108 0808 	add.w	r8, r8, #8
 800946a:	4283      	cmp	r3, r0
 800946c:	bf18      	it	ne
 800946e:	f04f 39ff 	movne.w	r9, #4294967295
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8009472:	fa5f f888 	uxtb.w	r8, r8
 8009476:	3108      	adds	r1, #8
 8009478:	443a      	add	r2, r7
 800947a:	e7c5      	b.n	8009408 <driverSWLTC6804ReadCellVoltageRegisters+0x40>
    driverSWLTC6804ReadCellVoltageGroups(reg, total_ic,cell_data);
 800947c:	4602      	mov	r2, r0
 800947e:	4631      	mov	r1, r6
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff ff7d 	bl	8009380 <driverSWLTC6804ReadCellVoltageGroups>
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8009486:	3c01      	subs	r4, #1
 8009488:	f04f 0806 	mov.w	r8, #6
 800948c:	46ab      	mov	fp, r5
 800948e:	007f      	lsls	r7, r7, #1
 8009490:	fb08 aa04 	mla	sl, r8, r4, sl
 8009494:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
  int8_t  pec_error = 0;
 8009498:	f04f 0900 	mov.w	r9, #0
 800949c:	f1a8 0306 	sub.w	r3, r8, #6
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80094a0:	455e      	cmp	r6, fp
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	d0b7      	beq.n	8009416 <driverSWLTC6804ReadCellVoltageRegisters+0x4e>
 80094a6:	4651      	mov	r1, sl
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code													
 80094a8:	18ea      	adds	r2, r5, r3
 80094aa:	7850      	ldrb	r0, [r2, #1]
 80094ac:	5cea      	ldrb	r2, [r5, r3]
			  data_counter= data_counter + 2;     									                             //Because cell voltage codes are two bytes the data counter must increment by two for each parsed cell code
 80094ae:	3302      	adds	r3, #2
 80094b0:	b2db      	uxtb	r3, r3
			  parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);            //Each cell code is received as two bytes and is combined to create the parsed cell voltage code													
 80094b2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register 
 80094b6:	4543      	cmp	r3, r8
			  cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 80094b8:	f821 2b02 	strh.w	r2, [r1], #2
		  for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) {          // This loop parses the read back data into cell voltages, it loops once for each of the 3 cell voltage codes in the register 
 80094bc:	d1f4      	bne.n	80094a8 <driverSWLTC6804ReadCellVoltageRegisters+0xe0>
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80094be:	eb05 0208 	add.w	r2, r5, r8
 80094c2:	f815 3008 	ldrb.w	r3, [r5, r8]
 80094c6:	7854      	ldrb	r4, [r2, #1]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80094c8:	4659      	mov	r1, fp
 80094ca:	2006      	movs	r0, #6
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80094cc:	eb04 2403 	add.w	r4, r4, r3, lsl #8
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80094d0:	f7ff fe36 	bl	8009140 <driverSWLTC6804CalcPEC15>
	    received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];         //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 cell voltage data bytes
 80094d4:	b2a4      	uxth	r4, r4
			if(received_pec != data_pec) {
 80094d6:	f108 0808 	add.w	r8, r8, #8
			  pec_error = -1;															                                       //The pec_error variable is simply set negative if any PEC errors are detected in the serial data
 80094da:	4284      	cmp	r4, r0
 80094dc:	bf18      	it	ne
 80094de:	f04f 39ff 	movne.w	r9, #4294967295
    for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 				           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80094e2:	fa5f f888 	uxtb.w	r8, r8
 80094e6:	f10b 0b08 	add.w	fp, fp, #8
 80094ea:	44ba      	add	sl, r7
 80094ec:	e7d6      	b.n	800949c <driverSWLTC6804ReadCellVoltageRegisters+0xd4>
 80094ee:	bf00      	nop
 80094f0:	20005428 	.word	0x20005428

080094f4 <driverSWLTC6804ReadCellVoltagesArray>:
bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80094f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	4e27      	ldr	r6, [pc, #156]	; (8009598 <driverSWLTC6804ReadCellVoltagesArray+0xa4>)
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule]; 
 80094fa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80095a0 <driverSWLTC6804ReadCellVoltagesArray+0xac>
bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 80094fe:	f896 8000 	ldrb.w	r8, [r6]
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule]; 
 8009502:	f899 1000 	ldrb.w	r1, [r9]
 8009506:	fb18 f301 	smulbb	r3, r8, r1
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	3307      	adds	r3, #7
 800950e:	466a      	mov	r2, sp
 8009510:	08db      	lsrs	r3, r3, #3
 8009512:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 8009516:	af00      	add	r7, sp, #0
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule]; 
 8009518:	469d      	mov	sp, r3
 800951a:	46ea      	mov	sl, sp
bool driverSWLTC6804ReadCellVoltagesArray(float cellVoltagesArray[][driverSWLTC6804MaxNoOfCellPerModule]) {
 800951c:	4605      	mov	r5, r0
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule]; 
 800951e:	4644      	mov	r4, r8
	driverSWLTC6804ReadCellVoltageRegisters(CELL_CH_ALL,driverSWLTC6804TotalNumberOfICs,cellVoltageArrayCodes);
 8009520:	4652      	mov	r2, sl
 8009522:	2000      	movs	r0, #0
 8009524:	f7ff ff50 	bl	80093c8 <driverSWLTC6804ReadCellVoltageRegisters>
	uint16_t cellVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfCellPerModule]; 
 8009528:	0064      	lsls	r4, r4, #1
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 800952a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800959c <driverSWLTC6804ReadCellVoltagesArray+0xa8>
 800952e:	0864      	lsrs	r4, r4, #1
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8009530:	f04f 0c00 	mov.w	ip, #0
	bool dataValid = true;
 8009534:	2001      	movs	r0, #1
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 8009536:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800953a:	f899 2000 	ldrb.w	r2, [r9]
 800953e:	fa5f f38c 	uxtb.w	r3, ip
 8009542:	429a      	cmp	r2, r3
 8009544:	d924      	bls.n	8009590 <driverSWLTC6804ReadCellVoltagesArray+0x9c>
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 8009546:	fb08 f103 	mul.w	r1, r8, r3
 800954a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800954e:	2200      	movs	r2, #0
			if(cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f < 10.0f)
 8009550:	4363      	muls	r3, r4
 8009552:	e014      	b.n	800957e <driverSWLTC6804ReadCellVoltagesArray+0x8a>
 8009554:	eb03 0b0e 	add.w	fp, r3, lr
 8009558:	3201      	adds	r2, #1
 800955a:	f83a b01b 	ldrh.w	fp, [sl, fp, lsl #1]
 800955e:	ee07 ba90 	vmov	s15, fp
 8009562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800956a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			  cellVoltagesArray[modulePointer][cellPointer] = cellVoltageArrayCodes[modulePointer][cellPointer]*0.0001f;
 8009572:	bf46      	itte	mi
 8009574:	eb01 0e8e 	addmi.w	lr, r1, lr, lsl #2
 8009578:	edce 7a00 	vstrmi	s15, [lr]
				dataValid = false;
 800957c:	2000      	movpl	r0, #0
		for(uint8_t cellPointer = 0; cellPointer < driverSWLTC6804MaxNoOfCellPerModule; cellPointer++){
 800957e:	f896 b000 	ldrb.w	fp, [r6]
 8009582:	fa5f fe82 	uxtb.w	lr, r2
 8009586:	45f3      	cmp	fp, lr
 8009588:	d8e4      	bhi.n	8009554 <driverSWLTC6804ReadCellVoltagesArray+0x60>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 800958a:	f10c 0c01 	add.w	ip, ip, #1
 800958e:	e7d4      	b.n	800953a <driverSWLTC6804ReadCellVoltagesArray+0x46>
}
 8009590:	46bd      	mov	sp, r7
 8009592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	bf00      	nop
 8009598:	20005428 	.word	0x20005428
 800959c:	38d1b717 	.word	0x38d1b717
 80095a0:	2000542a 	.word	0x2000542a

080095a4 <driverSWLTC6804ReadAuxGroups>:
  if (reg == 1) {			//Read back auxiliary group A
 80095a4:	2801      	cmp	r0, #1
void driverSWLTC6804ReadAuxGroups(uint8_t reg, uint8_t total_ic, uint8_t *data) {
 80095a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095a8:	460c      	mov	r4, r1
  if (reg == 1) {			//Read back auxiliary group A
 80095aa:	d11b      	bne.n	80095e4 <driverSWLTC6804ReadAuxGroups+0x40>
    cmd[1] = 0x0C;
 80095ac:	230c      	movs	r3, #12
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80095ae:	a903      	add	r1, sp, #12
    cmd[1] = 0x0F;
 80095b0:	f88d 300d 	strb.w	r3, [sp, #13]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80095b4:	2002      	movs	r0, #2
    cmd[0] = 0x00;
 80095b6:	2300      	movs	r3, #0
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80095be:	f7ff fdbf 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80095c2:	0a03      	lsrs	r3, r0, #8
 80095c4:	f88d 300e 	strb.w	r3, [sp, #14]
  cmd[3] = (uint8_t)(cmd_pec);
 80095c8:	f88d 000f 	strb.w	r0, [sp, #15]
  driverSWLTC6804WakeIC(); //This will guarantee that the LTC6804 isoSPI port is awake, this command can be removed.
 80095cc:	f7ff fe1e 	bl	800920c <driverSWLTC6804WakeIC>
	driverSWLTC6804WriteRead(cmd,4,data,(REG_LEN*total_ic));
 80095d0:	00e3      	lsls	r3, r4, #3
 80095d2:	9a01      	ldr	r2, [sp, #4]
 80095d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80095d8:	2104      	movs	r1, #4
 80095da:	a803      	add	r0, sp, #12
 80095dc:	f7ff fdcb 	bl	8009176 <driverSWLTC6804WriteRead>
}
 80095e0:	b004      	add	sp, #16
 80095e2:	bd10      	pop	{r4, pc}
  }else if(reg == 2) {		//Read back auxiliary group B 
 80095e4:	2802      	cmp	r0, #2
 80095e6:	d101      	bne.n	80095ec <driverSWLTC6804ReadAuxGroups+0x48>
    cmd[1] = 0x0E;
 80095e8:	230e      	movs	r3, #14
 80095ea:	e7e0      	b.n	80095ae <driverSWLTC6804ReadAuxGroups+0xa>
  }else if(reg == 3) {		//Read auxiliary group C LTC6812 & LTC6813 only
 80095ec:	2803      	cmp	r0, #3
 80095ee:	d101      	bne.n	80095f4 <driverSWLTC6804ReadAuxGroups+0x50>
    cmd[1] = 0x0D;
 80095f0:	230d      	movs	r3, #13
 80095f2:	e7dc      	b.n	80095ae <driverSWLTC6804ReadAuxGroups+0xa>
  }else if(reg == 4) {		//Read auxiliary group D LTC6812 & LTC6813 only
 80095f4:	2804      	cmp	r0, #4
 80095f6:	d1d9      	bne.n	80095ac <driverSWLTC6804ReadAuxGroups+0x8>
    cmd[1] = 0x0F;
 80095f8:	230f      	movs	r3, #15
 80095fa:	e7d8      	b.n	80095ae <driverSWLTC6804ReadAuxGroups+0xa>

080095fc <driverSWLTC6804ReadAuxVoltageRegisters>:
int8_t driverSWLTC6804ReadAuxVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t aux_codes[][driverSWLTC6804MaxNoOfTempSensorPerModule]) {
 80095fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	f8df b120 	ldr.w	fp, [pc, #288]	; 8009724 <driverSWLTC6804ReadAuxVoltageRegisters+0x128>
 8009604:	b087      	sub	sp, #28
 8009606:	4604      	mov	r4, r0
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8009608:	00c8      	lsls	r0, r1, #3
int8_t driverSWLTC6804ReadAuxVoltageRegisters(uint8_t reg, uint8_t total_ic, uint16_t aux_codes[][driverSWLTC6804MaxNoOfTempSensorPerModule]) {
 800960a:	f89b 6000 	ldrb.w	r6, [fp]
 800960e:	460f      	mov	r7, r1
 8009610:	4692      	mov	sl, r2
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8009612:	f005 febb 	bl	800f38c <malloc>
 8009616:	b236      	sxth	r6, r6
 8009618:	4605      	mov	r5, r0
  if (reg == 0) {
 800961a:	2c00      	cmp	r4, #0
 800961c:	d14f      	bne.n	80096be <driverSWLTC6804ReadAuxVoltageRegisters+0xc2>
 800961e:	0073      	lsls	r3, r6, #1
 8009620:	9302      	str	r3, [sp, #8]
 8009622:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 8009626:	9301      	str	r3, [sp, #4]
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 8009628:	f04f 0901 	mov.w	r9, #1
  int8_t pec_error = 0;
 800962c:	46a0      	mov	r8, r4
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 800962e:	f89b 3000 	ldrb.w	r3, [fp]
 8009632:	2203      	movs	r2, #3
 8009634:	fbb3 f3f2 	udiv	r3, r3, r2
 8009638:	454b      	cmp	r3, r9
 800963a:	d206      	bcs.n	800964a <driverSWLTC6804ReadAuxVoltageRegisters+0x4e>
  free(data);
 800963c:	4628      	mov	r0, r5
 800963e:	f005 fead 	bl	800f39c <free>
}
 8009642:	4640      	mov	r0, r8
 8009644:	b007      	add	sp, #28
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      driverSWLTC6804ReadAuxGroups(gpio_reg, total_ic,data);									             //Reads the raw auxiliary register data into the data[] array
 800964a:	462a      	mov	r2, r5
 800964c:	4639      	mov	r1, r7
 800964e:	4648      	mov	r0, r9
 8009650:	f7ff ffa8 	bl	80095a4 <driverSWLTC6804ReadAuxGroups>
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 8009654:	2606      	movs	r6, #6
 8009656:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
 800965a:	4629      	mov	r1, r5
 800965c:	9801      	ldr	r0, [sp, #4]
 800965e:	1fb3      	subs	r3, r6, #6
 8009660:	4288      	cmp	r0, r1
 8009662:	b2db      	uxtb	r3, r3
 8009664:	d105      	bne.n	8009672 <driverSWLTC6804ReadAuxVoltageRegisters+0x76>
    for(uint8_t gpio_reg = 1; gpio_reg<((driverSWLTC6804MaxNoOfTempSensorPerModule/3)+1); gpio_reg++) {		 	   		 			                   //executes once for each of the LTC6804 aux voltage registers
 8009666:	f109 0901 	add.w	r9, r9, #1
 800966a:	fa5f f989 	uxtb.w	r9, r9
 800966e:	3403      	adds	r4, #3
 8009670:	e7dd      	b.n	800962e <driverSWLTC6804ReadAuxVoltageRegisters+0x32>
 8009672:	4694      	mov	ip, r2
		      parsed_aux = data[data_counter] + (data[data_counter+1]<<8);                     //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8009674:	18e8      	adds	r0, r5, r3
 8009676:	f890 e001 	ldrb.w	lr, [r0, #1]
 800967a:	5ce8      	ldrb	r0, [r5, r3]
          data_counter=data_counter+2;												                             //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 800967c:	3302      	adds	r3, #2
 800967e:	b2db      	uxtb	r3, r3
		      parsed_aux = data[data_counter] + (data[data_counter+1]<<8);                     //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 8009680:	eb00 200e 	add.w	r0, r0, lr, lsl #8
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register 
 8009684:	42b3      	cmp	r3, r6
          aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
 8009686:	f82c 0b02 	strh.w	r0, [ip], #2
		    for(uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) {	       // This loop parses the read back data into GPIO voltages, it loops once for each of the 3 gpio voltage codes in the register 
 800968a:	d1f3      	bne.n	8009674 <driverSWLTC6804ReadAuxVoltageRegisters+0x78>
        received_pec = (data[data_counter]<<8)+ data[data_counter+1]; 				             //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 800968c:	19ab      	adds	r3, r5, r6
 800968e:	5da8      	ldrb	r0, [r5, r6]
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	9205      	str	r2, [sp, #20]
 8009694:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8009698:	b29b      	uxth	r3, r3
        data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 800969a:	2006      	movs	r0, #6
 800969c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80096a0:	f7ff fd4e 	bl	8009140 <driverSWLTC6804CalcPEC15>
          pec_error = -1;															                                     //The pec_error variable is simply set negative if any PEC errors are detected in the received serial data
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	9903      	ldr	r1, [sp, #12]
 80096a8:	9a05      	ldr	r2, [sp, #20]
 80096aa:	4283      	cmp	r3, r0
 80096ac:	bf18      	it	ne
 80096ae:	f04f 38ff 	movne.w	r8, #4294967295
      for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) { 			           // executes for every LTC6804 in the daisy chain current_ic is used as the IC counter
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	3608      	adds	r6, #8
 80096b6:	b2f6      	uxtb	r6, r6
 80096b8:	3108      	adds	r1, #8
 80096ba:	441a      	add	r2, r3
 80096bc:	e7ce      	b.n	800965c <driverSWLTC6804ReadAuxVoltageRegisters+0x60>
    driverSWLTC6804ReadAuxGroups(reg, total_ic, data);
 80096be:	4602      	mov	r2, r0
 80096c0:	4639      	mov	r1, r7
 80096c2:	4620      	mov	r0, r4
 80096c4:	f7ff ff6e 	bl	80095a4 <driverSWLTC6804ReadAuxGroups>
			  aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 80096c8:	3c01      	subs	r4, #1
 80096ca:	2206      	movs	r2, #6
 80096cc:	fb02 aa04 	mla	sl, r2, r4, sl
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 80096d0:	2400      	movs	r4, #0
 80096d2:	0076      	lsls	r6, r6, #1
  int8_t pec_error = 0;
 80096d4:	46a0      	mov	r8, r4
 80096d6:	00e1      	lsls	r1, r4, #3
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 80096d8:	42a7      	cmp	r7, r4
 80096da:	b2cb      	uxtb	r3, r1
 80096dc:	ddae      	ble.n	800963c <driverSWLTC6804ReadAuxVoltageRegisters+0x40>
 80096de:	1d98      	adds	r0, r3, #6
 80096e0:	b2c0      	uxtb	r0, r0
 80096e2:	46d4      	mov	ip, sl
			  parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));    		             //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 80096e4:	18ea      	adds	r2, r5, r3
 80096e6:	f892 e001 	ldrb.w	lr, [r2, #1]
 80096ea:	5cea      	ldrb	r2, [r5, r3]
			  data_counter=data_counter+2;									 		                                 //Because gpio voltage codes are two bytes the data counter must increment by two for each parsed gpio voltage code
 80096ec:	3302      	adds	r3, #2
 80096ee:	b2db      	uxtb	r3, r3
			  parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));    		             //Each gpio codes is received as two bytes and is combined to create the parsed gpio voltage code
 80096f0:	eb02 220e 	add.w	r2, r2, lr, lsl #8
		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register 
 80096f4:	4283      	cmp	r3, r0
			  aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
 80096f6:	f82c 2b02 	strh.w	r2, [ip], #2
		  for(int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++) {  	 	           // This loop parses the read back data. Loops once for each aux voltage in the register 
 80096fa:	d1f3      	bne.n	80096e4 <driverSWLTC6804ReadAuxVoltageRegisters+0xe8>
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 80096fc:	5cea      	ldrb	r2, [r5, r3]
 80096fe:	442b      	add	r3, r5
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8009700:	4429      	add	r1, r5
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 8009702:	f893 9001 	ldrb.w	r9, [r3, #1]
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8009706:	2006      	movs	r0, #6
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 8009708:	eb09 2902 	add.w	r9, r9, r2, lsl #8
      data_pec = driverSWLTC6804CalcPEC15(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 800970c:	f7ff fd18 	bl	8009140 <driverSWLTC6804CalcPEC15>
		  received_pec = (data[data_counter]<<8) + data[data_counter+1]; 				               //The received PEC for the current_ic is transmitted as the 7th and 8th after the 6 gpio voltage data bytes
 8009710:	fa1f f989 	uxth.w	r9, r9
        pec_error = -1;													   		                                     //The pec_error variable is simply set negative if any PEC errors  are detected in the received serial data
 8009714:	4581      	cmp	r9, r0
 8009716:	bf18      	it	ne
 8009718:	f04f 38ff 	movne.w	r8, #4294967295
    for (int current_ic = 0 ; current_ic < total_ic; current_ic++) { 			  		           // executes for every LTC6804 in the daisy chain current_ic is used as an IC counter
 800971c:	3401      	adds	r4, #1
 800971e:	44b2      	add	sl, r6
 8009720:	e7d9      	b.n	80096d6 <driverSWLTC6804ReadAuxVoltageRegisters+0xda>
 8009722:	bf00      	nop
 8009724:	20005429 	.word	0x20005429

08009728 <driverSWLTC6804WriteConfigRegister>:
void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 800972c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009730:	005b      	lsls	r3, r3, #1
void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009732:	b083      	sub	sp, #12
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8009734:	3307      	adds	r3, #7
void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009736:	4604      	mov	r4, r0
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8009738:	ea4f 08c0 	mov.w	r8, r0, lsl #3
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 800973c:	08db      	lsrs	r3, r3, #3
 800973e:	4668      	mov	r0, sp
 8009740:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8009744:	4849      	ldr	r0, [pc, #292]	; (800986c <driverSWLTC6804WriteConfigRegister+0x144>)
 8009746:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009870 <driverSWLTC6804WriteConfigRegister+0x148>
 800974a:	edd0 6a06 	vldr	s13, [r0, #24]
    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 800974e:	f890 c004 	ldrb.w	ip, [r0, #4]
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8009752:	eec6 7a87 	vdiv.f32	s15, s13, s14
void driverSWLTC6804WriteConfigRegister(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009756:	af00      	add	r7, sp, #0
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8009758:	469d      	mov	sp, r3
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 800975a:	f108 0804 	add.w	r8, r8, #4
 800975e:	fa5f f888 	uxtb.w	r8, r8
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8009762:	46e9      	mov	r9, sp
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8009764:	eb01 0b84 	add.w	fp, r1, r4, lsl #2
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8009768:	edd0 6a07 	vldr	s13, [r0, #28]
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 800976c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009770:	ee17 5a90 	vmov	r5, s15
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8009774:	eec6 7a87 	vdiv.f32	s15, s13, s14
	uint16_t VuV = driverSWLTC6804ConfigStruct.CellUnderVoltageLimit/(16*0.0001);
 8009778:	fa1f fa85 	uxth.w	sl, r5
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 800977c:	f3c5 2507 	ubfx	r5, r5, #8, #8
	uint16_t VoV = driverSWLTC6804ConfigStruct.CellOverVoltageLimit/(16*0.0001);
 8009780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009784:	ee17 3a90 	vmov	r3, s15
 8009788:	b29e      	uxth	r6, r3
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 800978a:	6903      	ldr	r3, [r0, #16]
 800978c:	607b      	str	r3, [r7, #4]
    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 800978e:	78c3      	ldrb	r3, [r0, #3]
 8009790:	019b      	lsls	r3, r3, #6
 8009792:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
 8009796:	f890 c00b 	ldrb.w	ip, [r0, #11]
 800979a:	ea43 030c 	orr.w	r3, r3, ip
 800979e:	f890 c002 	ldrb.w	ip, [r0, #2]
 80097a2:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 80097a6:	f890 c001 	ldrb.w	ip, [r0, #1]
 80097aa:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80097ae:	f890 c000 	ldrb.w	ip, [r0]
 80097b2:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
 80097b6:	f890 c009 	ldrb.w	ip, [r0, #9]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ; //AE 31.12.2024--> LTC6810 use this bits for: SCONV, FDRF, DIS_RED, DTMEN instead DDC12, 11, 10, 9.
 80097ba:	7d00      	ldrb	r0, [r0, #20]
    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 80097bc:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 80097c0:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ; //AE 31.12.2024--> LTC6810 use this bits for: SCONV, FDRF, DIS_RED, DTMEN instead DDC12, 11, 10, 9.
 80097c4:	0100      	lsls	r0, r0, #4
    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 80097c6:	b2db      	uxtb	r3, r3
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 80097c8:	b2ed      	uxtb	r5, r5
    tx_cfg[i][3] = (VoV >> 4) ; 
 80097ca:	f3c6 1607 	ubfx	r6, r6, #4, #8
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ; //AE 31.12.2024--> LTC6810 use this bits for: SCONV, FDRF, DIS_RED, DTMEN instead DDC12, 11, 10, 9.
 80097ce:	b2c0      	uxtb	r0, r0
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 80097d0:	46ec      	mov	ip, sp
 80097d2:	4559      	cmp	r1, fp
 80097d4:	d11d      	bne.n	8009812 <driverSWLTC6804WriteConfigRegister+0xea>
  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80097d6:	4640      	mov	r0, r8
 80097d8:	f005 fdd8 	bl	800f38c <malloc>
 80097dc:	3c01      	subs	r4, #1
  cmd[0] = 0x00; // config register command
 80097de:	4b25      	ldr	r3, [pc, #148]	; (8009874 <driverSWLTC6804WriteConfigRegister+0x14c>)
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	2106      	movs	r1, #6
 80097e4:	fb01 9404 	mla	r4, r1, r4, r9
  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80097e8:	4605      	mov	r5, r0
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain																		
 80097ea:	f1a9 0906 	sub.w	r9, r9, #6
 80097ee:	260a      	movs	r6, #10
 80097f0:	1fb3      	subs	r3, r6, #6
 80097f2:	454c      	cmp	r4, r9
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	d124      	bne.n	8009842 <driverSWLTC6804WriteConfigRegister+0x11a>
	driverSWLTC6804WakeIC();
 80097f8:	f7ff fd08 	bl	800920c <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 80097fc:	4641      	mov	r1, r8
 80097fe:	4628      	mov	r0, r5
 8009800:	f7ff fcb4 	bl	800916c <driverSWLTC6804Write>
  free(cmd);
 8009804:	4628      	mov	r0, r5
 8009806:	f005 fdc9 	bl	800f39c <free>
}
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(useArray)
 8009812:	b19a      	cbz	r2, 800983c <driverSWLTC6804WriteConfigRegister+0x114>
			activeBalanceMask = balanceEnableMaskArray[i];
 8009814:	f8d1 e000 	ldr.w	lr, [r1]
    tx_cfg[i][4] = (activeBalanceMask & 0xFF) ;
 8009818:	f88c e004 	strb.w	lr, [ip, #4]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ; //AE 31.12.2024--> LTC6810 use this bits for: SCONV, FDRF, DIS_RED, DTMEN instead DDC12, 11, 10, 9.
 800981c:	ea40 2e1e 	orr.w	lr, r0, lr, lsr #8
    tx_cfg[i][0] = (driverSWLTC6804ConfigStruct.GPIO5 << 7) | (driverSWLTC6804ConfigStruct.GPIO4 << 6) | (driverSWLTC6804ConfigStruct.GPIO3 << 5) | (driverSWLTC6804ConfigStruct.GPIO2 << 4) | (driverSWLTC6804ConfigStruct.GPIO1 << 3) | (driverSWLTC6804ConfigStruct.ReferenceON << 2) | (driverSWLTC6804ConfigStruct.ADCOption);
 8009820:	f88c 3000 	strb.w	r3, [ip]
    tx_cfg[i][1] = (VuV & 0xFF) ;
 8009824:	f88c a001 	strb.w	sl, [ip, #1]
    tx_cfg[i][2] = ((VoV & 0x0F) << 4) | (VuV >> 8) ;
 8009828:	f88c 5002 	strb.w	r5, [ip, #2]
    tx_cfg[i][3] = (VoV >> 4) ; 
 800982c:	f88c 6003 	strb.w	r6, [ip, #3]
    tx_cfg[i][5] = ((driverSWLTC6804ConfigStruct.DischargeTimout & 0x0F) << 4) | (activeBalanceMask >> 8) ; //AE 31.12.2024--> LTC6810 use this bits for: SCONV, FDRF, DIS_RED, DTMEN instead DDC12, 11, 10, 9.
 8009830:	f88c e005 	strb.w	lr, [ip, #5]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8009834:	3104      	adds	r1, #4
 8009836:	f10c 0c06 	add.w	ip, ip, #6
 800983a:	e7ca      	b.n	80097d2 <driverSWLTC6804WriteConfigRegister+0xaa>
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 800983c:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8009840:	e7ea      	b.n	8009818 <driverSWLTC6804WriteConfigRegister+0xf0>
 8009842:	4622      	mov	r2, r4
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent 
 8009844:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009848:	54e9      	strb	r1, [r5, r3]
      cmd_index = cmd_index + 1;                
 800984a:	3301      	adds	r3, #1
 800984c:	b2db      	uxtb	r3, r3
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 800984e:	42b3      	cmp	r3, r6
 8009850:	d1f8      	bne.n	8009844 <driverSWLTC6804WriteConfigRegister+0x11c>
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8009852:	4621      	mov	r1, r4
 8009854:	2006      	movs	r0, #6
 8009856:	f7ff fc73 	bl	8009140 <driverSWLTC6804CalcPEC15>
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 800985a:	0a03      	lsrs	r3, r0, #8
 800985c:	55ab      	strb	r3, [r5, r6]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800985e:	19ab      	adds	r3, r5, r6
 8009860:	3608      	adds	r6, #8
 8009862:	7058      	strb	r0, [r3, #1]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain																		
 8009864:	3c06      	subs	r4, #6
 8009866:	b2f6      	uxtb	r6, r6
 8009868:	e7c2      	b.n	80097f0 <driverSWLTC6804WriteConfigRegister+0xc8>
 800986a:	bf00      	nop
 800986c:	20005408 	.word	0x20005408
 8009870:	3ad1b717 	.word	0x3ad1b717
 8009874:	6e3d0100 	.word	0x6e3d0100

08009878 <driverSWLTC6804WriteConfigRegisterB>:
void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 800987c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	3307      	adds	r3, #7
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 8009884:	00c5      	lsls	r5, r0, #3
void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009886:	4604      	mov	r4, r0
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8009888:	08db      	lsrs	r3, r3, #3
 800988a:	4668      	mov	r0, sp
 800988c:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 8009890:	483b      	ldr	r0, [pc, #236]	; (8009980 <driverSWLTC6804WriteConfigRegisterB+0x108>)
void driverSWLTC6804WriteConfigRegisterB(uint8_t totalNumberOfLTCs, uint32_t *balanceEnableMaskArray, bool useArray) {
 8009892:	af00      	add	r7, sp, #0
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 8009894:	469d      	mov	sp, r3
    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 8009896:	79c3      	ldrb	r3, [r0, #7]
 8009898:	f890 e008 	ldrb.w	lr, [r0, #8]
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 800989c:	f8d0 c010 	ldr.w	ip, [r0, #16]
    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	ea43 03ce 	orr.w	r3, r3, lr, lsl #3
 80098a6:	f890 e005 	ldrb.w	lr, [r0, #5]
 80098aa:	7980      	ldrb	r0, [r0, #6]
 80098ac:	ea43 030e 	orr.w	r3, r3, lr
 80098b0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 80098b4:	3504      	adds	r5, #4
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 80098b6:	f04f 0e00 	mov.w	lr, #0
  const uint8_t CMD_LEN = 4+(8*totalNumberOfLTCs);
 80098ba:	b2ed      	uxtb	r5, r5
	uint8_t tx_cfg[totalNumberOfLTCs][6];
 80098bc:	466e      	mov	r6, sp
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	4668      	mov	r0, sp
		tx_cfg[i][2] = 0;
 80098c2:	46f2      	mov	sl, lr
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 80098c4:	4574      	cmp	r4, lr
 80098c6:	dc25      	bgt.n	8009914 <driverSWLTC6804WriteConfigRegisterB+0x9c>
  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80098c8:	4628      	mov	r0, r5
 80098ca:	f005 fd5f 	bl	800f38c <malloc>
  cmd[0] = 0x00; // config register B command
 80098ce:	f44f 5310 	mov.w	r3, #9216	; 0x2400
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80098d2:	4601      	mov	r1, r0
  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80098d4:	4680      	mov	r8, r0
  cmd[0] = 0x00; // config register B command
 80098d6:	8003      	strh	r3, [r0, #0]
  cmd_pec = driverSWLTC6804CalcPEC15(2, cmd);
 80098d8:	2002      	movs	r0, #2
 80098da:	f7ff fc31 	bl	8009140 <driverSWLTC6804CalcPEC15>
  cmd[3] = (uint8_t)(cmd_pec);
 80098de:	3c01      	subs	r4, #1
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80098e0:	ba40      	rev16	r0, r0
 80098e2:	2106      	movs	r1, #6
 80098e4:	fb01 6404 	mla	r4, r1, r4, r6
 80098e8:	f8a8 0002 	strh.w	r0, [r8, #2]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain																		
 80098ec:	3e06      	subs	r6, #6
 80098ee:	f04f 090a 	mov.w	r9, #10
 80098f2:	f1a9 0306 	sub.w	r3, r9, #6
 80098f6:	42b4      	cmp	r4, r6
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	d128      	bne.n	800994e <driverSWLTC6804WriteConfigRegisterB+0xd6>
	driverSWLTC6804WakeIC();
 80098fc:	f7ff fc86 	bl	800920c <driverSWLTC6804WakeIC>
	driverSWLTC6804Write(cmd,CMD_LEN);
 8009900:	4629      	mov	r1, r5
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fc32 	bl	800916c <driverSWLTC6804Write>
  free(cmd);
 8009908:	4640      	mov	r0, r8
 800990a:	f005 fd47 	bl	800f39c <free>
}
 800990e:	46bd      	mov	sp, r7
 8009910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(useArray)
 8009914:	b1ca      	cbz	r2, 800994a <driverSWLTC6804WriteConfigRegisterB+0xd2>
			activeBalanceMask = balanceEnableMaskArray[i];
 8009916:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
		tx_cfg[i][2] = 0;
 800991a:	f880 a002 	strb.w	sl, [r0, #2]
    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 800991e:	ea4f 2918 	mov.w	r9, r8, lsr #8
 8009922:	f029 090f 	bic.w	r9, r9, #15
 8009926:	ea43 0909 	orr.w	r9, r3, r9
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 800992a:	f3c8 4801 	ubfx	r8, r8, #16, #2
    tx_cfg[i][0] = ((activeBalanceMask >> 8 ) & 0x000000F0) | (driverSWLTC6804ConfigStruct.GPIO9 << 3) | (driverSWLTC6804ConfigStruct.GPIO8 << 2) | (driverSWLTC6804ConfigStruct.GPIO7 << 1) | (driverSWLTC6804ConfigStruct.GPIO6) ;
 800992e:	f880 9000 	strb.w	r9, [r0]
    tx_cfg[i][1] = ((activeBalanceMask >> 16 ) & 0x00000003) ;
 8009932:	f880 8001 	strb.w	r8, [r0, #1]
		tx_cfg[i][3] = 0;
 8009936:	f880 a003 	strb.w	sl, [r0, #3]
		tx_cfg[i][4] = 0;
 800993a:	f880 a004 	strb.w	sl, [r0, #4]
		tx_cfg[i][5] = 0;
 800993e:	f880 a005 	strb.w	sl, [r0, #5]
  for(int i = 0; i<totalNumberOfLTCs;i++) {
 8009942:	f10e 0e01 	add.w	lr, lr, #1
 8009946:	3006      	adds	r0, #6
 8009948:	e7bc      	b.n	80098c4 <driverSWLTC6804WriteConfigRegisterB+0x4c>
			activeBalanceMask = driverSWLTC6804ConfigStruct.DisChargeEnableMask;
 800994a:	46e0      	mov	r8, ip
 800994c:	e7e5      	b.n	800991a <driverSWLTC6804WriteConfigRegisterB+0xa2>
 800994e:	4622      	mov	r2, r4
      cmd[cmd_index] = tx_cfg[current_ic-1][current_byte]; 						//adding the config data to the array to be sent 
 8009950:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009954:	f808 1003 	strb.w	r1, [r8, r3]
      cmd_index = cmd_index + 1;                
 8009958:	3301      	adds	r3, #1
 800995a:	b2db      	uxtb	r3, r3
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) { // executes for each of the 6 bytes in the CFGR register current_byte is the byte counter
 800995c:	454b      	cmp	r3, r9
 800995e:	d1f7      	bne.n	8009950 <driverSWLTC6804WriteConfigRegisterB+0xd8>
    cfg_pec = (uint16_t)driverSWLTC6804CalcPEC15(BYTES_IN_REG, &tx_cfg[current_ic-1][0]);		// calculating the PEC for each ICs configuration register data
 8009960:	4621      	mov	r1, r4
 8009962:	2006      	movs	r0, #6
 8009964:	f7ff fbec 	bl	8009140 <driverSWLTC6804CalcPEC15>
    cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8009968:	0a03      	lsrs	r3, r0, #8
 800996a:	f808 3009 	strb.w	r3, [r8, r9]
    cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 800996e:	eb08 0309 	add.w	r3, r8, r9
 8009972:	f109 0908 	add.w	r9, r9, #8
 8009976:	7058      	strb	r0, [r3, #1]
  for (uint8_t current_ic = totalNumberOfLTCs; current_ic > 0; current_ic--) { 			// executes for each LTC6804 in daisy chain, this loops starts with the last IC on the stack. The first configuration written is received by the last IC in the daisy chain																		
 8009978:	3c06      	subs	r4, #6
 800997a:	fa5f f989 	uxtb.w	r9, r9
 800997e:	e7b8      	b.n	80098f2 <driverSWLTC6804WriteConfigRegisterB+0x7a>
 8009980:	20005408 	.word	0x20005408

08009984 <driverSWLTC6804EnableBalanceResistorsArray>:
void driverSWLTC6804EnableBalanceResistorsArray(uint32_t *enableMask, uint8_t cellMonitorType) {
 8009984:	b570      	push	{r4, r5, r6, lr}
	driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 8009986:	4e09      	ldr	r6, [pc, #36]	; (80099ac <driverSWLTC6804EnableBalanceResistorsArray+0x28>)
void driverSWLTC6804EnableBalanceResistorsArray(uint32_t *enableMask, uint8_t cellMonitorType) {
 8009988:	460c      	mov	r4, r1
 800998a:	4605      	mov	r5, r0
	driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 800998c:	4601      	mov	r1, r0
 800998e:	2201      	movs	r2, #1
 8009990:	7830      	ldrb	r0, [r6, #0]
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8009992:	3c02      	subs	r4, #2
	driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 8009994:	f7ff fec8 	bl	8009728 <driverSWLTC6804WriteConfigRegister>
	if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8009998:	2c01      	cmp	r4, #1
 800999a:	d806      	bhi.n	80099aa <driverSWLTC6804EnableBalanceResistorsArray+0x26>
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 800999c:	7830      	ldrb	r0, [r6, #0]
 800999e:	4629      	mov	r1, r5
 80099a0:	2201      	movs	r2, #1
}
 80099a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,enableMask,true);
 80099a6:	f7ff bf67 	b.w	8009878 <driverSWLTC6804WriteConfigRegisterB>
}
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	2000542a 	.word	0x2000542a

080099b0 <driverSWLTC6804Init>:
void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {		
 80099b0:	b084      	sub	sp, #16
 80099b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	f107 0420 	add.w	r4, r7, #32
 80099bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	driverSWLTC6804ConfigStruct = configStruct;
 80099c0:	f107 0520 	add.w	r5, r7, #32
 80099c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099c6:	4c22      	ldr	r4, [pc, #136]	; (8009a50 <driverSWLTC6804Init+0xa0>)
void driverSWLTC6804Init(driverLTC6804ConfigStructTypedef configStruct, uint8_t totalNumberOfLTCs, uint8_t noOfCellPerModule, uint8_t noOfTempSensorPerModule, uint8_t cellMonitorType) {		
 80099c8:	f897 c040 	ldrb.w	ip, [r7, #64]	; 0x40
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 80099cc:	4e21      	ldr	r6, [pc, #132]	; (8009a54 <driverSWLTC6804Init+0xa4>)
	driverSWLTC6804ConfigStruct = configStruct;
 80099ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80099d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	driverSWLTC6804MaxNoOfCellPerModule = noOfCellPerModule;
 80099d8:	4b1f      	ldr	r3, [pc, #124]	; (8009a58 <driverSWLTC6804Init+0xa8>)
 80099da:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80099de:	701a      	strb	r2, [r3, #0]
	driverSWLTC6804MaxNoOfTempSensorPerModule = noOfTempSensorPerModule;
 80099e0:	4b1e      	ldr	r3, [pc, #120]	; (8009a5c <driverSWLTC6804Init+0xac>)
 80099e2:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80099e6:	701a      	strb	r2, [r3, #0]
	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 80099e8:	466b      	mov	r3, sp
 80099ea:	eba3 03cc 	sub.w	r3, r3, ip, lsl #3
 80099ee:	469d      	mov	sp, r3
	driverHWSPI1Init(LTC6804_CS_GPIO_Port,LTC6804_CS_Pin);
 80099f0:	2110      	movs	r1, #16
 80099f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	driverSWLTC6804TotalNumberOfICs = totalNumberOfLTCs;
 80099f6:	f886 c000 	strb.w	ip, [r6]
	driverHWSPI1Init(LTC6804_CS_GPIO_Port,LTC6804_CS_Pin);
 80099fa:	f001 f80d 	bl	800aa18 <driverHWSPI1Init>
	driverSWLTC6804WakeIC();
 80099fe:	f7ff fc05 	bl	800920c <driverSWLTC6804WakeIC>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8009a02:	f897 504c 	ldrb.w	r5, [r7, #76]	; 0x4c
 8009a06:	3d02      	subs	r5, #2
	uint8_t rxConfig [driverSWLTC6804TotalNumberOfICs][8];
 8009a08:	46e9      	mov	r9, sp
	driverSWLTC6804WakeIC();
 8009a0a:	2405      	movs	r4, #5
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8009a0c:	b2ed      	uxtb	r5, r5
	  returnPEC =	driverSWLTC6804ReadConfigRegister(driverSWLTC6804TotalNumberOfICs,rxConfig);
 8009a0e:	4649      	mov	r1, r9
 8009a10:	7830      	ldrb	r0, [r6, #0]
 8009a12:	f7ff fbbb 	bl	800918c <driverSWLTC6804ReadConfigRegister>
 8009a16:	4680      	mov	r8, r0
		driverSWLTC6804WakeIC();
 8009a18:	f7ff fbf8 	bl	800920c <driverSWLTC6804WakeIC>
		driverSWLTC6804WriteConfigRegister(driverSWLTC6804TotalNumberOfICs,0,false);
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	7830      	ldrb	r0, [r6, #0]
 8009a20:	4611      	mov	r1, r2
 8009a22:	f7ff fe81 	bl	8009728 <driverSWLTC6804WriteConfigRegister>
		if(cellMonitorType==CELL_MON_LTC6812_1 || cellMonitorType == CELL_MON_LTC6813_1){
 8009a26:	2d01      	cmp	r5, #1
 8009a28:	d804      	bhi.n	8009a34 <driverSWLTC6804Init+0x84>
			driverSWLTC6804WriteConfigRegisterB(driverSWLTC6804TotalNumberOfICs,0,false);
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	7830      	ldrb	r0, [r6, #0]
 8009a2e:	4611      	mov	r1, r2
 8009a30:	f7ff ff22 	bl	8009878 <driverSWLTC6804WriteConfigRegisterB>
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8009a34:	3c01      	subs	r4, #1
		driverSWLTC6804WakeIC();
 8009a36:	f7ff fbe9 	bl	800920c <driverSWLTC6804WakeIC>
	while((LTCScanCount < 5) && (returnPEC == -1)){
 8009a3a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8009a3e:	d002      	beq.n	8009a46 <driverSWLTC6804Init+0x96>
 8009a40:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009a44:	d0e3      	beq.n	8009a0e <driverSWLTC6804Init+0x5e>
}
 8009a46:	46bd      	mov	sp, r7
 8009a48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	b004      	add	sp, #16
 8009a4e:	4770      	bx	lr
 8009a50:	20005408 	.word	0x20005408
 8009a54:	2000542a 	.word	0x2000542a
 8009a58:	20005428 	.word	0x20005428
 8009a5c:	20005429 	.word	0x20005429

08009a60 <driverSWLTC6804ConvertTemperatureExt>:
float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
	static float scalar;
	static float steinhart;
	
  scalar = 30000.0f / (float)inputValue - 1.0f;
  scalar = (float)ntcSeriesResistance / scalar;
 8009a60:	ee07 2a90 	vmov	s15, r2
 8009a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  scalar = 30000.0f / (float)inputValue - 1.0f;
 8009a68:	ee07 0a90 	vmov	s15, r0
 8009a6c:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8009b08 <driverSWLTC6804ConvertTemperatureExt+0xa8>
 8009a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009a74:	b510      	push	{r4, lr}
  scalar = 30000.0f / (float)inputValue - 1.0f;
 8009a76:	eec6 7a26 	vdiv.f32	s15, s12, s13
float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	ed2d 8b04 	vpush	{d8-d9}
  scalar = 30000.0f / (float)inputValue - 1.0f;
 8009a80:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8009a84:	ee77 7ac9 	vsub.f32	s15, s15, s18
float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009a88:	ee08 3a90 	vmov	s17, r3
  scalar = (float)ntcSeriesResistance / scalar;
 8009a8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 8009a90:	ee07 1a90 	vmov	s15, r1
 8009a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
float driverSWLTC6804ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009a98:	eeb0 8a40 	vmov.f32	s16, s0
  steinhart = log(steinhart);                           // ln(R/Ro)
 8009a9c:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8009aa0:	ee17 0a90 	vmov	r0, s15
 8009aa4:	f7f8 f830 	bl	8001b08 <__aeabi_f2d>
 8009aa8:	ec41 0b10 	vmov	d0, r0, r1
 8009aac:	f009 fa20 	bl	8012ef0 <log>
 8009ab0:	ec51 0b10 	vmov	r0, r1, d0
 8009ab4:	f7f8 f8a0 	bl	8001bf8 <__aeabi_d2f>
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009ab8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009b0c <driverSWLTC6804ConvertTemperatureExt+0xac>
 8009abc:	4b14      	ldr	r3, [pc, #80]	; (8009b10 <driverSWLTC6804ConvertTemperatureExt+0xb0>)
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8009abe:	ee07 0a90 	vmov	s15, r0
 8009ac2:	eef8 8a68 	vcvt.f32.u32	s17, s17
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009ac6:	ee38 8a26 	vadd.f32	s16, s16, s13
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8009aca:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009ace:	eec9 7a08 	vdiv.f32	s15, s18, s16
 8009ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
  steinhart = 1.0f / steinhart;                         // Invert
 8009ad6:	eec9 7a07 	vdiv.f32	s15, s18, s14
  steinhart -= 273.15f;                                 // convert to degree
	
	if(steinhart < -50.0f || (float)inputValue >= 30000.0f)
 8009ada:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009b14 <driverSWLTC6804ConvertTemperatureExt+0xb4>
  steinhart -= 273.15f;                                 // convert to degree
 8009ade:	ee77 7ae6 	vsub.f32	s15, s15, s13
	if(steinhart < -50.0f || (float)inputValue >= 30000.0f)
 8009ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aea:	d40a      	bmi.n	8009b02 <driverSWLTC6804ConvertTemperatureExt+0xa2>
 8009aec:	f247 522f 	movw	r2, #29999	; 0x752f
 8009af0:	4294      	cmp	r4, r2
 8009af2:	d806      	bhi.n	8009b02 <driverSWLTC6804ConvertTemperatureExt+0xa2>
  steinhart -= 273.15f;                                 // convert to degree
 8009af4:	edc3 7a00 	vstr	s15, [r3]
		steinhart = 100.0f;
	
  return steinhart;
}
 8009af8:	ecbd 8b04 	vpop	{d8-d9}
 8009afc:	ed93 0a00 	vldr	s0, [r3]
 8009b00:	bd10      	pop	{r4, pc}
		steinhart = 100.0f;
 8009b02:	4a05      	ldr	r2, [pc, #20]	; (8009b18 <driverSWLTC6804ConvertTemperatureExt+0xb8>)
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e7f7      	b.n	8009af8 <driverSWLTC6804ConvertTemperatureExt+0x98>
 8009b08:	46ea6000 	.word	0x46ea6000
 8009b0c:	43889333 	.word	0x43889333
 8009b10:	2000542c 	.word	0x2000542c
 8009b14:	c2480000 	.word	0xc2480000
 8009b18:	42c80000 	.word	0x42c80000

08009b1c <driverSWLTC6804ReadAuxVoltagesArray>:
bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	ed2d 8b04 	vpush	{d8-d9}
 8009b24:	b087      	sub	sp, #28
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009c00 <driverSWLTC6804ReadAuxVoltagesArray+0xe4>
 8009b2c:	613b      	str	r3, [r7, #16]
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule]; 
 8009b2e:	4b32      	ldr	r3, [pc, #200]	; (8009bf8 <driverSWLTC6804ReadAuxVoltagesArray+0xdc>)
bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8009b30:	f898 b000 	ldrb.w	fp, [r8]
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	ee09 1a10 	vmov	s18, r1
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule]; 
 8009b3a:	7819      	ldrb	r1, [r3, #0]
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 8009b3c:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8009bfc <driverSWLTC6804ReadAuxVoltagesArray+0xe0>
bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8009b40:	ee09 2a90 	vmov	s19, r2
	uint16_t auxVoltageArrayCodes[driverSWLTC6804TotalNumberOfICs][driverSWLTC6804MaxNoOfTempSensorPerModule]; 
 8009b44:	fb1b f201 	smulbb	r2, fp, r1
 8009b48:	0052      	lsls	r2, r2, #1
 8009b4a:	3207      	adds	r2, #7
 8009b4c:	08d2      	lsrs	r2, r2, #3
 8009b4e:	466b      	mov	r3, sp
 8009b50:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 8009b54:	469d      	mov	sp, r3
 8009b56:	465c      	mov	r4, fp
 8009b58:	46ea      	mov	sl, sp
 8009b5a:	0064      	lsls	r4, r4, #1
	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_ALL,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	2000      	movs	r0, #0
bool driverSWLTC6804ReadAuxVoltagesArray(float auxVoltagesArray[][driverSWLTC6804MaxNoOfTempSensorPerModule],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor,float ntcNominalTemp) {
 8009b60:	eeb0 8a40 	vmov.f32	s16, s0
	driverSWLTC6804ReadAuxVoltageRegisters(AUX_CH_ALL,driverSWLTC6804TotalNumberOfICs,auxVoltageArrayCodes);
 8009b64:	f7ff fd4a 	bl	80095fc <driverSWLTC6804ReadAuxVoltageRegisters>
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 8009b68:	0863      	lsrs	r3, r4, #1
 8009b6a:	617b      	str	r3, [r7, #20]
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2600      	movs	r6, #0
	bool dataValid = true;
 8009b70:	f04f 0901 	mov.w	r9, #1
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8009b74:	4a20      	ldr	r2, [pc, #128]	; (8009bf8 <driverSWLTC6804ReadAuxVoltagesArray+0xdc>)
 8009b76:	7811      	ldrb	r1, [r2, #0]
 8009b78:	b2f2      	uxtb	r2, r6
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d935      	bls.n	8009bea <driverSWLTC6804ReadAuxVoltagesArray+0xce>
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	fb0b f102 	mul.w	r1, fp, r2
 8009b84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b88:	6139      	str	r1, [r7, #16]
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 8009b8a:	6979      	ldr	r1, [r7, #20]
 8009b8c:	434a      	muls	r2, r1
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 8009b8e:	2500      	movs	r5, #0
			if(auxVoltageArrayCodes[modulePointer][auxPointer]*0.0001f < 10.0f)
 8009b90:	60ba      	str	r2, [r7, #8]
 8009b92:	e020      	b.n	8009bd6 <driverSWLTC6804ReadAuxVoltagesArray+0xba>
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4422      	add	r2, r4
 8009b98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009b9c:	f83a 0012 	ldrh.w	r0, [sl, r2, lsl #1]
 8009ba0:	ee07 0a90 	vmov	s15, r0
 8009ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ba8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb4:	d516      	bpl.n	8009be4 <driverSWLTC6804ReadAuxVoltagesArray+0xc8>
			  auxVoltagesArray[modulePointer][auxPointer] = driverSWLTC6804ConvertTemperatureExt(auxVoltageArrayCodes[modulePointer][auxPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 8009bb6:	ee19 2a90 	vmov	r2, s19
 8009bba:	ee19 1a10 	vmov	r1, s18
 8009bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	f7ff ff4c 	bl	8009a60 <driverSWLTC6804ConvertTemperatureExt>
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	ed84 0a00 	vstr	s0, [r4]
		for(uint8_t auxPointer = 0; auxPointer < driverSWLTC6804MaxNoOfTempSensorPerModule; auxPointer++){
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	f898 2000 	ldrb.w	r2, [r8]
 8009bda:	b2ec      	uxtb	r4, r5
 8009bdc:	42a2      	cmp	r2, r4
 8009bde:	d8d9      	bhi.n	8009b94 <driverSWLTC6804ReadAuxVoltagesArray+0x78>
  for(uint8_t modulePointer = 0; modulePointer < driverSWLTC6804TotalNumberOfICs; modulePointer++) {
 8009be0:	3601      	adds	r6, #1
 8009be2:	e7c7      	b.n	8009b74 <driverSWLTC6804ReadAuxVoltagesArray+0x58>
				dataValid = false;
 8009be4:	f04f 0900 	mov.w	r9, #0
 8009be8:	e7f4      	b.n	8009bd4 <driverSWLTC6804ReadAuxVoltagesArray+0xb8>
}
 8009bea:	4648      	mov	r0, r9
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	ecbd 8b04 	vpop	{d8-d9}
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	2000542a 	.word	0x2000542a
 8009bfc:	38d1b717 	.word	0x38d1b717
 8009c00:	20005429 	.word	0x20005429

08009c04 <driverSWISL28022Init>:
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#include "driverSWISL28022.h"

void driverSWISL28022Init(uint8_t i2cAddres, uint8_t i2cBus, driverSWISL28022InitStruct initStruct){
 8009c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c06:	4613      	mov	r3, r2
	
	uint8_t firstByte = initStruct.busVoltageRange << 6 | initStruct.currentShuntGain << 4 | (initStruct.ADCSetting & 0x06) >> 1;
 8009c08:	f3c2 4607 	ubfx	r6, r2, #16, #8
void driverSWISL28022Init(uint8_t i2cAddres, uint8_t i2cBus, driverSWISL28022InitStruct initStruct){
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	9201      	str	r2, [sp, #4]
	uint8_t firstByte = initStruct.busVoltageRange << 6 | initStruct.currentShuntGain << 4 | (initStruct.ADCSetting & 0x06) >> 1;
 8009c10:	b2d1      	uxtb	r1, r2
 8009c12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009c16:	0112      	lsls	r2, r2, #4
	uint8_t secondByte = (initStruct.ADCSetting & 0x01) << 7 | initStruct.ADCSetting << 3 | initStruct.Mode ;
 8009c18:	00f4      	lsls	r4, r6, #3
	uint8_t firstByte = initStruct.busVoltageRange << 6 | initStruct.currentShuntGain << 4 | (initStruct.ADCSetting & 0x06) >> 1;
 8009c1a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
	uint8_t secondByte = (initStruct.ADCSetting & 0x01) << 7 | initStruct.ADCSetting << 3 | initStruct.Mode ;
 8009c1e:	ea44 14c6 	orr.w	r4, r4, r6, lsl #7
	uint8_t firstByte = initStruct.busVoltageRange << 6 | initStruct.currentShuntGain << 4 | (initStruct.ADCSetting & 0x06) >> 1;
 8009c22:	f3c3 4141 	ubfx	r1, r3, #17, #2
 8009c26:	430a      	orrs	r2, r1
	uint8_t secondByte = (initStruct.ADCSetting & 0x01) << 7 | initStruct.ADCSetting << 3 | initStruct.Mode ;
 8009c28:	ea44 6313 	orr.w	r3, r4, r3, lsr #24
	uint8_t writeData[3] = {0x00,firstByte,secondByte};
	
	if(i2cBus == 1){
 8009c2c:	2d01      	cmp	r5, #1
	uint8_t writeData[3] = {0x00,firstByte,secondByte};
 8009c2e:	f04f 0400 	mov.w	r4, #0
 8009c32:	f88d 400c 	strb.w	r4, [sp, #12]
 8009c36:	f88d 200d 	strb.w	r2, [sp, #13]
 8009c3a:	f88d 300e 	strb.w	r3, [sp, #14]
	if(i2cBus == 1){
 8009c3e:	d10a      	bne.n	8009c56 <driverSWISL28022Init+0x52>
 8009c40:	9000      	str	r0, [sp, #0]
		driverHWI2C1Init();
 8009c42:	f000 fd83 	bl	800a74c <driverHWI2C1Init>
		driverHWI2C1Write(i2cAddres,false,writeData,3);
 8009c46:	9800      	ldr	r0, [sp, #0]
 8009c48:	2303      	movs	r3, #3
 8009c4a:	aa03      	add	r2, sp, #12
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	f000 fdd3 	bl	800a7f8 <driverHWI2C1Write>
	}else if(i2cBus == 2){
		driverHWI2C2Init();
		driverHWI2C2Write(i2cAddres,false,writeData,3);
	}
};
 8009c52:	b004      	add	sp, #16
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
	}else if(i2cBus == 2){
 8009c56:	2d02      	cmp	r5, #2
 8009c58:	d1fb      	bne.n	8009c52 <driverSWISL28022Init+0x4e>
 8009c5a:	9000      	str	r0, [sp, #0]
		driverHWI2C2Init();
 8009c5c:	f000 fdf2 	bl	800a844 <driverHWI2C2Init>
		driverHWI2C2Write(i2cAddres,false,writeData,3);
 8009c60:	9800      	ldr	r0, [sp, #0]
 8009c62:	2303      	movs	r3, #3
 8009c64:	aa03      	add	r2, sp, #12
 8009c66:	4621      	mov	r1, r4
 8009c68:	f000 fe44 	bl	800a8f4 <driverHWI2C2Write>
};
 8009c6c:	e7f1      	b.n	8009c52 <driverSWISL28022Init+0x4e>
	...

08009c70 <driverSWISL28022GetBusCurrent>:

bool driverSWISL28022GetBusCurrent(uint8_t i2cAddres, uint8_t i2cBus, float *busCurrent, float initOffset, float scalar) {
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	ed2d 8b02 	vpush	{d8}
	// ToDo make register to current conversion register dependent
	uint8_t writeDataC[1] = {REG_SHUNTVOLTAGE};
 8009c76:	2301      	movs	r3, #1
bool driverSWISL28022GetBusCurrent(uint8_t i2cAddres, uint8_t i2cBus, float *busCurrent, float initOffset, float scalar) {
 8009c78:	b083      	sub	sp, #12
	uint8_t readDataC[2];
	uint8_t commSucces = HAL_OK;
	static int16_t busCurrentInt;

	if(i2cBus == 1){
 8009c7a:	4299      	cmp	r1, r3
bool driverSWISL28022GetBusCurrent(uint8_t i2cAddres, uint8_t i2cBus, float *busCurrent, float initOffset, float scalar) {
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4615      	mov	r5, r2
 8009c80:	eeb0 8a40 	vmov.f32	s16, s0
 8009c84:	eef0 8a60 	vmov.f32	s17, s1
	uint8_t writeDataC[1] = {REG_SHUNTVOLTAGE};
 8009c88:	f88d 3000 	strb.w	r3, [sp]
	if(i2cBus == 1){
 8009c8c:	d112      	bne.n	8009cb4 <driverSWISL28022GetBusCurrent+0x44>
		commSucces |= driverHWI2C1Write(i2cAddres,false,writeDataC,1);
 8009c8e:	b286      	uxth	r6, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	466a      	mov	r2, sp
 8009c94:	2100      	movs	r1, #0
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 fdae 	bl	800a7f8 <driverHWI2C1Write>
		commSucces |= driverHWI2C1Read(i2cAddres,readDataC,2);
 8009c9c:	2202      	movs	r2, #2
		commSucces |= driverHWI2C1Write(i2cAddres,false,writeDataC,1);
 8009c9e:	4604      	mov	r4, r0
		commSucces |= driverHWI2C1Read(i2cAddres,readDataC,2);
 8009ca0:	a901      	add	r1, sp, #4
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f000 fdba 	bl	800a81c <driverHWI2C1Read>
	}else if(i2cBus == 2){
		commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataC,1);
		commSucces |= driverHWI2C2Read(i2cAddres,readDataC,2);
 8009ca8:	4320      	orrs	r0, r4
 8009caa:	b2c0      	uxtb	r0, r0
	}
	
	if(commSucces == HAL_OK) {
 8009cac:	b120      	cbz	r0, 8009cb8 <driverSWISL28022GetBusCurrent+0x48>
		busCurrentInt = (readDataC[0] << 9) | (readDataC[1] << 1);
		*busCurrent = (scalar*busCurrentInt)-initOffset;
	}else{
		*busCurrent = 0.0f;
 8009cae:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009d08 <driverSWISL28022GetBusCurrent+0x98>
 8009cb2:	e012      	b.n	8009cda <driverSWISL28022GetBusCurrent+0x6a>
	}else if(i2cBus == 2){
 8009cb4:	2902      	cmp	r1, #2
 8009cb6:	d01a      	beq.n	8009cee <driverSWISL28022GetBusCurrent+0x7e>
		busCurrentInt = (readDataC[0] << 9) | (readDataC[1] << 1);
 8009cb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009cbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
		*busCurrent = (scalar*busCurrentInt)-initOffset;
 8009cc6:	b21b      	sxth	r3, r3
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8009cd4:	ee97 0aa8 	vfnms.f32	s0, s15, s17
 8009cd8:	2000      	movs	r0, #0
	}
	
	return commSucces == HAL_OK;
 8009cda:	f080 0001 	eor.w	r0, r0, #1
};
 8009cde:	f000 0001 	and.w	r0, r0, #1
 8009ce2:	ed85 0a00 	vstr	s0, [r5]
 8009ce6:	b003      	add	sp, #12
 8009ce8:	ecbd 8b02 	vpop	{d8}
 8009cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataC,1);
 8009cee:	b286      	uxth	r6, r0
 8009cf0:	466a      	mov	r2, sp
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f000 fdfd 	bl	800a8f4 <driverHWI2C2Write>
		commSucces |= driverHWI2C2Read(i2cAddres,readDataC,2);
 8009cfa:	463a      	mov	r2, r7
		commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataC,1);
 8009cfc:	4604      	mov	r4, r0
		commSucces |= driverHWI2C2Read(i2cAddres,readDataC,2);
 8009cfe:	a901      	add	r1, sp, #4
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 fe07 	bl	800a914 <driverHWI2C2Read>
 8009d06:	e7cf      	b.n	8009ca8 <driverSWISL28022GetBusCurrent+0x38>
 8009d08:	00000000 	.word	0x00000000

08009d0c <driverSWISL28022GetBusVoltage>:

bool driverSWISL28022GetBusVoltage(uint8_t i2cAddres, uint8_t i2cBus, float *busVoltage, int16_t offset, float scalar){
 8009d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d10:	ed2d 8b02 	vpush	{d8}
 8009d14:	b083      	sub	sp, #12
	uint8_t writeDataV[1] = {REG_BUSVOLTAGE};
 8009d16:	f04f 0902 	mov.w	r9, #2
	uint8_t readDataV[2];
	uint8_t commSucces = HAL_OK;
	uint16_t busVoltageInt;
	float step = 0.004f;
	
	if(i2cBus == 1){
 8009d1a:	2901      	cmp	r1, #1
bool driverSWISL28022GetBusVoltage(uint8_t i2cAddres, uint8_t i2cBus, float *busVoltage, int16_t offset, float scalar){
 8009d1c:	4688      	mov	r8, r1
 8009d1e:	4615      	mov	r5, r2
 8009d20:	461e      	mov	r6, r3
 8009d22:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t writeDataV[1] = {REG_BUSVOLTAGE};
 8009d26:	f88d 9000 	strb.w	r9, [sp]
	if(i2cBus == 1){
 8009d2a:	d112      	bne.n	8009d52 <driverSWISL28022GetBusVoltage+0x46>
	  commSucces |= driverHWI2C1Write(i2cAddres,false,writeDataV,1);
 8009d2c:	b287      	uxth	r7, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	466a      	mov	r2, sp
 8009d32:	2100      	movs	r1, #0
 8009d34:	4638      	mov	r0, r7
 8009d36:	f000 fd5f 	bl	800a7f8 <driverHWI2C1Write>
	  commSucces |= driverHWI2C1Read(i2cAddres,readDataV,2);
 8009d3a:	464a      	mov	r2, r9
	  commSucces |= driverHWI2C1Write(i2cAddres,false,writeDataV,1);
 8009d3c:	4604      	mov	r4, r0
	  commSucces |= driverHWI2C1Read(i2cAddres,readDataV,2);
 8009d3e:	a901      	add	r1, sp, #4
 8009d40:	4638      	mov	r0, r7
 8009d42:	f000 fd6b 	bl	800a81c <driverHWI2C1Read>
	}else if(i2cBus == 2){
	  commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataV,1);
	  commSucces |= driverHWI2C2Read(i2cAddres,readDataV,2);
 8009d46:	4320      	orrs	r0, r4
 8009d48:	b2c0      	uxtb	r0, r0
	}

	if(commSucces == HAL_OK) {
 8009d4a:	b120      	cbz	r0, 8009d56 <driverSWISL28022GetBusVoltage+0x4a>
		busVoltageInt = (readDataV[0] << 6) | (readDataV[1] >> 2);
		*busVoltage = step*scalar*(busVoltageInt+offset);	
  }else{
		*busVoltage = 0.0f;
 8009d4c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009db0 <driverSWISL28022GetBusVoltage+0xa4>
 8009d50:	e014      	b.n	8009d7c <driverSWISL28022GetBusVoltage+0x70>
	}else if(i2cBus == 2){
 8009d52:	2902      	cmp	r1, #2
 8009d54:	d01d      	beq.n	8009d92 <driverSWISL28022GetBusVoltage+0x86>
		busVoltageInt = (readDataV[0] << 6) | (readDataV[1] >> 2);
 8009d56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009d5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
		*busVoltage = step*scalar*(busVoltageInt+offset);	
 8009d5e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8009db4 <driverSWISL28022GetBusVoltage+0xa8>
		busVoltageInt = (readDataV[0] << 6) | (readDataV[1] >> 2);
 8009d62:	089b      	lsrs	r3, r3, #2
		*busVoltage = step*scalar*(busVoltageInt+offset);	
 8009d64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009d68:	4433      	add	r3, r6
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d76:	2000      	movs	r0, #0
 8009d78:	ee27 0a80 	vmul.f32	s0, s15, s0
  }		
	
	return commSucces == HAL_OK;
 8009d7c:	f080 0001 	eor.w	r0, r0, #1
};
 8009d80:	f000 0001 	and.w	r0, r0, #1
 8009d84:	ed85 0a00 	vstr	s0, [r5]
 8009d88:	b003      	add	sp, #12
 8009d8a:	ecbd 8b02 	vpop	{d8}
 8009d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataV,1);
 8009d92:	b287      	uxth	r7, r0
 8009d94:	466a      	mov	r2, sp
 8009d96:	2301      	movs	r3, #1
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	f000 fdaa 	bl	800a8f4 <driverHWI2C2Write>
	  commSucces |= driverHWI2C2Read(i2cAddres,readDataV,2);
 8009da0:	4642      	mov	r2, r8
	  commSucces |= driverHWI2C2Write(i2cAddres,false,writeDataV,1);
 8009da2:	4604      	mov	r4, r0
	  commSucces |= driverHWI2C2Read(i2cAddres,readDataV,2);
 8009da4:	a901      	add	r1, sp, #4
 8009da6:	4638      	mov	r0, r7
 8009da8:	f000 fdb4 	bl	800a914 <driverHWI2C2Read>
 8009dac:	e7cb      	b.n	8009d46 <driverSWISL28022GetBusVoltage+0x3a>
 8009dae:	bf00      	nop
 8009db0:	00000000 	.word	0x00000000
 8009db4:	3b83126f 	.word	0x3b83126f

08009db8 <driverSWADC128D818Init>:
uint32_t driverSWADC128StartupDelayLastTick;
static const uint8_t ADC128Address[9] ={0x1D,0x1E,0x1F,0x2D,0x2E,0x2F,0x35,0x36,0x37};

void driverSWADC128D818Init(uint8_t noOfExpansionBoard, uint8_t noOfTempSensorPerExpansionBoard){
	
	driverSWADC128D818TotalNoOfExpansionBoard = noOfExpansionBoard;
 8009db8:	4b43      	ldr	r3, [pc, #268]	; (8009ec8 <driverSWADC128D818Init+0x110>)
void driverSWADC128D818Init(uint8_t noOfExpansionBoard, uint8_t noOfTempSensorPerExpansionBoard){
 8009dba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	driverSWADC128D818TotalNoOfExpansionBoard = noOfExpansionBoard;
 8009dbe:	7018      	strb	r0, [r3, #0]
	driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard = noOfTempSensorPerExpansionBoard;
 8009dc0:	4b42      	ldr	r3, [pc, #264]	; (8009ecc <driverSWADC128D818Init+0x114>)
	
	uint32_t maxDelayIntervals = 100;
	bool notReady = true;
	driverSWADC128StartupDelayLastTick = HAL_GetTick();
 8009dc2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8009ed4 <driverSWADC128D818Init+0x11c>
	driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard = noOfTempSensorPerExpansionBoard;
 8009dc6:	7019      	strb	r1, [r3, #0]
	driverSWADC128StartupDelayLastTick = HAL_GetTick();
 8009dc8:	f000 fff8 	bl	800adbc <HAL_GetTick>
	
	uint8_t registerPointer = 0x0C;
 8009dcc:	230c      	movs	r3, #12
 8009dce:	f88d 3002 	strb.w	r3, [sp, #2]
	uint8_t readData = 0x03;
 8009dd2:	2303      	movs	r3, #3
	driverSWADC128StartupDelayLastTick = HAL_GetTick();
 8009dd4:	f8c8 0000 	str.w	r0, [r8]
	uint8_t readData = 0x03;
 8009dd8:	f88d 3003 	strb.w	r3, [sp, #3]
	for(uint8_t i=0; i < driverSWADC128D818TotalNoOfExpansionBoard; i++){
 8009ddc:	2600      	movs	r6, #0
	bool notReady = true;
 8009dde:	2501      	movs	r5, #1
	uint32_t maxDelayIntervals = 100;
 8009de0:	2764      	movs	r7, #100	; 0x64
	for(uint8_t i=0; i < driverSWADC128D818TotalNoOfExpansionBoard; i++){
 8009de2:	4b39      	ldr	r3, [pc, #228]	; (8009ec8 <driverSWADC128D818Init+0x110>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	fa5f fa86 	uxtb.w	sl, r6
 8009dea:	4553      	cmp	r3, sl
 8009dec:	d81e      	bhi.n	8009e2c <driverSWADC128D818Init+0x74>
		configBytes[1] = 0x01;	//configuration register, value = 0000 0001
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
	
	}
	// Now ready to read samples
}
 8009dee:	b003      	add	sp, #12
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(modDelayTick1ms(&driverSWADC128StartupDelayLastTick,10) && maxDelayIntervals){
 8009df4:	210a      	movs	r1, #10
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7fa fe92 	bl	8004b20 <modDelayTick1ms>
 8009dfc:	b1b0      	cbz	r0, 8009e2c <driverSWADC128D818Init+0x74>
				driverHWI2C1Write(ADC128Address[i],false,&registerPointer,1);
 8009dfe:	4b34      	ldr	r3, [pc, #208]	; (8009ed0 <driverSWADC128D818Init+0x118>)
 8009e00:	f813 400a 	ldrb.w	r4, [r3, sl]
 8009e04:	f10d 0202 	add.w	r2, sp, #2
 8009e08:	2301      	movs	r3, #1
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 fcf3 	bl	800a7f8 <driverHWI2C1Write>
				driverHWI2C1Read(ADC128Address[i],&readData,1);
 8009e12:	2201      	movs	r2, #1
 8009e14:	f10d 0103 	add.w	r1, sp, #3
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 fcff 	bl	800a81c <driverHWI2C1Read>
				if(readData == 0x00)
 8009e1e:	f89d 5003 	ldrb.w	r5, [sp, #3]
 8009e22:	3d00      	subs	r5, #0
				maxDelayIntervals--;
 8009e24:	f107 37ff 	add.w	r7, r7, #4294967295
				if(readData == 0x00)
 8009e28:	bf18      	it	ne
 8009e2a:	2501      	movne	r5, #1
		while(maxDelayIntervals && notReady) {
 8009e2c:	b10f      	cbz	r7, 8009e32 <driverSWADC128D818Init+0x7a>
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	d1e0      	bne.n	8009df4 <driverSWADC128D818Init+0x3c>
		uint8_t configBytes[] = {0x00,0x08};		//configuration register, value = 0000 1000								// Configuration register -> disable ADC conversion and reset registers
 8009e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e36:	f8ad 3004 	strh.w	r3, [sp, #4]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e3a:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <driverSWADC128D818Init+0x118>)
 8009e3c:	f813 400a 	ldrb.w	r4, [r3, sl]
 8009e40:	aa01      	add	r2, sp, #4
 8009e42:	2302      	movs	r3, #2
 8009e44:	2100      	movs	r1, #0
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 fcd6 	bl	800a7f8 <driverHWI2C1Write>
		configBytes[0] = 0x0B;																																						// Advanced config register Mode 1 + ext ref
 8009e4c:	230b      	movs	r3, #11
 8009e4e:	f88d 3004 	strb.w	r3, [sp, #4]
		configBytes[1] = 0x03;		//Advanced Configuration Register, value = 0000 0011	
 8009e52:	f04f 0b03 	mov.w	fp, #3
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e56:	2302      	movs	r3, #2
 8009e58:	aa01      	add	r2, sp, #4
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4620      	mov	r0, r4
		configBytes[1] = 0x03;		//Advanced Configuration Register, value = 0000 0011	
 8009e5e:	f88d b005 	strb.w	fp, [sp, #5]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e62:	f000 fcc9 	bl	800a7f8 <driverHWI2C1Write>
		configBytes[0] = 0x07;																																						// Configuration rate register -> continuous conversion
 8009e66:	2307      	movs	r3, #7
		configBytes[1] = 0x01; 	//Conversion Rate Register, value = 0000 0001
 8009e68:	f04f 0a01 	mov.w	sl, #1
		configBytes[0] = 0x07;																																						// Configuration rate register -> continuous conversion
 8009e6c:	f88d 3004 	strb.w	r3, [sp, #4]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e70:	aa01      	add	r2, sp, #4
 8009e72:	2302      	movs	r3, #2
 8009e74:	2100      	movs	r1, #0
 8009e76:	4620      	mov	r0, r4
		configBytes[1] = 0x00;	//Channel Disable Register
 8009e78:	f04f 0900 	mov.w	r9, #0
		configBytes[1] = 0x01; 	//Conversion Rate Register, value = 0000 0001
 8009e7c:	f88d a005 	strb.w	sl, [sp, #5]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e80:	f000 fcba 	bl	800a7f8 <driverHWI2C1Write>
		configBytes[0] = 0x08;																																						// Channel disable register 
 8009e84:	2308      	movs	r3, #8
 8009e86:	f88d 3004 	strb.w	r3, [sp, #4]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e8a:	aa01      	add	r2, sp, #4
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4620      	mov	r0, r4
		configBytes[1] = 0x00;	//Channel Disable Register
 8009e92:	f88d 9005 	strb.w	r9, [sp, #5]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009e96:	f000 fcaf 	bl	800a7f8 <driverHWI2C1Write>
		configBytes[1] = 0xFF;	//Interrupt Mask Register, value = 1111 1111
 8009e9a:	23ff      	movs	r3, #255	; 0xff
 8009e9c:	f88d 3005 	strb.w	r3, [sp, #5]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009ea0:	aa01      	add	r2, sp, #4
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4620      	mov	r0, r4
		configBytes[0] = 0x03;																																						// Interrupt enable register -> disable all interrupts
 8009ea8:	f88d b004 	strb.w	fp, [sp, #4]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009eac:	f000 fca4 	bl	800a7f8 <driverHWI2C1Write>
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	aa01      	add	r2, sp, #4
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	4620      	mov	r0, r4
		configBytes[0] = 0x00;																																						// Configuration register -> enable ADC conversion
 8009eb8:	f88d 9004 	strb.w	r9, [sp, #4]
		configBytes[1] = 0x01;	//configuration register, value = 0000 0001
 8009ebc:	f88d a005 	strb.w	sl, [sp, #5]
		driverHWI2C1Write(ADC128Address[i],false,configBytes,sizeof(configBytes));
 8009ec0:	4456      	add	r6, sl
 8009ec2:	f000 fc99 	bl	800a7f8 <driverHWI2C1Write>
	for(uint8_t i=0; i < driverSWADC128D818TotalNoOfExpansionBoard; i++){
 8009ec6:	e78c      	b.n	8009de2 <driverSWADC128D818Init+0x2a>
 8009ec8:	20005431 	.word	0x20005431
 8009ecc:	20005430 	.word	0x20005430
 8009ed0:	08014b30 	.word	0x08014b30
 8009ed4:	20005434 	.word	0x20005434

08009ed8 <driverSWADC128D818ReadExpVoltages>:
	
	return (readBytes[0] << 4) | (readBytes[1] >> 4);
}
*/

void driverSWADC128D818ReadExpVoltages(uint8_t noOfExpansionBoard, uint16_t exp_codes[][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard]) {
 8009ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009f4c <driverSWADC128D818ReadExpVoltages+0x74>
 8009ee0:	4c19      	ldr	r4, [pc, #100]	; (8009f48 <driverSWADC128D818ReadExpVoltages+0x70>)
 8009ee2:	f89a 7000 	ldrb.w	r7, [sl]
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	007f      	lsls	r7, r7, #1
 8009eea:	eb00 0804 	add.w	r8, r0, r4
	
		static uint8_t registerPointer = 0x20;
		uint8_t expRegisterPointer = 0;
		uint8_t readBytes[2];
	
	for(uint8_t modulePointer = 0; modulePointer< noOfExpansionBoard; modulePointer++){
 8009eee:	4544      	cmp	r4, r8
 8009ef0:	d026      	beq.n	8009f40 <driverSWADC128D818ReadExpVoltages+0x68>
		for(uint8_t expPointer = 0; expPointer < driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard; expPointer++){
			expRegisterPointer = registerPointer+expPointer;
			driverHWI2C1Write(ADC128Address[modulePointer],false,&expRegisterPointer,1);
			driverHWI2C1Read(ADC128Address[modulePointer],readBytes,2);
			exp_codes[modulePointer][expPointer] = ((readBytes[0] << 4) | (readBytes[1])>>4);
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	e01b      	b.n	8009f2e <driverSWADC128D818ReadExpVoltages+0x56>
			driverHWI2C1Write(ADC128Address[modulePointer],false,&expRegisterPointer,1);
 8009ef6:	f894 b000 	ldrb.w	fp, [r4]
			expRegisterPointer = registerPointer+expPointer;
 8009efa:	f109 0320 	add.w	r3, r9, #32
 8009efe:	f88d 3003 	strb.w	r3, [sp, #3]
			driverHWI2C1Write(ADC128Address[modulePointer],false,&expRegisterPointer,1);
 8009f02:	f10d 0203 	add.w	r2, sp, #3
 8009f06:	2301      	movs	r3, #1
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f000 fc74 	bl	800a7f8 <driverHWI2C1Write>
			driverHWI2C1Read(ADC128Address[modulePointer],readBytes,2);
 8009f10:	2202      	movs	r2, #2
 8009f12:	a901      	add	r1, sp, #4
 8009f14:	4658      	mov	r0, fp
 8009f16:	f000 fc81 	bl	800a81c <driverHWI2C1Read>
			exp_codes[modulePointer][expPointer] = ((readBytes[0] << 4) | (readBytes[1])>>4);
 8009f1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009f1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009f22:	091b      	lsrs	r3, r3, #4
 8009f24:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009f28:	f825 3019 	strh.w	r3, [r5, r9, lsl #1]
		for(uint8_t expPointer = 0; expPointer < driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard; expPointer++){
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f32:	fa5f f986 	uxtb.w	r9, r6
 8009f36:	454b      	cmp	r3, r9
 8009f38:	d8dd      	bhi.n	8009ef6 <driverSWADC128D818ReadExpVoltages+0x1e>
	for(uint8_t modulePointer = 0; modulePointer< noOfExpansionBoard; modulePointer++){
 8009f3a:	3401      	adds	r4, #1
 8009f3c:	443d      	add	r5, r7
 8009f3e:	e7d6      	b.n	8009eee <driverSWADC128D818ReadExpVoltages+0x16>
		}
	}
}
 8009f40:	b003      	add	sp, #12
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	bf00      	nop
 8009f48:	08014b30 	.word	0x08014b30
 8009f4c:	20005430 	.word	0x20005430

08009f50 <driverSWADC128D818ConvertTemperatureExt>:
float driverSWADC128D818ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
	static float scalar;
	static float steinhart;
	
  scalar = 4095.0f / (float)inputValue - 1.0f;
  scalar = (float)ntcSeriesResistance / scalar;
 8009f50:	ee07 2a90 	vmov	s15, r2
 8009f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  scalar = 4095.0f / (float)inputValue - 1.0f;
 8009f58:	ee07 0a90 	vmov	s15, r0
 8009f5c:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8009ffc <driverSWADC128D818ConvertTemperatureExt+0xac>
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
float driverSWADC128D818ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009f64:	b510      	push	{r4, lr}
  scalar = 4095.0f / (float)inputValue - 1.0f;
 8009f66:	eec6 7a26 	vdiv.f32	s15, s12, s13
float driverSWADC128D818ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	ed2d 8b04 	vpush	{d8-d9}
  scalar = 4095.0f / (float)inputValue - 1.0f;
 8009f70:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8009f74:	ee77 7ac9 	vsub.f32	s15, s15, s18
float driverSWADC128D818ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009f78:	ee08 3a90 	vmov	s17, r3
  scalar = (float)ntcSeriesResistance / scalar;
 8009f7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 8009f80:	ee07 1a90 	vmov	s15, r1
 8009f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
float driverSWADC128D818ConvertTemperatureExt(uint16_t inputValue,uint32_t ntcNominal,uint32_t ntcSeriesResistance,uint16_t ntcBetaFactor, float ntcNominalTemp) {
 8009f88:	eeb0 8a40 	vmov.f32	s16, s0
  steinhart = log(steinhart);                           // ln(R/Ro)
 8009f8c:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8009f90:	ee17 0a90 	vmov	r0, s15
 8009f94:	f7f7 fdb8 	bl	8001b08 <__aeabi_f2d>
 8009f98:	ec41 0b10 	vmov	d0, r0, r1
 8009f9c:	f008 ffa8 	bl	8012ef0 <log>
 8009fa0:	ec51 0b10 	vmov	r0, r1, d0
 8009fa4:	f7f7 fe28 	bl	8001bf8 <__aeabi_d2f>
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009fa8:	eddf 6a15 	vldr	s13, [pc, #84]	; 800a000 <driverSWADC128D818ConvertTemperatureExt+0xb0>
 8009fac:	4b15      	ldr	r3, [pc, #84]	; (800a004 <driverSWADC128D818ConvertTemperatureExt+0xb4>)
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8009fae:	ee07 0a90 	vmov	s15, r0
 8009fb2:	eef8 8a68 	vcvt.f32.u32	s17, s17
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009fb6:	ee38 8a26 	vadd.f32	s16, s16, s13
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8009fba:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8009fbe:	eec9 7a08 	vdiv.f32	s15, s18, s16
 8009fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
  steinhart = 1.0f / steinhart;                         // Invert
 8009fc6:	eec9 7a07 	vdiv.f32	s15, s18, s14
  steinhart -= 273.15f;                                 // convert to degree
	
	if(steinhart < -50.0f || (float)inputValue >= 4095.0f || (float)inputValue <= 0.0f)
 8009fca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a008 <driverSWADC128D818ConvertTemperatureExt+0xb8>
  steinhart -= 273.15f;                                 // convert to degree
 8009fce:	ee77 7ae6 	vsub.f32	s15, s15, s13
	if(steinhart < -50.0f || (float)inputValue >= 4095.0f || (float)inputValue <= 0.0f)
 8009fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fda:	d40c      	bmi.n	8009ff6 <driverSWADC128D818ConvertTemperatureExt+0xa6>
 8009fdc:	3c01      	subs	r4, #1
 8009fde:	b2a4      	uxth	r4, r4
 8009fe0:	f640 72fd 	movw	r2, #4093	; 0xffd
 8009fe4:	4294      	cmp	r4, r2
 8009fe6:	d806      	bhi.n	8009ff6 <driverSWADC128D818ConvertTemperatureExt+0xa6>
  steinhart -= 273.15f;                                 // convert to degree
 8009fe8:	edc3 7a00 	vstr	s15, [r3]
		steinhart = 100.0f;

  return steinhart;
}
 8009fec:	ecbd 8b04 	vpop	{d8-d9}
 8009ff0:	ed93 0a00 	vldr	s0, [r3]
 8009ff4:	bd10      	pop	{r4, pc}
		steinhart = 100.0f;
 8009ff6:	4a05      	ldr	r2, [pc, #20]	; (800a00c <driverSWADC128D818ConvertTemperatureExt+0xbc>)
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e7f7      	b.n	8009fec <driverSWADC128D818ConvertTemperatureExt+0x9c>
 8009ffc:	457ff000 	.word	0x457ff000
 800a000:	43889333 	.word	0x43889333
 800a004:	20005438 	.word	0x20005438
 800a008:	c2480000 	.word	0xc2480000
 800a00c:	42c80000 	.word	0x42c80000

0800a010 <driverSWADC128D818ReadExpVoltagesArray>:

bool driverSWADC128D818ReadExpVoltagesArray(float expVoltagesArray[][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	ed2d 8b04 	vpush	{d8-d9}
 800a018:	b087      	sub	sp, #28
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a0f4 <driverSWADC128D818ReadExpVoltagesArray+0xe4>
 800a020:	613b      	str	r3, [r7, #16]
	bool dataValid = true;
	
	uint16_t expVoltageArrayCodes[driverSWADC128D818TotalNoOfExpansionBoard][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard]; 
 800a022:	4b32      	ldr	r3, [pc, #200]	; (800a0ec <driverSWADC128D818ReadExpVoltagesArray+0xdc>)
bool driverSWADC128D818ReadExpVoltagesArray(float expVoltagesArray[][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a024:	f898 b000 	ldrb.w	fp, [r8]
 800a028:	60f8      	str	r0, [r7, #12]
	uint16_t expVoltageArrayCodes[driverSWADC128D818TotalNoOfExpansionBoard][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard]; 
 800a02a:	7818      	ldrb	r0, [r3, #0]
bool driverSWADC128D818ReadExpVoltagesArray(float expVoltagesArray[][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a02c:	60ba      	str	r2, [r7, #8]
 800a02e:	ee09 1a10 	vmov	s18, r1
	uint16_t expVoltageArrayCodes[driverSWADC128D818TotalNoOfExpansionBoard][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard]; 
 800a032:	fb1b f100 	smulbb	r1, fp, r0
 800a036:	0049      	lsls	r1, r1, #1
 800a038:	3107      	adds	r1, #7
 800a03a:	08c9      	lsrs	r1, r1, #3
 800a03c:	466b      	mov	r3, sp
 800a03e:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
 800a042:	469d      	mov	sp, r3
 800a044:	465c      	mov	r4, fp
 800a046:	46ea      	mov	sl, sp
 800a048:	0064      	lsls	r4, r4, #1
	
	driverSWADC128D818ReadExpVoltages(driverSWADC128D818TotalNoOfExpansionBoard,expVoltageArrayCodes);
 800a04a:	4651      	mov	r1, sl
bool driverSWADC128D818ReadExpVoltagesArray(float expVoltagesArray[][driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard],uint32_t ntcNominal,uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a04c:	eeb0 8a40 	vmov.f32	s16, s0
	driverSWADC128D818ReadExpVoltages(driverSWADC128D818TotalNoOfExpansionBoard,expVoltageArrayCodes);
 800a050:	f7ff ff42 	bl	8009ed8 <driverSWADC128D818ReadExpVoltages>
	
  for(uint8_t modulePointer = 0; modulePointer < driverSWADC128D818TotalNoOfExpansionBoard; modulePointer++) {
		for(uint8_t channelPointer = 0; channelPointer < driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard; channelPointer++){
			if(expVoltageArrayCodes[modulePointer][channelPointer]*0.001f < 5.0f)
 800a054:	0863      	lsrs	r3, r4, #1
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	eddf 8a25 	vldr	s17, [pc, #148]	; 800a0f0 <driverSWADC128D818ReadExpVoltagesArray+0xe0>
  for(uint8_t modulePointer = 0; modulePointer < driverSWADC128D818TotalNoOfExpansionBoard; modulePointer++) {
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	2600      	movs	r6, #0
	bool dataValid = true;
 800a062:	f04f 0901 	mov.w	r9, #1
  for(uint8_t modulePointer = 0; modulePointer < driverSWADC128D818TotalNoOfExpansionBoard; modulePointer++) {
 800a066:	4921      	ldr	r1, [pc, #132]	; (800a0ec <driverSWADC128D818ReadExpVoltagesArray+0xdc>)
 800a068:	7808      	ldrb	r0, [r1, #0]
 800a06a:	b2f1      	uxtb	r1, r6
 800a06c:	4288      	cmp	r0, r1
 800a06e:	d935      	bls.n	800a0dc <driverSWADC128D818ReadExpVoltagesArray+0xcc>
			  expVoltagesArray[modulePointer][channelPointer] = driverSWADC128D818ConvertTemperatureExt(expVoltageArrayCodes[modulePointer][channelPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 800a070:	68fc      	ldr	r4, [r7, #12]
 800a072:	fb0b f001 	mul.w	r0, fp, r1
 800a076:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800a07a:	6138      	str	r0, [r7, #16]
			if(expVoltageArrayCodes[modulePointer][channelPointer]*0.001f < 5.0f)
 800a07c:	6978      	ldr	r0, [r7, #20]
 800a07e:	4341      	muls	r1, r0
			  expVoltagesArray[modulePointer][channelPointer] = driverSWADC128D818ConvertTemperatureExt(expVoltageArrayCodes[modulePointer][channelPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 800a080:	2500      	movs	r5, #0
			if(expVoltageArrayCodes[modulePointer][channelPointer]*0.001f < 5.0f)
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	e020      	b.n	800a0c8 <driverSWADC128D818ReadExpVoltagesArray+0xb8>
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	4421      	add	r1, r4
 800a08a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800a08e:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 800a092:	ee07 0a90 	vmov	s15, r0
 800a096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a09a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a09e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a6:	d516      	bpl.n	800a0d6 <driverSWADC128D818ReadExpVoltagesArray+0xc6>
			  expVoltagesArray[modulePointer][channelPointer] = driverSWADC128D818ConvertTemperatureExt(expVoltageArrayCodes[modulePointer][channelPointer], ntcNominal, ntcSeriesResistance, ntcBetaFactor, ntcNominalTemp);
 800a0a8:	ee19 1a10 	vmov	r1, s18
 800a0ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b0:	e9c7 3200 	strd	r3, r2, [r7]
 800a0b4:	f7ff ff4c 	bl	8009f50 <driverSWADC128D818ConvertTemperatureExt>
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0be:	e9d7 3200 	ldrd	r3, r2, [r7]
 800a0c2:	ed84 0a00 	vstr	s0, [r4]
		for(uint8_t channelPointer = 0; channelPointer < driverSWADC128D818MaxNoOfTempSensorPerExpansionBoard; channelPointer++){
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	f898 1000 	ldrb.w	r1, [r8]
 800a0cc:	b2ec      	uxtb	r4, r5
 800a0ce:	42a1      	cmp	r1, r4
 800a0d0:	d8d9      	bhi.n	800a086 <driverSWADC128D818ReadExpVoltagesArray+0x76>
  for(uint8_t modulePointer = 0; modulePointer < driverSWADC128D818TotalNoOfExpansionBoard; modulePointer++) {
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	e7c7      	b.n	800a066 <driverSWADC128D818ReadExpVoltagesArray+0x56>
			else
				dataValid = false;
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	e7f4      	b.n	800a0c6 <driverSWADC128D818ReadExpVoltagesArray+0xb6>
		}
  }

	return dataValid;
}
 800a0dc:	4648      	mov	r0, r9
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	ecbd 8b04 	vpop	{d8-d9}
 800a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20005431 	.word	0x20005431
 800a0f0:	3a83126f 	.word	0x3a83126f
 800a0f4:	20005430 	.word	0x20005430

0800a0f8 <driverSWUART2Init>:
#include "driverSWUART2.h"

libRingBufferTypedef *driverSWUART2OutputBuffer;

void driverSWUART2Init(uint32_t baudRate) {
 800a0f8:	b510      	push	{r4, lr}
	driverSWUART2OutputBuffer = libRingBufferNew(sizeof(uint8_t),RINGBUFFERSIZE);	// Make new output buffer	
 800a0fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
void driverSWUART2Init(uint32_t baudRate) {
 800a0fe:	4604      	mov	r4, r0
	driverSWUART2OutputBuffer = libRingBufferNew(sizeof(uint8_t),RINGBUFFERSIZE);	// Make new output buffer	
 800a100:	2001      	movs	r0, #1
 800a102:	f004 ff7b 	bl	800effc <libRingBufferNew>
 800a106:	4a04      	ldr	r2, [pc, #16]	; (800a118 <driverSWUART2Init+0x20>)
 800a108:	6010      	str	r0, [r2, #0]
	
	if(!driverSWUART2OutputBuffer)																								// Check if buffer pointer is generated
 800a10a:	b900      	cbnz	r0, 800a10e <driverSWUART2Init+0x16>
		while(true);																																// Out of memory error
 800a10c:	e7fe      	b.n	800a10c <driverSWUART2Init+0x14>
	
	driverHWUART2Init(baudRate);																									// Initialize serial port and pass function that should be called when a byte is received
 800a10e:	4620      	mov	r0, r4
};
 800a110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	driverHWUART2Init(baudRate);																									// Initialize serial port and pass function that should be called when a byte is received
 800a114:	f000 bd98 	b.w	800ac48 <driverHWUART2Init>
 800a118:	2000543c 	.word	0x2000543c

0800a11c <driverSWUART2Task>:
		driverSWUART2OutputBuffer->add(driverSWUART2OutputBuffer,&character);
	}
	return 0;
};

bool driverSWUART2Task(void) {
 800a11c:	b513      	push	{r0, r1, r4, lr}
	char outputChar;
	
	if(!driverSWUART2OutputBuffer->isEmpty(driverSWUART2OutputBuffer)){						// Check if there is data in the ouput buffer
 800a11e:	4c0b      	ldr	r4, [pc, #44]	; (800a14c <driverSWUART2Task+0x30>)
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a124:	4798      	blx	r3
 800a126:	b940      	cbnz	r0, 800a13a <driverSWUART2Task+0x1e>
		driverSWUART2OutputBuffer->pull(driverSWUART2OutputBuffer,&outputChar);			// Pull the data from ouput buffer
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	f10d 0107 	add.w	r1, sp, #7
 800a12e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a130:	4798      	blx	r3
		driverHWUART2SendChar(outputChar);																					// And send it to the uart
 800a132:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a136:	f000 fde1 	bl	800acfc <driverHWUART2SendChar>
	}
	
	return !driverSWUART2OutputBuffer->isEmpty(driverSWUART2OutputBuffer);
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a13e:	4798      	blx	r3
 800a140:	f080 0001 	eor.w	r0, r0, #1
};
 800a144:	b2c0      	uxtb	r0, r0
 800a146:	b002      	add	sp, #8
 800a148:	bd10      	pop	{r4, pc}
 800a14a:	bf00      	nop
 800a14c:	2000543c 	.word	0x2000543c

0800a150 <driverHWADCSetInputChannel>:
  }

	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_2);
};

void driverHWADCSetInputChannel(ADC_HandleTypeDef* hadc, uint32_t inputChannel) {
 800a150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig;
	
  sConfig.Channel = inputChannel;
  sConfig.Rank = 1;
 800a152:	2301      	movs	r3, #1
  sConfig.Channel = inputChannel;
 800a154:	9100      	str	r1, [sp, #0]
  sConfig.Rank = 1;
 800a156:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800a158:	2207      	movs	r2, #7
 800a15a:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800a15c:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800a15e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sConfig.Offset = 0;
 800a162:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800a166:	f001 f905 	bl	800b374 <HAL_ADC_ConfigChannel>
 800a16a:	b100      	cbz	r0, 800a16e <driverHWADCSetInputChannel+0x1e>
  {
    while(true) {}; 																												// Error situation 
 800a16c:	e7fe      	b.n	800a16c <driverHWADCSetInputChannel+0x1c>
  }
}
 800a16e:	b007      	add	sp, #28
 800a170:	f85d fb04 	ldr.w	pc, [sp], #4

0800a174 <driverHWADCInit>:
void driverHWADCInit(void) {
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		RCC->AHBENR |= driverHWADCPorts[PortPointer].ClkRegister;								// Enable clock de desired port
 800a178:	4c25      	ldr	r4, [pc, #148]	; (800a210 <driverHWADCInit+0x9c>)
 800a17a:	6963      	ldr	r3, [r4, #20]
void driverHWADCInit(void) {
 800a17c:	b086      	sub	sp, #24
		RCC->AHBENR |= driverHWADCPorts[PortPointer].ClkRegister;								// Enable clock de desired port
 800a17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		PortInitHolder.Pull = driverHWADCPorts[PortPointer].Pull;								// No pullup
 800a182:	2500      	movs	r5, #0
		RCC->AHBENR |= driverHWADCPorts[PortPointer].ClkRegister;								// Enable clock de desired port
 800a184:	6163      	str	r3, [r4, #20]
		PortInitHolder.Pin = driverHWADCPorts[PortPointer].Pin;									// Points to status pin
 800a186:	2603      	movs	r6, #3
		HAL_GPIO_Init(driverHWADCPorts[PortPointer].Port,&PortInitHolder);			// Perform the IO init 
 800a188:	a901      	add	r1, sp, #4
 800a18a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		PortInitHolder.Pin = driverHWADCPorts[PortPointer].Pin;									// Points to status pin
 800a18e:	f04f 0802 	mov.w	r8, #2
 800a192:	e9cd 8601 	strd	r8, r6, [sp, #4]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																	// GPIO clock speed
 800a196:	e9cd 5603 	strd	r5, r6, [sp, #12]
		PortInitHolder.Alternate = driverHWADCPorts[PortPointer].Alternate;			// Alternate function
 800a19a:	9505      	str	r5, [sp, #20]
		HAL_GPIO_Init(driverHWADCPorts[PortPointer].Port,&PortInitHolder);			// Perform the IO init 
 800a19c:	f002 fa2c 	bl	800c5f8 <HAL_GPIO_Init>
		RCC->AHBENR |= driverHWADCPorts[PortPointer].ClkRegister;								// Enable clock de desired port
 800a1a0:	6963      	ldr	r3, [r4, #20]
 800a1a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a6:	6163      	str	r3, [r4, #20]
		PortInitHolder.Pin = driverHWADCPorts[PortPointer].Pin;									// Points to status pin
 800a1a8:	2701      	movs	r7, #1
		HAL_GPIO_Init(driverHWADCPorts[PortPointer].Port,&PortInitHolder);			// Perform the IO init 
 800a1aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1ae:	a901      	add	r1, sp, #4
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																	// GPIO clock speed
 800a1b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
		PortInitHolder.Mode = driverHWADCPorts[PortPointer].Mode;								// Push pull output
 800a1b4:	9602      	str	r6, [sp, #8]
		PortInitHolder.Pin = driverHWADCPorts[PortPointer].Pin;									// Points to status pin
 800a1b6:	9701      	str	r7, [sp, #4]
		PortInitHolder.Alternate = driverHWADCPorts[PortPointer].Alternate;			// Alternate function
 800a1b8:	9505      	str	r5, [sp, #20]
		HAL_GPIO_Init(driverHWADCPorts[PortPointer].Port,&PortInitHolder);			// Perform the IO init 
 800a1ba:	f002 fa1d 	bl	800c5f8 <HAL_GPIO_Init>
	__ADC1_CLK_ENABLE();																											// Enable clock to ADC1
 800a1be:	6963      	ldr	r3, [r4, #20]
 800a1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c4:	6163      	str	r3, [r4, #20]
 800a1c6:	6963      	ldr	r3, [r4, #20]
  hadc1.Instance = ADC1;
 800a1c8:	4c12      	ldr	r4, [pc, #72]	; (800a214 <driverHWADCInit+0xa0>)
	__ADC1_CLK_ENABLE();																											// Enable clock to ADC1
 800a1ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	9b00      	ldr	r3, [sp, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a1d2:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a1d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1dc:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1e0:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a1e2:	2308      	movs	r3, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a1e4:	e9c4 3505 	strd	r3, r5, [r4, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a1e8:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a1ea:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a1ec:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a1ee:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1f0:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a1f2:	6227      	str	r7, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a1f4:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a1f6:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1f8:	f000 fe58 	bl	800aeac <HAL_ADC_Init>
 800a1fc:	b100      	cbz	r0, 800a200 <driverHWADCInit+0x8c>
    while(true) {}; 																												// Error situation 
 800a1fe:	e7fe      	b.n	800a1fe <driverHWADCInit+0x8a>
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_2);
 800a200:	4641      	mov	r1, r8
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ffa4 	bl	800a150 <driverHWADCSetInputChannel>
};
 800a208:	b006      	add	sp, #24
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20e:	bf00      	nop
 800a210:	40021000 	.word	0x40021000
 800a214:	20005440 	.word	0x20005440

0800a218 <driverHWADCGetLoadVoltage>:

bool driverHWADCGetLoadVoltage(float *loCurrentLoadVoltage, float offset, float scalar) {
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t driverHWADCAverageSum = 0;
	uint8_t	driverHWADCAverageCount = 0;
	
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_2);
 800a21a:	2102      	movs	r1, #2
bool driverHWADCGetLoadVoltage(float *loCurrentLoadVoltage, float offset, float scalar) {
 800a21c:	ed2d 8b02 	vpush	{d8}
 800a220:	4606      	mov	r6, r0
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_2);
 800a222:	4817      	ldr	r0, [pc, #92]	; (800a280 <driverHWADCGetLoadVoltage+0x68>)

	driverHWADCAverageSum = 0;
	for(driverHWADCAverageCount = 0; driverHWADCAverageCount < NoOfAverages; driverHWADCAverageCount++) {
		HAL_ADC_Start(&hadc1);
 800a224:	4f16      	ldr	r7, [pc, #88]	; (800a280 <driverHWADCGetLoadVoltage+0x68>)
bool driverHWADCGetLoadVoltage(float *loCurrentLoadVoltage, float offset, float scalar) {
 800a226:	eeb0 8a40 	vmov.f32	s16, s0
 800a22a:	eef0 8a60 	vmov.f32	s17, s1
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_2);
 800a22e:	f7ff ff8f 	bl	800a150 <driverHWADCSetInputChannel>
 800a232:	250a      	movs	r5, #10
	driverHWADCAverageSum = 0;
 800a234:	2400      	movs	r4, #0
		HAL_ADC_Start(&hadc1);
 800a236:	4812      	ldr	r0, [pc, #72]	; (800a280 <driverHWADCGetLoadVoltage+0x68>)
 800a238:	f000 ff52 	bl	800b0e0 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 800a23c:	4810      	ldr	r0, [pc, #64]	; (800a280 <driverHWADCGetLoadVoltage+0x68>)
 800a23e:	2101      	movs	r1, #1
 800a240:	f000 fff6 	bl	800b230 <HAL_ADC_PollForConversion>
 800a244:	b918      	cbnz	r0, 800a24e <driverHWADCGetLoadVoltage+0x36>
			driverHWADCAverageSum += HAL_ADC_GetValue(&hadc1);
 800a246:	4638      	mov	r0, r7
 800a248:	f001 f890 	bl	800b36c <HAL_ADC_GetValue>
 800a24c:	4404      	add	r4, r0
	for(driverHWADCAverageCount = 0; driverHWADCAverageCount < NoOfAverages; driverHWADCAverageCount++) {
 800a24e:	3d01      	subs	r5, #1
 800a250:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a254:	d1ef      	bne.n	800a236 <driverHWADCGetLoadVoltage+0x1e>
		};
	};
	
	uint16_t temp = driverHWADCAverageSum/NoOfAverages;
 800a256:	230a      	movs	r3, #10
 800a258:	fbb4 f4f3 	udiv	r4, r4, r3
	*loCurrentLoadVoltage = temp*(3.3f/4096*scalar)+offset;
 800a25c:	b2a4      	uxth	r4, r4
 800a25e:	ee07 4a90 	vmov	s15, r4
 800a262:	eddf 0a08 	vldr	s1, [pc, #32]	; 800a284 <driverHWADCGetLoadVoltage+0x6c>
 800a266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a26a:	ee68 8aa0 	vmul.f32	s17, s17, s1

	return false;
};
 800a26e:	4628      	mov	r0, r5
	*loCurrentLoadVoltage = temp*(3.3f/4096*scalar)+offset;
 800a270:	eea7 8aa8 	vfma.f32	s16, s15, s17
 800a274:	ed86 8a00 	vstr	s16, [r6]
};
 800a278:	ecbd 8b02 	vpop	{d8}
 800a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a27e:	bf00      	nop
 800a280:	20005440 	.word	0x20005440
 800a284:	3a533333 	.word	0x3a533333

0800a288 <driverHWADCGetNTCValue>:
	*chargerVoltage = temp*(3.3f/4096*scalar)+offset;

	return false;
};

bool driverHWADCGetNTCValue(float *ntcValue, uint32_t ntcNominal, uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	4606      	mov	r6, r0
 800a28c:	ed2d 8b06 	vpush	{d8-d10}
	uint32_t driverHWADCAverageSum;
	uint8_t	 driverHWADCAverageCount;
	uint16_t driverHWADCAverage;
	
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_1);
 800a290:	482d      	ldr	r0, [pc, #180]	; (800a348 <driverHWADCGetNTCValue+0xc0>)

	driverHWADCAverageSum = 0;
	for(driverHWADCAverageCount = 0; driverHWADCAverageCount < 5; driverHWADCAverageCount++) {
		HAL_ADC_Start(&hadc1);
 800a292:	4f2d      	ldr	r7, [pc, #180]	; (800a348 <driverHWADCGetNTCValue+0xc0>)
bool driverHWADCGetNTCValue(float *ntcValue, uint32_t ntcNominal, uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a294:	ee08 1a90 	vmov	s17, r1
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_1);
 800a298:	2101      	movs	r1, #1
bool driverHWADCGetNTCValue(float *ntcValue, uint32_t ntcNominal, uint32_t ntcSeriesResistance, uint16_t ntcBetaFactor, float ntcNominalTemp) {
 800a29a:	ee09 2a10 	vmov	s18, r2
 800a29e:	ee08 3a10 	vmov	s16, r3
 800a2a2:	eeb0 aa40 	vmov.f32	s20, s0
	driverHWADCSetInputChannel(&hadc1,ADC_CHANNEL_1);
 800a2a6:	f7ff ff53 	bl	800a150 <driverHWADCSetInputChannel>
 800a2aa:	2505      	movs	r5, #5
	driverHWADCAverageSum = 0;
 800a2ac:	2400      	movs	r4, #0
		HAL_ADC_Start(&hadc1);
 800a2ae:	4826      	ldr	r0, [pc, #152]	; (800a348 <driverHWADCGetNTCValue+0xc0>)
 800a2b0:	f000 ff16 	bl	800b0e0 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 800a2b4:	4824      	ldr	r0, [pc, #144]	; (800a348 <driverHWADCGetNTCValue+0xc0>)
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	f000 ffba 	bl	800b230 <HAL_ADC_PollForConversion>
 800a2bc:	b918      	cbnz	r0, 800a2c6 <driverHWADCGetNTCValue+0x3e>
			driverHWADCAverageSum += HAL_ADC_GetValue(&hadc1);
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f001 f854 	bl	800b36c <HAL_ADC_GetValue>
 800a2c4:	4404      	add	r4, r0
	for(driverHWADCAverageCount = 0; driverHWADCAverageCount < 5; driverHWADCAverageCount++) {
 800a2c6:	3d01      	subs	r5, #1
 800a2c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a2cc:	d1ef      	bne.n	800a2ae <driverHWADCGetNTCValue+0x26>
		};
	};
	
	driverHWADCAverage = driverHWADCAverageSum/5;
 800a2ce:	2305      	movs	r3, #5
 800a2d0:	fbb4 f4f3 	udiv	r4, r4, r3
	
	static float scalar;
	static float steinhart;
	
  scalar = 4095.0f / (float)driverHWADCAverage - 1.0f;
 800a2d4:	b2a4      	uxth	r4, r4
 800a2d6:	ee07 4a90 	vmov	s15, r4
 800a2da:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800a34c <driverHWADCGetNTCValue+0xc4>
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800a2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  scalar = (float)ntcSeriesResistance / scalar;
 800a2ea:	eeb8 9a49 	vcvt.f32.u32	s18, s18
  scalar = 4095.0f / (float)driverHWADCAverage - 1.0f;
 800a2ee:	ee77 7a69 	vsub.f32	s15, s14, s19
  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 800a2f2:	eef8 8a68 	vcvt.f32.u32	s17, s17
  scalar = (float)ntcSeriesResistance / scalar;
 800a2f6:	ee89 7a27 	vdiv.f32	s14, s18, s15
  steinhart = log(steinhart);                           // ln(R/Ro)
 800a2fa:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a2fe:	ee17 0a90 	vmov	r0, s15
 800a302:	f7f7 fc01 	bl	8001b08 <__aeabi_f2d>
 800a306:	ec41 0b10 	vmov	d0, r0, r1
 800a30a:	f008 fdf1 	bl	8012ef0 <log>
 800a30e:	ec51 0b10 	vmov	r0, r1, d0
 800a312:	f7f7 fc71 	bl	8001bf8 <__aeabi_d2f>
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
  steinhart += 1.0f / (ntcNominalTemp + 273.15f);       // + (1/To)
 800a316:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a350 <driverHWADCGetNTCValue+0xc8>
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 800a31a:	ee07 0a90 	vmov	s15, r0
 800a31e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  steinhart += 1.0f / (ntcNominalTemp + 273.15f);       // + (1/To)
 800a322:	ee3a 0a26 	vadd.f32	s0, s20, s13
  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 800a326:	ee87 7a88 	vdiv.f32	s14, s15, s16
  steinhart = 1.0f / steinhart;                         // Invert
  *ntcValue = steinhart - 273.15f;                      // convert to degree


	return false;
};
 800a32a:	4628      	mov	r0, r5
  steinhart += 1.0f / (ntcNominalTemp + 273.15f);       // + (1/To)
 800a32c:	eec9 7a80 	vdiv.f32	s15, s19, s0
 800a330:	ee37 7a27 	vadd.f32	s14, s14, s15
  steinhart = 1.0f / steinhart;                         // Invert
 800a334:	eec9 7a87 	vdiv.f32	s15, s19, s14
};
 800a338:	ecbd 8b06 	vpop	{d8-d10}
  *ntcValue = steinhart - 273.15f;                      // convert to degree
 800a33c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a340:	edc6 7a00 	vstr	s15, [r6]
};
 800a344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a346:	bf00      	nop
 800a348:	20005440 	.word	0x20005440
 800a34c:	457ff000 	.word	0x457ff000
 800a350:	43889333 	.word	0x43889333

0800a354 <driverHWEEPROMVerifyPageFullyErased>:
{
  uint32_t readstatus = 1;
  uint16_t addressvalue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800a354:	4a07      	ldr	r2, [pc, #28]	; (800a374 <driverHWEEPROMVerifyPageFullyErased+0x20>)
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 800a356:	f64f 71ff 	movw	r1, #65535	; 0xffff
  while (Address <= PAGE0_END_ADDRESS)
 800a35a:	4290      	cmp	r0, r2
 800a35c:	d901      	bls.n	800a362 <driverHWEEPROMVerifyPageFullyErased+0xe>
  uint32_t readstatus = 1;
 800a35e:	2001      	movs	r0, #1
 800a360:	4770      	bx	lr
    addressvalue = (*(__IO uint16_t*)Address);
 800a362:	8803      	ldrh	r3, [r0, #0]
 800a364:	b29b      	uxth	r3, r3
    if (addressvalue != ERASED)
 800a366:	428b      	cmp	r3, r1
 800a368:	d101      	bne.n	800a36e <driverHWEEPROMVerifyPageFullyErased+0x1a>
      readstatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 800a36a:	3004      	adds	r0, #4
 800a36c:	e7f5      	b.n	800a35a <driverHWEEPROMVerifyPageFullyErased+0x6>
      readstatus = 0;
 800a36e:	2000      	movs	r0, #0
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
}
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	08000fff 	.word	0x08000fff

0800a378 <driverHWEEPROMVerifyPageFullWriteVariable>:
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */

static uint16_t driverHWEEPROMVerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800a378:	b538      	push	{r3, r4, r5, lr}
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a37a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
{
 800a37e:	4604      	mov	r4, r0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	b298      	uxth	r0, r3
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <driverHWEEPROMVerifyPageFullWriteVariable+0x74>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
{
 800a38a:	460a      	mov	r2, r1
      if (pagestatus1 == VALID_PAGE)
 800a38c:	b983      	cbnz	r3, 800a3b0 <driverHWEEPROMVerifyPageFullWriteVariable+0x38>
          return PAGE0;         /* Page0 valid */
 800a38e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800a392:	1ac3      	subs	r3, r0, r3
 800a394:	bf18      	it	ne
 800a396:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800a398:	f103 1501 	add.w	r5, r3, #65537	; 0x10001

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800a39c:	02db      	lsls	r3, r3, #11
 800a39e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800a3a2:	02ed      	lsls	r5, r5, #11
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800a3a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 800a3a8:	429d      	cmp	r5, r3
 800a3aa:	d308      	bcc.n	800a3be <driverHWEEPROMVerifyPageFullWriteVariable+0x46>
      address = address + 4;
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800a3ac:	2080      	movs	r0, #128	; 0x80
 800a3ae:	e011      	b.n	800a3d4 <driverHWEEPROMVerifyPageFullWriteVariable+0x5c>
      else if (pagestatus0 == VALID_PAGE)
 800a3b0:	b9d0      	cbnz	r0, 800a3e8 <driverHWEEPROMVerifyPageFullWriteVariable+0x70>
          return PAGE0;         /* Page0 valid */
 800a3b2:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 800a3b6:	1a59      	subs	r1, r3, r1
 800a3b8:	424b      	negs	r3, r1
 800a3ba:	414b      	adcs	r3, r1
 800a3bc:	e7ec      	b.n	800a398 <driverHWEEPROMVerifyPageFullWriteVariable+0x20>
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 800a3be:	6829      	ldr	r1, [r5, #0]
 800a3c0:	3101      	adds	r1, #1
 800a3c2:	d10f      	bne.n	800a3e4 <driverHWEEPROMVerifyPageFullWriteVariable+0x6c>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f002 f853 	bl	800c474 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	b108      	cbz	r0, 800a3d6 <driverHWEEPROMVerifyPageFullWriteVariable+0x5e>
        return flashstatus;
 800a3d2:	b280      	uxth	r0, r0
}
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	1ca9      	adds	r1, r5, #2
 800a3da:	2001      	movs	r0, #1
 800a3dc:	f002 f84a 	bl	800c474 <HAL_FLASH_Program>
      return flashstatus;
 800a3e0:	b280      	uxth	r0, r0
 800a3e2:	e7f7      	b.n	800a3d4 <driverHWEEPROMVerifyPageFullWriteVariable+0x5c>
      address = address + 4;
 800a3e4:	3504      	adds	r5, #4
 800a3e6:	e7df      	b.n	800a3a8 <driverHWEEPROMVerifyPageFullWriteVariable+0x30>
    return  NO_VALID_PAGE;
 800a3e8:	20ab      	movs	r0, #171	; 0xab
 800a3ea:	e7f3      	b.n	800a3d4 <driverHWEEPROMVerifyPageFullWriteVariable+0x5c>
 800a3ec:	08001000 	.word	0x08001000

0800a3f0 <driverHWEEPROMFormat>:
{
 800a3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t page_error = 0;
 800a3f2:	2300      	movs	r3, #0
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a3f4:	e9cd 3300 	strd	r3, r3, [sp]
  s_eraseinit.NbPages     = 1;
 800a3f8:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
  if(!driverHWEEPROMVerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a402:	f7ff ffa7 	bl	800a354 <driverHWEEPROMVerifyPageFullyErased>
 800a406:	b198      	cbz	r0, 800a430 <driverHWEEPROMFormat+0x40>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800a408:	2200      	movs	r2, #0
 800a40a:	2300      	movs	r3, #0
 800a40c:	f04f 2108 	mov.w	r1, #134219776	; 0x8000800
 800a410:	2001      	movs	r0, #1
 800a412:	f002 f82f 	bl	800c474 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 800a416:	4604      	mov	r4, r0
 800a418:	b988      	cbnz	r0, 800a43e <driverHWEEPROMFormat+0x4e>
  s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800a41a:	480a      	ldr	r0, [pc, #40]	; (800a444 <driverHWEEPROMFormat+0x54>)
 800a41c:	9002      	str	r0, [sp, #8]
  if(!driverHWEEPROMVerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a41e:	f7ff ff99 	bl	800a354 <driverHWEEPROMVerifyPageFullyErased>
 800a422:	b960      	cbnz	r0, 800a43e <driverHWEEPROMFormat+0x4e>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800a424:	4669      	mov	r1, sp
 800a426:	a801      	add	r0, sp, #4
 800a428:	f002 f898 	bl	800c55c <HAL_FLASHEx_Erase>
 800a42c:	4604      	mov	r4, r0
    if (flashstatus != HAL_OK)
 800a42e:	e006      	b.n	800a43e <driverHWEEPROMFormat+0x4e>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800a430:	4669      	mov	r1, sp
 800a432:	a801      	add	r0, sp, #4
 800a434:	f002 f892 	bl	800c55c <HAL_FLASHEx_Erase>
    if (flashstatus != HAL_OK)
 800a438:	4604      	mov	r4, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0e4      	beq.n	800a408 <driverHWEEPROMFormat+0x18>
}
 800a43e:	4620      	mov	r0, r4
 800a440:	b004      	add	sp, #16
 800a442:	bd10      	pop	{r4, pc}
 800a444:	08001000 	.word	0x08001000

0800a448 <driverHWEEPROMEraseFlash>:
uint16_t driverHWEEPROMEraseFlash(void) {
 800a448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t page_error = 0;
 800a44a:	2300      	movs	r3, #0
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a44c:	e9cd 3300 	strd	r3, r3, [sp]
  s_eraseinit.NbPages     = 2;
 800a450:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800a454:	2302      	movs	r3, #2
	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800a456:	4669      	mov	r1, sp
 800a458:	a801      	add	r0, sp, #4
  s_eraseinit.NbPages     = 2;
 800a45a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800a45e:	f002 f87d 	bl	800c55c <HAL_FLASHEx_Erase>
}
 800a462:	b280      	uxth	r0, r0
 800a464:	b005      	add	sp, #20
 800a466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a46c <driverHWEEPROMReadVariable>:
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a46c:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a470:	4a12      	ldr	r2, [pc, #72]	; (800a4bc <driverHWEEPROMReadVariable+0x50>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a472:	881b      	ldrh	r3, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a474:	8812      	ldrh	r2, [r2, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a476:	b29b      	uxth	r3, r3
{
 800a478:	b510      	push	{r4, lr}
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a47a:	b292      	uxth	r2, r2
      if (pagestatus0 == VALID_PAGE)
 800a47c:	b10b      	cbz	r3, 800a482 <driverHWEEPROMReadVariable+0x16>
      else if (pagestatus1 == VALID_PAGE)
 800a47e:	b9d2      	cbnz	r2, 800a4b6 <driverHWEEPROMReadVariable+0x4a>
        return PAGE1;           /* Page1 valid */
 800a480:	2301      	movs	r3, #1
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800a482:	02da      	lsls	r2, r3, #11
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 800a484:	3301      	adds	r3, #1
 800a486:	b29b      	uxth	r3, r3
 800a488:	02db      	lsls	r3, r3, #11
 800a48a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
  while (address > (PageStartAddress + 2))
 800a48e:	f102 2208 	add.w	r2, r2, #134219776	; 0x8000800
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 800a492:	f203 73fe 	addw	r3, r3, #2046	; 0x7fe
  while (address > (PageStartAddress + 2))
 800a496:	3202      	adds	r2, #2
 800a498:	429a      	cmp	r2, r3
 800a49a:	d301      	bcc.n	800a4a0 <driverHWEEPROMReadVariable+0x34>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 800a49c:	2001      	movs	r0, #1
 800a49e:	e007      	b.n	800a4b0 <driverHWEEPROMReadVariable+0x44>
    addressvalue = (*(__IO uint16_t*)address);
 800a4a0:	881c      	ldrh	r4, [r3, #0]
 800a4a2:	b2a4      	uxth	r4, r4
    if (addressvalue == VirtAddress)
 800a4a4:	4284      	cmp	r4, r0
 800a4a6:	d104      	bne.n	800a4b2 <driverHWEEPROMReadVariable+0x46>
      *Data = (*(__IO uint16_t*)(address - 2));
 800a4a8:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800a4ac:	800b      	strh	r3, [r1, #0]
      readstatus = 0;
 800a4ae:	2000      	movs	r0, #0
}
 800a4b0:	bd10      	pop	{r4, pc}
      address = address - 4;
 800a4b2:	3b04      	subs	r3, #4
 800a4b4:	e7f0      	b.n	800a498 <driverHWEEPROMReadVariable+0x2c>
    return  NO_VALID_PAGE;
 800a4b6:	20ab      	movs	r0, #171	; 0xab
 800a4b8:	e7fa      	b.n	800a4b0 <driverHWEEPROMReadVariable+0x44>
 800a4ba:	bf00      	nop
 800a4bc:	08001000 	.word	0x08001000

0800a4c0 <driverHWEEPROMInit>:
uint16_t driverHWEEPROMInit(uint16_t numberOfVars) {
 800a4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	driverHWEEPROMNumberOfVars = numberOfVars;
 800a4c4:	4d64      	ldr	r5, [pc, #400]	; (800a658 <driverHWEEPROMInit+0x198>)
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a4c6:	4e65      	ldr	r6, [pc, #404]	; (800a65c <driverHWEEPROMInit+0x19c>)
	driverHWEEPROMNumberOfVars = numberOfVars;
 800a4c8:	8028      	strh	r0, [r5, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a4ca:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
uint16_t driverHWEEPROMInit(uint16_t numberOfVars) {
 800a4ce:	b085      	sub	sp, #20
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a4d0:	8804      	ldrh	r4, [r0, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a4d2:	8833      	ldrh	r3, [r6, #0]
  uint32_t page_error = 0;
 800a4d4:	2200      	movs	r2, #0
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a4d6:	b2a4      	uxth	r4, r4
  switch (pagestatus0)
 800a4d8:	f64e 61ee 	movw	r1, #61166	; 0xeeee
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800a4dc:	e9cd 2001 	strd	r2, r0, [sp, #4]
  uint32_t page_error = 0;
 800a4e0:	9200      	str	r2, [sp, #0]
  switch (pagestatus0)
 800a4e2:	428c      	cmp	r4, r1
  s_eraseinit.NbPages     = 1;
 800a4e4:	f04f 0201 	mov.w	r2, #1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a4e8:	b29b      	uxth	r3, r3
  s_eraseinit.NbPages     = 1;
 800a4ea:	9203      	str	r2, [sp, #12]
  switch (pagestatus0)
 800a4ec:	d028      	beq.n	800a540 <driverHWEEPROMInit+0x80>
 800a4ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4f2:	4294      	cmp	r4, r2
 800a4f4:	d005      	beq.n	800a502 <driverHWEEPROMInit+0x42>
 800a4f6:	b90c      	cbnz	r4, 800a4fc <driverHWEEPROMInit+0x3c>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d171      	bne.n	800a5e0 <driverHWEEPROMInit+0x120>
      flashstatus = driverHWEEPROMFormat();
 800a4fc:	f7ff ff78 	bl	800a3f0 <driverHWEEPROMFormat>
 800a500:	e01b      	b.n	800a53a <driverHWEEPROMInit+0x7a>
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800a502:	b943      	cbnz	r3, 800a516 <driverHWEEPROMInit+0x56>
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a504:	f7ff ff26 	bl	800a354 <driverHWEEPROMVerifyPageFullyErased>
 800a508:	2800      	cmp	r0, #0
 800a50a:	f000 80a0 	beq.w	800a64e <driverHWEEPROMInit+0x18e>
  return HAL_OK;
 800a50e:	2000      	movs	r0, #0
}
 800a510:	b005      	add	sp, #20
 800a512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800a516:	428b      	cmp	r3, r1
 800a518:	d1f0      	bne.n	800a4fc <driverHWEEPROMInit+0x3c>
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a51a:	f7ff ff1b 	bl	800a354 <driverHWEEPROMVerifyPageFullyErased>
 800a51e:	b930      	cbnz	r0, 800a52e <driverHWEEPROMInit+0x6e>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800a520:	4669      	mov	r1, sp
 800a522:	a801      	add	r0, sp, #4
 800a524:	f002 f81a 	bl	800c55c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800a528:	b108      	cbz	r0, 800a52e <driverHWEEPROMInit+0x6e>
        return flashstatus;
 800a52a:	b280      	uxth	r0, r0
 800a52c:	e7f0      	b.n	800a510 <driverHWEEPROMInit+0x50>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800a52e:	494b      	ldr	r1, [pc, #300]	; (800a65c <driverHWEEPROMInit+0x19c>)
 800a530:	2200      	movs	r2, #0
 800a532:	2300      	movs	r3, #0
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a534:	2001      	movs	r0, #1
 800a536:	f001 ff9d 	bl	800c474 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0e7      	beq.n	800a50e <driverHWEEPROMInit+0x4e>
 800a53e:	e7f4      	b.n	800a52a <driverHWEEPROMInit+0x6a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800a540:	2b00      	cmp	r3, #0
 800a542:	d045      	beq.n	800a5d0 <driverHWEEPROMInit+0x110>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 800a544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a548:	4293      	cmp	r3, r2
 800a54a:	d1d7      	bne.n	800a4fc <driverHWEEPROMInit+0x3c>
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a54c:	4630      	mov	r0, r6
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800a54e:	9602      	str	r6, [sp, #8]
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a550:	f7ff ff00 	bl	800a354 <driverHWEEPROMVerifyPageFullyErased>
 800a554:	b928      	cbnz	r0, 800a562 <driverHWEEPROMInit+0xa2>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800a556:	4669      	mov	r1, sp
 800a558:	a801      	add	r0, sp, #4
 800a55a:	f001 ffff 	bl	800c55c <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800a55e:	2800      	cmp	r0, #0
 800a560:	d1e3      	bne.n	800a52a <driverHWEEPROMInit+0x6a>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	f04f 2108 	mov.w	r1, #134219776	; 0x8000800
 800a56a:	e7e3      	b.n	800a534 <driverHWEEPROMInit+0x74>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == driverHWEEPROMVirtAddVarTab[varidx])
 800a56c:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800a570:	b2a6      	uxth	r6, r4
 800a572:	f8d9 2000 	ldr.w	r2, [r9]
 800a576:	88db      	ldrh	r3, [r3, #6]
 800a578:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	4283      	cmp	r3, r0
            x = varidx;
 800a580:	bf08      	it	eq
 800a582:	b227      	sxtheq	r7, r4
          if (varidx != x)
 800a584:	42be      	cmp	r6, r7
 800a586:	d113      	bne.n	800a5b0 <driverHWEEPROMInit+0xf0>
        for (varidx = 0; varidx < driverHWEEPROMNumberOfVars; varidx++)
 800a588:	3401      	adds	r4, #1
 800a58a:	882a      	ldrh	r2, [r5, #0]
 800a58c:	b2a3      	uxth	r3, r4
 800a58e:	429a      	cmp	r2, r3
 800a590:	d8ec      	bhi.n	800a56c <driverHWEEPROMInit+0xac>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800a592:	2200      	movs	r2, #0
 800a594:	2300      	movs	r3, #0
 800a596:	f04f 2108 	mov.w	r1, #134219776	; 0x8000800
 800a59a:	2001      	movs	r0, #1
 800a59c:	f001 ff6a 	bl	800c474 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1c2      	bne.n	800a52a <driverHWEEPROMInit+0x6a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a5a4:	9001      	str	r0, [sp, #4]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800a5a6:	482d      	ldr	r0, [pc, #180]	; (800a65c <driverHWEEPROMInit+0x19c>)
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800a5a8:	9002      	str	r0, [sp, #8]
        s_eraseinit.NbPages     = 1;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	9303      	str	r3, [sp, #12]
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800a5ae:	e7a9      	b.n	800a504 <driverHWEEPROMInit+0x44>
            readstatus = driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[varidx], &DataVar);
 800a5b0:	492b      	ldr	r1, [pc, #172]	; (800a660 <driverHWEEPROMInit+0x1a0>)
 800a5b2:	f7ff ff5b 	bl	800a46c <driverHWEEPROMReadVariable>
            if (readstatus != 0x1)
 800a5b6:	2801      	cmp	r0, #1
 800a5b8:	d0e6      	beq.n	800a588 <driverHWEEPROMInit+0xc8>
              eepromstatus = driverHWEEPROMVerifyPageFullWriteVariable(driverHWEEPROMVirtAddVarTab[varidx], DataVar);
 800a5ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a5be:	f8b8 1000 	ldrh.w	r1, [r8]
 800a5c2:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800a5c6:	f7ff fed7 	bl	800a378 <driverHWEEPROMVerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0dc      	beq.n	800a588 <driverHWEEPROMInit+0xc8>
 800a5ce:	e79f      	b.n	800a510 <driverHWEEPROMInit+0x50>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == driverHWEEPROMVirtAddVarTab[varidx])
 800a5d0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a664 <driverHWEEPROMInit+0x1a4>
            readstatus = driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[varidx], &DataVar);
 800a5d4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800a660 <driverHWEEPROMInit+0x1a0>
 800a5d8:	461c      	mov	r4, r3
  int16_t x = -1;
 800a5da:	f04f 37ff 	mov.w	r7, #4294967295
 800a5de:	e7d4      	b.n	800a58a <driverHWEEPROMInit+0xca>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d12f      	bne.n	800a644 <driverHWEEPROMInit+0x184>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800a5e4:	9602      	str	r6, [sp, #8]
        if(!driverHWEEPROMVerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	e78c      	b.n	800a504 <driverHWEEPROMInit+0x44>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == driverHWEEPROMVirtAddVarTab[varidx])
 800a5ea:	b2a7      	uxth	r7, r4
 800a5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a5f0:	88f3      	ldrh	r3, [r6, #6]
 800a5f2:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4283      	cmp	r3, r0
            x = varidx;
 800a5fa:	bf08      	it	eq
 800a5fc:	fa0f f884 	sxtheq.w	r8, r4
          if (varidx != x)
 800a600:	45b8      	cmp	r8, r7
 800a602:	d110      	bne.n	800a626 <driverHWEEPROMInit+0x166>
        for (varidx = 0; varidx < driverHWEEPROMNumberOfVars; varidx++)
 800a604:	3401      	adds	r4, #1
 800a606:	882a      	ldrh	r2, [r5, #0]
 800a608:	b2a3      	uxth	r3, r4
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d8ed      	bhi.n	800a5ea <driverHWEEPROMInit+0x12a>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800a60e:	4913      	ldr	r1, [pc, #76]	; (800a65c <driverHWEEPROMInit+0x19c>)
 800a610:	2200      	movs	r2, #0
 800a612:	2300      	movs	r3, #0
 800a614:	2001      	movs	r0, #1
 800a616:	f001 ff2d 	bl	800c474 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d185      	bne.n	800a52a <driverHWEEPROMInit+0x6a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a61e:	9001      	str	r0, [sp, #4]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800a620:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
 800a624:	e7c0      	b.n	800a5a8 <driverHWEEPROMInit+0xe8>
            readstatus = driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[varidx], &DataVar);
 800a626:	490e      	ldr	r1, [pc, #56]	; (800a660 <driverHWEEPROMInit+0x1a0>)
 800a628:	f7ff ff20 	bl	800a46c <driverHWEEPROMReadVariable>
            if (readstatus != 0x1)
 800a62c:	2801      	cmp	r0, #1
 800a62e:	d0e9      	beq.n	800a604 <driverHWEEPROMInit+0x144>
              eepromstatus = driverHWEEPROMVerifyPageFullWriteVariable(driverHWEEPROMVirtAddVarTab[varidx], DataVar);
 800a630:	f8d9 3000 	ldr.w	r3, [r9]
 800a634:	8809      	ldrh	r1, [r1, #0]
 800a636:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 800a63a:	f7ff fe9d 	bl	800a378 <driverHWEEPROMVerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0e0      	beq.n	800a604 <driverHWEEPROMInit+0x144>
 800a642:	e765      	b.n	800a510 <driverHWEEPROMInit+0x50>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == driverHWEEPROMVirtAddVarTab[varidx])
 800a644:	f8df 901c 	ldr.w	r9, [pc, #28]	; 800a664 <driverHWEEPROMInit+0x1a4>
  int16_t x = -1;
 800a648:	f04f 38ff 	mov.w	r8, #4294967295
 800a64c:	e7db      	b.n	800a606 <driverHWEEPROMInit+0x146>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800a64e:	4669      	mov	r1, sp
 800a650:	a801      	add	r0, sp, #4
 800a652:	f001 ff83 	bl	800c55c <HAL_FLASHEx_Erase>
 800a656:	e770      	b.n	800a53a <driverHWEEPROMInit+0x7a>
 800a658:	20005496 	.word	0x20005496
 800a65c:	08001000 	.word	0x08001000
 800a660:	20005494 	.word	0x20005494
 800a664:	20004be4 	.word	0x20004be4

0800a668 <driverHWEEPROMWriteVariable>:
{
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	b085      	sub	sp, #20
 800a66e:	4606      	mov	r6, r0
 800a670:	4688      	mov	r8, r1
  Status = driverHWEEPROMVerifyPageFullWriteVariable(VirtAddress, Data);
 800a672:	f7ff fe81 	bl	800a378 <driverHWEEPROMVerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 800a676:	2880      	cmp	r0, #128	; 0x80
  Status = driverHWEEPROMVerifyPageFullWriteVariable(VirtAddress, Data);
 800a678:	4604      	mov	r4, r0
  if (Status == PAGE_FULL)
 800a67a:	d13d      	bne.n	800a6f8 <driverHWEEPROMWriteVariable+0x90>
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	9300      	str	r3, [sp, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a680:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a684:	4d2d      	ldr	r5, [pc, #180]	; (800a73c <driverHWEEPROMWriteVariable+0xd4>)
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a686:	8819      	ldrh	r1, [r3, #0]
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a688:	882a      	ldrh	r2, [r5, #0]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800a68a:	b289      	uxth	r1, r1
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800a68c:	b292      	uxth	r2, r2
      if (pagestatus0 == VALID_PAGE)
 800a68e:	b169      	cbz	r1, 800a6ac <driverHWEEPROMWriteVariable+0x44>
      else if (pagestatus1 == VALID_PAGE)
 800a690:	2a00      	cmp	r2, #0
 800a692:	d151      	bne.n	800a738 <driverHWEEPROMWriteVariable+0xd0>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_BASE_ADDRESS;
 800a694:	462f      	mov	r7, r5
    newpageaddress = PAGE0_BASE_ADDRESS;
 800a696:	461d      	mov	r5, r3
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 800a698:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800a69c:	2300      	movs	r3, #0
 800a69e:	4629      	mov	r1, r5
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	f001 fee7 	bl	800c474 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800a6a6:	b118      	cbz	r0, 800a6b0 <driverHWEEPROMWriteVariable+0x48>
  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
  {
    return flashstatus;
 800a6a8:	b284      	uxth	r4, r0
 800a6aa:	e025      	b.n	800a6f8 <driverHWEEPROMWriteVariable+0x90>
    oldpageid = PAGE0_BASE_ADDRESS;
 800a6ac:	461f      	mov	r7, r3
 800a6ae:	e7f3      	b.n	800a698 <driverHWEEPROMWriteVariable+0x30>
  eepromstatus = driverHWEEPROMVerifyPageFullWriteVariable(VirtAddress, Data);
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7ff fe60 	bl	800a378 <driverHWEEPROMVerifyPageFullWriteVariable>
  if (eepromstatus != HAL_OK)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	b9e8      	cbnz	r0, 800a6f8 <driverHWEEPROMWriteVariable+0x90>
    if (driverHWEEPROMVirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800a6bc:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a748 <driverHWEEPROMWriteVariable+0xe0>
      readstatus = driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[varidx], &DataVar);
 800a6c0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800a744 <driverHWEEPROMWriteVariable+0xdc>
 800a6c4:	4682      	mov	sl, r0
  for (varidx = 0; varidx < driverHWEEPROMNumberOfVars; varidx++)
 800a6c6:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <driverHWEEPROMWriteVariable+0xd8>)
 800a6c8:	881a      	ldrh	r2, [r3, #0]
 800a6ca:	fa1f f38a 	uxth.w	r3, sl
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d816      	bhi.n	800a700 <driverHWEEPROMWriteVariable+0x98>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a6d2:	2300      	movs	r3, #0
  s_eraseinit.NbPages     = 1;
 800a6d4:	2601      	movs	r6, #1
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 800a6d6:	4669      	mov	r1, sp
 800a6d8:	a801      	add	r0, sp, #4
  s_eraseinit.PageAddress = oldpageid;
 800a6da:	e9cd 3701 	strd	r3, r7, [sp, #4]
  s_eraseinit.NbPages     = 1;
 800a6de:	9603      	str	r6, [sp, #12]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 800a6e0:	f001 ff3c 	bl	800c55c <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d1df      	bne.n	800a6a8 <driverHWEEPROMWriteVariable+0x40>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	f001 fec0 	bl	800c474 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1d7      	bne.n	800a6a8 <driverHWEEPROMWriteVariable+0x40>
}
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	b005      	add	sp, #20
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (driverHWEEPROMVirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800a700:	f8db 2000 	ldr.w	r2, [fp]
 800a704:	fa1f f88a 	uxth.w	r8, sl
 800a708:	f832 0018 	ldrh.w	r0, [r2, r8, lsl #1]
 800a70c:	4286      	cmp	r6, r0
 800a70e:	d102      	bne.n	800a716 <driverHWEEPROMWriteVariable+0xae>
  for (varidx = 0; varidx < driverHWEEPROMNumberOfVars; varidx++)
 800a710:	f10a 0a01 	add.w	sl, sl, #1
 800a714:	e7d7      	b.n	800a6c6 <driverHWEEPROMWriteVariable+0x5e>
      readstatus = driverHWEEPROMReadVariable(driverHWEEPROMVirtAddVarTab[varidx], &DataVar);
 800a716:	490b      	ldr	r1, [pc, #44]	; (800a744 <driverHWEEPROMWriteVariable+0xdc>)
 800a718:	f7ff fea8 	bl	800a46c <driverHWEEPROMReadVariable>
      if (readstatus != 0x1)
 800a71c:	2801      	cmp	r0, #1
 800a71e:	d0f7      	beq.n	800a710 <driverHWEEPROMWriteVariable+0xa8>
        eepromstatus = driverHWEEPROMVerifyPageFullWriteVariable(driverHWEEPROMVirtAddVarTab[varidx], DataVar);
 800a720:	f8db 2000 	ldr.w	r2, [fp]
 800a724:	f8b9 1000 	ldrh.w	r1, [r9]
 800a728:	f832 0018 	ldrh.w	r0, [r2, r8, lsl #1]
 800a72c:	f7ff fe24 	bl	800a378 <driverHWEEPROMVerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 800a730:	2800      	cmp	r0, #0
 800a732:	d0ed      	beq.n	800a710 <driverHWEEPROMWriteVariable+0xa8>
 800a734:	4604      	mov	r4, r0
 800a736:	e7df      	b.n	800a6f8 <driverHWEEPROMWriteVariable+0x90>
    return NO_VALID_PAGE;       /* No valid Page */
 800a738:	24ab      	movs	r4, #171	; 0xab
 800a73a:	e7dd      	b.n	800a6f8 <driverHWEEPROMWriteVariable+0x90>
 800a73c:	08001000 	.word	0x08001000
 800a740:	20005496 	.word	0x20005496
 800a744:	20005494 	.word	0x20005494
 800a748:	20004be4 	.word	0x20004be4

0800a74c <driverHWI2C1Init>:
{
	{GPIOB,RCC_AHBENR_GPIOBEN,GPIO_PIN_6,GPIO_MODE_AF_OD,GPIO_PULLUP,GPIO_AF4_I2C1},			// OLED_SCL
	{GPIOB,RCC_AHBENR_GPIOBEN,GPIO_PIN_7,GPIO_MODE_AF_OD,GPIO_PULLUP,GPIO_AF4_I2C1}				// OLED_SDA
};

void driverHWI2C1Init(void) {
 800a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef PortInitHolder;
	uint8_t PortPointer;
	
	for(PortPointer = 0; PortPointer < NoOfI2C1Ports; PortPointer++) {
		RCC->AHBENR |= driverHWI2C1Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a750:	4c24      	ldr	r4, [pc, #144]	; (800a7e4 <driverHWI2C1Init+0x98>)
		PortInitHolder.Mode = driverHWI2C1Ports[PortPointer].Mode;								// Push pull output
		PortInitHolder.Pin = driverHWI2C1Ports[PortPointer].Pin;									// Points to status pin
		PortInitHolder.Pull = driverHWI2C1Ports[PortPointer].Pull;								// No pullup
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
		PortInitHolder.Alternate = driverHWI2C1Ports[PortPointer].Alternate;			// Alternate function
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a752:	4825      	ldr	r0, [pc, #148]	; (800a7e8 <driverHWI2C1Init+0x9c>)
		RCC->AHBENR |= driverHWI2C1Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a754:	6963      	ldr	r3, [r4, #20]
void driverHWI2C1Init(void) {
 800a756:	b086      	sub	sp, #24
		PortInitHolder.Alternate = driverHWI2C1Ports[PortPointer].Alternate;			// Alternate function
 800a758:	2604      	movs	r6, #4
		RCC->AHBENR |= driverHWI2C1Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a75a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a75e:	6163      	str	r3, [r4, #20]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a760:	2501      	movs	r5, #1
		PortInitHolder.Pin = driverHWI2C1Ports[PortPointer].Pin;									// Points to status pin
 800a762:	2340      	movs	r3, #64	; 0x40
 800a764:	f04f 0812 	mov.w	r8, #18
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a768:	2703      	movs	r7, #3
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a76a:	eb0d 0106 	add.w	r1, sp, r6
		PortInitHolder.Pin = driverHWI2C1Ports[PortPointer].Pin;									// Points to status pin
 800a76e:	e9cd 3801 	strd	r3, r8, [sp, #4]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a772:	e9cd 5703 	strd	r5, r7, [sp, #12]
		PortInitHolder.Alternate = driverHWI2C1Ports[PortPointer].Alternate;			// Alternate function
 800a776:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a778:	f001 ff3e 	bl	800c5f8 <HAL_GPIO_Init>
		RCC->AHBENR |= driverHWI2C1Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a77c:	6963      	ldr	r3, [r4, #20]
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a77e:	481a      	ldr	r0, [pc, #104]	; (800a7e8 <driverHWI2C1Init+0x9c>)
		RCC->AHBENR |= driverHWI2C1Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a784:	6163      	str	r3, [r4, #20]
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a786:	eb0d 0106 	add.w	r1, sp, r6
		PortInitHolder.Pin = driverHWI2C1Ports[PortPointer].Pin;									// Points to status pin
 800a78a:	2380      	movs	r3, #128	; 0x80
 800a78c:	9301      	str	r3, [sp, #4]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a78e:	e9cd 5703 	strd	r5, r7, [sp, #12]
		PortInitHolder.Mode = driverHWI2C1Ports[PortPointer].Mode;								// Push pull output
 800a792:	f8cd 8008 	str.w	r8, [sp, #8]
		PortInitHolder.Alternate = driverHWI2C1Ports[PortPointer].Alternate;			// Alternate function
 800a796:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(driverHWI2C1Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a798:	f001 ff2e 	bl	800c5f8 <HAL_GPIO_Init>
	};
	
	__I2C1_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a79c:	69e3      	ldr	r3, [r4, #28]
	
  driverHWI2C1.Instance = I2C1;
  driverHWI2C1.Init.Timing = 0x10808DD3;																			// 200kHz: 0x00705CFF, 110khz: 10808DD3 SYSClock 72MHz
 800a79e:	4a13      	ldr	r2, [pc, #76]	; (800a7ec <driverHWI2C1Init+0xa0>)
	__I2C1_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a7a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7a4:	61e3      	str	r3, [r4, #28]
 800a7a6:	69e3      	ldr	r3, [r4, #28]
  driverHWI2C1.Instance = I2C1;
 800a7a8:	4c11      	ldr	r4, [pc, #68]	; (800a7f0 <driverHWI2C1Init+0xa4>)
	__I2C1_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a7aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	9b00      	ldr	r3, [sp, #0]
  driverHWI2C1.Init.Timing = 0x10808DD3;																			// 200kHz: 0x00705CFF, 110khz: 10808DD3 SYSClock 72MHz
 800a7b2:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <driverHWI2C1Init+0xa8>)
  driverHWI2C1.Init.OwnAddress2 = 0;
  driverHWI2C1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  driverHWI2C1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  driverHWI2C1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

  if (HAL_I2C_Init(&driverHWI2C1) != HAL_OK)
 800a7b4:	4620      	mov	r0, r4
  driverHWI2C1.Init.Timing = 0x10808DD3;																			// 200kHz: 0x00705CFF, 110khz: 10808DD3 SYSClock 72MHz
 800a7b6:	e9c4 2300 	strd	r2, r3, [r4]
  driverHWI2C1.Init.OwnAddress1 = 0;
 800a7ba:	2300      	movs	r3, #0
  driverHWI2C1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7bc:	e9c4 3502 	strd	r3, r5, [r4, #8]
  driverHWI2C1.Init.OwnAddress2 = 0;
 800a7c0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  driverHWI2C1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a7c4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  driverHWI2C1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a7c8:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&driverHWI2C1) != HAL_OK)
 800a7ca:	f002 f994 	bl	800caf6 <HAL_I2C_Init>
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	b100      	cbz	r0, 800a7d4 <driverHWI2C1Init+0x88>
  {
    while(true){
 800a7d2:	e7fe      	b.n	800a7d2 <driverHWI2C1Init+0x86>
		};
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&driverHWI2C1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f002 fb12 	bl	800cdfe <HAL_I2CEx_ConfigAnalogFilter>
 800a7da:	b100      	cbz	r0, 800a7de <driverHWI2C1Init+0x92>
  {
    while(true){
 800a7dc:	e7fe      	b.n	800a7dc <driverHWI2C1Init+0x90>
			// Handle error state
		};
  }
};
 800a7de:	b006      	add	sp, #24
 800a7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	48000400 	.word	0x48000400
 800a7ec:	40005400 	.word	0x40005400
 800a7f0:	20005498 	.word	0x20005498
 800a7f4:	10808dd3 	.word	0x10808dd3

0800a7f8 <driverHWI2C1Write>:

bool driverHWI2C1Write(uint16_t DevAddress, bool readWrite, uint8_t *pData, uint16_t Size) {
 800a7f8:	b507      	push	{r0, r1, r2, lr}
	uint16_t addresRW = (DevAddress << 1) | readWrite;
 800a7fa:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	
	return HAL_I2C_Master_Transmit(&driverHWI2C1,addresRW,pData,Size,5);
 800a7fe:	2005      	movs	r0, #5
 800a800:	9000      	str	r0, [sp, #0]
 800a802:	b289      	uxth	r1, r1
 800a804:	4804      	ldr	r0, [pc, #16]	; (800a818 <driverHWI2C1Write+0x20>)
 800a806:	f002 f9c4 	bl	800cb92 <HAL_I2C_Master_Transmit>
};
 800a80a:	3800      	subs	r0, #0
 800a80c:	bf18      	it	ne
 800a80e:	2001      	movne	r0, #1
 800a810:	b003      	add	sp, #12
 800a812:	f85d fb04 	ldr.w	pc, [sp], #4
 800a816:	bf00      	nop
 800a818:	20005498 	.word	0x20005498

0800a81c <driverHWI2C1Read>:

bool driverHWI2C1Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size) {
 800a81c:	b507      	push	{r0, r1, r2, lr}
	uint16_t addresRW = (DevAddress << 1) | 0x01; // Read bit high
 800a81e:	0040      	lsls	r0, r0, #1
bool driverHWI2C1Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size) {
 800a820:	4613      	mov	r3, r2
	uint16_t addresRW = (DevAddress << 1) | 0x01; // Read bit high
 800a822:	f040 0001 	orr.w	r0, r0, #1
	
	return HAL_I2C_Master_Receive(&driverHWI2C1,addresRW,pData,Size,5);
 800a826:	2205      	movs	r2, #5
 800a828:	9200      	str	r2, [sp, #0]
 800a82a:	460a      	mov	r2, r1
 800a82c:	b281      	uxth	r1, r0
 800a82e:	4804      	ldr	r0, [pc, #16]	; (800a840 <driverHWI2C1Read+0x24>)
 800a830:	f002 fa4a 	bl	800ccc8 <HAL_I2C_Master_Receive>
};
 800a834:	3800      	subs	r0, #0
 800a836:	bf18      	it	ne
 800a838:	2001      	movne	r0, #1
 800a83a:	b003      	add	sp, #12
 800a83c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a840:	20005498 	.word	0x20005498

0800a844 <driverHWI2C2Init>:
{
	{GPIOA,RCC_AHBENR_GPIOAEN,GPIO_PIN_9,GPIO_MODE_AF_OD,GPIO_PULLUP,GPIO_AF4_I2C2},				// ISL_SCL
	{GPIOA,RCC_AHBENR_GPIOAEN,GPIO_PIN_10,GPIO_MODE_AF_OD,GPIO_PULLUP,GPIO_AF4_I2C2}				// ISL_SDA
};

void driverHWI2C2Init(void) {
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef PortInitHolder;
	uint8_t PortPointer;
	
	for(PortPointer = 0; PortPointer < NoOfI2C2Ports; PortPointer++) {
		RCC->AHBENR |= driverHWI2C2Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a848:	4c26      	ldr	r4, [pc, #152]	; (800a8e4 <driverHWI2C2Init+0xa0>)
 800a84a:	6963      	ldr	r3, [r4, #20]
void driverHWI2C2Init(void) {
 800a84c:	b086      	sub	sp, #24
		PortInitHolder.Mode = driverHWI2C2Ports[PortPointer].Mode;								// Push pull output
		PortInitHolder.Pin = driverHWI2C2Ports[PortPointer].Pin;									// Points to status pin
		PortInitHolder.Pull = driverHWI2C2Ports[PortPointer].Pull;								// No pullup
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
		PortInitHolder.Alternate = driverHWI2C2Ports[PortPointer].Alternate;			// Alternate function
 800a84e:	2604      	movs	r6, #4
		RCC->AHBENR |= driverHWI2C2Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a854:	6163      	str	r3, [r4, #20]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a856:	2501      	movs	r5, #1
		PortInitHolder.Pin = driverHWI2C2Ports[PortPointer].Pin;									// Points to status pin
 800a858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a85c:	f04f 0812 	mov.w	r8, #18
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a860:	2703      	movs	r7, #3
		HAL_GPIO_Init(driverHWI2C2Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a862:	eb0d 0106 	add.w	r1, sp, r6
 800a866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		PortInitHolder.Pin = driverHWI2C2Ports[PortPointer].Pin;									// Points to status pin
 800a86a:	e9cd 3801 	strd	r3, r8, [sp, #4]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a86e:	e9cd 5703 	strd	r5, r7, [sp, #12]
		PortInitHolder.Alternate = driverHWI2C2Ports[PortPointer].Alternate;			// Alternate function
 800a872:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(driverHWI2C2Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a874:	f001 fec0 	bl	800c5f8 <HAL_GPIO_Init>
		RCC->AHBENR |= driverHWI2C2Ports[PortPointer].ClkRegister;								// Enable clock de desired port
 800a878:	6963      	ldr	r3, [r4, #20]
 800a87a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a87e:	6163      	str	r3, [r4, #20]
		HAL_GPIO_Init(driverHWI2C2Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a880:	eb0d 0106 	add.w	r1, sp, r6
		PortInitHolder.Pin = driverHWI2C2Ports[PortPointer].Pin;									// Points to status pin
 800a884:	f44f 6380 	mov.w	r3, #1024	; 0x400
		HAL_GPIO_Init(driverHWI2C2Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		PortInitHolder.Pin = driverHWI2C2Ports[PortPointer].Pin;									// Points to status pin
 800a88c:	9301      	str	r3, [sp, #4]
		PortInitHolder.Speed = GPIO_SPEED_HIGH;																		// GPIO clock speed
 800a88e:	e9cd 5703 	strd	r5, r7, [sp, #12]
		PortInitHolder.Mode = driverHWI2C2Ports[PortPointer].Mode;								// Push pull output
 800a892:	f8cd 8008 	str.w	r8, [sp, #8]
		PortInitHolder.Alternate = driverHWI2C2Ports[PortPointer].Alternate;			// Alternate function
 800a896:	9605      	str	r6, [sp, #20]
		HAL_GPIO_Init(driverHWI2C2Ports[PortPointer].Port,&PortInitHolder);				// Perform the IO init 
 800a898:	f001 feae 	bl	800c5f8 <HAL_GPIO_Init>
	};
	
	__I2C2_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a89c:	69e3      	ldr	r3, [r4, #28]
	
  driverHWI2C2.Instance = I2C2;
  driverHWI2C2.Init.Timing = 0x00705CFF;																			// 200kHz SYSClock 72MHz
 800a89e:	4a12      	ldr	r2, [pc, #72]	; (800a8e8 <driverHWI2C2Init+0xa4>)
	__I2C2_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a8a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a8a4:	61e3      	str	r3, [r4, #28]
 800a8a6:	69e3      	ldr	r3, [r4, #28]
  driverHWI2C2.Instance = I2C2;
 800a8a8:	4c10      	ldr	r4, [pc, #64]	; (800a8ec <driverHWI2C2Init+0xa8>)
	__I2C2_CLK_ENABLE();																												// Enable clock source of I2C Master
 800a8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	9b00      	ldr	r3, [sp, #0]
  driverHWI2C2.Init.Timing = 0x00705CFF;																			// 200kHz SYSClock 72MHz
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <driverHWI2C2Init+0xac>)
  driverHWI2C2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  driverHWI2C2.Init.OwnAddress2 = 0;
  driverHWI2C2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  driverHWI2C2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  driverHWI2C2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&driverHWI2C2) != HAL_OK)
 800a8b4:	4620      	mov	r0, r4
  driverHWI2C2.Init.Timing = 0x00705CFF;																			// 200kHz SYSClock 72MHz
 800a8b6:	e9c4 2300 	strd	r2, r3, [r4]
  driverHWI2C2.Init.OwnAddress1 = 0;
 800a8ba:	2300      	movs	r3, #0
  driverHWI2C2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a8bc:	e9c4 3502 	strd	r3, r5, [r4, #8]
  driverHWI2C2.Init.OwnAddress2 = 0;
 800a8c0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  driverHWI2C2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a8c4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  driverHWI2C2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a8c8:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&driverHWI2C2) != HAL_OK)
 800a8ca:	f002 f914 	bl	800caf6 <HAL_I2C_Init>
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	b100      	cbz	r0, 800a8d4 <driverHWI2C2Init+0x90>
  {
    while(true){
 800a8d2:	e7fe      	b.n	800a8d2 <driverHWI2C2Init+0x8e>
		};
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&driverHWI2C2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f002 fa92 	bl	800cdfe <HAL_I2CEx_ConfigAnalogFilter>
 800a8da:	b100      	cbz	r0, 800a8de <driverHWI2C2Init+0x9a>
  {
    while(true){
 800a8dc:	e7fe      	b.n	800a8dc <driverHWI2C2Init+0x98>
			// Handle error state
		};
  }
};
 800a8de:	b006      	add	sp, #24
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	40005800 	.word	0x40005800
 800a8ec:	200054e4 	.word	0x200054e4
 800a8f0:	00705cff 	.word	0x00705cff

0800a8f4 <driverHWI2C2Write>:

bool driverHWI2C2Write(uint16_t DevAddress, bool readWrite, uint8_t *pData, uint16_t Size) {
 800a8f4:	b507      	push	{r0, r1, r2, lr}
	uint16_t addresRW = (DevAddress << 1) | readWrite;
 800a8f6:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	
	HAL_I2C_Master_Transmit(&driverHWI2C2,addresRW,pData,Size,100);
 800a8fa:	2064      	movs	r0, #100	; 0x64
 800a8fc:	9000      	str	r0, [sp, #0]
 800a8fe:	b289      	uxth	r1, r1
 800a900:	4803      	ldr	r0, [pc, #12]	; (800a910 <driverHWI2C2Write+0x1c>)
 800a902:	f002 f946 	bl	800cb92 <HAL_I2C_Master_Transmit>
	return false;
};
 800a906:	2000      	movs	r0, #0
 800a908:	b003      	add	sp, #12
 800a90a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a90e:	bf00      	nop
 800a910:	200054e4 	.word	0x200054e4

0800a914 <driverHWI2C2Read>:

bool driverHWI2C2Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size) {
 800a914:	b507      	push	{r0, r1, r2, lr}
	uint16_t addresRW = (DevAddress << 1) | 0x01; // Read bit high
 800a916:	0040      	lsls	r0, r0, #1
bool driverHWI2C2Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size) {
 800a918:	4613      	mov	r3, r2
	uint16_t addresRW = (DevAddress << 1) | 0x01; // Read bit high
 800a91a:	f040 0001 	orr.w	r0, r0, #1
	
	HAL_I2C_Master_Receive(&driverHWI2C2,addresRW,pData,Size,100);
 800a91e:	2264      	movs	r2, #100	; 0x64
 800a920:	9200      	str	r2, [sp, #0]
 800a922:	460a      	mov	r2, r1
 800a924:	b281      	uxth	r1, r0
 800a926:	4803      	ldr	r0, [pc, #12]	; (800a934 <driverHWI2C2Read+0x20>)
 800a928:	f002 f9ce 	bl	800ccc8 <HAL_I2C_Master_Receive>
	return false;
};
 800a92c:	2000      	movs	r0, #0
 800a92e:	b003      	add	sp, #12
 800a930:	f85d fb04 	ldr.w	pc, [sp], #4
 800a934:	200054e4 	.word	0x200054e4

0800a938 <driverHWPowerStateInit>:
	{GPIOB,RCC_AHBENR_GPIOBEN,GPIO_PIN_5,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL},		// P_STAT_POWER_ENABLE
	{GPIOB,RCC_AHBENR_GPIOBEN,GPIO_PIN_4,GPIO_MODE_INPUT,GPIO_PULLUP},				// P_STAT_BUTTON_INPUT
	{GPIOC,RCC_AHBENR_GPIOCEN,GPIO_PIN_14,GPIO_MODE_INPUT,GPIO_PULLUP}				// P_STAT_CHARGE_DETECT
};

void driverHWPowerStateInit(void) {
 800a938:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef PowerStatePortHolder;
	uint8_t STATPointer;
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a93a:	4c25      	ldr	r4, [pc, #148]	; (800a9d0 <driverHWPowerStateInit+0x98>)
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
		PowerStatePortHolder.Mode = driverHWPorts[STATPointer].Mode;					// Push pull output
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
		PowerStatePortHolder.Pull = driverHWPorts[STATPointer].Pull;					// No pullup
		PowerStatePortHolder.Speed = GPIO_SPEED_HIGH;													// GPIO clock speed
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a93c:	4825      	ldr	r0, [pc, #148]	; (800a9d4 <driverHWPowerStateInit+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a93e:	6963      	ldr	r3, [r4, #20]
 800a940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a944:	6163      	str	r3, [r4, #20]
 800a946:	6963      	ldr	r3, [r4, #20]
void driverHWPowerStateInit(void) {
 800a948:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a952:	6963      	ldr	r3, [r4, #20]
 800a954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a958:	6163      	str	r3, [r4, #20]
 800a95a:	6963      	ldr	r3, [r4, #20]
 800a95c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();	
 800a964:	6963      	ldr	r3, [r4, #20]
 800a966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a96a:	6163      	str	r3, [r4, #20]
 800a96c:	6963      	ldr	r3, [r4, #20]
 800a96e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	9b02      	ldr	r3, [sp, #8]
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
 800a976:	6963      	ldr	r3, [r4, #20]
 800a978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a97c:	6163      	str	r3, [r4, #20]
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a97e:	2601      	movs	r6, #1
		PowerStatePortHolder.Speed = GPIO_SPEED_HIGH;													// GPIO clock speed
 800a980:	2700      	movs	r7, #0
 800a982:	2503      	movs	r5, #3
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a984:	2320      	movs	r3, #32
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a986:	a903      	add	r1, sp, #12
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a988:	e9cd 3603 	strd	r3, r6, [sp, #12]
		PowerStatePortHolder.Speed = GPIO_SPEED_HIGH;													// GPIO clock speed
 800a98c:	e9cd 7505 	strd	r7, r5, [sp, #20]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a990:	f001 fe32 	bl	800c5f8 <HAL_GPIO_Init>
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
 800a994:	6963      	ldr	r3, [r4, #20]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a996:	480f      	ldr	r0, [pc, #60]	; (800a9d4 <driverHWPowerStateInit+0x9c>)
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
 800a998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a99c:	6163      	str	r3, [r4, #20]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a99e:	a903      	add	r1, sp, #12
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	9303      	str	r3, [sp, #12]
		PowerStatePortHolder.Speed = GPIO_SPEED_HIGH;													// GPIO clock speed
 800a9a4:	e9cd 6505 	strd	r6, r5, [sp, #20]
		PowerStatePortHolder.Mode = driverHWPorts[STATPointer].Mode;					// Push pull output
 800a9a8:	9704      	str	r7, [sp, #16]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a9aa:	f001 fe25 	bl	800c5f8 <HAL_GPIO_Init>
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
 800a9ae:	6963      	ldr	r3, [r4, #20]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a9b0:	4809      	ldr	r0, [pc, #36]	; (800a9d8 <driverHWPowerStateInit+0xa0>)
		RCC->AHBENR |= driverHWPorts[STATPointer].ClkRegister;								// Enable clock de desired port
 800a9b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9b6:	6163      	str	r3, [r4, #20]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a9b8:	a903      	add	r1, sp, #12
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a9ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		PowerStatePortHolder.Speed = GPIO_SPEED_HIGH;													// GPIO clock speed
 800a9be:	e9cd 6505 	strd	r6, r5, [sp, #20]
		PowerStatePortHolder.Mode = driverHWPorts[STATPointer].Mode;					// Push pull output
 800a9c2:	9704      	str	r7, [sp, #16]
		PowerStatePortHolder.Pin = driverHWPorts[STATPointer].Pin;						// Points to status pin
 800a9c4:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(driverHWPorts[STATPointer].Port,&PowerStatePortHolder);	// Perform the IO init 
 800a9c6:	f001 fe17 	bl	800c5f8 <HAL_GPIO_Init>
	};
};
 800a9ca:	b009      	add	sp, #36	; 0x24
 800a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	48000400 	.word	0x48000400
 800a9d8:	48000800 	.word	0x48000800

0800a9dc <driverHWPowerStateSetOutput>:

void driverHWPowerStateSetOutput(PowerStateIDTypedef outputPort, PowerStateStateTypedef newState) {
	HAL_GPIO_WritePin(driverHWPorts[outputPort].Port,driverHWPorts[outputPort].Pin,(GPIO_PinState)newState); // Set desired pin to desired state
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <driverHWPowerStateSetOutput+0x18>)
void driverHWPowerStateSetOutput(PowerStateIDTypedef outputPort, PowerStateStateTypedef newState) {
 800a9de:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(driverHWPorts[outputPort].Port,driverHWPorts[outputPort].Pin,(GPIO_PinState)newState); // Set desired pin to desired state
 800a9e0:	2114      	movs	r1, #20
 800a9e2:	4348      	muls	r0, r1
void driverHWPowerStateSetOutput(PowerStateIDTypedef outputPort, PowerStateStateTypedef newState) {
 800a9e4:	b410      	push	{r4}
	HAL_GPIO_WritePin(driverHWPorts[outputPort].Port,driverHWPorts[outputPort].Pin,(GPIO_PinState)newState); // Set desired pin to desired state
 800a9e6:	181c      	adds	r4, r3, r0
 800a9e8:	5818      	ldr	r0, [r3, r0]
 800a9ea:	8921      	ldrh	r1, [r4, #8]
};
 800a9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_GPIO_WritePin(driverHWPorts[outputPort].Port,driverHWPorts[outputPort].Pin,(GPIO_PinState)newState); // Set desired pin to desired state
 800a9f0:	f001 becc 	b.w	800c78c <HAL_GPIO_WritePin>
 800a9f4:	08014b3c 	.word	0x08014b3c

0800a9f8 <driverHWPowerStateReadInput>:

bool driverHWPowerStateReadInput(PowerStateIDTypedef inputPort) {	
 800a9f8:	b508      	push	{r3, lr}
	return (bool) HAL_GPIO_ReadPin(driverHWPorts[inputPort].Port,driverHWPorts[inputPort].Pin);
 800a9fa:	2214      	movs	r2, #20
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <driverHWPowerStateReadInput+0x1c>)
 800a9fe:	4350      	muls	r0, r2
 800aa00:	181a      	adds	r2, r3, r0
 800aa02:	5818      	ldr	r0, [r3, r0]
 800aa04:	8911      	ldrh	r1, [r2, #8]
 800aa06:	f001 febb 	bl	800c780 <HAL_GPIO_ReadPin>
};
 800aa0a:	3800      	subs	r0, #0
 800aa0c:	bf18      	it	ne
 800aa0e:	2001      	movne	r0, #1
 800aa10:	bd08      	pop	{r3, pc}
 800aa12:	bf00      	nop
 800aa14:	08014b3c 	.word	0x08014b3c

0800aa18 <driverHWSPI1Init>:
#include "driverHWSPI1.h"

SPI_HandleTypeDef driverHWSPI1Handle;

void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aa18:	b573      	push	{r0, r1, r4, r5, r6, lr}
  driverHWSPI1Handle.Instance = SPI1;
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 800aa1a:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <driverHWSPI1Init+0x54>)
void driverHWSPI1Init(GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aa1c:	9101      	str	r1, [sp, #4]
 800aa1e:	4605      	mov	r5, r0
  driverHWSPI1Handle.Instance = SPI1;
 800aa20:	4813      	ldr	r0, [pc, #76]	; (800aa70 <driverHWSPI1Init+0x58>)
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 800aa22:	f44f 7282 	mov.w	r2, #260	; 0x104
  driverHWSPI1Handle.Init.Direction = SPI_DIRECTION_2LINES;
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 800aa26:	2400      	movs	r4, #0
  driverHWSPI1Handle.Init.Mode = SPI_MODE_MASTER;
 800aa28:	e9c0 3200 	strd	r3, r2, [r0]
  driverHWSPI1Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 800aa2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800aa30:	e9c0 4202 	strd	r4, r2, [r0, #8]
  driverHWSPI1Handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800aa34:	2601      	movs	r6, #1
 800aa36:	2202      	movs	r2, #2
  driverHWSPI1Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800aa38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  driverHWSPI1Handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800aa3c:	e9c0 2604 	strd	r2, r6, [r0, #16]
  driverHWSPI1Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800aa40:	2238      	movs	r2, #56	; 0x38
 800aa42:	e9c0 1206 	strd	r1, r2, [r0, #24]
  driverHWSPI1Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  driverHWSPI1Handle.Init.CRCPolynomial = 7;
 800aa46:	2207      	movs	r2, #7
  driverHWSPI1Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 800aa48:	e9c0 4408 	strd	r4, r4, [r0, #32]
  driverHWSPI1Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800aa4c:	e9c0 240b 	strd	r2, r4, [r0, #44]	; 0x2c
  driverHWSPI1Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa50:	6284      	str	r4, [r0, #40]	; 0x28
  driverHWSPI1Handle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800aa52:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&driverHWSPI1Handle) != HAL_OK)
 800aa54:	f002 ff49 	bl	800d8ea <HAL_SPI_Init>
 800aa58:	9901      	ldr	r1, [sp, #4]
 800aa5a:	b100      	cbz	r0, 800aa5e <driverHWSPI1Init+0x46>
  {
    while(true);
 800aa5c:	e7fe      	b.n	800aa5c <driverHWSPI1Init+0x44>
  }
	
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4628      	mov	r0, r5
};
 800aa62:	b002      	add	sp, #8
 800aa64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 800aa68:	f001 be90 	b.w	800c78c <HAL_GPIO_WritePin>
 800aa6c:	40013000 	.word	0x40013000
 800aa70:	20005530 	.word	0x20005530

0800aa74 <driverHWSPI1Write>:

bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aa74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa78:	4680      	mov	r8, r0
	uint8_t *readBuffer;																																					// Make fake buffer holder
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 800aa7a:	4608      	mov	r0, r1
bool driverHWSPI1Write(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	461e      	mov	r6, r3
 800aa80:	4615      	mov	r5, r2
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 800aa82:	f004 fc83 	bl	800f38c <malloc>
	
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 800aa86:	2200      	movs	r2, #0
	readBuffer = malloc(noOfBytesToWrite);																												// Make fake buffer for
 800aa88:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);																      // Make CS low
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f001 fe7d 	bl	800c78c <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 800aa92:	2364      	movs	r3, #100	; 0x64
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4622      	mov	r2, r4
 800aa98:	463b      	mov	r3, r7
 800aa9a:	480c      	ldr	r0, [pc, #48]	; (800aacc <driverHWSPI1Write+0x58>)
 800aa9c:	4641      	mov	r1, r8
 800aa9e:	f002 ff7c 	bl	800d99a <HAL_SPI_TransmitReceive>
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 800aaa2:	4a0a      	ldr	r2, [pc, #40]	; (800aacc <driverHWSPI1Write+0x58>)
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeBuffer,readBuffer,noOfBytesToWrite,driverHWSPI1DefaultTimeout);	// Write desired data to slave and store the received data in readBuffer
 800aaa4:	4607      	mov	r7, r0
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  																		// Wait until transmission is complete
 800aaa6:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d0fb      	beq.n	800aaa6 <driverHWSPI1Write+0x32>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);																	      // Make CS High
 800aaae:	2201      	movs	r2, #1
 800aab0:	4631      	mov	r1, r6
 800aab2:	4628      	mov	r0, r5
 800aab4:	f001 fe6a 	bl	800c78c <HAL_GPIO_WritePin>
	
	free(readBuffer);																																							// Dump de fake buffer
 800aab8:	4620      	mov	r0, r4
 800aaba:	f004 fc6f 	bl	800f39c <free>
	
	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
};
 800aabe:	fab7 f087 	clz	r0, r7
 800aac2:	0940      	lsrs	r0, r0, #5
 800aac4:	b002      	add	sp, #8
 800aac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaca:	bf00      	nop
 800aacc:	20005530 	.word	0x20005530

0800aad0 <driverHWSPI1WriteRead>:

bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *writeArray, *readArray;
	HAL_StatusTypeDef halReturnStatus;																														// Make holder for HAL state
	
	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 800aad4:	eb01 0a03 	add.w	sl, r1, r3
bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aad8:	4681      	mov	r9, r0
	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 800aada:	4650      	mov	r0, sl
bool driverHWSPI1WriteRead(uint8_t *writeBuffer, uint8_t noOfBytesToWrite, uint8_t *readBuffer, uint8_t noOfBytesToRead, GPIO_TypeDef* GPIOCSPort, uint16_t GPIO_CSPin) {
 800aadc:	461f      	mov	r7, r3
 800aade:	460e      	mov	r6, r1
 800aae0:	4690      	mov	r8, r2
 800aae2:	f8bd b034 	ldrh.w	fp, [sp, #52]	; 0x34
	writeArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));
 800aae6:	f004 fc51 	bl	800f38c <malloc>
 800aaea:	4604      	mov	r4, r0
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));	
 800aaec:	4650      	mov	r0, sl
 800aaee:	f004 fc4d 	bl	800f38c <malloc>
	
	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 800aaf2:	4652      	mov	r2, sl
	readArray = malloc(sizeof(uint8_t)*(noOfBytesToWrite+noOfBytesToRead));	
 800aaf4:	4605      	mov	r5, r0
	memset(writeArray,0xFF,noOfBytesToWrite+noOfBytesToRead);
 800aaf6:	21ff      	movs	r1, #255	; 0xff
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f004 fc75 	bl	800f3e8 <memset>
	memcpy(writeArray,writeBuffer,noOfBytesToWrite);
 800aafe:	4649      	mov	r1, r9
 800ab00:	4632      	mov	r2, r6
 800ab02:	4620      	mov	r0, r4
 800ab04:	f004 fc62 	bl	800f3cc <memcpy>
	
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_RESET);
 800ab08:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	f001 fe3d 	bl	800c78c <HAL_GPIO_WritePin>
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 800ab12:	2264      	movs	r2, #100	; 0x64
 800ab14:	9200      	str	r2, [sp, #0]
 800ab16:	4811      	ldr	r0, [pc, #68]	; (800ab5c <driverHWSPI1WriteRead+0x8c>)
 800ab18:	462a      	mov	r2, r5
 800ab1a:	4653      	mov	r3, sl
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f002 ff3c 	bl	800d99a <HAL_SPI_TransmitReceive>
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 800ab22:	4a0e      	ldr	r2, [pc, #56]	; (800ab5c <driverHWSPI1WriteRead+0x8c>)
	halReturnStatus = HAL_SPI_TransmitReceive(&driverHWSPI1Handle,writeArray,readArray,noOfBytesToWrite+noOfBytesToRead,driverHWSPI1DefaultTimeout);
 800ab24:	4681      	mov	r9, r0
	while( driverHWSPI1Handle.State == HAL_SPI_STATE_BUSY );  // wait xmission complete
 800ab26:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d0fb      	beq.n	800ab26 <driverHWSPI1WriteRead+0x56>
	HAL_GPIO_WritePin(GPIOCSPort,GPIO_CSPin,GPIO_PIN_SET);
 800ab2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab30:	4659      	mov	r1, fp
 800ab32:	2201      	movs	r2, #1
 800ab34:	f001 fe2a 	bl	800c78c <HAL_GPIO_WritePin>
	
	memcpy(readBuffer,readArray+noOfBytesToWrite,noOfBytesToRead);
 800ab38:	463a      	mov	r2, r7
 800ab3a:	19a9      	adds	r1, r5, r6
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	f004 fc45 	bl	800f3cc <memcpy>
		
	free(writeArray);
 800ab42:	4620      	mov	r0, r4
 800ab44:	f004 fc2a 	bl	800f39c <free>
	free(readArray);
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f004 fc27 	bl	800f39c <free>
	
	return (halReturnStatus == HAL_OK);																														// Return true if all went OK
};
 800ab4e:	fab9 f089 	clz	r0, r9
 800ab52:	0940      	lsrs	r0, r0, #5
 800ab54:	b003      	add	sp, #12
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20005530 	.word	0x20005530

0800ab60 <driverHWSwitchesSetSwitchState>:
	
	driverHWSwitchesSetSwitchState(SWITCH_SAFETY_OUTPUT,SWITCH_SET);
};

void driverHWSwitchesSetSwitchState(driverHWSwitchesIDTypedef switchID, driverHWSwitchesStateTypedef newState) {
	HAL_GPIO_WritePin(driverHWSwitchesPorts[switchID].Port,driverHWSwitchesPorts[switchID].Pin,(GPIO_PinState)newState); // Set desired pin to desired state 
 800ab60:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <driverHWSwitchesSetSwitchState+0x18>)
void driverHWSwitchesSetSwitchState(driverHWSwitchesIDTypedef switchID, driverHWSwitchesStateTypedef newState) {
 800ab62:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(driverHWSwitchesPorts[switchID].Port,driverHWSwitchesPorts[switchID].Pin,(GPIO_PinState)newState); // Set desired pin to desired state 
 800ab64:	2114      	movs	r1, #20
 800ab66:	4348      	muls	r0, r1
void driverHWSwitchesSetSwitchState(driverHWSwitchesIDTypedef switchID, driverHWSwitchesStateTypedef newState) {
 800ab68:	b410      	push	{r4}
	HAL_GPIO_WritePin(driverHWSwitchesPorts[switchID].Port,driverHWSwitchesPorts[switchID].Pin,(GPIO_PinState)newState); // Set desired pin to desired state 
 800ab6a:	181c      	adds	r4, r3, r0
 800ab6c:	5818      	ldr	r0, [r3, r0]
 800ab6e:	8921      	ldrh	r1, [r4, #8]
};
 800ab70:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_GPIO_WritePin(driverHWSwitchesPorts[switchID].Port,driverHWSwitchesPorts[switchID].Pin,(GPIO_PinState)newState); // Set desired pin to desired state 
 800ab74:	f001 be0a 	b.w	800c78c <HAL_GPIO_WritePin>
 800ab78:	08014b78 	.word	0x08014b78

0800ab7c <driverHWSwitchesInit>:
void driverHWSwitchesInit(void) {
 800ab7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab7e:	4c0f      	ldr	r4, [pc, #60]	; (800abbc <driverHWSwitchesInit+0x40>)
		RCC->AHBENR |= driverHWSwitchesPorts[SwitchPointer].ClkRegister;				// Enable clock de desired port
 800ab80:	4e0f      	ldr	r6, [pc, #60]	; (800abc0 <driverHWSwitchesInit+0x44>)
void driverHWSwitchesInit(void) {
 800ab82:	b087      	sub	sp, #28
 800ab84:	2500      	movs	r5, #0
		switchPortHolder.Speed = GPIO_SPEED_HIGH;																// GPIO clock speed
 800ab86:	2703      	movs	r7, #3
		RCC->AHBENR |= driverHWSwitchesPorts[SwitchPointer].ClkRegister;				// Enable clock de desired port
 800ab88:	6973      	ldr	r3, [r6, #20]
 800ab8a:	6862      	ldr	r2, [r4, #4]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	6173      	str	r3, [r6, #20]
		switchPortHolder.Mode = driverHWSwitchesPorts[SwitchPointer].Mode;			// Push pull output
 800ab90:	68e3      	ldr	r3, [r4, #12]
 800ab92:	9302      	str	r3, [sp, #8]
		switchPortHolder.Pin = driverHWSwitchesPorts[SwitchPointer].Pin;				// Points to status pin
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	9301      	str	r3, [sp, #4]
		switchPortHolder.Pull = driverHWSwitchesPorts[SwitchPointer].Pull;			// Pullup
 800ab98:	6923      	ldr	r3, [r4, #16]
		HAL_GPIO_Init(driverHWSwitchesPorts[SwitchPointer].Port,&switchPortHolder);// Perform the IO init 
 800ab9a:	f854 0b14 	ldr.w	r0, [r4], #20
 800ab9e:	a901      	add	r1, sp, #4
	for(SwitchPointer = 0; SwitchPointer < NoOfSwitches; SwitchPointer++) {
 800aba0:	3505      	adds	r5, #5
		switchPortHolder.Speed = GPIO_SPEED_HIGH;																// GPIO clock speed
 800aba2:	e9cd 3703 	strd	r3, r7, [sp, #12]
		HAL_GPIO_Init(driverHWSwitchesPorts[SwitchPointer].Port,&switchPortHolder);// Perform the IO init 
 800aba6:	f001 fd27 	bl	800c5f8 <HAL_GPIO_Init>
	for(SwitchPointer = 0; SwitchPointer < NoOfSwitches; SwitchPointer++) {
 800abaa:	2d1e      	cmp	r5, #30
 800abac:	d1ec      	bne.n	800ab88 <driverHWSwitchesInit+0xc>
	driverHWSwitchesSetSwitchState(SWITCH_SAFETY_OUTPUT,SWITCH_SET);
 800abae:	2101      	movs	r1, #1
 800abb0:	2005      	movs	r0, #5
 800abb2:	f7ff ffd5 	bl	800ab60 <driverHWSwitchesSetSwitchState>
};
 800abb6:	b007      	add	sp, #28
 800abb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abba:	bf00      	nop
 800abbc:	08014b78 	.word	0x08014b78
 800abc0:	40021000 	.word	0x40021000

0800abc4 <driverHWSwitchesDisableAll>:

void driverHWSwitchesDisableAll(void) {
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d06      	ldr	r5, [pc, #24]	; (800abe0 <driverHWSwitchesDisableAll+0x1c>)
 800abc8:	2400      	movs	r4, #0
	uint8_t SwitchPointer;
	for(SwitchPointer = 0; SwitchPointer < NoOfSwitches; SwitchPointer++) {
		HAL_GPIO_WritePin(driverHWSwitchesPorts[SwitchPointer].Port,driverHWSwitchesPorts[SwitchPointer].Pin,(GPIO_PinState)SWITCH_RESET); // Set desired pin to desired state 
 800abca:	8929      	ldrh	r1, [r5, #8]
 800abcc:	f855 0b14 	ldr.w	r0, [r5], #20
 800abd0:	2200      	movs	r2, #0
	for(SwitchPointer = 0; SwitchPointer < NoOfSwitches; SwitchPointer++) {
 800abd2:	3405      	adds	r4, #5
		HAL_GPIO_WritePin(driverHWSwitchesPorts[SwitchPointer].Port,driverHWSwitchesPorts[SwitchPointer].Pin,(GPIO_PinState)SWITCH_RESET); // Set desired pin to desired state 
 800abd4:	f001 fdda 	bl	800c78c <HAL_GPIO_WritePin>
	for(SwitchPointer = 0; SwitchPointer < NoOfSwitches; SwitchPointer++) {
 800abd8:	2c1e      	cmp	r4, #30
 800abda:	d1f6      	bne.n	800abca <driverHWSwitchesDisableAll+0x6>
	};
};
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	bf00      	nop
 800abe0:	08014b78 	.word	0x08014b78

0800abe4 <driverHWStatusInit>:
	{GPIOB,RCC_AHBENR_GPIOAEN,GPIO_PIN_1},									// STAT_LED_DEBUG
	{GPIOB,RCC_AHBENR_GPIOCEN,GPIO_PIN_3},									// STAT_LED_Power
	{GPIOA,RCC_AHBENR_GPIOCEN,GPIO_PIN_15}									// STAT_BUZZER
};

void driverHWStatusInit(void) {
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	2400      	movs	r4, #0
 800abea:	4d0e      	ldr	r5, [pc, #56]	; (800ac24 <driverHWStatusInit+0x40>)
	GPIO_InitTypeDef STATPortHolder;
	uint8_t STATPointer;
	
	for(STATPointer = 0; STATPointer < NoOfSTATs; STATPointer++) {
		RCC->AHBENR |= STATPorts[STATPointer].ClkRegister;						// Enable clock de desired port
 800abec:	4e0e      	ldr	r6, [pc, #56]	; (800ac28 <driverHWStatusInit+0x44>)
void driverHWStatusInit(void) {
 800abee:	b086      	sub	sp, #24
		STATPortHolder.Mode = GPIO_MODE_OUTPUT_PP;										// Push pull output
 800abf0:	f04f 0801 	mov.w	r8, #1
		STATPortHolder.Pin = STATPorts[STATPointer].Pin;							// Points to status pin
		STATPortHolder.Pull = GPIO_NOPULL;														// No pullup
 800abf4:	4627      	mov	r7, r4
		RCC->AHBENR |= STATPorts[STATPointer].ClkRegister;						// Enable clock de desired port
 800abf6:	6973      	ldr	r3, [r6, #20]
 800abf8:	686a      	ldr	r2, [r5, #4]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	6173      	str	r3, [r6, #20]
		STATPortHolder.Pin = STATPorts[STATPointer].Pin;							// Points to status pin
 800abfe:	68ab      	ldr	r3, [r5, #8]
 800ac00:	9301      	str	r3, [sp, #4]
		STATPortHolder.Speed = GPIO_SPEED_HIGH;												// GPIO clock speed
		HAL_GPIO_Init(STATPorts[STATPointer].Port,&STATPortHolder);		// Perform the IO init 
 800ac02:	f855 0b0c 	ldr.w	r0, [r5], #12
		STATPortHolder.Mode = GPIO_MODE_OUTPUT_PP;										// Push pull output
 800ac06:	f8cd 8008 	str.w	r8, [sp, #8]
		STATPortHolder.Speed = GPIO_SPEED_HIGH;												// GPIO clock speed
 800ac0a:	2303      	movs	r3, #3
		HAL_GPIO_Init(STATPorts[STATPointer].Port,&STATPortHolder);		// Perform the IO init 
 800ac0c:	a901      	add	r1, sp, #4
	for(STATPointer = 0; STATPointer < NoOfSTATs; STATPointer++) {
 800ac0e:	3403      	adds	r4, #3
		STATPortHolder.Pull = GPIO_NOPULL;														// No pullup
 800ac10:	9703      	str	r7, [sp, #12]
		STATPortHolder.Speed = GPIO_SPEED_HIGH;												// GPIO clock speed
 800ac12:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(STATPorts[STATPointer].Port,&STATPortHolder);		// Perform the IO init 
 800ac14:	f001 fcf0 	bl	800c5f8 <HAL_GPIO_Init>
	for(STATPointer = 0; STATPointer < NoOfSTATs; STATPointer++) {
 800ac18:	2c09      	cmp	r4, #9
 800ac1a:	d1ec      	bne.n	800abf6 <driverHWStatusInit+0x12>
	};
}
 800ac1c:	b006      	add	sp, #24
 800ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac22:	bf00      	nop
 800ac24:	08014bf0 	.word	0x08014bf0
 800ac28:	40021000 	.word	0x40021000

0800ac2c <driverHWSetOutput>:

void driverHWSetOutput(STATIDTypedef LEDType,STATStateTypedef State) {
	HAL_GPIO_WritePin(STATPorts[LEDType].Port,STATPorts[LEDType].Pin,(GPIO_PinState)State); // Set desired pin to desired state
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <driverHWSetOutput+0x18>)
void driverHWSetOutput(STATIDTypedef LEDType,STATStateTypedef State) {
 800ac2e:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(STATPorts[LEDType].Port,STATPorts[LEDType].Pin,(GPIO_PinState)State); // Set desired pin to desired state
 800ac30:	210c      	movs	r1, #12
 800ac32:	4348      	muls	r0, r1
void driverHWSetOutput(STATIDTypedef LEDType,STATStateTypedef State) {
 800ac34:	b410      	push	{r4}
	HAL_GPIO_WritePin(STATPorts[LEDType].Port,STATPorts[LEDType].Pin,(GPIO_PinState)State); // Set desired pin to desired state
 800ac36:	181c      	adds	r4, r3, r0
 800ac38:	5818      	ldr	r0, [r3, r0]
 800ac3a:	8921      	ldrh	r1, [r4, #8]
}
 800ac3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_GPIO_WritePin(STATPorts[LEDType].Port,STATPorts[LEDType].Pin,(GPIO_PinState)State); // Set desired pin to desired state
 800ac40:	f001 bda4 	b.w	800c78c <HAL_GPIO_WritePin>
 800ac44:	08014bf0 	.word	0x08014bf0

0800ac48 <driverHWUART2Init>:
DMA_HandleTypeDef driverHWUART2HDMAHandleRX;
uint8_t driverHWUART2ReceivedChar;

uint8_t driverHWUART2ReceiveBuffer[RX_UART_BUFFER_SIZE];															// Buffer that stores received chars

void driverHWUART2Init(uint32_t baudRate) {
 800ac48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	memset(driverHWUART2ReceiveBuffer,0,sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t));
 800ac4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac4e:	2100      	movs	r1, #0
void driverHWUART2Init(uint32_t baudRate) {
 800ac50:	4606      	mov	r6, r0
	memset(driverHWUART2ReceiveBuffer,0,sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t));
 800ac52:	4824      	ldr	r0, [pc, #144]	; (800ace4 <driverHWUART2Init+0x9c>)
	
	/* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
	
	driverHWUART2HDMAHandleRX.Instance = DMA1_Channel6;														// Will handle transfer of received char to buffer
 800ac54:	4d24      	ldr	r5, [pc, #144]	; (800ace8 <driverHWUART2Init+0xa0>)
	memset(driverHWUART2ReceiveBuffer,0,sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t));
 800ac56:	f004 fbc7 	bl	800f3e8 <memset>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ac5a:	4b24      	ldr	r3, [pc, #144]	; (800acec <driverHWUART2Init+0xa4>)
 800ac5c:	695a      	ldr	r2, [r3, #20]
 800ac5e:	f042 0201 	orr.w	r2, r2, #1
 800ac62:	615a      	str	r2, [r3, #20]
 800ac64:	695b      	ldr	r3, [r3, #20]
	driverHWUART2HDMAHandleRX.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac66:	4a22      	ldr	r2, [pc, #136]	; (800acf0 <driverHWUART2Init+0xa8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	9b01      	ldr	r3, [sp, #4]
	driverHWUART2HDMAHandleRX.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac70:	2300      	movs	r3, #0
 800ac72:	e9c5 2300 	strd	r2, r3, [r5]
	driverHWUART2HDMAHandleRX.Init.PeriphInc = DMA_PINC_DISABLE;
	driverHWUART2HDMAHandleRX.Init.MemInc = DMA_MINC_ENABLE;
 800ac76:	2280      	movs	r2, #128	; 0x80
	driverHWUART2HDMAHandleRX.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac78:	e9c5 2303 	strd	r2, r3, [r5, #12]
	driverHWUART2HDMAHandleRX.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac7c:	60ab      	str	r3, [r5, #8]
	driverHWUART2HDMAHandleRX.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac7e:	616b      	str	r3, [r5, #20]
	driverHWUART2HDMAHandleRX.Init.Mode = DMA_CIRCULAR;
	driverHWUART2HDMAHandleRX.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ac80:	2120      	movs	r1, #32
 800ac82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	
	if (HAL_DMA_Init(&driverHWUART2HDMAHandleRX) != HAL_OK)
 800ac86:	4628      	mov	r0, r5
	driverHWUART2HDMAHandleRX.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ac88:	e9c5 1306 	strd	r1, r3, [r5, #24]
	if (HAL_DMA_Init(&driverHWUART2HDMAHandleRX) != HAL_OK)
 800ac8c:	f001 f89a 	bl	800bdc4 <HAL_DMA_Init>
 800ac90:	b100      	cbz	r0, 800ac94 <driverHWUART2Init+0x4c>
	{
		while(true);
 800ac92:	e7fe      	b.n	800ac92 <driverHWUART2Init+0x4a>
	}

  __HAL_LINKDMA(&driverHWUART2Handle,hdmarx,driverHWUART2HDMAHandleRX);
 800ac94:	4c17      	ldr	r4, [pc, #92]	; (800acf4 <driverHWUART2Init+0xac>)
	
  driverHWUART2Handle.Instance = USART2;
 800ac96:	4b18      	ldr	r3, [pc, #96]	; (800acf8 <driverHWUART2Init+0xb0>)
  driverHWUART2Handle.Init.BaudRate = baudRate;
  driverHWUART2Handle.Init.WordLength = UART_WORDLENGTH_8B;
  driverHWUART2Handle.Init.StopBits = UART_STOPBITS_1;
  driverHWUART2Handle.Init.Parity = UART_PARITY_NONE;
 800ac98:	6120      	str	r0, [r4, #16]
  driverHWUART2Handle.Init.BaudRate = baudRate;
 800ac9a:	e9c4 3600 	strd	r3, r6, [r4]
  driverHWUART2Handle.Init.Mode = UART_MODE_TX_RX;
 800ac9e:	230c      	movs	r3, #12
  driverHWUART2Handle.Init.StopBits = UART_STOPBITS_1;
 800aca0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  driverHWUART2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aca4:	e9c4 3005 	strd	r3, r0, [r4, #20]
  driverHWUART2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
  driverHWUART2Handle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aca8:	e9c4 0007 	strd	r0, r0, [r4, #28]
  driverHWUART2Handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800acac:	6260      	str	r0, [r4, #36]	; 0x24
	
  if (HAL_UART_Init(&driverHWUART2Handle) != HAL_OK) {
 800acae:	4620      	mov	r0, r4
  __HAL_LINKDMA(&driverHWUART2Handle,hdmarx,driverHWUART2HDMAHandleRX);
 800acb0:	6665      	str	r5, [r4, #100]	; 0x64
 800acb2:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&driverHWUART2Handle) != HAL_OK) {
 800acb4:	f003 fa46 	bl	800e144 <HAL_UART_Init>
 800acb8:	4605      	mov	r5, r0
 800acba:	b100      	cbz	r0, 800acbe <driverHWUART2Init+0x76>
    while(true);
 800acbc:	e7fe      	b.n	800acbc <driverHWUART2Init+0x74>
  }
	
	volatile HAL_StatusTypeDef temp = HAL_UART_Receive_DMA(&driverHWUART2Handle,driverHWUART2ReceiveBuffer,sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t)); // Start receive to DMA transfer
 800acbe:	4909      	ldr	r1, [pc, #36]	; (800ace4 <driverHWUART2Init+0x9c>)
 800acc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acc4:	4620      	mov	r0, r4
 800acc6:	f002 ffb3 	bl	800dc30 <HAL_UART_Receive_DMA>
	
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);		// Will realise interrupt on half and full DMA transfer
 800acca:	462a      	mov	r2, r5
	volatile HAL_StatusTypeDef temp = HAL_UART_Receive_DMA(&driverHWUART2Handle,driverHWUART2ReceiveBuffer,sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t)); // Start receive to DMA transfer
 800accc:	f88d 0003 	strb.w	r0, [sp, #3]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);		// Will realise interrupt on half and full DMA transfer
 800acd0:	4629      	mov	r1, r5
 800acd2:	2010      	movs	r0, #16
 800acd4:	f001 f814 	bl	800bd00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800acd8:	2010      	movs	r0, #16
};
 800acda:	b002      	add	sp, #8
 800acdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800ace0:	f001 b840 	b.w	800bd64 <HAL_NVIC_EnableIRQ>
 800ace4:	20005644 	.word	0x20005644
 800ace8:	20005598 	.word	0x20005598
 800acec:	40021000 	.word	0x40021000
 800acf0:	4002006c 	.word	0x4002006c
 800acf4:	200055d4 	.word	0x200055d4
 800acf8:	40004400 	.word	0x40004400

0800acfc <driverHWUART2SendChar>:

void driverHWUART2SendChar(uint8_t character) {
 800acfc:	b507      	push	{r0, r1, r2, lr}
	HAL_UART_Transmit(&driverHWUART2Handle,&character,sizeof(character)/sizeof(uint8_t),10);	// Send single char over serial port
 800acfe:	230a      	movs	r3, #10
void driverHWUART2SendChar(uint8_t character) {
 800ad00:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&driverHWUART2Handle,&character,sizeof(character)/sizeof(uint8_t),10);	// Send single char over serial port
 800ad04:	2201      	movs	r2, #1
 800ad06:	f10d 0107 	add.w	r1, sp, #7
 800ad0a:	4803      	ldr	r0, [pc, #12]	; (800ad18 <driverHWUART2SendChar+0x1c>)
 800ad0c:	f003 f9a7 	bl	800e05e <HAL_UART_Transmit>
};
 800ad10:	b003      	add	sp, #12
 800ad12:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad16:	bf00      	nop
 800ad18:	200055d4 	.word	0x200055d4

0800ad1c <driverHWUART2GetChar>:

bool driverHWUART2GetChar(char *character) {
	static uint32_t bufferTail = 0;																								// Initiate tail to 0
	uint32_t bufferHead = sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t) - driverHWUART2HDMAHandleRX.Instance->CNDTR; // Tranform to be transferred bytes to bytes transferred.
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <driverHWUART2GetChar+0x28>)
	
	if(bufferTail != bufferHead){																									// If head and tail differs there is something in the buffer
 800ad1e:	490a      	ldr	r1, [pc, #40]	; (800ad48 <driverHWUART2GetChar+0x2c>)
	uint32_t bufferHead = sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t) - driverHWUART2HDMAHandleRX.Instance->CNDTR; // Tranform to be transferred bytes to bytes transferred.
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685a      	ldr	r2, [r3, #4]
	if(bufferTail != bufferHead){																									// If head and tail differs there is something in the buffer
 800ad24:	680b      	ldr	r3, [r1, #0]
	uint32_t bufferHead = sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t) - driverHWUART2HDMAHandleRX.Instance->CNDTR; // Tranform to be transferred bytes to bytes transferred.
 800ad26:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
	if(bufferTail != bufferHead){																									// If head and tail differs there is something in the buffer
 800ad2a:	4293      	cmp	r3, r2
		*character = driverHWUART2ReceiveBuffer[bufferTail];												// Get char from tail of buffer
 800ad2c:	bf1f      	itttt	ne
 800ad2e:	4a07      	ldrne	r2, [pc, #28]	; (800ad4c <driverHWUART2GetChar+0x30>)
 800ad30:	5cd2      	ldrbne	r2, [r2, r3]
 800ad32:	7002      	strbne	r2, [r0, #0]
		bufferTail++;																																// Move the tail forward
 800ad34:	3301      	addne	r3, #1
		bufferTail %= (sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t));					// Wrap it around the end
 800ad36:	bf1d      	ittte	ne
 800ad38:	f3c3 0309 	ubfxne	r3, r3, #0, #10
		return true;																																// Indicate there is a char in buffer
 800ad3c:	2001      	movne	r0, #1
		bufferTail %= (sizeof(driverHWUART2ReceiveBuffer)/sizeof(uint8_t));					// Wrap it around the end
 800ad3e:	600b      	strne	r3, [r1, #0]
	}else
		return false;																																// Indicate there is no char in buffer
 800ad40:	2000      	moveq	r0, #0
};
 800ad42:	4770      	bx	lr
 800ad44:	20005598 	.word	0x20005598
 800ad48:	20005594 	.word	0x20005594
 800ad4c:	20005644 	.word	0x20005644

0800ad50 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void) {		 																				// Will trigger on halve and full
  HAL_DMA_IRQHandler(&driverHWUART2HDMAHandleRX);
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <DMA1_Channel6_IRQHandler+0x8>)
 800ad52:	f001 b885 	b.w	800be60 <HAL_DMA_IRQHandler>
 800ad56:	bf00      	nop
 800ad58:	20005598 	.word	0x20005598

0800ad5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad5c:	b507      	push	{r0, r1, r2, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800ad5e:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <HAL_InitTick+0x28>)
{
 800ad60:	9001      	str	r0, [sp, #4]
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad68:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad6c:	f001 f806 	bl	800bd7c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800ad70:	9901      	ldr	r1, [sp, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	f000 ffc2 	bl	800bd00 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	b003      	add	sp, #12
 800ad80:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad84:	2000002c 	.word	0x2000002c

0800ad88 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ad88:	4a07      	ldr	r2, [pc, #28]	; (800ada8 <HAL_Init+0x20>)
{
 800ad8a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ad8c:	6813      	ldr	r3, [r2, #0]
 800ad8e:	f043 0310 	orr.w	r3, r3, #16
 800ad92:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ad94:	2003      	movs	r0, #3
 800ad96:	f000 ffa1 	bl	800bcdc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	f7ff ffde 	bl	800ad5c <HAL_InitTick>
  HAL_MspInit();
 800ada0:	f003 fa0a 	bl	800e1b8 <HAL_MspInit>
}
 800ada4:	2000      	movs	r0, #0
 800ada6:	bd08      	pop	{r3, pc}
 800ada8:	40022000 	.word	0x40022000

0800adac <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800adac:	4a02      	ldr	r2, [pc, #8]	; (800adb8 <HAL_IncTick+0xc>)
 800adae:	6813      	ldr	r3, [r2, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	6013      	str	r3, [r2, #0]
}
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	20005a44 	.word	0x20005a44

0800adbc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800adbc:	4b01      	ldr	r3, [pc, #4]	; (800adc4 <HAL_GetTick+0x8>)
 800adbe:	6818      	ldr	r0, [r3, #0]
}
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20005a44 	.word	0x20005a44

0800adc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800adc8:	b513      	push	{r0, r1, r4, lr}
 800adca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800adcc:	f7ff fff6 	bl	800adbc <HAL_GetTick>
 800add0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800add2:	f7ff fff3 	bl	800adbc <HAL_GetTick>
 800add6:	9a01      	ldr	r2, [sp, #4]
 800add8:	1b03      	subs	r3, r0, r4
 800adda:	4293      	cmp	r3, r2
 800addc:	d3f9      	bcc.n	800add2 <HAL_Delay+0xa>
  {
  }
}
 800adde:	b002      	add	sp, #8
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800ade2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800ade4:	6803      	ldr	r3, [r0, #0]
{
 800ade6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800ade8:	6898      	ldr	r0, [r3, #8]
 800adea:	f000 0003 	and.w	r0, r0, #3
 800adee:	2801      	cmp	r0, #1
 800adf0:	d001      	beq.n	800adf6 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800adf2:	2000      	movs	r0, #0
}
 800adf4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	07d2      	lsls	r2, r2, #31
 800adfa:	d5fa      	bpl.n	800adf2 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	f002 020d 	and.w	r2, r2, #13
 800ae02:	2a01      	cmp	r2, #1
 800ae04:	d11b      	bne.n	800ae3e <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	f042 0202 	orr.w	r2, r2, #2
 800ae0c:	609a      	str	r2, [r3, #8]
 800ae0e:	2203      	movs	r2, #3
 800ae10:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ae12:	f7ff ffd3 	bl	800adbc <HAL_GetTick>
 800ae16:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	07db      	lsls	r3, r3, #31
 800ae1e:	d5e8      	bpl.n	800adf2 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ae20:	f7ff ffcc 	bl	800adbc <HAL_GetTick>
 800ae24:	1b40      	subs	r0, r0, r5
 800ae26:	2802      	cmp	r0, #2
 800ae28:	d9f6      	bls.n	800ae18 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ae2c:	f043 0310 	orr.w	r3, r3, #16
 800ae30:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	e7da      	b.n	800adf4 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ae40:	f043 0310 	orr.w	r3, r3, #16
 800ae44:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ae48:	f043 0301 	orr.w	r3, r3, #1
 800ae4c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800ae4e:	e7d1      	b.n	800adf4 <ADC_Disable+0x12>

0800ae50 <ADC_Enable>:
{
 800ae50:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ae52:	6803      	ldr	r3, [r0, #0]
 800ae54:	689a      	ldr	r2, [r3, #8]
 800ae56:	f002 0203 	and.w	r2, r2, #3
 800ae5a:	2a01      	cmp	r2, #1
{
 800ae5c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ae5e:	d104      	bne.n	800ae6a <ADC_Enable+0x1a>
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	07d2      	lsls	r2, r2, #31
 800ae64:	d501      	bpl.n	800ae6a <ADC_Enable+0x1a>
  return HAL_OK;
 800ae66:	2000      	movs	r0, #0
}
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ae6a:	6899      	ldr	r1, [r3, #8]
 800ae6c:	4a0e      	ldr	r2, [pc, #56]	; (800aea8 <ADC_Enable+0x58>)
 800ae6e:	4211      	tst	r1, r2
 800ae70:	d009      	beq.n	800ae86 <ADC_Enable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ae74:	f043 0310 	orr.w	r3, r3, #16
 800ae78:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ae7c:	f043 0301 	orr.w	r3, r3, #1
 800ae80:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ae82:	2001      	movs	r0, #1
 800ae84:	e7f0      	b.n	800ae68 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	f042 0201 	orr.w	r2, r2, #1
 800ae8c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800ae8e:	f7ff ff95 	bl	800adbc <HAL_GetTick>
 800ae92:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	07db      	lsls	r3, r3, #31
 800ae9a:	d4e4      	bmi.n	800ae66 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ae9c:	f7ff ff8e 	bl	800adbc <HAL_GetTick>
 800aea0:	1b40      	subs	r0, r0, r5
 800aea2:	2802      	cmp	r0, #2
 800aea4:	d9f6      	bls.n	800ae94 <ADC_Enable+0x44>
 800aea6:	e7e4      	b.n	800ae72 <ADC_Enable+0x22>
 800aea8:	8000003f 	.word	0x8000003f

0800aeac <HAL_ADC_Init>:
{
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f000 8084 	beq.w	800afc4 <HAL_ADC_Init+0x118>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aebe:	06d2      	lsls	r2, r2, #27
 800aec0:	d462      	bmi.n	800af88 <HAL_ADC_Init+0xdc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800aec2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d02d      	beq.n	800af24 <HAL_ADC_Init+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aec8:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	689a      	ldr	r2, [r3, #8]
 800aece:	00d1      	lsls	r1, r2, #3
 800aed0:	d502      	bpl.n	800aed8 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800aed2:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800aed4:	009a      	lsls	r2, r3, #2
 800aed6:	d50a      	bpl.n	800aeee <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 800aed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aeda:	f023 0312 	bic.w	r3, r3, #18
 800aede:	f043 0310 	orr.w	r3, r3, #16
 800aee2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aee4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800aeec:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800aeee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aef0:	06db      	lsls	r3, r3, #27
 800aef2:	d461      	bmi.n	800afb8 <HAL_ADC_Init+0x10c>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d15f      	bne.n	800afb8 <HAL_ADC_Init+0x10c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800aefc:	f015 0504 	ands.w	r5, r5, #4
 800af00:	d15a      	bne.n	800afb8 <HAL_ADC_Init+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 800af02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800af04:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800af08:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800af0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800af10:	6462      	str	r2, [r4, #68]	; 0x44
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800af12:	4a6b      	ldr	r2, [pc, #428]	; (800b0c0 <HAL_ADC_Init+0x214>)
 800af14:	d003      	beq.n	800af1e <HAL_ADC_Init+0x72>
 800af16:	4293      	cmp	r3, r2
 800af18:	d156      	bne.n	800afc8 <HAL_ADC_Init+0x11c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800af1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800af1e:	4969      	ldr	r1, [pc, #420]	; (800b0c4 <HAL_ADC_Init+0x218>)
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800af20:	9201      	str	r2, [sp, #4]
 800af22:	e057      	b.n	800afd4 <HAL_ADC_Init+0x128>
      hadc->InjectionConfig.ContextQueue = 0;
 800af24:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
      ADC_CLEAR_ERRORCODE(hadc);
 800af28:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800af2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800af2e:	f003 f981 	bl	800e234 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	00de      	lsls	r6, r3, #3
 800af38:	d4c6      	bmi.n	800aec8 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff ff51 	bl	800ade2 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800af40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800af42:	06d5      	lsls	r5, r2, #27
 800af44:	d4c1      	bmi.n	800aeca <HAL_ADC_Init+0x1e>
 800af46:	2800      	cmp	r0, #0
 800af48:	d1bf      	bne.n	800aeca <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800af4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800af4c:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800af4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800af52:	f023 0302 	bic.w	r3, r3, #2
 800af56:	f043 0302 	orr.w	r3, r3, #2
 800af5a:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800af5c:	6893      	ldr	r3, [r2, #8]
 800af5e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800af62:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800af64:	6893      	ldr	r3, [r2, #8]
 800af66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af6a:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800af6c:	4b56      	ldr	r3, [pc, #344]	; (800b0c8 <HAL_ADC_Init+0x21c>)
 800af6e:	4a57      	ldr	r2, [pc, #348]	; (800b0cc <HAL_ADC_Init+0x220>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	fbb3 f3f2 	udiv	r3, r3, r2
 800af76:	220a      	movs	r2, #10
 800af78:	4353      	muls	r3, r2
            wait_loop_index--;
 800af7a:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0)
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0a2      	beq.n	800aec8 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	3b01      	subs	r3, #1
 800af86:	e7f8      	b.n	800af7a <HAL_ADC_Init+0xce>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af88:	4618      	mov	r0, r3
 800af8a:	e7b0      	b.n	800aeee <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bf0c      	ite	eq
 800af90:	9101      	streq	r1, [sp, #4]
 800af92:	9001      	strne	r0, [sp, #4]
 800af94:	e01d      	b.n	800afd2 <HAL_ADC_Init+0x126>
        ADC_STATE_CLR_SET(hadc->State,
 800af96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af98:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800af9c:	f041 0120 	orr.w	r1, r1, #32
 800afa0:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afa2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800afa4:	f041 0101 	orr.w	r1, r1, #1
 800afa8:	64a1      	str	r1, [r4, #72]	; 0x48
 800afaa:	e043      	b.n	800b034 <HAL_ADC_Init+0x188>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800afac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800afb0:	e055      	b.n	800b05e <HAL_ADC_Init+0x1b2>
 800afb2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800afb6:	e052      	b.n	800b05e <HAL_ADC_Init+0x1b2>
    ADC_STATE_CLR_SET(hadc->State,
 800afb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800afba:	f023 0312 	bic.w	r3, r3, #18
 800afbe:	f043 0310 	orr.w	r3, r3, #16
 800afc2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800afc4:	2001      	movs	r0, #1
 800afc6:	e079      	b.n	800b0bc <HAL_ADC_Init+0x210>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800afc8:	4941      	ldr	r1, [pc, #260]	; (800b0d0 <HAL_ADC_Init+0x224>)
 800afca:	4a42      	ldr	r2, [pc, #264]	; (800b0d4 <HAL_ADC_Init+0x228>)
 800afcc:	428b      	cmp	r3, r1
 800afce:	d1dd      	bne.n	800af8c <HAL_ADC_Init+0xe0>
 800afd0:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800afd2:	4941      	ldr	r1, [pc, #260]	; (800b0d8 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	f002 0203 	and.w	r2, r2, #3
 800afda:	2a01      	cmp	r2, #1
 800afdc:	d102      	bne.n	800afe4 <HAL_ADC_Init+0x138>
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	07d6      	lsls	r6, r2, #31
 800afe2:	d40f      	bmi.n	800b004 <HAL_ADC_Init+0x158>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800afe4:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800afe6:	b13a      	cbz	r2, 800aff8 <HAL_ADC_Init+0x14c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800afe8:	6896      	ldr	r6, [r2, #8]
 800afea:	f006 0603 	and.w	r6, r6, #3
 800afee:	2e01      	cmp	r6, #1
 800aff0:	d102      	bne.n	800aff8 <HAL_ADC_Init+0x14c>
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	07d2      	lsls	r2, r2, #31
 800aff6:	d405      	bmi.n	800b004 <HAL_ADC_Init+0x158>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800aff8:	688a      	ldr	r2, [r1, #8]
 800affa:	6866      	ldr	r6, [r4, #4]
 800affc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800b000:	4332      	orrs	r2, r6
 800b002:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800b004:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b006:	69e1      	ldr	r1, [r4, #28]
 800b008:	2a01      	cmp	r2, #1
 800b00a:	e9d4 6202 	ldrd	r6, r2, [r4, #8]
 800b00e:	ea42 0206 	orr.w	r2, r2, r6
 800b012:	bf18      	it	ne
 800b014:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 800b018:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b01c:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b01e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b020:	2d01      	cmp	r5, #1
 800b022:	d107      	bne.n	800b034 <HAL_ADC_Init+0x188>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800b024:	2900      	cmp	r1, #0
 800b026:	d1b6      	bne.n	800af96 <HAL_ADC_Init+0xea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800b028:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b02a:	3901      	subs	r1, #1
 800b02c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800b030:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b034:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b036:	2901      	cmp	r1, #1
 800b038:	d014      	beq.n	800b064 <HAL_ADC_Init+0x1b8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800b03a:	4d25      	ldr	r5, [pc, #148]	; (800b0d0 <HAL_ADC_Init+0x224>)
 800b03c:	42ab      	cmp	r3, r5
 800b03e:	d003      	beq.n	800b048 <HAL_ADC_Init+0x19c>
 800b040:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b044:	42ab      	cmp	r3, r5
 800b046:	d10a      	bne.n	800b05e <HAL_ADC_Init+0x1b2>
 800b048:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800b04c:	d0ae      	beq.n	800afac <HAL_ADC_Init+0x100>
 800b04e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b052:	d0ae      	beq.n	800afb2 <HAL_ADC_Init+0x106>
 800b054:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 800b058:	bf08      	it	eq
 800b05a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800b05e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800b060:	432a      	orrs	r2, r5
 800b062:	430a      	orrs	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800b064:	6899      	ldr	r1, [r3, #8]
 800b066:	f011 0f0c 	tst.w	r1, #12
 800b06a:	d10b      	bne.n	800b084 <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800b06c:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800b06e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800b070:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b074:	f021 0102 	bic.w	r1, r1, #2
 800b078:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800b07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b07c:	0049      	lsls	r1, r1, #1
 800b07e:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800b082:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800b084:	68dd      	ldr	r5, [r3, #12]
 800b086:	4915      	ldr	r1, [pc, #84]	; (800b0dc <HAL_ADC_Init+0x230>)
 800b088:	4029      	ands	r1, r5
 800b08a:	430a      	orrs	r2, r1
 800b08c:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b08e:	6922      	ldr	r2, [r4, #16]
 800b090:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800b092:	bf05      	ittet	eq
 800b094:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800b096:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b098:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800b09a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800b09e:	bf06      	itte	eq
 800b0a0:	f021 010f 	biceq.w	r1, r1, #15
 800b0a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b0a6:	f022 020f 	bicne.w	r2, r2, #15
 800b0aa:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800b0b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b0bc:	b016      	add	sp, #88	; 0x58
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	50000100 	.word	0x50000100
 800b0c4:	50000300 	.word	0x50000300
 800b0c8:	2000002c 	.word	0x2000002c
 800b0cc:	000f4240 	.word	0x000f4240
 800b0d0:	50000400 	.word	0x50000400
 800b0d4:	50000500 	.word	0x50000500
 800b0d8:	50000700 	.word	0x50000700
 800b0dc:	fff0c007 	.word	0xfff0c007

0800b0e0 <HAL_ADC_Start>:
{
 800b0e0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b0e2:	6803      	ldr	r3, [r0, #0]
 800b0e4:	689d      	ldr	r5, [r3, #8]
 800b0e6:	f015 0504 	ands.w	r5, r5, #4
{
 800b0ea:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b0ec:	f040 8095 	bne.w	800b21a <HAL_ADC_Start+0x13a>
    __HAL_LOCK(hadc);
 800b0f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	f000 8090 	beq.w	800b21a <HAL_ADC_Start+0x13a>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800b100:	f7ff fea6 	bl	800ae50 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800b104:	2800      	cmp	r0, #0
 800b106:	f040 8085 	bne.w	800b214 <HAL_ADC_Start+0x134>
      ADC_STATE_CLR_SET(hadc->State,
 800b10a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b10c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b110:	f023 0301 	bic.w	r3, r3, #1
 800b114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b118:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b120:	d002      	beq.n	800b128 <HAL_ADC_Start+0x48>
 800b122:	4a3f      	ldr	r2, [pc, #252]	; (800b220 <HAL_ADC_Start+0x140>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d114      	bne.n	800b152 <HAL_ADC_Start+0x72>
 800b128:	4a3e      	ldr	r2, [pc, #248]	; (800b224 <HAL_ADC_Start+0x144>)
 800b12a:	6892      	ldr	r2, [r2, #8]
 800b12c:	06d1      	lsls	r1, r2, #27
 800b12e:	d002      	beq.n	800b136 <HAL_ADC_Start+0x56>
 800b130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b134:	d111      	bne.n	800b15a <HAL_ADC_Start+0x7a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b136:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b138:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b13c:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800b13e:	68da      	ldr	r2, [r3, #12]
 800b140:	0195      	lsls	r5, r2, #6
 800b142:	d51c      	bpl.n	800b17e <HAL_ADC_Start+0x9e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b144:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b146:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b14a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b14e:	6462      	str	r2, [r4, #68]	; 0x44
 800b150:	e015      	b.n	800b17e <HAL_ADC_Start+0x9e>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b152:	4a35      	ldr	r2, [pc, #212]	; (800b228 <HAL_ADC_Start+0x148>)
 800b154:	6892      	ldr	r2, [r2, #8]
 800b156:	06d2      	lsls	r2, r2, #27
 800b158:	d0ed      	beq.n	800b136 <HAL_ADC_Start+0x56>
 800b15a:	4934      	ldr	r1, [pc, #208]	; (800b22c <HAL_ADC_Start+0x14c>)
 800b15c:	428b      	cmp	r3, r1
 800b15e:	d0ea      	beq.n	800b136 <HAL_ADC_Start+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b160:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b162:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b166:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b168:	4a2d      	ldr	r2, [pc, #180]	; (800b220 <HAL_ADC_Start+0x140>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	bf0a      	itet	eq
 800b16e:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 800b172:	68ca      	ldrne	r2, [r1, #12]
 800b174:	68d2      	ldreq	r2, [r2, #12]
 800b176:	f3c2 6240 	ubfx	r2, r2, #25, #1
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	d1e2      	bne.n	800b144 <HAL_ADC_Start+0x64>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b17e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b184:	bf1c      	itt	ne
 800b186:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 800b188:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800b18c:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800b18e:	2200      	movs	r2, #0
 800b190:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800b194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b198:	f04f 021c 	mov.w	r2, #28
 800b19c:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800b19e:	d002      	beq.n	800b1a6 <HAL_ADC_Start+0xc6>
 800b1a0:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <HAL_ADC_Start+0x140>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d113      	bne.n	800b1ce <HAL_ADC_Start+0xee>
 800b1a6:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <HAL_ADC_Start+0x144>)
 800b1a8:	6891      	ldr	r1, [r2, #8]
 800b1aa:	06c9      	lsls	r1, r1, #27
 800b1ac:	d00a      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
 800b1ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1b2:	d002      	beq.n	800b1ba <HAL_ADC_Start+0xda>
 800b1b4:	491a      	ldr	r1, [pc, #104]	; (800b220 <HAL_ADC_Start+0x140>)
 800b1b6:	428b      	cmp	r3, r1
 800b1b8:	d10d      	bne.n	800b1d6 <HAL_ADC_Start+0xf6>
 800b1ba:	6892      	ldr	r2, [r2, #8]
 800b1bc:	f002 021f 	and.w	r2, r2, #31
 800b1c0:	2a05      	cmp	r2, #5
 800b1c2:	d118      	bne.n	800b1f6 <HAL_ADC_Start+0x116>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800b1c4:	689a      	ldr	r2, [r3, #8]
 800b1c6:	f042 0204 	orr.w	r2, r2, #4
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	e012      	b.n	800b1f4 <HAL_ADC_Start+0x114>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800b1ce:	4a16      	ldr	r2, [pc, #88]	; (800b228 <HAL_ADC_Start+0x148>)
 800b1d0:	6892      	ldr	r2, [r2, #8]
 800b1d2:	06d2      	lsls	r2, r2, #27
 800b1d4:	d0f6      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
 800b1d6:	4a14      	ldr	r2, [pc, #80]	; (800b228 <HAL_ADC_Start+0x148>)
 800b1d8:	6892      	ldr	r2, [r2, #8]
 800b1da:	f002 021f 	and.w	r2, r2, #31
 800b1de:	2a05      	cmp	r2, #5
 800b1e0:	d0f0      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
 800b1e2:	4a11      	ldr	r2, [pc, #68]	; (800b228 <HAL_ADC_Start+0x148>)
 800b1e4:	6892      	ldr	r2, [r2, #8]
 800b1e6:	f002 021f 	and.w	r2, r2, #31
 800b1ea:	2a09      	cmp	r2, #9
 800b1ec:	d0ea      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
 800b1ee:	4a0f      	ldr	r2, [pc, #60]	; (800b22c <HAL_ADC_Start+0x14c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d0e7      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
}
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fa:	d002      	beq.n	800b202 <HAL_ADC_Start+0x122>
 800b1fc:	4a08      	ldr	r2, [pc, #32]	; (800b220 <HAL_ADC_Start+0x140>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d1ef      	bne.n	800b1e2 <HAL_ADC_Start+0x102>
 800b202:	4a08      	ldr	r2, [pc, #32]	; (800b224 <HAL_ADC_Start+0x144>)
 800b204:	6892      	ldr	r2, [r2, #8]
 800b206:	f002 021f 	and.w	r2, r2, #31
 800b20a:	2a09      	cmp	r2, #9
 800b20c:	d0da      	beq.n	800b1c4 <HAL_ADC_Start+0xe4>
 800b20e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b212:	e7eb      	b.n	800b1ec <HAL_ADC_Start+0x10c>
      __HAL_UNLOCK(hadc);
 800b214:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 800b218:	e7ec      	b.n	800b1f4 <HAL_ADC_Start+0x114>
    tmp_hal_status = HAL_BUSY;
 800b21a:	2002      	movs	r0, #2
 800b21c:	e7ea      	b.n	800b1f4 <HAL_ADC_Start+0x114>
 800b21e:	bf00      	nop
 800b220:	50000100 	.word	0x50000100
 800b224:	50000300 	.word	0x50000300
 800b228:	50000700 	.word	0x50000700
 800b22c:	50000400 	.word	0x50000400

0800b230 <HAL_ADC_PollForConversion>:
{
 800b230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b234:	6946      	ldr	r6, [r0, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b236:	6803      	ldr	r3, [r0, #0]
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b238:	2e08      	cmp	r6, #8
{
 800b23a:	4604      	mov	r4, r0
 800b23c:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b23e:	d027      	beq.n	800b290 <HAL_ADC_PollForConversion+0x60>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b244:	d015      	beq.n	800b272 <HAL_ADC_PollForConversion+0x42>
 800b246:	4845      	ldr	r0, [pc, #276]	; (800b35c <HAL_ADC_PollForConversion+0x12c>)
 800b248:	4a45      	ldr	r2, [pc, #276]	; (800b360 <HAL_ADC_PollForConversion+0x130>)
 800b24a:	4946      	ldr	r1, [pc, #280]	; (800b364 <HAL_ADC_PollForConversion+0x134>)
 800b24c:	4283      	cmp	r3, r0
 800b24e:	bf18      	it	ne
 800b250:	460a      	movne	r2, r1
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800b252:	6891      	ldr	r1, [r2, #8]
 800b254:	f011 011f 	ands.w	r1, r1, #31
 800b258:	d10d      	bne.n	800b276 <HAL_ADC_PollForConversion+0x46>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	07d0      	lsls	r0, r2, #31
 800b25e:	d516      	bpl.n	800b28e <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b260:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800b262:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b266:	f043 0320 	orr.w	r3, r3, #32
 800b26a:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800b26c:	2001      	movs	r0, #1
}
 800b26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b272:	4a3b      	ldr	r2, [pc, #236]	; (800b360 <HAL_ADC_PollForConversion+0x130>)
 800b274:	e7ed      	b.n	800b252 <HAL_ADC_PollForConversion+0x22>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800b276:	6892      	ldr	r2, [r2, #8]
 800b278:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800b27c:	d007      	beq.n	800b28e <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b27e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b280:	f043 0320 	orr.w	r3, r3, #32
 800b284:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800b286:	2300      	movs	r3, #0
 800b288:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b28c:	e7ee      	b.n	800b26c <HAL_ADC_PollForConversion+0x3c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800b28e:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b294:	d002      	beq.n	800b29c <HAL_ADC_PollForConversion+0x6c>
 800b296:	4a31      	ldr	r2, [pc, #196]	; (800b35c <HAL_ADC_PollForConversion+0x12c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d134      	bne.n	800b306 <HAL_ADC_PollForConversion+0xd6>
 800b29c:	4a30      	ldr	r2, [pc, #192]	; (800b360 <HAL_ADC_PollForConversion+0x130>)
 800b29e:	6892      	ldr	r2, [r2, #8]
 800b2a0:	06d2      	lsls	r2, r2, #27
 800b2a2:	d005      	beq.n	800b2b0 <HAL_ADC_PollForConversion+0x80>
 800b2a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a8:	d002      	beq.n	800b2b0 <HAL_ADC_PollForConversion+0x80>
 800b2aa:	4a2f      	ldr	r2, [pc, #188]	; (800b368 <HAL_ADC_PollForConversion+0x138>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d132      	bne.n	800b316 <HAL_ADC_PollForConversion+0xe6>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800b2b0:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 800b2b2:	f7ff fd83 	bl	800adbc <HAL_GetTick>
 800b2b6:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	4232      	tst	r2, r6
 800b2be:	d031      	beq.n	800b324 <HAL_ADC_PollForConversion+0xf4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b2c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c6:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800b2c8:	68da      	ldr	r2, [r3, #12]
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800b2ca:	f405 5100 	and.w	r1, r5, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800b2ce:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	d111      	bne.n	800b2fa <HAL_ADC_PollForConversion+0xca>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	0711      	lsls	r1, r2, #28
 800b2da:	d50e      	bpl.n	800b2fa <HAL_ADC_PollForConversion+0xca>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b2e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b2e4:	d131      	bne.n	800b34a <HAL_ADC_PollForConversion+0x11a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b2e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2ea:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b2ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b2ee:	04d2      	lsls	r2, r2, #19
 800b2f0:	d403      	bmi.n	800b2fa <HAL_ADC_PollForConversion+0xca>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b2f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b2f4:	f042 0201 	orr.w	r2, r2, #1
 800b2f8:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800b2fa:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800b2fe:	bf0c      	ite	eq
 800b300:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 800b302:	2000      	movne	r0, #0
 800b304:	e7b3      	b.n	800b26e <HAL_ADC_PollForConversion+0x3e>
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b306:	4a17      	ldr	r2, [pc, #92]	; (800b364 <HAL_ADC_PollForConversion+0x134>)
 800b308:	6892      	ldr	r2, [r2, #8]
 800b30a:	06d5      	lsls	r5, r2, #27
 800b30c:	d0d0      	beq.n	800b2b0 <HAL_ADC_PollForConversion+0x80>
 800b30e:	4a16      	ldr	r2, [pc, #88]	; (800b368 <HAL_ADC_PollForConversion+0x138>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d105      	bne.n	800b320 <HAL_ADC_PollForConversion+0xf0>
 800b314:	e7cc      	b.n	800b2b0 <HAL_ADC_PollForConversion+0x80>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800b316:	4911      	ldr	r1, [pc, #68]	; (800b35c <HAL_ADC_PollForConversion+0x12c>)
 800b318:	428b      	cmp	r3, r1
 800b31a:	bf08      	it	eq
 800b31c:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 800b320:	68d5      	ldr	r5, [r2, #12]
 800b322:	e7c6      	b.n	800b2b2 <HAL_ADC_PollForConversion+0x82>
    if(Timeout != HAL_MAX_DELAY)
 800b324:	1c78      	adds	r0, r7, #1
 800b326:	d0c8      	beq.n	800b2ba <HAL_ADC_PollForConversion+0x8a>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800b328:	b947      	cbnz	r7, 800b33c <HAL_ADC_PollForConversion+0x10c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b32a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b32c:	f043 0304 	orr.w	r3, r3, #4
 800b330:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800b332:	2300      	movs	r3, #0
 800b334:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800b338:	2003      	movs	r0, #3
 800b33a:	e798      	b.n	800b26e <HAL_ADC_PollForConversion+0x3e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800b33c:	f7ff fd3e 	bl	800adbc <HAL_GetTick>
 800b340:	eba0 0008 	sub.w	r0, r0, r8
 800b344:	42b8      	cmp	r0, r7
 800b346:	d9b7      	bls.n	800b2b8 <HAL_ADC_PollForConversion+0x88>
 800b348:	e7ef      	b.n	800b32a <HAL_ADC_PollForConversion+0xfa>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b34a:	f042 0220 	orr.w	r2, r2, #32
 800b34e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b350:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b352:	f042 0201 	orr.w	r2, r2, #1
 800b356:	64a2      	str	r2, [r4, #72]	; 0x48
 800b358:	e7cf      	b.n	800b2fa <HAL_ADC_PollForConversion+0xca>
 800b35a:	bf00      	nop
 800b35c:	50000100 	.word	0x50000100
 800b360:	50000300 	.word	0x50000300
 800b364:	50000700 	.word	0x50000700
 800b368:	50000400 	.word	0x50000400

0800b36c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800b36c:	6803      	ldr	r3, [r0, #0]
 800b36e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_ADC_ConfigChannel>:
{
 800b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b378:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800b37e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b382:	68ce      	ldr	r6, [r1, #12]
  __HAL_LOCK(hadc);
 800b384:	2b01      	cmp	r3, #1
 800b386:	f000 817a 	beq.w	800b67e <HAL_ADC_ConfigChannel+0x30a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b38a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800b38c:	2201      	movs	r2, #1
 800b38e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800b392:	689c      	ldr	r4, [r3, #8]
 800b394:	0764      	lsls	r4, r4, #29
 800b396:	f100 816c 	bmi.w	800b672 <HAL_ADC_ConfigChannel+0x2fe>
    if (sConfig->Rank < 5)
 800b39a:	684d      	ldr	r5, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 800b39c:	680c      	ldr	r4, [r1, #0]
 800b39e:	2206      	movs	r2, #6
    if (sConfig->Rank < 5)
 800b3a0:	2d04      	cmp	r5, #4
      MODIFY_REG(hadc->Instance->SQR1,
 800b3a2:	fb05 f202 	mul.w	r2, r5, r2
    if (sConfig->Rank < 5)
 800b3a6:	d831      	bhi.n	800b40c <HAL_ADC_ConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->SQR1,
 800b3a8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800b3aa:	271f      	movs	r7, #31
 800b3ac:	4097      	lsls	r7, r2
 800b3ae:	ea25 0507 	bic.w	r5, r5, r7
 800b3b2:	fa04 f202 	lsl.w	r2, r4, r2
 800b3b6:	432a      	orrs	r2, r5
 800b3b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	f012 0f0c 	tst.w	r2, #12
 800b3c0:	d15c      	bne.n	800b47c <HAL_ADC_ConfigChannel+0x108>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800b3c2:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b3c4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b3c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b3cc:	f04f 0507 	mov.w	r5, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800b3d0:	d941      	bls.n	800b456 <HAL_ADC_ConfigChannel+0xe2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b3d2:	699f      	ldr	r7, [r3, #24]
 800b3d4:	3a1e      	subs	r2, #30
 800b3d6:	4095      	lsls	r5, r2
 800b3d8:	ea27 0505 	bic.w	r5, r7, r5
 800b3dc:	fa0c f202 	lsl.w	r2, ip, r2
 800b3e0:	432a      	orrs	r2, r5
 800b3e2:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
 800b3ea:	694a      	ldr	r2, [r1, #20]
 800b3ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b3f0:	fa02 fc0c 	lsl.w	ip, r2, ip
    switch (sConfig->OffsetNumber)
 800b3f4:	690a      	ldr	r2, [r1, #16]
 800b3f6:	f102 3eff 	add.w	lr, r2, #4294967295
      MODIFY_REG(hadc->Instance->OFR1               ,
 800b3fa:	ea4f 6884 	mov.w	r8, r4, lsl #26
    switch (sConfig->OffsetNumber)
 800b3fe:	f1be 0f03 	cmp.w	lr, #3
 800b402:	d86c      	bhi.n	800b4de <HAL_ADC_ConfigChannel+0x16a>
 800b404:	e8df f00e 	tbb	[pc, lr]
 800b408:	60554a30 	.word	0x60554a30
    else if (sConfig->Rank < 10)
 800b40c:	2d09      	cmp	r5, #9
 800b40e:	d80a      	bhi.n	800b426 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800b410:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800b412:	3a1e      	subs	r2, #30
 800b414:	271f      	movs	r7, #31
 800b416:	4097      	lsls	r7, r2
 800b418:	ea25 0507 	bic.w	r5, r5, r7
 800b41c:	fa04 f202 	lsl.w	r2, r4, r2
 800b420:	432a      	orrs	r2, r5
 800b422:	635a      	str	r2, [r3, #52]	; 0x34
 800b424:	e7c9      	b.n	800b3ba <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15)
 800b426:	2d0e      	cmp	r5, #14
 800b428:	f04f 051f 	mov.w	r5, #31
 800b42c:	d809      	bhi.n	800b442 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800b42e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800b430:	3a3c      	subs	r2, #60	; 0x3c
 800b432:	4095      	lsls	r5, r2
 800b434:	ea27 0505 	bic.w	r5, r7, r5
 800b438:	fa04 f202 	lsl.w	r2, r4, r2
 800b43c:	4315      	orrs	r5, r2
 800b43e:	639d      	str	r5, [r3, #56]	; 0x38
 800b440:	e7bb      	b.n	800b3ba <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800b442:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800b444:	3a5a      	subs	r2, #90	; 0x5a
 800b446:	4095      	lsls	r5, r2
 800b448:	ea27 0505 	bic.w	r5, r7, r5
 800b44c:	fa04 f202 	lsl.w	r2, r4, r2
 800b450:	432a      	orrs	r2, r5
 800b452:	63da      	str	r2, [r3, #60]	; 0x3c
 800b454:	e7b1      	b.n	800b3ba <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b456:	695f      	ldr	r7, [r3, #20]
 800b458:	4095      	lsls	r5, r2
 800b45a:	ea27 0505 	bic.w	r5, r7, r5
 800b45e:	fa0c f202 	lsl.w	r2, ip, r2
 800b462:	4315      	orrs	r5, r2
 800b464:	615d      	str	r5, [r3, #20]
 800b466:	e7bd      	b.n	800b3e4 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800b468:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b46a:	4d86      	ldr	r5, [pc, #536]	; (800b684 <HAL_ADC_ConfigChannel+0x310>)
 800b46c:	4015      	ands	r5, r2
 800b46e:	ea45 0208 	orr.w	r2, r5, r8
 800b472:	ea42 020c 	orr.w	r2, r2, ip
 800b476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b47a:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	f002 0203 	and.w	r2, r2, #3
 800b482:	2a01      	cmp	r2, #1
 800b484:	d14f      	bne.n	800b526 <HAL_ADC_ConfigChannel+0x1b2>
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	07d7      	lsls	r7, r2, #31
 800b48a:	d54c      	bpl.n	800b526 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800b48e:	2200      	movs	r2, #0
 800b490:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
}
 800b494:	4618      	mov	r0, r3
 800b496:	b016      	add	sp, #88	; 0x58
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800b49c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b49e:	4f79      	ldr	r7, [pc, #484]	; (800b684 <HAL_ADC_ConfigChannel+0x310>)
 800b4a0:	4017      	ands	r7, r2
 800b4a2:	ea47 0208 	orr.w	r2, r7, r8
 800b4a6:	ea42 020c 	orr.w	r2, r2, ip
 800b4aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b4ae:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b4b0:	e7e4      	b.n	800b47c <HAL_ADC_ConfigChannel+0x108>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800b4b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b4b4:	4d73      	ldr	r5, [pc, #460]	; (800b684 <HAL_ADC_ConfigChannel+0x310>)
 800b4b6:	4015      	ands	r5, r2
 800b4b8:	ea45 0208 	orr.w	r2, r5, r8
 800b4bc:	ea42 020c 	orr.w	r2, r2, ip
 800b4c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b4c4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b4c6:	e7d9      	b.n	800b47c <HAL_ADC_ConfigChannel+0x108>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800b4c8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800b4ca:	4a6e      	ldr	r2, [pc, #440]	; (800b684 <HAL_ADC_ConfigChannel+0x310>)
 800b4cc:	402a      	ands	r2, r5
 800b4ce:	ea42 0208 	orr.w	r2, r2, r8
 800b4d2:	ea42 020c 	orr.w	r2, r2, ip
 800b4d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800b4da:	66da      	str	r2, [r3, #108]	; 0x6c
 800b4dc:	e7ce      	b.n	800b47c <HAL_ADC_ConfigChannel+0x108>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b4de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b4e0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800b4e4:	4590      	cmp	r8, r2
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800b4e6:	bf02      	ittt	eq
 800b4e8:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800b4ea:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800b4ee:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b4f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b4f2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800b4f6:	4590      	cmp	r8, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800b4f8:	bf02      	ittt	eq
 800b4fa:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 800b4fc:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800b500:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b502:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b504:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800b508:	4590      	cmp	r8, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800b50a:	bf02      	ittt	eq
 800b50c:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800b50e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800b512:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b514:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b516:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800b51a:	4590      	cmp	r8, r2
 800b51c:	d1ae      	bne.n	800b47c <HAL_ADC_ConfigChannel+0x108>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800b51e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b520:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b524:	e7d9      	b.n	800b4da <HAL_ADC_ConfigChannel+0x166>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b526:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b528:	2e01      	cmp	r6, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b52a:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b52e:	d00a      	beq.n	800b546 <HAL_ADC_ConfigChannel+0x1d2>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b530:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800b534:	ea21 0202 	bic.w	r2, r1, r2
 800b538:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b53c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b540:	d126      	bne.n	800b590 <HAL_ADC_ConfigChannel+0x21c>
 800b542:	4a51      	ldr	r2, [pc, #324]	; (800b688 <HAL_ADC_ConfigChannel+0x314>)
 800b544:	e02a      	b.n	800b59c <HAL_ADC_ConfigChannel+0x228>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b546:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b54a:	688e      	ldr	r6, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b54c:	432a      	orrs	r2, r5
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800b54e:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800b550:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800b554:	d90c      	bls.n	800b570 <HAL_ADC_ConfigChannel+0x1fc>
        MODIFY_REG(hadc->Instance->SMPR2,
 800b556:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b55a:	6999      	ldr	r1, [r3, #24]
 800b55c:	3a1b      	subs	r2, #27
 800b55e:	2507      	movs	r5, #7
 800b560:	4095      	lsls	r5, r2
 800b562:	ea21 0105 	bic.w	r1, r1, r5
 800b566:	fa06 f202 	lsl.w	r2, r6, r2
 800b56a:	430a      	orrs	r2, r1
 800b56c:	619a      	str	r2, [r3, #24]
 800b56e:	e7e5      	b.n	800b53c <HAL_ADC_ConfigChannel+0x1c8>
        MODIFY_REG(hadc->Instance->SMPR1,
 800b570:	1c65      	adds	r5, r4, #1
 800b572:	6959      	ldr	r1, [r3, #20]
 800b574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b578:	2207      	movs	r2, #7
 800b57a:	40aa      	lsls	r2, r5
 800b57c:	ea21 0102 	bic.w	r1, r1, r2
 800b580:	fa06 f205 	lsl.w	r2, r6, r5
 800b584:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 800b58a:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b58c:	f43f af7e 	beq.w	800b48c <HAL_ADC_ConfigChannel+0x118>
 800b590:	4d3e      	ldr	r5, [pc, #248]	; (800b68c <HAL_ADC_ConfigChannel+0x318>)
 800b592:	493d      	ldr	r1, [pc, #244]	; (800b688 <HAL_ADC_ConfigChannel+0x314>)
 800b594:	4a3e      	ldr	r2, [pc, #248]	; (800b690 <HAL_ADC_ConfigChannel+0x31c>)
 800b596:	42ab      	cmp	r3, r5
 800b598:	bf08      	it	eq
 800b59a:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800b59c:	2c10      	cmp	r4, #16
 800b59e:	d10a      	bne.n	800b5b6 <HAL_ADC_ConfigChannel+0x242>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800b5a0:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800b5a2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800b5a6:	f47f af71 	bne.w	800b48c <HAL_ADC_ConfigChannel+0x118>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800b5aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5ae:	4937      	ldr	r1, [pc, #220]	; (800b68c <HAL_ADC_ConfigChannel+0x318>)
 800b5b0:	d10e      	bne.n	800b5d0 <HAL_ADC_ConfigChannel+0x25c>
 800b5b2:	9101      	str	r1, [sp, #4]
 800b5b4:	e016      	b.n	800b5e4 <HAL_ADC_ConfigChannel+0x270>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800b5b6:	2c11      	cmp	r4, #17
 800b5b8:	d103      	bne.n	800b5c2 <HAL_ADC_ConfigChannel+0x24e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800b5ba:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800b5bc:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800b5c0:	e7f1      	b.n	800b5a6 <HAL_ADC_ConfigChannel+0x232>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800b5c2:	2c12      	cmp	r4, #18
 800b5c4:	f47f af62 	bne.w	800b48c <HAL_ADC_ConfigChannel+0x118>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800b5c8:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800b5ca:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800b5ce:	e7ea      	b.n	800b5a6 <HAL_ADC_ConfigChannel+0x232>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800b5d0:	428b      	cmp	r3, r1
 800b5d2:	d102      	bne.n	800b5da <HAL_ADC_ConfigChannel+0x266>
 800b5d4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800b5d8:	e7eb      	b.n	800b5b2 <HAL_ADC_ConfigChannel+0x23e>
 800b5da:	492e      	ldr	r1, [pc, #184]	; (800b694 <HAL_ADC_ConfigChannel+0x320>)
 800b5dc:	4d2e      	ldr	r5, [pc, #184]	; (800b698 <HAL_ADC_ConfigChannel+0x324>)
 800b5de:	428b      	cmp	r3, r1
 800b5e0:	d12b      	bne.n	800b63a <HAL_ADC_ConfigChannel+0x2c6>
 800b5e2:	9501      	str	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800b5e4:	6899      	ldr	r1, [r3, #8]
 800b5e6:	f001 0103 	and.w	r1, r1, #3
 800b5ea:	2901      	cmp	r1, #1
 800b5ec:	d102      	bne.n	800b5f4 <HAL_ADC_ConfigChannel+0x280>
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	07cd      	lsls	r5, r1, #31
 800b5f2:	d438      	bmi.n	800b666 <HAL_ADC_ConfigChannel+0x2f2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800b5f4:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800b5f6:	b139      	cbz	r1, 800b608 <HAL_ADC_ConfigChannel+0x294>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800b5f8:	688d      	ldr	r5, [r1, #8]
 800b5fa:	f005 0503 	and.w	r5, r5, #3
 800b5fe:	2d01      	cmp	r5, #1
 800b600:	d102      	bne.n	800b608 <HAL_ADC_ConfigChannel+0x294>
 800b602:	6809      	ldr	r1, [r1, #0]
 800b604:	07c9      	lsls	r1, r1, #31
 800b606:	d42e      	bmi.n	800b666 <HAL_ADC_ConfigChannel+0x2f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800b608:	2c10      	cmp	r4, #16
 800b60a:	d11a      	bne.n	800b642 <HAL_ADC_ConfigChannel+0x2ce>
 800b60c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b610:	f47f af3c 	bne.w	800b48c <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800b614:	6893      	ldr	r3, [r2, #8]
 800b616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b61a:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b61c:	4b1f      	ldr	r3, [pc, #124]	; (800b69c <HAL_ADC_ConfigChannel+0x328>)
 800b61e:	4a20      	ldr	r2, [pc, #128]	; (800b6a0 <HAL_ADC_ConfigChannel+0x32c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	fbb3 f3f2 	udiv	r3, r3, r2
 800b626:	220a      	movs	r2, #10
 800b628:	4353      	muls	r3, r2
            wait_loop_index--;
 800b62a:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0)
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f43f af2c 	beq.w	800b48c <HAL_ADC_ConfigChannel+0x118>
            wait_loop_index--;
 800b634:	9b00      	ldr	r3, [sp, #0]
 800b636:	3b01      	subs	r3, #1
 800b638:	e7f7      	b.n	800b62a <HAL_ADC_ConfigChannel+0x2b6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	bf18      	it	ne
 800b63e:	2100      	movne	r1, #0
 800b640:	e7b7      	b.n	800b5b2 <HAL_ADC_ConfigChannel+0x23e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800b642:	2c11      	cmp	r4, #17
 800b644:	d108      	bne.n	800b658 <HAL_ADC_ConfigChannel+0x2e4>
 800b646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b64a:	f47f af1f 	bne.w	800b48c <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800b64e:	6893      	ldr	r3, [r2, #8]
 800b650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800b654:	6093      	str	r3, [r2, #8]
 800b656:	e719      	b.n	800b48c <HAL_ADC_ConfigChannel+0x118>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800b658:	2c12      	cmp	r4, #18
 800b65a:	f47f af17 	bne.w	800b48c <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800b65e:	6893      	ldr	r3, [r2, #8]
 800b660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b664:	e7f6      	b.n	800b654 <HAL_ADC_ConfigChannel+0x2e0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b666:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b668:	f043 0320 	orr.w	r3, r3, #32
 800b66c:	6443      	str	r3, [r0, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e70d      	b.n	800b48e <HAL_ADC_ConfigChannel+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b672:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b674:	f043 0320 	orr.w	r3, r3, #32
 800b678:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800b67a:	4613      	mov	r3, r2
 800b67c:	e707      	b.n	800b48e <HAL_ADC_ConfigChannel+0x11a>
  __HAL_LOCK(hadc);
 800b67e:	2302      	movs	r3, #2
 800b680:	e708      	b.n	800b494 <HAL_ADC_ConfigChannel+0x120>
 800b682:	bf00      	nop
 800b684:	83fff000 	.word	0x83fff000
 800b688:	50000300 	.word	0x50000300
 800b68c:	50000100 	.word	0x50000100
 800b690:	50000700 	.word	0x50000700
 800b694:	50000400 	.word	0x50000400
 800b698:	50000500 	.word	0x50000500
 800b69c:	2000002c 	.word	0x2000002c
 800b6a0:	000f4240 	.word	0x000f4240

0800b6a4 <HAL_CAN_ConfigFilter>:
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  hcan->Instance->FMR |= (uint32_t)CAN_FMR_FINIT;
 800b6a4:	6803      	ldr	r3, [r0, #0]
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800b6a6:	694a      	ldr	r2, [r1, #20]
  hcan->Instance->FMR |= (uint32_t)CAN_FMR_FINIT;
 800b6a8:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800b6ac:	f040 0001 	orr.w	r0, r0, #1
{
 800b6b0:	b570      	push	{r4, r5, r6, lr}
  hcan->Instance->FMR |= (uint32_t)CAN_FMR_FINIT;
 800b6b2:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  
  /* Filter Deactivation */
  hcan->Instance->FA1R &= ~(uint32_t)filternbrbitpos;
 800b6b6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800b6ba:	2401      	movs	r4, #1
 800b6bc:	4094      	lsls	r4, r2
  hcan->Instance->FA1R &= ~(uint32_t)filternbrbitpos;
 800b6be:	ea25 0504 	bic.w	r5, r5, r4
 800b6c2:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b6c6:	69cd      	ldr	r5, [r1, #28]
  hcan->Instance->FA1R &= ~(uint32_t)filternbrbitpos;
 800b6c8:	43e0      	mvns	r0, r4
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b6ca:	bb85      	cbnz	r5, 800b72e <HAL_CAN_ConfigFilter+0x8a>
  {
    /* 16-bit scale for the filter */
    hcan->Instance->FS1R &= ~(uint32_t)filternbrbitpos;
 800b6cc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800b6d0:	68ce      	ldr	r6, [r1, #12]
    hcan->Instance->FS1R &= ~(uint32_t)filternbrbitpos;
 800b6d2:	4005      	ands	r5, r0
 800b6d4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800b6d8:	888d      	ldrh	r5, [r1, #4]
 800b6da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800b6de:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800b6e2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800b6e6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 800b6e8:	880d      	ldrh	r5, [r1, #0]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800b6ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800b6ee:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b6f2:	698a      	ldr	r2, [r1, #24]
 800b6f4:	bb6a      	cbnz	r2, 800b752 <HAL_CAN_ConfigFilter+0xae>
  {
    /*Id/Mask mode for the filter*/
    hcan->Instance->FM1R &= ~(uint32_t)filternbrbitpos;
 800b6f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6fa:	4002      	ands	r2, r0
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    hcan->Instance->FM1R |= (uint32_t)filternbrbitpos;
 800b6fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b700:	690a      	ldr	r2, [r1, #16]
 800b702:	bb52      	cbnz	r2, 800b75a <HAL_CAN_ConfigFilter+0xb6>
  {
    /* FIFO 0 assignation for the filter */
    hcan->Instance->FFA1R &= ~(uint32_t)filternbrbitpos;
 800b704:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b708:	4010      	ands	r0, r2
 800b70a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    hcan->Instance->FFA1R |= (uint32_t)filternbrbitpos;
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 800b70e:	6a0a      	ldr	r2, [r1, #32]
 800b710:	2a01      	cmp	r2, #1
  {
    hcan->Instance->FA1R |= filternbrbitpos;
 800b712:	bf02      	ittt	eq
 800b714:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800b718:	4314      	orreq	r4, r2
 800b71a:	f8c3 421c 	streq.w	r4, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  hcan->Instance->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 800b71e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b722:	f022 0201 	bic.w	r2, r2, #1
 800b726:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 800b72a:	2000      	movs	r0, #0
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b72e:	2d01      	cmp	r5, #1
 800b730:	d1df      	bne.n	800b6f2 <HAL_CAN_ConfigFilter+0x4e>
    hcan->Instance->FS1R |= filternbrbitpos;
 800b732:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800b736:	680e      	ldr	r6, [r1, #0]
    hcan->Instance->FS1R |= filternbrbitpos;
 800b738:	4325      	orrs	r5, r4
 800b73a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800b73e:	888d      	ldrh	r5, [r1, #4]
 800b740:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800b744:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800b748:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800b74c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b74e:	898d      	ldrh	r5, [r1, #12]
 800b750:	e7cb      	b.n	800b6ea <HAL_CAN_ConfigFilter+0x46>
    hcan->Instance->FM1R |= (uint32_t)filternbrbitpos;
 800b752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b756:	4322      	orrs	r2, r4
 800b758:	e7d0      	b.n	800b6fc <HAL_CAN_ConfigFilter+0x58>
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 800b75a:	2a01      	cmp	r2, #1
    hcan->Instance->FFA1R |= (uint32_t)filternbrbitpos;
 800b75c:	bf02      	ittt	eq
 800b75e:	f8d3 2214 	ldreq.w	r2, [r3, #532]	; 0x214
 800b762:	4322      	orreq	r2, r4
 800b764:	f8c3 2214 	streq.w	r2, [r3, #532]	; 0x214
 800b768:	e7d1      	b.n	800b70e <HAL_CAN_ConfigFilter+0x6a>

0800b76a <HAL_CAN_Init>:
{
 800b76a:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 800b76c:	4604      	mov	r4, r0
 800b76e:	2800      	cmp	r0, #0
 800b770:	f000 808f 	beq.w	800b892 <HAL_CAN_Init+0x128>
  if(hcan->State == HAL_CAN_STATE_RESET)
 800b774:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b778:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b77c:	b91b      	cbnz	r3, 800b786 <HAL_CAN_Init+0x1c>
    hcan->Lock = HAL_UNLOCKED;
 800b77e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_CAN_MspInit(hcan);
 800b782:	f002 fd77 	bl	800e274 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 800b786:	2302      	movs	r3, #2
 800b788:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	f022 0202 	bic.w	r2, r2, #2
 800b794:	601a      	str	r2, [r3, #0]
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	f042 0201 	orr.w	r2, r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 800b79e:	f7ff fb0d 	bl	800adbc <HAL_GetTick>
 800b7a2:	4606      	mov	r6, r0
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	685d      	ldr	r5, [r3, #4]
 800b7a8:	f015 0501 	ands.w	r5, r5, #1
 800b7ac:	d057      	beq.n	800b85e <HAL_CAN_Init+0xf4>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	07d1      	lsls	r1, r2, #31
 800b7b2:	d56b      	bpl.n	800b88c <HAL_CAN_Init+0x122>
    if (hcan->Init.TTCM == ENABLE)
 800b7b4:	69a2      	ldr	r2, [r4, #24]
 800b7b6:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	bf0c      	ite	eq
 800b7bc:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800b7c0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800b7c4:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 800b7c6:	69e2      	ldr	r2, [r4, #28]
 800b7c8:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	bf0c      	ite	eq
 800b7ce:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800b7d2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800b7d6:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 800b7d8:	6a22      	ldr	r2, [r4, #32]
 800b7da:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	bf0c      	ite	eq
 800b7e0:	f042 0220 	orreq.w	r2, r2, #32
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800b7e4:	f022 0220 	bicne.w	r2, r2, #32
 800b7e8:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 800b7ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b7ec:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_NART;
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	bf0c      	ite	eq
 800b7f2:	f042 0210 	orreq.w	r2, r2, #16
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 800b7f6:	f022 0210 	bicne.w	r2, r2, #16
 800b7fa:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 800b7fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b7fe:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	bf0c      	ite	eq
 800b804:	f042 0208 	orreq.w	r2, r2, #8
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800b808:	f022 0208 	bicne.w	r2, r2, #8
 800b80c:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 800b80e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b810:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	bf0c      	ite	eq
 800b816:	f042 0204 	orreq.w	r2, r2, #4
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800b81a:	f022 0204 	bicne.w	r2, r2, #4
 800b81e:	601a      	str	r2, [r3, #0]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800b820:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b824:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 800b826:	6921      	ldr	r1, [r4, #16]
 800b828:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 800b82a:	6961      	ldr	r1, [r4, #20]
 800b82c:	430a      	orrs	r2, r1
               ((uint32_t)hcan->Init.Prescaler - 1);
 800b82e:	6861      	ldr	r1, [r4, #4]
 800b830:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 800b832:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800b834:	61da      	str	r2, [r3, #28]
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	f022 0201 	bic.w	r2, r2, #1
 800b83c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();   
 800b83e:	f7ff fabd 	bl	800adbc <HAL_GetTick>
 800b842:	4605      	mov	r5, r0
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	07d2      	lsls	r2, r2, #31
 800b84a:	d413      	bmi.n	800b874 <HAL_CAN_Init+0x10a>
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800b84c:	6858      	ldr	r0, [r3, #4]
 800b84e:	f010 0001 	ands.w	r0, r0, #1
 800b852:	d11b      	bne.n	800b88c <HAL_CAN_Init+0x122>
    hcan->State = HAL_CAN_STATE_READY;
 800b854:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b856:	63e0      	str	r0, [r4, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_READY;
 800b858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800b85c:	e009      	b.n	800b872 <HAL_CAN_Init+0x108>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800b85e:	f7ff faad 	bl	800adbc <HAL_GetTick>
 800b862:	1b80      	subs	r0, r0, r6
 800b864:	280a      	cmp	r0, #10
 800b866:	d99d      	bls.n	800b7a4 <HAL_CAN_Init+0x3a>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800b868:	2003      	movs	r0, #3
 800b86a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
      __HAL_UNLOCK(hcan);
 800b86e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
}
 800b872:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800b874:	f7ff faa2 	bl	800adbc <HAL_GetTick>
 800b878:	1b40      	subs	r0, r0, r5
 800b87a:	280a      	cmp	r0, #10
 800b87c:	d9e2      	bls.n	800b844 <HAL_CAN_Init+0xda>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800b87e:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 800b880:	2300      	movs	r3, #0
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800b882:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
       __HAL_UNLOCK(hcan);
 800b886:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
         return HAL_TIMEOUT;
 800b88a:	e7f2      	b.n	800b872 <HAL_CAN_Init+0x108>
    hcan->State = HAL_CAN_STATE_ERROR;
 800b88c:	2304      	movs	r3, #4
 800b88e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
     return HAL_ERROR;
 800b892:	2001      	movs	r0, #1
 800b894:	e7ed      	b.n	800b872 <HAL_CAN_Init+0x108>
	...

0800b898 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 800b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 800b89c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b8a0:	2b01      	cmp	r3, #1
{
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	460f      	mov	r7, r1
  __HAL_LOCK(hcan);
 800b8a6:	f000 8092 	beq.w	800b9ce <HAL_CAN_Transmit+0x136>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 800b8b0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
  }
  
  /* Select one empty transmit mailbox */
  if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800b8b4:	6802      	ldr	r2, [r0, #0]
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 800b8b6:	2b22      	cmp	r3, #34	; 0x22
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 800b8b8:	bf0c      	ite	eq
 800b8ba:	2332      	moveq	r3, #50	; 0x32
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800b8bc:	2312      	movne	r3, #18
 800b8be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800b8c2:	6893      	ldr	r3, [r2, #8]
 800b8c4:	0158      	lsls	r0, r3, #5
 800b8c6:	d40e      	bmi.n	800b8e6 <HAL_CAN_Transmit+0x4e>
  {
    transmitmailbox = 0;
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800b8c8:	6893      	ldr	r3, [r2, #8]
 800b8ca:	0119      	lsls	r1, r3, #4
 800b8cc:	d459      	bmi.n	800b982 <HAL_CAN_Transmit+0xea>
  {
    transmitmailbox = 1;
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800b8ce:	6893      	ldr	r3, [r2, #8]
 800b8d0:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800b8d4:	d157      	bne.n	800b986 <HAL_CAN_Transmit+0xee>
    return HAL_OK;
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800b8dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    /* Return function status */
    return HAL_ERROR;
 800b8e0:	2001      	movs	r0, #1
  }
}
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    transmitmailbox = 0;
 800b8e6:	2600      	movs	r6, #0
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800b8e8:	eb02 1306 	add.w	r3, r2, r6, lsl #4
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800b8ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800b8ee:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->RTR);
 800b8f2:	e9d0 5e02 	ldrd	r5, lr, [r0, #8]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800b8f6:	f001 0101 	and.w	r1, r1, #1
 800b8fa:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 800b8fe:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800b902:	2d00      	cmp	r5, #0
 800b904:	d141      	bne.n	800b98a <HAL_CAN_Transmit+0xf2>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
 800b906:	6805      	ldr	r5, [r0, #0]
 800b908:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 800b90c:	ea4e 5545 	orr.w	r5, lr, r5, lsl #21
 800b910:	430d      	orrs	r5, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 800b912:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800b916:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800b91a:	6901      	ldr	r1, [r0, #16]
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800b91c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800b9d8 <HAL_CAN_Transmit+0x140>
 800b920:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800b9dc <HAL_CAN_Transmit+0x144>
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800b924:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800b928:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800b92c:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800b92e:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800b932:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 800b936:	4329      	orrs	r1, r5
 800b938:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 800b93c:	4462      	add	r2, ip
                                             ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
 800b93e:	6941      	ldr	r1, [r0, #20]
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
 800b940:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
                                             ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
 800b944:	6981      	ldr	r1, [r0, #24]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
 800b946:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 800b94a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800b94e:	f042 0201 	orr.w	r2, r2, #1
 800b952:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();   
 800b956:	f7ff fa31 	bl	800adbc <HAL_GetTick>
 800b95a:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	491d      	ldr	r1, [pc, #116]	; (800b9d4 <HAL_CAN_Transmit+0x13c>)
 800b960:	689a      	ldr	r2, [r3, #8]
 800b962:	bb66      	cbnz	r6, 800b9be <HAL_CAN_Transmit+0x126>
 800b964:	ea31 0202 	bics.w	r2, r1, r2
 800b968:	d119      	bne.n	800b99e <HAL_CAN_Transmit+0x106>
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 800b96a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800b96e:	2b32      	cmp	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 800b970:	bf0c      	ite	eq
 800b972:	2322      	moveq	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
 800b974:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcan);
 800b976:	2000      	movs	r0, #0
      hcan->State = HAL_CAN_STATE_READY;
 800b978:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(hcan);
 800b97c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800b980:	e7af      	b.n	800b8e2 <HAL_CAN_Transmit+0x4a>
    transmitmailbox = 1;
 800b982:	2601      	movs	r6, #1
 800b984:	e7b0      	b.n	800b8e8 <HAL_CAN_Transmit+0x50>
    transmitmailbox = 2;
 800b986:	2602      	movs	r6, #2
 800b988:	e7ae      	b.n	800b8e8 <HAL_CAN_Transmit+0x50>
                                                  hcan->pTxMsg->IDE | \
 800b98a:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 800b98c:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->IDE | \
 800b990:	ea45 050e 	orr.w	r5, r5, lr
 800b994:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
 800b998:	ea45 0508 	orr.w	r5, r5, r8
 800b99c:	e7b9      	b.n	800b912 <HAL_CAN_Transmit+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 800b99e:	1c7a      	adds	r2, r7, #1
 800b9a0:	d0de      	beq.n	800b960 <HAL_CAN_Transmit+0xc8>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b9a2:	b937      	cbnz	r7, 800b9b2 <HAL_CAN_Transmit+0x11a>
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800b9a4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hcan);
 800b9a6:	2300      	movs	r3, #0
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800b9a8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hcan);
 800b9ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800b9b0:	e797      	b.n	800b8e2 <HAL_CAN_Transmit+0x4a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b9b2:	f7ff fa03 	bl	800adbc <HAL_GetTick>
 800b9b6:	1b40      	subs	r0, r0, r5
 800b9b8:	42b8      	cmp	r0, r7
 800b9ba:	d9cf      	bls.n	800b95c <HAL_CAN_Transmit+0xc4>
 800b9bc:	e7f2      	b.n	800b9a4 <HAL_CAN_Transmit+0x10c>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800b9be:	2e01      	cmp	r6, #1
 800b9c0:	d102      	bne.n	800b9c8 <HAL_CAN_Transmit+0x130>
 800b9c2:	ea39 0202 	bics.w	r2, r9, r2
 800b9c6:	e7cf      	b.n	800b968 <HAL_CAN_Transmit+0xd0>
 800b9c8:	ea38 0202 	bics.w	r2, r8, r2
 800b9cc:	e7cc      	b.n	800b968 <HAL_CAN_Transmit+0xd0>
  __HAL_LOCK(hcan);
 800b9ce:	2002      	movs	r0, #2
 800b9d0:	e787      	b.n	800b8e2 <HAL_CAN_Transmit+0x4a>
 800b9d2:	bf00      	nop
 800b9d4:	04000003 	.word	0x04000003
 800b9d8:	10030000 	.word	0x10030000
 800b9dc:	08000300 	.word	0x08000300

0800b9e0 <HAL_CAN_Receive_IT>:
  * @param  FIFONumber:    FIFO number.
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800b9e0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 800b9e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d003      	beq.n	800b9f2 <HAL_CAN_Receive_IT+0x12>
 800b9ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b9ee:	2b12      	cmp	r3, #18
 800b9f0:	d134      	bne.n	800ba5c <HAL_CAN_Receive_IT+0x7c>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 800b9f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d030      	beq.n	800ba5c <HAL_CAN_Receive_IT+0x7c>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 800ba00:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ba04:	2b12      	cmp	r3, #18
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 800ba06:	bf0c      	ite	eq
 800ba08:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 800ba0a:	2322      	movne	r3, #34	; 0x22
 800ba0c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    }
    
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ba10:	2200      	movs	r2, #0
    
    /* Enable Error warning Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
 800ba12:	6803      	ldr	r3, [r0, #0]
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ba14:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
 800ba16:	695c      	ldr	r4, [r3, #20]
 800ba18:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800ba1c:	615c      	str	r4, [r3, #20]
      
    /* Enable Error passive Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
 800ba1e:	695c      	ldr	r4, [r3, #20]
 800ba20:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800ba24:	615c      	str	r4, [r3, #20]
      
    /* Enable Bus-off Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
 800ba26:	695c      	ldr	r4, [r3, #20]
 800ba28:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800ba2c:	615c      	str	r4, [r3, #20]
      
    /* Enable Last error code Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
 800ba2e:	695c      	ldr	r4, [r3, #20]
 800ba30:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800ba34:	615c      	str	r4, [r3, #20]
      
    /* Enable Error Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
 800ba36:	695c      	ldr	r4, [r3, #20]
 800ba38:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800ba3c:	615c      	str	r4, [r3, #20]

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800ba3e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 800ba42:	b929      	cbnz	r1, 800ba50 <HAL_CAN_Receive_IT+0x70>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 800ba44:	695a      	ldr	r2, [r3, #20]
 800ba46:	f042 0202 	orr.w	r2, r2, #2
 800ba4a:	615a      	str	r2, [r3, #20]
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
}
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	bd10      	pop	{r4, pc}
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 800ba50:	6959      	ldr	r1, [r3, #20]
 800ba52:	f041 0110 	orr.w	r1, r1, #16
 800ba56:	6159      	str	r1, [r3, #20]
  return HAL_OK;
 800ba58:	4611      	mov	r1, r2
 800ba5a:	e7f7      	b.n	800ba4c <HAL_CAN_Receive_IT+0x6c>
    return HAL_BUSY;
 800ba5c:	2102      	movs	r1, #2
 800ba5e:	e7f5      	b.n	800ba4c <HAL_CAN_Receive_IT+0x6c>

0800ba60 <HAL_CAN_TxCpltCallback>:
 800ba60:	4770      	bx	lr

0800ba62 <CAN_Receive_IT.isra.0>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
 800ba62:	b538      	push	{r3, r4, r5, lr}
{
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800ba64:	6803      	ldr	r3, [r0, #0]
 800ba66:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ba68:	eb03 1401 	add.w	r4, r3, r1, lsl #4
 800ba6c:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800ba70:	f005 0504 	and.w	r5, r5, #4
 800ba74:	6095      	str	r5, [r2, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 800ba76:	2d00      	cmp	r5, #0
 800ba78:	d15f      	bne.n	800bb3a <CAN_Receive_IT.isra.0+0xd8>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 800ba7a:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800ba7e:	0d6d      	lsrs	r5, r5, #21
 800ba80:	6015      	str	r5, [r2, #0]
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800ba82:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800ba86:	f005 0502 	and.w	r5, r5, #2
 800ba8a:	60d5      	str	r5, [r2, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800ba8c:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800ba90:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 800ba94:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ba98:	61d4      	str	r4, [r2, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 800ba9a:	eb03 1401 	add.w	r4, r3, r1, lsl #4
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800ba9e:	f005 050f 	and.w	r5, r5, #15
 800baa2:	6115      	str	r5, [r2, #16]
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 800baa4:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800baa8:	7515      	strb	r5, [r2, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800baaa:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800baae:	0a2d      	lsrs	r5, r5, #8
 800bab0:	7555      	strb	r5, [r2, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800bab2:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800bab6:	0c2d      	lsrs	r5, r5, #16
 800bab8:	7595      	strb	r5, [r2, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800baba:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800babe:	0e2d      	lsrs	r5, r5, #24
 800bac0:	75d5      	strb	r5, [r2, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 800bac2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 800bac6:	7615      	strb	r5, [r2, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800bac8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 800bacc:	0a2d      	lsrs	r5, r5, #8
 800bace:	7655      	strb	r5, [r2, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800bad0:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 800bad4:	0c2d      	lsrs	r5, r5, #16
 800bad6:	7695      	strb	r5, [r2, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800bad8:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800badc:	0e24      	lsrs	r4, r4, #24
 800bade:	76d4      	strb	r4, [r2, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800bae0:	2900      	cmp	r1, #0
 800bae2:	d12f      	bne.n	800bb44 <CAN_Receive_IT.isra.0+0xe2>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 800bae4:	68da      	ldr	r2, [r3, #12]
 800bae6:	f042 0220 	orr.w	r2, r2, #32
 800baea:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 800baec:	695a      	ldr	r2, [r3, #20]
 800baee:	f022 0202 	bic.w	r2, r2, #2
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 800baf2:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 800baf4:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800baf8:	2a22      	cmp	r2, #34	; 0x22
 800bafa:	d113      	bne.n	800bb24 <CAN_Receive_IT.isra.0+0xc2>
  {   
    /* Disable Error warning Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 800bafc:	695a      	ldr	r2, [r3, #20]
 800bafe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb02:	615a      	str	r2, [r3, #20]
    
    /* Disable Error passive Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 800bb04:	695a      	ldr	r2, [r3, #20]
 800bb06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bb0a:	615a      	str	r2, [r3, #20]
    
    /* Disable Bus-off Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 800bb0c:	695a      	ldr	r2, [r3, #20]
 800bb0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb12:	615a      	str	r2, [r3, #20]
    
    /* Disable Last error code Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb1a:	615a      	str	r2, [r3, #20]
    
    /* Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 800bb1c:	695a      	ldr	r2, [r3, #20]
 800bb1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb22:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 800bb24:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800bb28:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 800bb2e:	2301      	movne	r3, #1
 800bb30:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 800bb34:	f7f7 fb1e 	bl	8003174 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 800bb38:	bd38      	pop	{r3, r4, r5, pc}
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 800bb3a:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800bb3e:	08ed      	lsrs	r5, r5, #3
 800bb40:	6055      	str	r5, [r2, #4]
 800bb42:	e79e      	b.n	800ba82 <CAN_Receive_IT.isra.0+0x20>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800bb44:	691a      	ldr	r2, [r3, #16]
 800bb46:	f042 0220 	orr.w	r2, r2, #32
 800bb4a:	611a      	str	r2, [r3, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 800bb4c:	695a      	ldr	r2, [r3, #20]
 800bb4e:	f022 0210 	bic.w	r2, r2, #16
 800bb52:	e7ce      	b.n	800baf2 <CAN_Receive_IT.isra.0+0x90>

0800bb54 <HAL_CAN_ErrorCallback>:
 800bb54:	4770      	bx	lr
	...

0800bb58 <HAL_CAN_IRQHandler>:
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800bb58:	6803      	ldr	r3, [r0, #0]
 800bb5a:	695a      	ldr	r2, [r3, #20]
 800bb5c:	07d2      	lsls	r2, r2, #31
{
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	4604      	mov	r4, r0
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800bb62:	d532      	bpl.n	800bbca <HAL_CAN_IRQHandler+0x72>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800bb64:	6899      	ldr	r1, [r3, #8]
 800bb66:	4a5a      	ldr	r2, [pc, #360]	; (800bcd0 <HAL_CAN_IRQHandler+0x178>)
 800bb68:	438a      	bics	r2, r1
 800bb6a:	d007      	beq.n	800bb7c <HAL_CAN_IRQHandler+0x24>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800bb6c:	6899      	ldr	r1, [r3, #8]
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800bb6e:	4a59      	ldr	r2, [pc, #356]	; (800bcd4 <HAL_CAN_IRQHandler+0x17c>)
 800bb70:	438a      	bics	r2, r1
 800bb72:	d003      	beq.n	800bb7c <HAL_CAN_IRQHandler+0x24>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 800bb74:	6899      	ldr	r1, [r3, #8]
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800bb76:	4a58      	ldr	r2, [pc, #352]	; (800bcd8 <HAL_CAN_IRQHandler+0x180>)
 800bb78:	438a      	bics	r2, r1
 800bb7a:	d126      	bne.n	800bbca <HAL_CAN_IRQHandler+0x72>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 800bb7c:	695a      	ldr	r2, [r3, #20]
 800bb7e:	f022 0201 	bic.w	r2, r2, #1
 800bb82:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800bb84:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800bb88:	2a12      	cmp	r2, #18
 800bb8a:	d113      	bne.n	800bbb4 <HAL_CAN_IRQHandler+0x5c>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb92:	615a      	str	r2, [r3, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 800bb94:	695a      	ldr	r2, [r3, #20]
 800bb96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bb9a:	615a      	str	r2, [r3, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 800bb9c:	695a      	ldr	r2, [r3, #20]
 800bb9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bba2:	615a      	str	r2, [r3, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 800bba4:	695a      	ldr	r2, [r3, #20]
 800bba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbaa:	615a      	str	r2, [r3, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 800bbac:	695a      	ldr	r2, [r3, #20]
 800bbae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbb2:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 800bbb4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800bbb8:	2b32      	cmp	r3, #50	; 0x32
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 800bbba:	bf0c      	ite	eq
 800bbbc:	2322      	moveq	r3, #34	; 0x22
    hcan->State = HAL_CAN_STATE_READY;
 800bbbe:	2301      	movne	r3, #1
 800bbc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_CAN_TxCpltCallback(hcan);
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7ff ff4b 	bl	800ba60 <HAL_CAN_TxCpltCallback>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	695a      	ldr	r2, [r3, #20]
 800bbce:	0790      	lsls	r0, r2, #30
 800bbd0:	d506      	bpl.n	800bbe0 <HAL_CAN_IRQHandler+0x88>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 800bbd2:	68db      	ldr	r3, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800bbd4:	0799      	lsls	r1, r3, #30
 800bbd6:	d003      	beq.n	800bbe0 <HAL_CAN_IRQHandler+0x88>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f7ff ff41 	bl	800ba62 <CAN_Receive_IT.isra.0>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	695a      	ldr	r2, [r3, #20]
 800bbe4:	06d2      	lsls	r2, r2, #27
 800bbe6:	d506      	bpl.n	800bbf6 <HAL_CAN_IRQHandler+0x9e>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 800bbe8:	691b      	ldr	r3, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800bbea:	0798      	lsls	r0, r3, #30
 800bbec:	d003      	beq.n	800bbf6 <HAL_CAN_IRQHandler+0x9e>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 800bbee:	2101      	movs	r1, #1
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f7ff ff36 	bl	800ba62 <CAN_Receive_IT.isra.0>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	699a      	ldr	r2, [r3, #24]
 800bbfa:	07d1      	lsls	r1, r2, #31
 800bbfc:	d509      	bpl.n	800bc12 <HAL_CAN_IRQHandler+0xba>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800bbfe:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800bc00:	05d2      	lsls	r2, r2, #23
 800bc02:	d506      	bpl.n	800bc12 <HAL_CAN_IRQHandler+0xba>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800bc04:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800bc06:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 800bc08:	bf42      	ittt	mi
 800bc0a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800bc0c:	f042 0201 	orrmi.w	r2, r2, #1
 800bc10:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	0791      	lsls	r1, r2, #30
 800bc16:	d509      	bpl.n	800bc2c <HAL_CAN_IRQHandler+0xd4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 800bc18:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800bc1a:	0592      	lsls	r2, r2, #22
 800bc1c:	d506      	bpl.n	800bc2c <HAL_CAN_IRQHandler+0xd4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800bc1e:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 800bc20:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800bc22:	bf42      	ittt	mi
 800bc24:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800bc26:	f042 0202 	orrmi.w	r2, r2, #2
 800bc2a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800bc2c:	699a      	ldr	r2, [r3, #24]
 800bc2e:	0751      	lsls	r1, r2, #29
 800bc30:	d509      	bpl.n	800bc46 <HAL_CAN_IRQHandler+0xee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800bc32:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800bc34:	0552      	lsls	r2, r2, #21
 800bc36:	d506      	bpl.n	800bc46 <HAL_CAN_IRQHandler+0xee>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800bc38:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800bc3a:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 800bc3c:	bf42      	ittt	mi
 800bc3e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800bc40:	f042 0204 	orrmi.w	r2, r2, #4
 800bc44:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800bc46:	699a      	ldr	r2, [r3, #24]
 800bc48:	f012 0f70 	tst.w	r2, #112	; 0x70
 800bc4c:	d015      	beq.n	800bc7a <HAL_CAN_IRQHandler+0x122>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800bc4e:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800bc50:	0511      	lsls	r1, r2, #20
 800bc52:	d512      	bpl.n	800bc7a <HAL_CAN_IRQHandler+0x122>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800bc54:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800bc56:	0412      	lsls	r2, r2, #16
 800bc58:	d50f      	bpl.n	800bc7a <HAL_CAN_IRQHandler+0x122>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 800bc5a:	699a      	ldr	r2, [r3, #24]
 800bc5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800bc60:	2a40      	cmp	r2, #64	; 0x40
 800bc62:	d02c      	beq.n	800bcbe <HAL_CAN_IRQHandler+0x166>
 800bc64:	d816      	bhi.n	800bc94 <HAL_CAN_IRQHandler+0x13c>
 800bc66:	2a20      	cmp	r2, #32
 800bc68:	d021      	beq.n	800bcae <HAL_CAN_IRQHandler+0x156>
 800bc6a:	2a30      	cmp	r2, #48	; 0x30
 800bc6c:	d023      	beq.n	800bcb6 <HAL_CAN_IRQHandler+0x15e>
 800bc6e:	2a10      	cmp	r2, #16
 800bc70:	d018      	beq.n	800bca4 <HAL_CAN_IRQHandler+0x14c>
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 800bc72:	699a      	ldr	r2, [r3, #24]
 800bc74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bc78:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 800bc7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bc7c:	b14a      	cbz	r2, 800bc92 <HAL_CAN_IRQHandler+0x13a>
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	f042 0204 	orr.w	r2, r2, #4
 800bc84:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 800bc86:	2301      	movs	r3, #1
 800bc88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_CAN_ErrorCallback(hcan);
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f7ff ff61 	bl	800bb54 <HAL_CAN_ErrorCallback>
}
 800bc92:	bd10      	pop	{r4, pc}
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 800bc94:	2a50      	cmp	r2, #80	; 0x50
 800bc96:	d016      	beq.n	800bcc6 <HAL_CAN_IRQHandler+0x16e>
 800bc98:	2a60      	cmp	r2, #96	; 0x60
 800bc9a:	d1ea      	bne.n	800bc72 <HAL_CAN_IRQHandler+0x11a>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800bc9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bc9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bca2:	e002      	b.n	800bcaa <HAL_CAN_IRQHandler+0x152>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 800bca4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bca6:	f042 0208 	orr.w	r2, r2, #8
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800bcaa:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 800bcac:	e7e1      	b.n	800bc72 <HAL_CAN_IRQHandler+0x11a>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 800bcae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bcb0:	f042 0210 	orr.w	r2, r2, #16
 800bcb4:	e7f9      	b.n	800bcaa <HAL_CAN_IRQHandler+0x152>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 800bcb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bcb8:	f042 0220 	orr.w	r2, r2, #32
 800bcbc:	e7f5      	b.n	800bcaa <HAL_CAN_IRQHandler+0x152>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 800bcbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bcc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcc4:	e7f1      	b.n	800bcaa <HAL_CAN_IRQHandler+0x152>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800bcc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bcc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bccc:	e7ed      	b.n	800bcaa <HAL_CAN_IRQHandler+0x152>
 800bcce:	bf00      	nop
 800bcd0:	04000003 	.word	0x04000003
 800bcd4:	08000300 	.word	0x08000300
 800bcd8:	10030000 	.word	0x10030000

0800bcdc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bcdc:	4907      	ldr	r1, [pc, #28]	; (800bcfc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800bcde:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800bce4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bce6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800bce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bcec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bcee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bcf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bcf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800bcf8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800bcfa:	4770      	bx	lr
 800bcfc:	e000ed00 	.word	0xe000ed00

0800bd00 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd00:	4b16      	ldr	r3, [pc, #88]	; (800bd5c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd02:	b530      	push	{r4, r5, lr}
 800bd04:	68dc      	ldr	r4, [r3, #12]
 800bd06:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd0a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd0e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd10:	2d04      	cmp	r5, #4
 800bd12:	bf28      	it	cs
 800bd14:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd16:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd1c:	bf8c      	ite	hi
 800bd1e:	3c03      	subhi	r4, #3
 800bd20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd22:	fa03 f505 	lsl.w	r5, r3, r5
 800bd26:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd2a:	40a3      	lsls	r3, r4
 800bd2c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd30:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 800bd32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd34:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd38:	bfac      	ite	ge
 800bd3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd3e:	4a08      	ldrlt	r2, [pc, #32]	; (800bd60 <HAL_NVIC_SetPriority+0x60>)
 800bd40:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800bd44:	bfb8      	it	lt
 800bd46:	f000 000f 	andlt.w	r0, r0, #15
 800bd4a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd4c:	bfaa      	itet	ge
 800bd4e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd52:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd54:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800bd58:	bd30      	pop	{r4, r5, pc}
 800bd5a:	bf00      	nop
 800bd5c:	e000ed00 	.word	0xe000ed00
 800bd60:	e000ed14 	.word	0xe000ed14

0800bd64 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800bd64:	0942      	lsrs	r2, r0, #5
 800bd66:	2301      	movs	r3, #1
 800bd68:	f000 001f 	and.w	r0, r0, #31
 800bd6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd70:	4b01      	ldr	r3, [pc, #4]	; (800bd78 <HAL_NVIC_EnableIRQ+0x14>)
 800bd72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800bd76:	4770      	bx	lr
 800bd78:	e000e100 	.word	0xe000e100

0800bd7c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bd7c:	3801      	subs	r0, #1
 800bd7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800bd82:	d20b      	bcs.n	800bd9c <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd8a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd8c:	21f0      	movs	r1, #240	; 0xf0
 800bd8e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd92:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd94:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd96:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bd9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800bd9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800bd9e:	4770      	bx	lr
 800bda0:	e000ed00 	.word	0xe000ed00

0800bda4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800bda4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bda8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	bf0c      	ite	eq
 800bdae:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800bdb2:	f022 0204 	bicne.w	r2, r2, #4
 800bdb6:	611a      	str	r2, [r3, #16]
  }
}
 800bdb8:	4770      	bx	lr

0800bdba <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800bdba:	4770      	bx	lr

0800bdbc <HAL_SYSTICK_IRQHandler>:
{
 800bdbc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800bdbe:	f7ff fffc 	bl	800bdba <HAL_SYSTICK_Callback>
}
 800bdc2:	bd08      	pop	{r3, pc}

0800bdc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800bdc4:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bdc6:	b300      	cbz	r0, 800be0a <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800bdc8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800bdcc:	b90b      	cbnz	r3, 800bdd2 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800bdce:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bdd2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800bdd6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdd8:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800bdda:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bddc:	4323      	orrs	r3, r4
 800bdde:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 800bde0:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bde2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bde4:	6944      	ldr	r4, [r0, #20]
 800bde6:	4323      	orrs	r3, r4
 800bde8:	6984      	ldr	r4, [r0, #24]
 800bdea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800bdec:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800bdee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800bdf2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800bdf6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800bdf8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800bdfa:	600b      	str	r3, [r1, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bdfc:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 800be02:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  return HAL_OK;
 800be06:	4618      	mov	r0, r3
}  
 800be08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800be0a:	2001      	movs	r0, #1
 800be0c:	e7fc      	b.n	800be08 <HAL_DMA_Init+0x44>

0800be0e <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be0e:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800be10:	f890 4020 	ldrb.w	r4, [r0, #32]
 800be14:	2c01      	cmp	r4, #1
 800be16:	d021      	beq.n	800be5c <HAL_DMA_Start_IT+0x4e>
 800be18:	f240 2401 	movw	r4, #513	; 0x201
 800be1c:	8404      	strh	r4, [r0, #32]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800be1e:	6804      	ldr	r4, [r0, #0]
 800be20:	6825      	ldr	r5, [r4, #0]
 800be22:	f025 0501 	bic.w	r5, r5, #1
 800be26:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be28:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be2a:	6843      	ldr	r3, [r0, #4]
 800be2c:	2b10      	cmp	r3, #16
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be2e:	bf0b      	itete	eq
 800be30:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800be32:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800be34:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800be36:	60e2      	strne	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	f043 0302 	orr.w	r3, r3, #2
 800be3e:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	f043 0304 	orr.w	r3, r3, #4
 800be46:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	f043 0308 	orr.w	r3, r3, #8
 800be4e:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	f043 0301 	orr.w	r3, r3, #1
 800be56:	6023      	str	r3, [r4, #0]
  return HAL_OK;    
 800be58:	2000      	movs	r0, #0
} 
 800be5a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 800be5c:	2002      	movs	r0, #2
 800be5e:	e7fc      	b.n	800be5a <HAL_DMA_Start_IT+0x4c>

0800be60 <HAL_DMA_IRQHandler>:
{        
 800be60:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800be62:	6803      	ldr	r3, [r0, #0]
 800be64:	4daf      	ldr	r5, [pc, #700]	; (800c124 <HAL_DMA_IRQHandler+0x2c4>)
 800be66:	4eb0      	ldr	r6, [pc, #704]	; (800c128 <HAL_DMA_IRQHandler+0x2c8>)
 800be68:	42ab      	cmp	r3, r5
{        
 800be6a:	4604      	mov	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800be6c:	f240 80f0 	bls.w	800c050 <HAL_DMA_IRQHandler+0x1f0>
 800be70:	4aae      	ldr	r2, [pc, #696]	; (800c12c <HAL_DMA_IRQHandler+0x2cc>)
 800be72:	42b3      	cmp	r3, r6
 800be74:	6811      	ldr	r1, [r2, #0]
 800be76:	f000 80fd 	beq.w	800c074 <HAL_DMA_IRQHandler+0x214>
 800be7a:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 800be7e:	4293      	cmp	r3, r2
 800be80:	f000 80fa 	beq.w	800c078 <HAL_DMA_IRQHandler+0x218>
 800be84:	3214      	adds	r2, #20
 800be86:	4293      	cmp	r3, r2
 800be88:	f000 80f8 	beq.w	800c07c <HAL_DMA_IRQHandler+0x21c>
 800be8c:	3214      	adds	r2, #20
 800be8e:	4293      	cmp	r3, r2
 800be90:	f000 80e4 	beq.w	800c05c <HAL_DMA_IRQHandler+0x1fc>
 800be94:	3214      	adds	r2, #20
 800be96:	4293      	cmp	r3, r2
 800be98:	f000 80e3 	beq.w	800c062 <HAL_DMA_IRQHandler+0x202>
 800be9c:	3214      	adds	r2, #20
 800be9e:	4293      	cmp	r3, r2
 800bea0:	f000 80e2 	beq.w	800c068 <HAL_DMA_IRQHandler+0x208>
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	f000 80e2 	beq.w	800c06e <HAL_DMA_IRQHandler+0x20e>
 800beaa:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800beae:	4293      	cmp	r3, r2
 800beb0:	f000 80e0 	beq.w	800c074 <HAL_DMA_IRQHandler+0x214>
 800beb4:	3214      	adds	r2, #20
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f000 80de 	beq.w	800c078 <HAL_DMA_IRQHandler+0x218>
 800bebc:	3214      	adds	r2, #20
 800bebe:	4293      	cmp	r3, r2
 800bec0:	f000 80dc 	beq.w	800c07c <HAL_DMA_IRQHandler+0x21c>
 800bec4:	3214      	adds	r2, #20
 800bec6:	4293      	cmp	r3, r2
 800bec8:	bf0c      	ite	eq
 800beca:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 800bece:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 800bed2:	4211      	tst	r1, r2
 800bed4:	bf14      	ite	ne
 800bed6:	2201      	movne	r2, #1
 800bed8:	2200      	moveq	r2, #0
 800beda:	2a00      	cmp	r2, #0
 800bedc:	f040 80d1 	bne.w	800c082 <HAL_DMA_IRQHandler+0x222>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	f240 8161 	bls.w	800c1aa <HAL_DMA_IRQHandler+0x34a>
 800bee8:	4a90      	ldr	r2, [pc, #576]	; (800c12c <HAL_DMA_IRQHandler+0x2cc>)
 800beea:	42b3      	cmp	r3, r6
 800beec:	6811      	ldr	r1, [r2, #0]
 800beee:	f000 816e 	beq.w	800c1ce <HAL_DMA_IRQHandler+0x36e>
 800bef2:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 800bef6:	4293      	cmp	r3, r2
 800bef8:	f000 816b 	beq.w	800c1d2 <HAL_DMA_IRQHandler+0x372>
 800befc:	3214      	adds	r2, #20
 800befe:	4293      	cmp	r3, r2
 800bf00:	f000 8169 	beq.w	800c1d6 <HAL_DMA_IRQHandler+0x376>
 800bf04:	3214      	adds	r2, #20
 800bf06:	4293      	cmp	r3, r2
 800bf08:	f000 8155 	beq.w	800c1b6 <HAL_DMA_IRQHandler+0x356>
 800bf0c:	3214      	adds	r2, #20
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	f000 8154 	beq.w	800c1bc <HAL_DMA_IRQHandler+0x35c>
 800bf14:	3214      	adds	r2, #20
 800bf16:	4293      	cmp	r3, r2
 800bf18:	f000 8153 	beq.w	800c1c2 <HAL_DMA_IRQHandler+0x362>
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	f000 8153 	beq.w	800c1c8 <HAL_DMA_IRQHandler+0x368>
 800bf22:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800bf26:	4293      	cmp	r3, r2
 800bf28:	f000 8151 	beq.w	800c1ce <HAL_DMA_IRQHandler+0x36e>
 800bf2c:	3214      	adds	r2, #20
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	f000 814f 	beq.w	800c1d2 <HAL_DMA_IRQHandler+0x372>
 800bf34:	3214      	adds	r2, #20
 800bf36:	4293      	cmp	r3, r2
 800bf38:	f000 814d 	beq.w	800c1d6 <HAL_DMA_IRQHandler+0x376>
 800bf3c:	3214      	adds	r2, #20
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	bf0c      	ite	eq
 800bf42:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 800bf46:	f44f 2280 	movne.w	r2, #262144	; 0x40000
 800bf4a:	4211      	tst	r1, r2
 800bf4c:	d043      	beq.n	800bfd6 <HAL_DMA_IRQHandler+0x176>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	0752      	lsls	r2, r2, #29
 800bf52:	d540      	bpl.n	800bfd6 <HAL_DMA_IRQHandler+0x176>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	0690      	lsls	r0, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf58:	bf5e      	ittt	pl
 800bf5a:	681a      	ldrpl	r2, [r3, #0]
 800bf5c:	f022 0204 	bicpl.w	r2, r2, #4
 800bf60:	601a      	strpl	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800bf62:	42ab      	cmp	r3, r5
 800bf64:	f240 814d 	bls.w	800c202 <HAL_DMA_IRQHandler+0x3a2>
 800bf68:	42b3      	cmp	r3, r6
 800bf6a:	f000 8143 	beq.w	800c1f4 <HAL_DMA_IRQHandler+0x394>
 800bf6e:	4a70      	ldr	r2, [pc, #448]	; (800c130 <HAL_DMA_IRQHandler+0x2d0>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	f000 8141 	beq.w	800c1f8 <HAL_DMA_IRQHandler+0x398>
 800bf76:	3214      	adds	r2, #20
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	f000 813f 	beq.w	800c1fc <HAL_DMA_IRQHandler+0x39c>
 800bf7e:	3214      	adds	r2, #20
 800bf80:	4293      	cmp	r3, r2
 800bf82:	f000 812b 	beq.w	800c1dc <HAL_DMA_IRQHandler+0x37c>
 800bf86:	3214      	adds	r2, #20
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	f000 812a 	beq.w	800c1e2 <HAL_DMA_IRQHandler+0x382>
 800bf8e:	3214      	adds	r2, #20
 800bf90:	4293      	cmp	r3, r2
 800bf92:	f000 8129 	beq.w	800c1e8 <HAL_DMA_IRQHandler+0x388>
 800bf96:	42ab      	cmp	r3, r5
 800bf98:	f000 8129 	beq.w	800c1ee <HAL_DMA_IRQHandler+0x38e>
 800bf9c:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	f000 8127 	beq.w	800c1f4 <HAL_DMA_IRQHandler+0x394>
 800bfa6:	3214      	adds	r2, #20
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	f000 8125 	beq.w	800c1f8 <HAL_DMA_IRQHandler+0x398>
 800bfae:	3214      	adds	r2, #20
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	f000 8123 	beq.w	800c1fc <HAL_DMA_IRQHandler+0x39c>
 800bfb6:	3214      	adds	r2, #20
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bf14      	ite	ne
 800bfbc:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800bfc0:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800bfc4:	4a59      	ldr	r2, [pc, #356]	; (800c12c <HAL_DMA_IRQHandler+0x2cc>)
 800bfc6:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800bfc8:	2311      	movs	r3, #17
 800bfca:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if(hdma->XferHalfCpltCallback != NULL)
 800bfce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfd0:	b10b      	cbz	r3, 800bfd6 <HAL_DMA_IRQHandler+0x176>
        hdma->XferHalfCpltCallback(hdma);
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	f240 814b 	bls.w	800c274 <HAL_DMA_IRQHandler+0x414>
 800bfde:	4a53      	ldr	r2, [pc, #332]	; (800c12c <HAL_DMA_IRQHandler+0x2cc>)
 800bfe0:	42b3      	cmp	r3, r6
 800bfe2:	6811      	ldr	r1, [r2, #0]
 800bfe4:	f000 8158 	beq.w	800c298 <HAL_DMA_IRQHandler+0x438>
 800bfe8:	f5a2 7279 	sub.w	r2, r2, #996	; 0x3e4
 800bfec:	4293      	cmp	r3, r2
 800bfee:	f000 8155 	beq.w	800c29c <HAL_DMA_IRQHandler+0x43c>
 800bff2:	3214      	adds	r2, #20
 800bff4:	4293      	cmp	r3, r2
 800bff6:	f000 8153 	beq.w	800c2a0 <HAL_DMA_IRQHandler+0x440>
 800bffa:	3214      	adds	r2, #20
 800bffc:	4293      	cmp	r3, r2
 800bffe:	f000 813f 	beq.w	800c280 <HAL_DMA_IRQHandler+0x420>
 800c002:	3214      	adds	r2, #20
 800c004:	4293      	cmp	r3, r2
 800c006:	f000 813e 	beq.w	800c286 <HAL_DMA_IRQHandler+0x426>
 800c00a:	3214      	adds	r2, #20
 800c00c:	4293      	cmp	r3, r2
 800c00e:	f000 813d 	beq.w	800c28c <HAL_DMA_IRQHandler+0x42c>
 800c012:	42ab      	cmp	r3, r5
 800c014:	f000 813d 	beq.w	800c292 <HAL_DMA_IRQHandler+0x432>
 800c018:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c01c:	4293      	cmp	r3, r2
 800c01e:	f000 813b 	beq.w	800c298 <HAL_DMA_IRQHandler+0x438>
 800c022:	3214      	adds	r2, #20
 800c024:	4293      	cmp	r3, r2
 800c026:	f000 8139 	beq.w	800c29c <HAL_DMA_IRQHandler+0x43c>
 800c02a:	3214      	adds	r2, #20
 800c02c:	4293      	cmp	r3, r2
 800c02e:	f000 8137 	beq.w	800c2a0 <HAL_DMA_IRQHandler+0x440>
 800c032:	3214      	adds	r2, #20
 800c034:	4293      	cmp	r3, r2
 800c036:	bf0c      	ite	eq
 800c038:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 800c03c:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 800c040:	4211      	tst	r1, r2
 800c042:	bf14      	ite	ne
 800c044:	2201      	movne	r2, #1
 800c046:	2200      	moveq	r2, #0
 800c048:	2a00      	cmp	r2, #0
 800c04a:	f040 812c 	bne.w	800c2a6 <HAL_DMA_IRQHandler+0x446>
}  
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800c050:	4a38      	ldr	r2, [pc, #224]	; (800c134 <HAL_DMA_IRQHandler+0x2d4>)
 800c052:	42b3      	cmp	r3, r6
 800c054:	6811      	ldr	r1, [r2, #0]
 800c056:	d00d      	beq.n	800c074 <HAL_DMA_IRQHandler+0x214>
 800c058:	321c      	adds	r2, #28
 800c05a:	e710      	b.n	800be7e <HAL_DMA_IRQHandler+0x1e>
 800c05c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c060:	e737      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c062:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c066:	e734      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c068:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c06c:	e731      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c06e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c072:	e72e      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c074:	2208      	movs	r2, #8
 800c076:	e72c      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c078:	2280      	movs	r2, #128	; 0x80
 800c07a:	e72a      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
 800c07c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c080:	e727      	b.n	800bed2 <HAL_DMA_IRQHandler+0x72>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	0711      	lsls	r1, r2, #28
 800c086:	f57f af2b 	bpl.w	800bee0 <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800c08a:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800c08c:	42ab      	cmp	r3, r5
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800c08e:	f022 0208 	bic.w	r2, r2, #8
 800c092:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800c094:	d950      	bls.n	800c138 <HAL_DMA_IRQHandler+0x2d8>
 800c096:	42b3      	cmp	r3, r6
 800c098:	d03d      	beq.n	800c116 <HAL_DMA_IRQHandler+0x2b6>
 800c09a:	4a25      	ldr	r2, [pc, #148]	; (800c130 <HAL_DMA_IRQHandler+0x2d0>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d03c      	beq.n	800c11a <HAL_DMA_IRQHandler+0x2ba>
 800c0a0:	3214      	adds	r2, #20
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d03b      	beq.n	800c11e <HAL_DMA_IRQHandler+0x2be>
 800c0a6:	3214      	adds	r2, #20
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d028      	beq.n	800c0fe <HAL_DMA_IRQHandler+0x29e>
 800c0ac:	3214      	adds	r2, #20
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d028      	beq.n	800c104 <HAL_DMA_IRQHandler+0x2a4>
 800c0b2:	3214      	adds	r2, #20
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d028      	beq.n	800c10a <HAL_DMA_IRQHandler+0x2aa>
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	d029      	beq.n	800c110 <HAL_DMA_IRQHandler+0x2b0>
 800c0bc:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d028      	beq.n	800c116 <HAL_DMA_IRQHandler+0x2b6>
 800c0c4:	3214      	adds	r2, #20
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d027      	beq.n	800c11a <HAL_DMA_IRQHandler+0x2ba>
 800c0ca:	3214      	adds	r2, #20
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d026      	beq.n	800c11e <HAL_DMA_IRQHandler+0x2be>
 800c0d0:	3214      	adds	r2, #20
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bf14      	ite	ne
 800c0d6:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 800c0da:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 800c0de:	4a13      	ldr	r2, [pc, #76]	; (800c12c <HAL_DMA_IRQHandler+0x2cc>)
 800c0e0:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800c0e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0e4:	f043 0301 	orr.w	r3, r3, #1
 800c0e8:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hdma); 
 800c0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ee:	8423      	strh	r3, [r4, #32]
      if (hdma->XferErrorCallback != NULL)
 800c0f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f43f aef4 	beq.w	800bee0 <HAL_DMA_IRQHandler+0x80>
        hdma->XferErrorCallback(hdma);
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4798      	blx	r3
 800c0fc:	e6f0      	b.n	800bee0 <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800c0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c102:	e7ec      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c104:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c108:	e7e9      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c10a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c10e:	e7e6      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c114:	e7e3      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c116:	2308      	movs	r3, #8
 800c118:	e7e1      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c11a:	2380      	movs	r3, #128	; 0x80
 800c11c:	e7df      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c11e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c122:	e7dc      	b.n	800c0de <HAL_DMA_IRQHandler+0x27e>
 800c124:	40020080 	.word	0x40020080
 800c128:	40020008 	.word	0x40020008
 800c12c:	40020400 	.word	0x40020400
 800c130:	4002001c 	.word	0x4002001c
 800c134:	40020000 	.word	0x40020000
 800c138:	42b3      	cmp	r3, r6
 800c13a:	d02f      	beq.n	800c19c <HAL_DMA_IRQHandler+0x33c>
 800c13c:	4aa0      	ldr	r2, [pc, #640]	; (800c3c0 <HAL_DMA_IRQHandler+0x560>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d02e      	beq.n	800c1a0 <HAL_DMA_IRQHandler+0x340>
 800c142:	3214      	adds	r2, #20
 800c144:	4293      	cmp	r3, r2
 800c146:	d02d      	beq.n	800c1a4 <HAL_DMA_IRQHandler+0x344>
 800c148:	3214      	adds	r2, #20
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d01a      	beq.n	800c184 <HAL_DMA_IRQHandler+0x324>
 800c14e:	3214      	adds	r2, #20
 800c150:	4293      	cmp	r3, r2
 800c152:	d01a      	beq.n	800c18a <HAL_DMA_IRQHandler+0x32a>
 800c154:	3214      	adds	r2, #20
 800c156:	4293      	cmp	r3, r2
 800c158:	d01a      	beq.n	800c190 <HAL_DMA_IRQHandler+0x330>
 800c15a:	42ab      	cmp	r3, r5
 800c15c:	d01b      	beq.n	800c196 <HAL_DMA_IRQHandler+0x336>
 800c15e:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c162:	4293      	cmp	r3, r2
 800c164:	d01a      	beq.n	800c19c <HAL_DMA_IRQHandler+0x33c>
 800c166:	3214      	adds	r2, #20
 800c168:	4293      	cmp	r3, r2
 800c16a:	d019      	beq.n	800c1a0 <HAL_DMA_IRQHandler+0x340>
 800c16c:	3214      	adds	r2, #20
 800c16e:	4293      	cmp	r3, r2
 800c170:	d018      	beq.n	800c1a4 <HAL_DMA_IRQHandler+0x344>
 800c172:	3214      	adds	r2, #20
 800c174:	4293      	cmp	r3, r2
 800c176:	bf14      	ite	ne
 800c178:	f44f 2300 	movne.w	r3, #524288	; 0x80000
 800c17c:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 800c180:	4a90      	ldr	r2, [pc, #576]	; (800c3c4 <HAL_DMA_IRQHandler+0x564>)
 800c182:	e7ad      	b.n	800c0e0 <HAL_DMA_IRQHandler+0x280>
 800c184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c188:	e7fa      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c18a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c18e:	e7f7      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c190:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c194:	e7f4      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c196:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c19a:	e7f1      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c19c:	2308      	movs	r3, #8
 800c19e:	e7ef      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	e7ed      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
 800c1a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1a8:	e7ea      	b.n	800c180 <HAL_DMA_IRQHandler+0x320>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800c1aa:	4a86      	ldr	r2, [pc, #536]	; (800c3c4 <HAL_DMA_IRQHandler+0x564>)
 800c1ac:	42b3      	cmp	r3, r6
 800c1ae:	6811      	ldr	r1, [r2, #0]
 800c1b0:	d00d      	beq.n	800c1ce <HAL_DMA_IRQHandler+0x36e>
 800c1b2:	321c      	adds	r2, #28
 800c1b4:	e69f      	b.n	800bef6 <HAL_DMA_IRQHandler+0x96>
 800c1b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c1ba:	e6c6      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c1c0:	e6c3      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c1c6:	e6c0      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c1cc:	e6bd      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1ce:	2204      	movs	r2, #4
 800c1d0:	e6bb      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1d2:	2240      	movs	r2, #64	; 0x40
 800c1d4:	e6b9      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
 800c1d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1da:	e6b6      	b.n	800bf4a <HAL_DMA_IRQHandler+0xea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800c1dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1e0:	e6f0      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1e6:	e6ed      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1ec:	e6ea      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c1f2:	e6e7      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	e6e5      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1f8:	2340      	movs	r3, #64	; 0x40
 800c1fa:	e6e3      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c200:	e6e0      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x164>
 800c202:	42b3      	cmp	r3, r6
 800c204:	d02f      	beq.n	800c266 <HAL_DMA_IRQHandler+0x406>
 800c206:	4a6e      	ldr	r2, [pc, #440]	; (800c3c0 <HAL_DMA_IRQHandler+0x560>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d02e      	beq.n	800c26a <HAL_DMA_IRQHandler+0x40a>
 800c20c:	3214      	adds	r2, #20
 800c20e:	4293      	cmp	r3, r2
 800c210:	d02d      	beq.n	800c26e <HAL_DMA_IRQHandler+0x40e>
 800c212:	3214      	adds	r2, #20
 800c214:	4293      	cmp	r3, r2
 800c216:	d01a      	beq.n	800c24e <HAL_DMA_IRQHandler+0x3ee>
 800c218:	3214      	adds	r2, #20
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d01a      	beq.n	800c254 <HAL_DMA_IRQHandler+0x3f4>
 800c21e:	3214      	adds	r2, #20
 800c220:	4293      	cmp	r3, r2
 800c222:	d01a      	beq.n	800c25a <HAL_DMA_IRQHandler+0x3fa>
 800c224:	42ab      	cmp	r3, r5
 800c226:	d01b      	beq.n	800c260 <HAL_DMA_IRQHandler+0x400>
 800c228:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d01a      	beq.n	800c266 <HAL_DMA_IRQHandler+0x406>
 800c230:	3214      	adds	r2, #20
 800c232:	4293      	cmp	r3, r2
 800c234:	d019      	beq.n	800c26a <HAL_DMA_IRQHandler+0x40a>
 800c236:	3214      	adds	r2, #20
 800c238:	4293      	cmp	r3, r2
 800c23a:	d018      	beq.n	800c26e <HAL_DMA_IRQHandler+0x40e>
 800c23c:	3214      	adds	r2, #20
 800c23e:	4293      	cmp	r3, r2
 800c240:	bf14      	ite	ne
 800c242:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800c246:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800c24a:	4a5e      	ldr	r2, [pc, #376]	; (800c3c4 <HAL_DMA_IRQHandler+0x564>)
 800c24c:	e6bb      	b.n	800bfc6 <HAL_DMA_IRQHandler+0x166>
 800c24e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c252:	e7fa      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c258:	e7f7      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c25a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c25e:	e7f4      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c260:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c264:	e7f1      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c266:	2304      	movs	r3, #4
 800c268:	e7ef      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c26a:	2340      	movs	r3, #64	; 0x40
 800c26c:	e7ed      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
 800c26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c272:	e7ea      	b.n	800c24a <HAL_DMA_IRQHandler+0x3ea>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800c274:	4a53      	ldr	r2, [pc, #332]	; (800c3c4 <HAL_DMA_IRQHandler+0x564>)
 800c276:	42b3      	cmp	r3, r6
 800c278:	6811      	ldr	r1, [r2, #0]
 800c27a:	d00d      	beq.n	800c298 <HAL_DMA_IRQHandler+0x438>
 800c27c:	321c      	adds	r2, #28
 800c27e:	e6b5      	b.n	800bfec <HAL_DMA_IRQHandler+0x18c>
 800c280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c284:	e6dc      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c28a:	e6d9      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c28c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c290:	e6d6      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c296:	e6d3      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c298:	2202      	movs	r2, #2
 800c29a:	e6d1      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c29c:	2220      	movs	r2, #32
 800c29e:	e6cf      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
 800c2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a4:	e6cc      	b.n	800c040 <HAL_DMA_IRQHandler+0x1e0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	0791      	lsls	r1, r2, #30
 800c2aa:	f57f aed0 	bpl.w	800c04e <HAL_DMA_IRQHandler+0x1ee>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800c2b2:	bf5e      	ittt	pl
 800c2b4:	681a      	ldrpl	r2, [r3, #0]
 800c2b6:	f022 0202 	bicpl.w	r2, r2, #2
 800c2ba:	601a      	strpl	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	d945      	bls.n	800c34c <HAL_DMA_IRQHandler+0x4ec>
 800c2c0:	42b3      	cmp	r3, r6
 800c2c2:	d03c      	beq.n	800c33e <HAL_DMA_IRQHandler+0x4de>
 800c2c4:	4a3e      	ldr	r2, [pc, #248]	; (800c3c0 <HAL_DMA_IRQHandler+0x560>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d03b      	beq.n	800c342 <HAL_DMA_IRQHandler+0x4e2>
 800c2ca:	3214      	adds	r2, #20
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d03a      	beq.n	800c346 <HAL_DMA_IRQHandler+0x4e6>
 800c2d0:	3214      	adds	r2, #20
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d027      	beq.n	800c326 <HAL_DMA_IRQHandler+0x4c6>
 800c2d6:	3214      	adds	r2, #20
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d027      	beq.n	800c32c <HAL_DMA_IRQHandler+0x4cc>
 800c2dc:	3214      	adds	r2, #20
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d027      	beq.n	800c332 <HAL_DMA_IRQHandler+0x4d2>
 800c2e2:	42ab      	cmp	r3, r5
 800c2e4:	d028      	beq.n	800c338 <HAL_DMA_IRQHandler+0x4d8>
 800c2e6:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d027      	beq.n	800c33e <HAL_DMA_IRQHandler+0x4de>
 800c2ee:	3214      	adds	r2, #20
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d026      	beq.n	800c342 <HAL_DMA_IRQHandler+0x4e2>
 800c2f4:	3214      	adds	r2, #20
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d025      	beq.n	800c346 <HAL_DMA_IRQHandler+0x4e6>
 800c2fa:	3214      	adds	r2, #20
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	bf14      	ite	ne
 800c300:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800c304:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800c308:	4a2f      	ldr	r2, [pc, #188]	; (800c3c8 <HAL_DMA_IRQHandler+0x568>)
 800c30a:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800c30c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c30e:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hdma);
 800c310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c314:	8423      	strh	r3, [r4, #32]
      if(hdma->XferCpltCallback != NULL)
 800c316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f43f ae98 	beq.w	800c04e <HAL_DMA_IRQHandler+0x1ee>
        hdma->XferCpltCallback(hdma);
 800c31e:	4620      	mov	r0, r4
}  
 800c320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hdma->XferCpltCallback(hdma);
 800c324:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800c326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c32a:	e7ed      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c32c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c330:	e7ea      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c332:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c336:	e7e7      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c33c:	e7e4      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c33e:	2302      	movs	r3, #2
 800c340:	e7e2      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c342:	2320      	movs	r3, #32
 800c344:	e7e0      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c34a:	e7dd      	b.n	800c308 <HAL_DMA_IRQHandler+0x4a8>
 800c34c:	42b3      	cmp	r3, r6
 800c34e:	d02f      	beq.n	800c3b0 <HAL_DMA_IRQHandler+0x550>
 800c350:	4a1b      	ldr	r2, [pc, #108]	; (800c3c0 <HAL_DMA_IRQHandler+0x560>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d02e      	beq.n	800c3b4 <HAL_DMA_IRQHandler+0x554>
 800c356:	3214      	adds	r2, #20
 800c358:	4293      	cmp	r3, r2
 800c35a:	d02d      	beq.n	800c3b8 <HAL_DMA_IRQHandler+0x558>
 800c35c:	3214      	adds	r2, #20
 800c35e:	4293      	cmp	r3, r2
 800c360:	d01a      	beq.n	800c398 <HAL_DMA_IRQHandler+0x538>
 800c362:	3214      	adds	r2, #20
 800c364:	4293      	cmp	r3, r2
 800c366:	d01a      	beq.n	800c39e <HAL_DMA_IRQHandler+0x53e>
 800c368:	3214      	adds	r2, #20
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d01a      	beq.n	800c3a4 <HAL_DMA_IRQHandler+0x544>
 800c36e:	42ab      	cmp	r3, r5
 800c370:	d01b      	beq.n	800c3aa <HAL_DMA_IRQHandler+0x54a>
 800c372:	f502 7267 	add.w	r2, r2, #924	; 0x39c
 800c376:	4293      	cmp	r3, r2
 800c378:	d01a      	beq.n	800c3b0 <HAL_DMA_IRQHandler+0x550>
 800c37a:	3214      	adds	r2, #20
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d019      	beq.n	800c3b4 <HAL_DMA_IRQHandler+0x554>
 800c380:	3214      	adds	r2, #20
 800c382:	4293      	cmp	r3, r2
 800c384:	d018      	beq.n	800c3b8 <HAL_DMA_IRQHandler+0x558>
 800c386:	3214      	adds	r2, #20
 800c388:	4293      	cmp	r3, r2
 800c38a:	bf14      	ite	ne
 800c38c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800c390:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800c394:	4a0b      	ldr	r2, [pc, #44]	; (800c3c4 <HAL_DMA_IRQHandler+0x564>)
 800c396:	e7b8      	b.n	800c30a <HAL_DMA_IRQHandler+0x4aa>
 800c398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c39c:	e7fa      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c39e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3a2:	e7f7      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3a8:	e7f4      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3ae:	e7f1      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e7ef      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3b4:	2320      	movs	r3, #32
 800c3b6:	e7ed      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3bc:	e7ea      	b.n	800c394 <HAL_DMA_IRQHandler+0x534>
 800c3be:	bf00      	nop
 800c3c0:	4002001c 	.word	0x4002001c
 800c3c4:	40020000 	.word	0x40020000
 800c3c8:	40020400 	.word	0x40020400

0800c3cc <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800c3cc:	4a0b      	ldr	r2, [pc, #44]	; (800c3fc <FLASH_SetErrorCode+0x30>)
 800c3ce:	68d3      	ldr	r3, [r2, #12]
 800c3d0:	f013 0310 	ands.w	r3, r3, #16
 800c3d4:	d005      	beq.n	800c3e2 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c3d6:	490a      	ldr	r1, [pc, #40]	; (800c400 <FLASH_SetErrorCode+0x34>)
 800c3d8:	69cb      	ldr	r3, [r1, #28]
 800c3da:	f043 0302 	orr.w	r3, r3, #2
 800c3de:	61cb      	str	r3, [r1, #28]
    flags |= FLASH_FLAG_WRPERR;
 800c3e0:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800c3e2:	68d2      	ldr	r2, [r2, #12]
 800c3e4:	0752      	lsls	r2, r2, #29
 800c3e6:	d506      	bpl.n	800c3f6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800c3e8:	4905      	ldr	r1, [pc, #20]	; (800c400 <FLASH_SetErrorCode+0x34>)
 800c3ea:	69ca      	ldr	r2, [r1, #28]
 800c3ec:	f042 0201 	orr.w	r2, r2, #1
 800c3f0:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 800c3f2:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c3f6:	4a01      	ldr	r2, [pc, #4]	; (800c3fc <FLASH_SetErrorCode+0x30>)
 800c3f8:	60d3      	str	r3, [r2, #12]
}  
 800c3fa:	4770      	bx	lr
 800c3fc:	40022000 	.word	0x40022000
 800c400:	20005a48 	.word	0x20005a48

0800c404 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800c404:	4b06      	ldr	r3, [pc, #24]	; (800c420 <HAL_FLASH_Unlock+0x1c>)
 800c406:	691a      	ldr	r2, [r3, #16]
 800c408:	0612      	lsls	r2, r2, #24
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c40a:	bf41      	itttt	mi
 800c40c:	4a05      	ldrmi	r2, [pc, #20]	; (800c424 <HAL_FLASH_Unlock+0x20>)
 800c40e:	605a      	strmi	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c410:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
  return HAL_OK; 
 800c414:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c416:	bf4c      	ite	mi
 800c418:	605a      	strmi	r2, [r3, #4]
    return HAL_ERROR;
 800c41a:	2001      	movpl	r0, #1
}
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	40022000 	.word	0x40022000
 800c424:	45670123 	.word	0x45670123

0800c428 <FLASH_WaitForLastOperation>:
{
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800c42c:	f7fe fcc6 	bl	800adbc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c430:	4c0f      	ldr	r4, [pc, #60]	; (800c470 <FLASH_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 800c432:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c434:	68e3      	ldr	r3, [r4, #12]
 800c436:	07d9      	lsls	r1, r3, #31
 800c438:	d40f      	bmi.n	800c45a <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c43a:	68e3      	ldr	r3, [r4, #12]
 800c43c:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c43e:	bf44      	itt	mi
 800c440:	2320      	movmi	r3, #32
 800c442:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800c444:	68e3      	ldr	r3, [r4, #12]
 800c446:	06db      	lsls	r3, r3, #27
 800c448:	d403      	bmi.n	800c452 <FLASH_WaitForLastOperation+0x2a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800c44a:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800c44c:	f010 0004 	ands.w	r0, r0, #4
 800c450:	d007      	beq.n	800c462 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 800c452:	f7ff ffbb 	bl	800c3cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c456:	2001      	movs	r0, #1
 800c458:	e003      	b.n	800c462 <FLASH_WaitForLastOperation+0x3a>
    if (Timeout != HAL_MAX_DELAY)
 800c45a:	1c68      	adds	r0, r5, #1
 800c45c:	d0ea      	beq.n	800c434 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c45e:	b90d      	cbnz	r5, 800c464 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 800c460:	2003      	movs	r0, #3
}
 800c462:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800c464:	f7fe fcaa 	bl	800adbc <HAL_GetTick>
 800c468:	1b80      	subs	r0, r0, r6
 800c46a:	42a8      	cmp	r0, r5
 800c46c:	d9e2      	bls.n	800c434 <FLASH_WaitForLastOperation+0xc>
 800c46e:	e7f7      	b.n	800c460 <FLASH_WaitForLastOperation+0x38>
 800c470:	40022000 	.word	0x40022000

0800c474 <HAL_FLASH_Program>:
{
 800c474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 800c478:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c50c <HAL_FLASH_Program+0x98>
{
 800c47c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 800c47e:	f899 3018 	ldrb.w	r3, [r9, #24]
 800c482:	2b01      	cmp	r3, #1
{
 800c484:	4604      	mov	r4, r0
 800c486:	460f      	mov	r7, r1
 800c488:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800c48a:	d03d      	beq.n	800c508 <HAL_FLASH_Program+0x94>
 800c48c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c48e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800c492:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c496:	f7ff ffc7 	bl	800c428 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c49a:	bb80      	cbnz	r0, 800c4fe <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800c49c:	2c01      	cmp	r4, #1
 800c49e:	d003      	beq.n	800c4a8 <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 800c4a0:	2c02      	cmp	r4, #2
 800c4a2:	bf0c      	ite	eq
 800c4a4:	2402      	moveq	r4, #2
 800c4a6:	2404      	movne	r4, #4
 800c4a8:	2500      	movs	r5, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c4aa:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c510 <HAL_FLASH_Program+0x9c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c4ae:	46ab      	mov	fp, r5
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800c4b0:	0128      	lsls	r0, r5, #4
 800c4b2:	f1c0 0220 	rsb	r2, r0, #32
 800c4b6:	f1a0 0320 	sub.w	r3, r0, #32
 800c4ba:	fa06 f202 	lsl.w	r2, r6, r2
 800c4be:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c4c2:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800c4c6:	4310      	orrs	r0, r2
 800c4c8:	fa26 f303 	lsr.w	r3, r6, r3
 800c4cc:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c4ce:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800c4d2:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c4d4:	f043 0301 	orr.w	r3, r3, #1
 800c4d8:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 800c4dc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c4e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4e4:	f7ff ffa0 	bl	800c428 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c4e8:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800c4f4:	b918      	cbnz	r0, 800c4fe <HAL_FLASH_Program+0x8a>
    for (index = 0; index < nbiterations; index++)
 800c4f6:	3501      	adds	r5, #1
 800c4f8:	b2eb      	uxtb	r3, r5
 800c4fa:	429c      	cmp	r4, r3
 800c4fc:	d8d8      	bhi.n	800c4b0 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800c4fe:	2300      	movs	r3, #0
 800c500:	f889 3018 	strb.w	r3, [r9, #24]
}
 800c504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800c508:	2002      	movs	r0, #2
 800c50a:	e7fb      	b.n	800c504 <HAL_FLASH_Program+0x90>
 800c50c:	20005a48 	.word	0x20005a48
 800c510:	40022000 	.word	0x40022000

0800c514 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c514:	4b06      	ldr	r3, [pc, #24]	; (800c530 <FLASH_MassErase+0x1c>)
 800c516:	2200      	movs	r2, #0
 800c518:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800c51a:	4b06      	ldr	r3, [pc, #24]	; (800c534 <FLASH_MassErase+0x20>)
 800c51c:	691a      	ldr	r2, [r3, #16]
 800c51e:	f042 0204 	orr.w	r2, r2, #4
 800c522:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c52a:	611a      	str	r2, [r3, #16]
}
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20005a48 	.word	0x20005a48
 800c534:	40022000 	.word	0x40022000

0800c538 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c538:	4b06      	ldr	r3, [pc, #24]	; (800c554 <FLASH_PageErase+0x1c>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c53e:	4b06      	ldr	r3, [pc, #24]	; (800c558 <FLASH_PageErase+0x20>)
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	f042 0202 	orr.w	r2, r2, #2
 800c546:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800c548:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c54a:	691a      	ldr	r2, [r3, #16]
 800c54c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c550:	611a      	str	r2, [r3, #16]
}
 800c552:	4770      	bx	lr
 800c554:	20005a48 	.word	0x20005a48
 800c558:	40022000 	.word	0x40022000

0800c55c <HAL_FLASHEx_Erase>:
{
 800c55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800c560:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800c5f4 <HAL_FLASHEx_Erase+0x98>
 800c564:	f898 3018 	ldrb.w	r3, [r8, #24]
 800c568:	2b01      	cmp	r3, #1
{
 800c56a:	4605      	mov	r5, r0
 800c56c:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800c56e:	d03d      	beq.n	800c5ec <HAL_FLASHEx_Erase+0x90>
 800c570:	2401      	movs	r4, #1
 800c572:	f888 4018 	strb.w	r4, [r8, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c576:	6803      	ldr	r3, [r0, #0]
 800c578:	42a3      	cmp	r3, r4
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800c57a:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c57e:	d114      	bne.n	800c5aa <HAL_FLASHEx_Erase+0x4e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800c580:	f7ff ff52 	bl	800c428 <FLASH_WaitForLastOperation>
 800c584:	b128      	cbz	r0, 800c592 <HAL_FLASHEx_Erase+0x36>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c586:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800c588:	2300      	movs	r3, #0
 800c58a:	f888 3018 	strb.w	r3, [r8, #24]
}
 800c58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c592:	f24c 3050 	movw	r0, #50000	; 0xc350
        FLASH_MassErase();
 800c596:	f7ff ffbd 	bl	800c514 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c59a:	f7ff ff45 	bl	800c428 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800c59e:	4a14      	ldr	r2, [pc, #80]	; (800c5f0 <HAL_FLASHEx_Erase+0x94>)
 800c5a0:	6913      	ldr	r3, [r2, #16]
 800c5a2:	f023 0304 	bic.w	r3, r3, #4
 800c5a6:	6113      	str	r3, [r2, #16]
 800c5a8:	e7ee      	b.n	800c588 <HAL_FLASHEx_Erase+0x2c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800c5aa:	f7ff ff3d 	bl	800c428 <FLASH_WaitForLastOperation>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d1e9      	bne.n	800c586 <HAL_FLASHEx_Erase+0x2a>
        *PageError = 0xFFFFFFFFU;
 800c5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c5b8:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800c5ba:	686e      	ldr	r6, [r5, #4]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800c5bc:	4c0c      	ldr	r4, [pc, #48]	; (800c5f0 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800c5be:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 800c5c2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 800c5c6:	42b3      	cmp	r3, r6
 800c5c8:	d9de      	bls.n	800c588 <HAL_FLASHEx_Erase+0x2c>
          FLASH_PageErase(address);
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f7ff ffb4 	bl	800c538 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c5d4:	f7ff ff28 	bl	800c428 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	f023 0302 	bic.w	r3, r3, #2
 800c5de:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800c5e0:	b108      	cbz	r0, 800c5e6 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 800c5e2:	603e      	str	r6, [r7, #0]
            break;
 800c5e4:	e7d0      	b.n	800c588 <HAL_FLASHEx_Erase+0x2c>
            address += FLASH_PAGE_SIZE)
 800c5e6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800c5ea:	e7e8      	b.n	800c5be <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 800c5ec:	2002      	movs	r0, #2
 800c5ee:	e7ce      	b.n	800c58e <HAL_FLASHEx_Erase+0x32>
 800c5f0:	40022000 	.word	0x40022000
 800c5f4:	20005a48 	.word	0x20005a48

0800c5f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c5fc:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c77c <HAL_GPIO_Init+0x184>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c600:	4c5c      	ldr	r4, [pc, #368]	; (800c774 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00;
 800c602:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c604:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800c608:	680a      	ldr	r2, [r1, #0]
 800c60a:	fa32 f503 	lsrs.w	r5, r2, r3
 800c60e:	d102      	bne.n	800c616 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 800c610:	b003      	add	sp, #12
 800c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c616:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 800c61a:	ea1a 0202 	ands.w	r2, sl, r2
 800c61e:	f000 809e 	beq.w	800c75e <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c622:	684d      	ldr	r5, [r1, #4]
 800c624:	f025 0e10 	bic.w	lr, r5, #16
 800c628:	f1be 0f02 	cmp.w	lr, #2
 800c62c:	d114      	bne.n	800c658 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800c62e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800c632:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c636:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800c63a:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c63e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800c642:	270f      	movs	r7, #15
 800c644:	fa07 f70b 	lsl.w	r7, r7, fp
 800c648:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c64c:	690e      	ldr	r6, [r1, #16]
 800c64e:	fa06 f60b 	lsl.w	r6, r6, fp
 800c652:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800c654:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 800c658:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c65c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c660:	2603      	movs	r6, #3
 800c662:	fa06 f70c 	lsl.w	r7, r6, ip
 800c666:	ea2b 0b07 	bic.w	fp, fp, r7
 800c66a:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c66c:	f005 0703 	and.w	r7, r5, #3
 800c670:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c674:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c678:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c67c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800c680:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c682:	d811      	bhi.n	800c6a8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 800c684:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c686:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800c68a:	68cf      	ldr	r7, [r1, #12]
 800c68c:	fa07 f70c 	lsl.w	r7, r7, ip
 800c690:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800c694:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800c696:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c698:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c69c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800c6a0:	409f      	lsls	r7, r3
 800c6a2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800c6a6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800c6a8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c6aa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c6ac:	688e      	ldr	r6, [r1, #8]
 800c6ae:	fa06 f60c 	lsl.w	r6, r6, ip
 800c6b2:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800c6b4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c6b6:	00ee      	lsls	r6, r5, #3
 800c6b8:	d551      	bpl.n	800c75e <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6ba:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800c6be:	f046 0601 	orr.w	r6, r6, #1
 800c6c2:	f8c8 6018 	str.w	r6, [r8, #24]
 800c6c6:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800c6ca:	f023 0703 	bic.w	r7, r3, #3
 800c6ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800c6d2:	f006 0601 	and.w	r6, r6, #1
 800c6d6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800c6da:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c6dc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6e0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800c6e2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c6e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800c6e8:	f04f 0c0f 	mov.w	ip, #15
 800c6ec:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800c6f0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c6f4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800c6f8:	d033      	beq.n	800c762 <HAL_GPIO_Init+0x16a>
 800c6fa:	4e1f      	ldr	r6, [pc, #124]	; (800c778 <HAL_GPIO_Init+0x180>)
 800c6fc:	42b0      	cmp	r0, r6
 800c6fe:	d032      	beq.n	800c766 <HAL_GPIO_Init+0x16e>
 800c700:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c704:	42b0      	cmp	r0, r6
 800c706:	d030      	beq.n	800c76a <HAL_GPIO_Init+0x172>
 800c708:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c70c:	42b0      	cmp	r0, r6
 800c70e:	d02e      	beq.n	800c76e <HAL_GPIO_Init+0x176>
 800c710:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c714:	42b0      	cmp	r0, r6
 800c716:	bf0c      	ite	eq
 800c718:	2604      	moveq	r6, #4
 800c71a:	2605      	movne	r6, #5
 800c71c:	fa06 f60e 	lsl.w	r6, r6, lr
 800c720:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800c724:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800c726:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800c728:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c72a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800c72e:	bf0c      	ite	eq
 800c730:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800c732:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 800c734:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800c736:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c738:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800c73c:	bf0c      	ite	eq
 800c73e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800c740:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 800c742:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800c744:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c746:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800c74a:	bf0c      	ite	eq
 800c74c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800c74e:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 800c750:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800c752:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c754:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800c756:	bf54      	ite	pl
 800c758:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800c75a:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 800c75c:	60e6      	str	r6, [r4, #12]
    position++;
 800c75e:	3301      	adds	r3, #1
 800c760:	e752      	b.n	800c608 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800c762:	2600      	movs	r6, #0
 800c764:	e7da      	b.n	800c71c <HAL_GPIO_Init+0x124>
 800c766:	2601      	movs	r6, #1
 800c768:	e7d8      	b.n	800c71c <HAL_GPIO_Init+0x124>
 800c76a:	2602      	movs	r6, #2
 800c76c:	e7d6      	b.n	800c71c <HAL_GPIO_Init+0x124>
 800c76e:	2603      	movs	r6, #3
 800c770:	e7d4      	b.n	800c71c <HAL_GPIO_Init+0x124>
 800c772:	bf00      	nop
 800c774:	40010400 	.word	0x40010400
 800c778:	48000400 	.word	0x48000400
 800c77c:	40021000 	.word	0x40021000

0800c780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c780:	6903      	ldr	r3, [r0, #16]
 800c782:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800c784:	bf14      	ite	ne
 800c786:	2001      	movne	r0, #1
 800c788:	2000      	moveq	r0, #0
 800c78a:	4770      	bx	lr

0800c78c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c78c:	b10a      	cbz	r2, 800c792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c78e:	6181      	str	r1, [r0, #24]
 800c790:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c792:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800c794:	4770      	bx	lr

0800c796 <HAL_IWDG_MspInit>:
  UNUSED(hiwdg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800c796:	4770      	bx	lr

0800c798 <HAL_IWDG_Init>:
{
 800c798:	b538      	push	{r3, r4, r5, lr}
  if(hiwdg == NULL)
 800c79a:	4604      	mov	r4, r0
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d042      	beq.n	800c826 <HAL_IWDG_Init+0x8e>
  if(((hiwdg->Instance->SR) & IWDG_SR_FLAGS) != 0)
 800c7a0:	6803      	ldr	r3, [r0, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	075a      	lsls	r2, r3, #29
 800c7a6:	d13e      	bne.n	800c826 <HAL_IWDG_Init+0x8e>
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 800c7a8:	7c43      	ldrb	r3, [r0, #17]
 800c7aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7ae:	b913      	cbnz	r3, 800c7b6 <HAL_IWDG_Init+0x1e>
    hiwdg->Lock = HAL_UNLOCKED;
 800c7b0:	7402      	strb	r2, [r0, #16]
    HAL_IWDG_MspInit(hiwdg);
 800c7b2:	f7ff fff0 	bl	800c796 <HAL_IWDG_MspInit>
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c7b6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800c7b8:	6861      	ldr	r1, [r4, #4]
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	7463      	strb	r3, [r4, #17]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c7be:	f245 5355 	movw	r3, #21845	; 0x5555
 800c7c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800c7c4:	6853      	ldr	r3, [r2, #4]
 800c7c6:	f023 0307 	bic.w	r3, r3, #7
 800c7ca:	430b      	orrs	r3, r1
 800c7cc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 800c7ce:	6893      	ldr	r3, [r2, #8]
 800c7d0:	68a1      	ldr	r1, [r4, #8]
 800c7d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7d6:	f023 030f 	bic.w	r3, r3, #15
 800c7da:	430b      	orrs	r3, r1
 800c7dc:	6093      	str	r3, [r2, #8]
  if (((hiwdg->Init.Window) != IWDG_WINDOW_DISABLE) || ((hiwdg->Instance->WINR) != IWDG_WINDOW_DISABLE))
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c7e4:	428b      	cmp	r3, r1
 800c7e6:	d102      	bne.n	800c7ee <HAL_IWDG_Init+0x56>
 800c7e8:	6912      	ldr	r2, [r2, #16]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d00e      	beq.n	800c80c <HAL_IWDG_Init+0x74>
    tickstart = HAL_GetTick();
 800c7ee:	f7fe fae5 	bl	800adbc <HAL_GetTick>
 800c7f2:	4605      	mov	r5, r0
    while(((hiwdg->Instance->SR) & IWDG_SR_FLAGS) != 0)
 800c7f4:	6822      	ldr	r2, [r4, #0]
 800c7f6:	68d3      	ldr	r3, [r2, #12]
 800c7f8:	075b      	lsls	r3, r3, #29
 800c7fa:	d10b      	bne.n	800c814 <HAL_IWDG_Init+0x7c>
    MODIFY_REG(hiwdg->Instance->WINR, IWDG_WINR_WIN, hiwdg->Init.Window);
 800c7fc:	6913      	ldr	r3, [r2, #16]
 800c7fe:	68e1      	ldr	r1, [r4, #12]
 800c800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c804:	f023 030f 	bic.w	r3, r3, #15
 800c808:	430b      	orrs	r3, r1
 800c80a:	6113      	str	r3, [r2, #16]
  hiwdg->State = HAL_IWDG_STATE_READY;
 800c80c:	2301      	movs	r3, #1
 800c80e:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800c810:	2000      	movs	r0, #0
 800c812:	e007      	b.n	800c824 <HAL_IWDG_Init+0x8c>
      if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c814:	f7fe fad2 	bl	800adbc <HAL_GetTick>
 800c818:	1b40      	subs	r0, r0, r5
 800c81a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c81e:	d9e9      	bls.n	800c7f4 <HAL_IWDG_Init+0x5c>
        hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800c820:	2003      	movs	r0, #3
 800c822:	7460      	strb	r0, [r4, #17]
}
 800c824:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c826:	2001      	movs	r0, #1
 800c828:	e7fc      	b.n	800c824 <HAL_IWDG_Init+0x8c>

0800c82a <HAL_IWDG_Start>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Start(IWDG_HandleTypeDef *hiwdg)
{
 800c82a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process locked */
  __HAL_LOCK(hiwdg); 
 800c82c:	7c03      	ldrb	r3, [r0, #16]
 800c82e:	2b01      	cmp	r3, #1
{
 800c830:	4604      	mov	r4, r0
 800c832:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg); 
 800c836:	d024      	beq.n	800c882 <HAL_IWDG_Start+0x58>

    /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;

  /* Reload IWDG counter with value defined in the RLR register */
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800c838:	68c1      	ldr	r1, [r0, #12]
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800c83a:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hiwdg); 
 800c83c:	2201      	movs	r2, #1
 800c83e:	7402      	strb	r2, [r0, #16]
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800c840:	f640 72ff 	movw	r2, #4095	; 0xfff
 800c844:	4291      	cmp	r1, r2
  {
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c846:	6803      	ldr	r3, [r0, #0]
 800c848:	bf04      	itt	eq
 800c84a:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
 800c84e:	601a      	streq	r2, [r3, #0]
  }

  /* Start the IWDG peripheral */
  __HAL_IWDG_START(hiwdg);
 800c850:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c854:	601a      	str	r2, [r3, #0]

  tickstart = HAL_GetTick();
 800c856:	f7fe fab1 	bl	800adbc <HAL_GetTick>
 800c85a:	4605      	mov	r5, r0

  /* Wait until PVU, RVU, WVU flag are RESET */
  while(((hiwdg->Instance->SR) & IWDG_SR_FLAGS) != 0)
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	f013 0307 	ands.w	r3, r3, #7
 800c864:	d103      	bne.n	800c86e <HAL_IWDG_Start+0x44>
      return HAL_TIMEOUT;
    }
  }

  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 800c866:	2201      	movs	r2, #1
 800c868:	7462      	strb	r2, [r4, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800c86a:	7423      	strb	r3, [r4, #16]

  /* Return function status */
  return HAL_OK;
 800c86c:	e009      	b.n	800c882 <HAL_IWDG_Start+0x58>
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c86e:	f7fe faa5 	bl	800adbc <HAL_GetTick>
 800c872:	1b40      	subs	r0, r0, r5
 800c874:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c878:	d9f0      	bls.n	800c85c <HAL_IWDG_Start+0x32>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800c87a:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800c87c:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800c87e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800c880:	7422      	strb	r2, [r4, #16]
}
 800c882:	4618      	mov	r0, r3
 800c884:	bd38      	pop	{r3, r4, r5, pc}

0800c886 <HAL_IWDG_Refresh>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c886:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process Locked */
  __HAL_LOCK(hiwdg);
 800c888:	7c03      	ldrb	r3, [r0, #16]
 800c88a:	2b01      	cmp	r3, #1
{
 800c88c:	4604      	mov	r4, r0
 800c88e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg);
 800c892:	d01b      	beq.n	800c8cc <HAL_IWDG_Refresh+0x46>
 800c894:	2201      	movs	r2, #1
 800c896:	7402      	strb	r2, [r0, #16]

    /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800c898:	7443      	strb	r3, [r0, #17]

  tickstart = HAL_GetTick();
 800c89a:	f7fe fa8f 	bl	800adbc <HAL_GetTick>
 800c89e:	4605      	mov	r5, r0

  /* Wait until RVU flag is RESET */
  while(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	68d3      	ldr	r3, [r2, #12]
 800c8a4:	f013 0302 	ands.w	r3, r3, #2
 800c8a8:	d106      	bne.n	800c8b8 <HAL_IWDG_Refresh+0x32>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c8aa:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 800c8ae:	6011      	str	r1, [r2, #0]

  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	7462      	strb	r2, [r4, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800c8b4:	7423      	strb	r3, [r4, #16]

  /* Return function status */
  return HAL_OK;
 800c8b6:	e009      	b.n	800c8cc <HAL_IWDG_Refresh+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c8b8:	f7fe fa80 	bl	800adbc <HAL_GetTick>
 800c8bc:	1b40      	subs	r0, r0, r5
 800c8be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c8c2:	d9ed      	bls.n	800c8a0 <HAL_IWDG_Refresh+0x1a>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800c8c6:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800c8c8:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800c8ca:	7422      	strb	r2, [r4, #16]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}

0800c8d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c8d0:	6803      	ldr	r3, [r0, #0]
 800c8d2:	699a      	ldr	r2, [r3, #24]
 800c8d4:	0791      	lsls	r1, r2, #30
  {
     hi2c->Instance->TXDR = 0x00U;
 800c8d6:	bf44      	itt	mi
 800c8d8:	2200      	movmi	r2, #0
 800c8da:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c8e0:	bf5e      	ittt	pl
 800c8e2:	699a      	ldrpl	r2, [r3, #24]
 800c8e4:	f042 0201 	orrpl.w	r2, r2, #1
 800c8e8:	619a      	strpl	r2, [r3, #24]
  }
}
 800c8ea:	4770      	bx	lr

0800c8ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c8ec:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800c8ee:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c8f0:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800c8f2:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c8f4:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800c8f8:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c8fc:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c8fe:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c906:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800c90a:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800c90e:	430b      	orrs	r3, r1
 800c910:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800c912:	6063      	str	r3, [r4, #4]
}
 800c914:	bd30      	pop	{r4, r5, pc}

0800c916 <I2C_WaitOnFlagUntilTimeout>:
{
 800c916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c91a:	9f06      	ldr	r7, [sp, #24]
 800c91c:	4604      	mov	r4, r0
 800c91e:	4688      	mov	r8, r1
 800c920:	4616      	mov	r6, r2
 800c922:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c924:	6822      	ldr	r2, [r4, #0]
 800c926:	6993      	ldr	r3, [r2, #24]
 800c928:	ea38 0303 	bics.w	r3, r8, r3
 800c92c:	bf0c      	ite	eq
 800c92e:	2301      	moveq	r3, #1
 800c930:	2300      	movne	r3, #0
 800c932:	42b3      	cmp	r3, r6
 800c934:	d001      	beq.n	800c93a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c936:	2000      	movs	r0, #0
 800c938:	e00b      	b.n	800c952 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 800c93a:	1c6b      	adds	r3, r5, #1
 800c93c:	d0f3      	beq.n	800c926 <I2C_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800c93e:	b955      	cbnz	r5, 800c956 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State= HAL_I2C_STATE_READY;
 800c940:	2320      	movs	r3, #32
 800c942:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c946:	2300      	movs	r3, #0
 800c948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800c94c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800c950:	2003      	movs	r0, #3
}
 800c952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800c956:	f7fe fa31 	bl	800adbc <HAL_GetTick>
 800c95a:	1bc0      	subs	r0, r0, r7
 800c95c:	42a8      	cmp	r0, r5
 800c95e:	d9e1      	bls.n	800c924 <I2C_WaitOnFlagUntilTimeout+0xe>
 800c960:	e7ee      	b.n	800c940 <I2C_WaitOnFlagUntilTimeout+0x2a>

0800c962 <I2C_IsAcknowledgeFailed>:
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c962:	6803      	ldr	r3, [r0, #0]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	f013 0310 	ands.w	r3, r3, #16
{
 800c96a:	b570      	push	{r4, r5, r6, lr}
 800c96c:	4604      	mov	r4, r0
 800c96e:	460d      	mov	r5, r1
 800c970:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c972:	d113      	bne.n	800c99c <I2C_IsAcknowledgeFailed+0x3a>
  return HAL_OK;
 800c974:	4618      	mov	r0, r3
}
 800c976:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800c978:	1c69      	adds	r1, r5, #1
 800c97a:	d010      	beq.n	800c99e <I2C_IsAcknowledgeFailed+0x3c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800c97c:	b125      	cbz	r5, 800c988 <I2C_IsAcknowledgeFailed+0x26>
 800c97e:	f7fe fa1d 	bl	800adbc <HAL_GetTick>
 800c982:	1b80      	subs	r0, r0, r6
 800c984:	4285      	cmp	r5, r0
 800c986:	d209      	bcs.n	800c99c <I2C_IsAcknowledgeFailed+0x3a>
          hi2c->State= HAL_I2C_STATE_READY;
 800c988:	2320      	movs	r3, #32
 800c98a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c98e:	2300      	movs	r3, #0
 800c990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800c994:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 800c998:	2003      	movs	r0, #3
 800c99a:	e7ec      	b.n	800c976 <I2C_IsAcknowledgeFailed+0x14>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	699a      	ldr	r2, [r3, #24]
 800c9a0:	0692      	lsls	r2, r2, #26
 800c9a2:	d5e9      	bpl.n	800c978 <I2C_IsAcknowledgeFailed+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9a4:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9a6:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9a8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800c9aa:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9ac:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800c9ae:	f7ff ff8f 	bl	800c8d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	6853      	ldr	r3, [r2, #4]
 800c9b6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800c9ba:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800c9be:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9cc:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800c9ce:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c9d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e7cb      	b.n	800c976 <I2C_IsAcknowledgeFailed+0x14>

0800c9de <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800c9de:	b570      	push	{r4, r5, r6, lr}
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	079b      	lsls	r3, r3, #30
 800c9ec:	d501      	bpl.n	800c9f2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	e015      	b.n	800ca1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9f2:	4632      	mov	r2, r6
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f7ff ffb3 	bl	800c962 <I2C_IsAcknowledgeFailed>
 800c9fc:	b9b0      	cbnz	r0, 800ca2c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 800c9fe:	1c6a      	adds	r2, r5, #1
 800ca00:	d0f1      	beq.n	800c9e6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800ca02:	b96d      	cbnz	r5, 800ca20 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca06:	f043 0320 	orr.w	r3, r3, #32
 800ca0a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 800ca0c:	2320      	movs	r3, #32
 800ca0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800ca18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800ca1c:	2003      	movs	r0, #3
}
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800ca20:	f7fe f9cc 	bl	800adbc <HAL_GetTick>
 800ca24:	1b80      	subs	r0, r0, r6
 800ca26:	42a8      	cmp	r0, r5
 800ca28:	d9dd      	bls.n	800c9e6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 800ca2a:	e7eb      	b.n	800ca04 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	e7f6      	b.n	800ca1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>

0800ca30 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	4604      	mov	r4, r0
 800ca34:	460d      	mov	r5, r1
 800ca36:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	075b      	lsls	r3, r3, #29
 800ca3e:	d501      	bpl.n	800ca44 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
  return HAL_OK;
 800ca40:	2000      	movs	r0, #0
 800ca42:	e02a      	b.n	800ca9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca44:	4632      	mov	r2, r6
 800ca46:	4629      	mov	r1, r5
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f7ff ff8a 	bl	800c962 <I2C_IsAcknowledgeFailed>
 800ca4e:	b9b0      	cbnz	r0, 800ca7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	0692      	lsls	r2, r2, #26
 800ca56:	d514      	bpl.n	800ca82 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca58:	2120      	movs	r1, #32
 800ca5a:	61d9      	str	r1, [r3, #28]
      I2C_RESET_CR2(hi2c);
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800ca62:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800ca66:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ca6a:	f022 0201 	bic.w	r2, r2, #1
 800ca6e:	605a      	str	r2, [r3, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca70:	6460      	str	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800ca72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800ca76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca7a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      return HAL_ERROR;
 800ca7e:	2001      	movs	r0, #1
 800ca80:	e00b      	b.n	800ca9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800ca82:	b95d      	cbnz	r5, 800ca9c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca86:	f043 0320 	orr.w	r3, r3, #32
 800ca8a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800ca8c:	2320      	movs	r3, #32
 800ca8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800ca92:	2300      	movs	r3, #0
 800ca94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 800ca98:	2003      	movs	r0, #3
}
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800ca9c:	f7fe f98e 	bl	800adbc <HAL_GetTick>
 800caa0:	1b80      	subs	r0, r0, r6
 800caa2:	42a8      	cmp	r0, r5
 800caa4:	d9c8      	bls.n	800ca38 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800caa6:	e7ed      	b.n	800ca84 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>

0800caa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	069b      	lsls	r3, r3, #26
 800cab6:	d501      	bpl.n	800cabc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800cab8:	2000      	movs	r0, #0
 800caba:	e013      	b.n	800cae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800cabc:	4632      	mov	r2, r6
 800cabe:	4629      	mov	r1, r5
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7ff ff4e 	bl	800c962 <I2C_IsAcknowledgeFailed>
 800cac6:	b9a0      	cbnz	r0, 800caf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800cac8:	b96d      	cbnz	r5, 800cae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800caca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cacc:	f043 0320 	orr.w	r3, r3, #32
 800cad0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800cad2:	2320      	movs	r3, #32
 800cad4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cad8:	2300      	movs	r3, #0
 800cada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cade:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cae2:	2003      	movs	r0, #3
}
 800cae4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800cae6:	f7fe f969 	bl	800adbc <HAL_GetTick>
 800caea:	1b80      	subs	r0, r0, r6
 800caec:	42a8      	cmp	r0, r5
 800caee:	d9df      	bls.n	800cab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 800caf0:	e7eb      	b.n	800caca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800caf2:	2001      	movs	r0, #1
 800caf4:	e7f6      	b.n	800cae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

0800caf6 <HAL_I2C_Init>:
{
 800caf6:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800caf8:	4604      	mov	r4, r0
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d047      	beq.n	800cb8e <HAL_I2C_Init+0x98>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800cafe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800cb02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cb06:	b91b      	cbnz	r3, 800cb10 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800cb08:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800cb0c:	f001 fbe0 	bl	800e2d0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800cb10:	2324      	movs	r3, #36	; 0x24
 800cb12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cb20:	6862      	ldr	r2, [r4, #4]
 800cb22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cb26:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cb28:	689a      	ldr	r2, [r3, #8]
 800cb2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb2e:	609a      	str	r2, [r3, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cb30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 800cb34:	b32a      	cbz	r2, 800cb82 <HAL_I2C_Init+0x8c>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cb36:	2901      	cmp	r1, #1
 800cb38:	d120      	bne.n	800cb7c <HAL_I2C_Init+0x86>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cb3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb3e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800cb46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb4a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800cb4c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	69a1      	ldr	r1, [r4, #24]
 800cb54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cb58:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cb5a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	f042 0201 	orr.w	r2, r2, #1
 800cb68:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb6a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800cb6c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb6e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cb70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cb74:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb76:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800cb7a:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cb7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cb80:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cb82:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cb84:	bf04      	itt	eq
 800cb86:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800cb8a:	605a      	streq	r2, [r3, #4]
 800cb8c:	e7d8      	b.n	800cb40 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800cb8e:	2001      	movs	r0, #1
 800cb90:	e7f3      	b.n	800cb7a <HAL_I2C_Init+0x84>

0800cb92 <HAL_I2C_Master_Transmit>:
{
 800cb92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb96:	4698      	mov	r8, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 800cb98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800cb9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if(hi2c->State == HAL_I2C_STATE_READY)
 800cb9e:	2b20      	cmp	r3, #32
{
 800cba0:	4604      	mov	r4, r0
 800cba2:	460e      	mov	r6, r1
 800cba4:	4691      	mov	r9, r2
  if(hi2c->State == HAL_I2C_STATE_READY)
 800cba6:	f040 808d 	bne.w	800ccc4 <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 800cbaa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	f000 8088 	beq.w	800ccc4 <HAL_I2C_Master_Transmit+0x132>
 800cbb4:	f04f 0a01 	mov.w	sl, #1
 800cbb8:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800cbbc:	f7fe f8fe 	bl	800adbc <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cbc0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800cbc2:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cbc4:	9000      	str	r0, [sp, #0]
 800cbc6:	4652      	mov	r2, sl
 800cbc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f7ff fea2 	bl	800c916 <I2C_WaitOnFlagUntilTimeout>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d14b      	bne.n	800cc6e <HAL_I2C_Master_Transmit+0xdc>
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800cbd6:	2321      	movs	r3, #33	; 0x21
 800cbd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 800cbdc:	2310      	movs	r3, #16
 800cbde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cbe2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800cbe4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800cbea:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800cbf2:	6360      	str	r0, [r4, #52]	; 0x34
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbf4:	d927      	bls.n	800cc46 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbf6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cbf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbfc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cbfe:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cc00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cc04:	4631      	mov	r1, r6
 800cc06:	4620      	mov	r0, r4
 800cc08:	f7ff fe70 	bl	800c8ec <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 800cc0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cc0e:	b29b      	uxth	r3, r3
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc10:	462a      	mov	r2, r5
 800cc12:	4639      	mov	r1, r7
 800cc14:	4620      	mov	r0, r4
    while(hi2c->XferCount > 0U)
 800cc16:	bb03      	cbnz	r3, 800cc5a <HAL_I2C_Master_Transmit+0xc8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc18:	f7ff ff46 	bl	800caa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc1c:	bb00      	cbnz	r0, 800cc60 <HAL_I2C_Master_Transmit+0xce>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	2120      	movs	r1, #32
 800cc22:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800cc2a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800cc2e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800cc32:	f022 0201 	bic.w	r2, r2, #1
 800cc36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cc38:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cc3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc40:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800cc44:	e010      	b.n	800cc68 <HAL_I2C_Master_Transmit+0xd6>
      hi2c->XferSize = hi2c->XferCount;
 800cc46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800cc48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 800cc4c:	b292      	uxth	r2, r2
 800cc4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800cc50:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cc52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc56:	b2d2      	uxtb	r2, r2
 800cc58:	e7d4      	b.n	800cc04 <HAL_I2C_Master_Transmit+0x72>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc5a:	f7ff fec0 	bl	800c9de <I2C_WaitOnTXISFlagUntilTimeout>
 800cc5e:	b140      	cbz	r0, 800cc72 <HAL_I2C_Master_Transmit+0xe0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d103      	bne.n	800cc6e <HAL_I2C_Master_Transmit+0xdc>
          return HAL_ERROR;
 800cc66:	2001      	movs	r0, #1
}
 800cc68:	b002      	add	sp, #8
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 800cc6e:	2003      	movs	r0, #3
 800cc70:	e7fa      	b.n	800cc68 <HAL_I2C_Master_Transmit+0xd6>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800cc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	6262      	str	r2, [r4, #36]	; 0x24
 800cc78:	6822      	ldr	r2, [r4, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800cc7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800cc80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800cc82:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800cc84:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800cc86:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800cc88:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800cc8a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800cc8c:	8522      	strh	r2, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	d1bc      	bne.n	800cc0c <HAL_I2C_Master_Transmit+0x7a>
 800cc92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0b8      	beq.n	800cc0c <HAL_I2C_Master_Transmit+0x7a>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cc9a:	9500      	str	r5, [sp, #0]
 800cc9c:	463b      	mov	r3, r7
 800cc9e:	2180      	movs	r1, #128	; 0x80
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7ff fe38 	bl	800c916 <I2C_WaitOnFlagUntilTimeout>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d1e1      	bne.n	800cc6e <HAL_I2C_Master_Transmit+0xdc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800ccaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2bff      	cmp	r3, #255	; 0xff
 800ccb0:	d903      	bls.n	800ccba <HAL_I2C_Master_Transmit+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ccb2:	22ff      	movs	r2, #255	; 0xff
 800ccb4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ccb6:	9000      	str	r0, [sp, #0]
 800ccb8:	e7a2      	b.n	800cc00 <HAL_I2C_Master_Transmit+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 800ccba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ccbc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800ccbe:	b292      	uxth	r2, r2
 800ccc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ccc2:	e7c6      	b.n	800cc52 <HAL_I2C_Master_Transmit+0xc0>
    return HAL_BUSY;
 800ccc4:	2002      	movs	r0, #2
 800ccc6:	e7cf      	b.n	800cc68 <HAL_I2C_Master_Transmit+0xd6>

0800ccc8 <HAL_I2C_Master_Receive>:
{
 800ccc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cccc:	4698      	mov	r8, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ccce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ccd2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ccd4:	2b20      	cmp	r3, #32
{
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460e      	mov	r6, r1
 800ccda:	4691      	mov	r9, r2
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ccdc:	f040 808d 	bne.w	800cdfa <HAL_I2C_Master_Receive+0x132>
    __HAL_LOCK(hi2c);
 800cce0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	f000 8088 	beq.w	800cdfa <HAL_I2C_Master_Receive+0x132>
 800ccea:	f04f 0a01 	mov.w	sl, #1
 800ccee:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800ccf2:	f7fe f863 	bl	800adbc <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccf6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800ccf8:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccfa:	9000      	str	r0, [sp, #0]
 800ccfc:	4652      	mov	r2, sl
 800ccfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff fe07 	bl	800c916 <I2C_WaitOnFlagUntilTimeout>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d14b      	bne.n	800cda4 <HAL_I2C_Master_Receive+0xdc>
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 800cd0c:	2322      	movs	r3, #34	; 0x22
 800cd0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 800cd12:	2310      	movs	r3, #16
 800cd14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cd18:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800cd1a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800cd20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800cd28:	6360      	str	r0, [r4, #52]	; 0x34
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd2a:	d927      	bls.n	800cd7c <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd2c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800cd2e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd32:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800cd34:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cd36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7ff fdd5 	bl	800c8ec <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 800cd42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cd44:	b29b      	uxth	r3, r3
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd46:	462a      	mov	r2, r5
 800cd48:	4639      	mov	r1, r7
 800cd4a:	4620      	mov	r0, r4
    while(hi2c->XferCount > 0U)
 800cd4c:	bb03      	cbnz	r3, 800cd90 <HAL_I2C_Master_Receive+0xc8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd4e:	f7ff feab 	bl	800caa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cd52:	bb00      	cbnz	r0, 800cd96 <HAL_I2C_Master_Receive+0xce>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	2120      	movs	r1, #32
 800cd58:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800cd60:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800cd64:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800cd68:	f022 0201 	bic.w	r2, r2, #1
 800cd6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cd6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd76:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800cd7a:	e010      	b.n	800cd9e <HAL_I2C_Master_Receive+0xd6>
      hi2c->XferSize = hi2c->XferCount;
 800cd7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800cd7e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 800cd82:	b292      	uxth	r2, r2
 800cd84:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800cd86:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cd88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd8c:	b2d2      	uxtb	r2, r2
 800cd8e:	e7d4      	b.n	800cd3a <HAL_I2C_Master_Receive+0x72>
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd90:	f7ff fe4e 	bl	800ca30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd94:	b140      	cbz	r0, 800cda8 <HAL_I2C_Master_Receive+0xe0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d103      	bne.n	800cda4 <HAL_I2C_Master_Receive+0xdc>
          return HAL_ERROR;
 800cd9c:	2001      	movs	r0, #1
}
 800cd9e:	b002      	add	sp, #8
 800cda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 800cda4:	2003      	movs	r0, #3
 800cda6:	e7fa      	b.n	800cd9e <HAL_I2C_Master_Receive+0xd6>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdae:	1c59      	adds	r1, r3, #1
 800cdb0:	6261      	str	r1, [r4, #36]	; 0x24
 800cdb2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800cdb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800cdb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800cdb8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800cdba:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800cdbc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800cdbe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800cdc0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800cdc2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800cdc4:	2a00      	cmp	r2, #0
 800cdc6:	d1bc      	bne.n	800cd42 <HAL_I2C_Master_Receive+0x7a>
 800cdc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0b8      	beq.n	800cd42 <HAL_I2C_Master_Receive+0x7a>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cdd0:	9500      	str	r5, [sp, #0]
 800cdd2:	463b      	mov	r3, r7
 800cdd4:	2180      	movs	r1, #128	; 0x80
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7ff fd9d 	bl	800c916 <I2C_WaitOnFlagUntilTimeout>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d1e1      	bne.n	800cda4 <HAL_I2C_Master_Receive+0xdc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800cde0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	2bff      	cmp	r3, #255	; 0xff
 800cde6:	d903      	bls.n	800cdf0 <HAL_I2C_Master_Receive+0x128>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cde8:	22ff      	movs	r2, #255	; 0xff
 800cdea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cdec:	9000      	str	r0, [sp, #0]
 800cdee:	e7a2      	b.n	800cd36 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 800cdf0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cdf2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800cdf4:	b292      	uxth	r2, r2
 800cdf6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cdf8:	e7c6      	b.n	800cd88 <HAL_I2C_Master_Receive+0xc0>
    return HAL_BUSY;
 800cdfa:	2002      	movs	r0, #2
 800cdfc:	e7cf      	b.n	800cd9e <HAL_I2C_Master_Receive+0xd6>

0800cdfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cdfe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800ce00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	b2dc      	uxtb	r4, r3
 800ce08:	d11d      	bne.n	800ce46 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d019      	beq.n	800ce46 <HAL_I2CEx_ConfigAnalogFilter+0x48>
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ce12:	2324      	movs	r3, #36	; 0x24
 800ce14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800ce18:	6803      	ldr	r3, [r0, #0]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	f022 0201 	bic.w	r2, r2, #1
 800ce20:	601a      	str	r2, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce28:	601a      	str	r2, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	4311      	orrs	r1, r2
 800ce2e:	6019      	str	r1, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	f042 0201 	orr.w	r2, r2, #1
 800ce36:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce38:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800ce3a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ce3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    
    return HAL_OK; 
 800ce42:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ce44:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800ce46:	2002      	movs	r0, #2
 800ce48:	e7fc      	b.n	800ce44 <HAL_I2CEx_ConfigAnalogFilter+0x46>
	...

0800ce4c <HAL_RCC_DeInit>:
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <HAL_RCC_DeInit+0x38>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 800ce54:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 800ce56:	6859      	ldr	r1, [r3, #4]
 800ce58:	4a0b      	ldr	r2, [pc, #44]	; (800ce88 <HAL_RCC_DeInit+0x3c>)
 800ce5a:	400a      	ands	r2, r1
 800ce5c:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800ce64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ce68:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce70:	601a      	str	r2, [r3, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800ce72:	2200      	movs	r2, #0
 800ce74:	605a      	str	r2, [r3, #4]
  
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800ce76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 800ce78:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800ce7a:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800ce7c:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <HAL_RCC_DeInit+0x40>)
 800ce7e:	4a04      	ldr	r2, [pc, #16]	; (800ce90 <HAL_RCC_DeInit+0x44>)
 800ce80:	601a      	str	r2, [r3, #0]
}
 800ce82:	4770      	bx	lr
 800ce84:	40021000 	.word	0x40021000
 800ce88:	f8ffc00c 	.word	0xf8ffc00c
 800ce8c:	2000002c 	.word	0x2000002c
 800ce90:	007a1200 	.word	0x007a1200

0800ce94 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce94:	6803      	ldr	r3, [r0, #0]
{
 800ce96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce9a:	07de      	lsls	r6, r3, #31
{
 800ce9c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce9e:	d411      	bmi.n	800cec4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	079c      	lsls	r4, r3, #30
 800cea4:	f100 8083 	bmi.w	800cfae <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	0718      	lsls	r0, r3, #28
 800ceac:	f100 80f0 	bmi.w	800d090 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	0759      	lsls	r1, r3, #29
 800ceb4:	f100 8135 	bmi.w	800d122 <HAL_RCC_OscConfig+0x28e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ceb8:	69ea      	ldr	r2, [r5, #28]
 800ceba:	2a00      	cmp	r2, #0
 800cebc:	f040 81c6 	bne.w	800d24c <HAL_RCC_OscConfig+0x3b8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800cec0:	2000      	movs	r0, #0
 800cec2:	e020      	b.n	800cf06 <HAL_RCC_OscConfig+0x72>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800cec4:	4cb4      	ldr	r4, [pc, #720]	; (800d198 <HAL_RCC_OscConfig+0x304>)
 800cec6:	6863      	ldr	r3, [r4, #4]
 800cec8:	f003 030c 	and.w	r3, r3, #12
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d007      	beq.n	800cee0 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ced0:	6863      	ldr	r3, [r4, #4]
 800ced2:	f003 030c 	and.w	r3, r3, #12
 800ced6:	2b08      	cmp	r3, #8
 800ced8:	d118      	bne.n	800cf0c <HAL_RCC_OscConfig+0x78>
 800ceda:	6863      	ldr	r3, [r4, #4]
 800cedc:	03d8      	lsls	r0, r3, #15
 800cede:	d515      	bpl.n	800cf0c <HAL_RCC_OscConfig+0x78>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cee4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cee8:	6822      	ldr	r2, [r4, #0]
 800ceea:	fa93 f3a3 	rbit	r3, r3
 800ceee:	fab3 f383 	clz	r3, r3
 800cef2:	f003 031f 	and.w	r3, r3, #31
 800cef6:	fa22 f303 	lsr.w	r3, r2, r3
 800cefa:	07d9      	lsls	r1, r3, #31
 800cefc:	d5d0      	bpl.n	800cea0 <HAL_RCC_OscConfig+0xc>
 800cefe:	686b      	ldr	r3, [r5, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1cd      	bne.n	800cea0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800cf04:	2001      	movs	r0, #1
}
 800cf06:	b003      	add	sp, #12
 800cf08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf0c:	686a      	ldr	r2, [r5, #4]
 800cf0e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cf12:	d123      	bne.n	800cf5c <HAL_RCC_OscConfig+0xc8>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf1a:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800cf1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cf1e:	68a9      	ldr	r1, [r5, #8]
 800cf20:	f023 030f 	bic.w	r3, r3, #15
 800cf24:	430b      	orrs	r3, r1
 800cf26:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf28:	b342      	cbz	r2, 800cf7c <HAL_RCC_OscConfig+0xe8>
        tickstart = HAL_GetTick();
 800cf2a:	f7fd ff47 	bl	800adbc <HAL_GetTick>
 800cf2e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800cf32:	4606      	mov	r6, r0
 800cf34:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf38:	6822      	ldr	r2, [r4, #0]
 800cf3a:	fa97 f3a7 	rbit	r3, r7
 800cf3e:	fab3 f383 	clz	r3, r3
 800cf42:	f003 031f 	and.w	r3, r3, #31
 800cf46:	fa22 f303 	lsr.w	r3, r2, r3
 800cf4a:	07da      	lsls	r2, r3, #31
 800cf4c:	d4a8      	bmi.n	800cea0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cf4e:	f7fd ff35 	bl	800adbc <HAL_GetTick>
 800cf52:	1b80      	subs	r0, r0, r6
 800cf54:	2864      	cmp	r0, #100	; 0x64
 800cf56:	d9ed      	bls.n	800cf34 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800cf58:	2003      	movs	r0, #3
 800cf5a:	e7d4      	b.n	800cf06 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	b932      	cbnz	r2, 800cf6e <HAL_RCC_OscConfig+0xda>
 800cf60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf6c:	e7d5      	b.n	800cf1a <HAL_RCC_OscConfig+0x86>
 800cf6e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800cf72:	d1f5      	bne.n	800cf60 <HAL_RCC_OscConfig+0xcc>
 800cf74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	e7cb      	b.n	800cf14 <HAL_RCC_OscConfig+0x80>
        tickstart = HAL_GetTick();
 800cf7c:	f7fd ff1e 	bl	800adbc <HAL_GetTick>
 800cf80:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800cf84:	4606      	mov	r6, r0
 800cf86:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf8a:	6822      	ldr	r2, [r4, #0]
 800cf8c:	fa97 f3a7 	rbit	r3, r7
 800cf90:	fab3 f383 	clz	r3, r3
 800cf94:	f003 031f 	and.w	r3, r3, #31
 800cf98:	fa22 f303 	lsr.w	r3, r2, r3
 800cf9c:	07db      	lsls	r3, r3, #31
 800cf9e:	f57f af7f 	bpl.w	800cea0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cfa2:	f7fd ff0b 	bl	800adbc <HAL_GetTick>
 800cfa6:	1b80      	subs	r0, r0, r6
 800cfa8:	2864      	cmp	r0, #100	; 0x64
 800cfaa:	d9ec      	bls.n	800cf86 <HAL_RCC_OscConfig+0xf2>
 800cfac:	e7d4      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800cfae:	4c7a      	ldr	r4, [pc, #488]	; (800d198 <HAL_RCC_OscConfig+0x304>)
 800cfb0:	6863      	ldr	r3, [r4, #4]
 800cfb2:	f013 0f0c 	tst.w	r3, #12
 800cfb6:	d007      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800cfb8:	6863      	ldr	r3, [r4, #4]
 800cfba:	f003 030c 	and.w	r3, r3, #12
 800cfbe:	2b08      	cmp	r3, #8
 800cfc0:	d120      	bne.n	800d004 <HAL_RCC_OscConfig+0x170>
 800cfc2:	6863      	ldr	r3, [r4, #4]
 800cfc4:	03d8      	lsls	r0, r3, #15
 800cfc6:	d41d      	bmi.n	800d004 <HAL_RCC_OscConfig+0x170>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	fa93 f3a3 	rbit	r3, r3
 800cfd4:	fab3 f383 	clz	r3, r3
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe0:	07d9      	lsls	r1, r3, #31
 800cfe2:	d502      	bpl.n	800cfea <HAL_RCC_OscConfig+0x156>
 800cfe4:	692b      	ldr	r3, [r5, #16]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d18c      	bne.n	800cf04 <HAL_RCC_OscConfig+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfea:	6821      	ldr	r1, [r4, #0]
 800cfec:	23f8      	movs	r3, #248	; 0xf8
 800cfee:	fa93 f3a3 	rbit	r3, r3
 800cff2:	fab3 f283 	clz	r2, r3
 800cff6:	696b      	ldr	r3, [r5, #20]
 800cff8:	4093      	lsls	r3, r2
 800cffa:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800cffe:	4313      	orrs	r3, r2
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	e751      	b.n	800cea8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d004:	692a      	ldr	r2, [r5, #16]
 800d006:	2301      	movs	r3, #1
 800d008:	b302      	cbz	r2, 800d04c <HAL_RCC_OscConfig+0x1b8>
 800d00a:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 800d00e:	fab2 f282 	clz	r2, r2
 800d012:	0092      	lsls	r2, r2, #2
 800d014:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 800d018:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800d01c:	2702      	movs	r7, #2
 800d01e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d020:	f7fd fecc 	bl	800adbc <HAL_GetTick>
 800d024:	4606      	mov	r6, r0
 800d026:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	fa97 f3a7 	rbit	r3, r7
 800d030:	fab3 f383 	clz	r3, r3
 800d034:	f003 031f 	and.w	r3, r3, #31
 800d038:	fa22 f303 	lsr.w	r3, r2, r3
 800d03c:	07da      	lsls	r2, r3, #31
 800d03e:	d4d4      	bmi.n	800cfea <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d040:	f7fd febc 	bl	800adbc <HAL_GetTick>
 800d044:	1b80      	subs	r0, r0, r6
 800d046:	2802      	cmp	r0, #2
 800d048:	d9ed      	bls.n	800d026 <HAL_RCC_OscConfig+0x192>
 800d04a:	e785      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
 800d04c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800d050:	fab3 f383 	clz	r3, r3
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800d05a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800d05e:	2702      	movs	r7, #2
 800d060:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d062:	f7fd feab 	bl	800adbc <HAL_GetTick>
 800d066:	4606      	mov	r6, r0
 800d068:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	fa97 f3a7 	rbit	r3, r7
 800d072:	fab3 f383 	clz	r3, r3
 800d076:	f003 031f 	and.w	r3, r3, #31
 800d07a:	fa22 f303 	lsr.w	r3, r2, r3
 800d07e:	07db      	lsls	r3, r3, #31
 800d080:	f57f af12 	bpl.w	800cea8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d084:	f7fd fe9a 	bl	800adbc <HAL_GetTick>
 800d088:	1b80      	subs	r0, r0, r6
 800d08a:	2802      	cmp	r0, #2
 800d08c:	d9ec      	bls.n	800d068 <HAL_RCC_OscConfig+0x1d4>
 800d08e:	e763      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d090:	69aa      	ldr	r2, [r5, #24]
 800d092:	4c41      	ldr	r4, [pc, #260]	; (800d198 <HAL_RCC_OscConfig+0x304>)
 800d094:	4941      	ldr	r1, [pc, #260]	; (800d19c <HAL_RCC_OscConfig+0x308>)
 800d096:	2301      	movs	r3, #1
 800d098:	b30a      	cbz	r2, 800d0de <HAL_RCC_OscConfig+0x24a>
 800d09a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_LSI_ENABLE();
 800d09e:	fab2 f282 	clz	r2, r2
 800d0a2:	2602      	movs	r6, #2
 800d0a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      tickstart = HAL_GetTick();
 800d0a8:	f7fd fe88 	bl	800adbc <HAL_GetTick>
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	fa96 f3a6 	rbit	r3, r6
 800d0b2:	fa96 f3a6 	rbit	r3, r6
 800d0b6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d0ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d0bc:	fa96 f3a6 	rbit	r3, r6
 800d0c0:	fab3 f383 	clz	r3, r3
 800d0c4:	f003 031f 	and.w	r3, r3, #31
 800d0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0cc:	07da      	lsls	r2, r3, #31
 800d0ce:	f53f aeef 	bmi.w	800ceb0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d0d2:	f7fd fe73 	bl	800adbc <HAL_GetTick>
 800d0d6:	1bc0      	subs	r0, r0, r7
 800d0d8:	2802      	cmp	r0, #2
 800d0da:	d9e8      	bls.n	800d0ae <HAL_RCC_OscConfig+0x21a>
 800d0dc:	e73c      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
 800d0de:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 800d0e2:	fab3 f383 	clz	r3, r3
 800d0e6:	2602      	movs	r6, #2
 800d0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 800d0ec:	f7fd fe66 	bl	800adbc <HAL_GetTick>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	fa96 f3a6 	rbit	r3, r6
 800d0f6:	fa96 f3a6 	rbit	r3, r6
 800d0fa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d0fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d100:	fa96 f3a6 	rbit	r3, r6
 800d104:	fab3 f383 	clz	r3, r3
 800d108:	f003 031f 	and.w	r3, r3, #31
 800d10c:	fa22 f303 	lsr.w	r3, r2, r3
 800d110:	07db      	lsls	r3, r3, #31
 800d112:	f57f aecd 	bpl.w	800ceb0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d116:	f7fd fe51 	bl	800adbc <HAL_GetTick>
 800d11a:	1bc0      	subs	r0, r0, r7
 800d11c:	2802      	cmp	r0, #2
 800d11e:	d9e8      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x25e>
 800d120:	e71a      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d122:	4c1d      	ldr	r4, [pc, #116]	; (800d198 <HAL_RCC_OscConfig+0x304>)
 800d124:	69e3      	ldr	r3, [r4, #28]
 800d126:	00d8      	lsls	r0, r3, #3
 800d128:	d433      	bmi.n	800d192 <HAL_RCC_OscConfig+0x2fe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d12a:	69e3      	ldr	r3, [r4, #28]
 800d12c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d130:	61e3      	str	r3, [r4, #28]
 800d132:	69e3      	ldr	r3, [r4, #28]
 800d134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d13c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d13e:	4f18      	ldr	r7, [pc, #96]	; (800d1a0 <HAL_RCC_OscConfig+0x30c>)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	05d9      	lsls	r1, r3, #23
 800d144:	d52e      	bpl.n	800d1a4 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d146:	68eb      	ldr	r3, [r5, #12]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d13c      	bne.n	800d1c6 <HAL_RCC_OscConfig+0x332>
 800d14c:	6a23      	ldr	r3, [r4, #32]
 800d14e:	f043 0301 	orr.w	r3, r3, #1
 800d152:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800d154:	f7fd fe32 	bl	800adbc <HAL_GetTick>
 800d158:	2702      	movs	r7, #2
 800d15a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d15c:	f241 3988 	movw	r9, #5000	; 0x1388
 800d160:	fa97 f3a7 	rbit	r3, r7
 800d164:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d067      	beq.n	800d23c <HAL_RCC_OscConfig+0x3a8>
 800d16c:	6a22      	ldr	r2, [r4, #32]
 800d16e:	fa97 f3a7 	rbit	r3, r7
 800d172:	fab3 f383 	clz	r3, r3
 800d176:	f003 031f 	and.w	r3, r3, #31
 800d17a:	fa22 f303 	lsr.w	r3, r2, r3
 800d17e:	07db      	lsls	r3, r3, #31
 800d180:	d555      	bpl.n	800d22e <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 800d182:	2e00      	cmp	r6, #0
 800d184:	f43f ae98 	beq.w	800ceb8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d188:	69e3      	ldr	r3, [r4, #28]
 800d18a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d18e:	61e3      	str	r3, [r4, #28]
 800d190:	e692      	b.n	800ceb8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800d192:	2600      	movs	r6, #0
 800d194:	e7d3      	b.n	800d13e <HAL_RCC_OscConfig+0x2aa>
 800d196:	bf00      	nop
 800d198:	40021000 	.word	0x40021000
 800d19c:	42420480 	.word	0x42420480
 800d1a0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1aa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800d1ac:	f7fd fe06 	bl	800adbc <HAL_GetTick>
 800d1b0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	05da      	lsls	r2, r3, #23
 800d1b6:	d4c6      	bmi.n	800d146 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1b8:	f7fd fe00 	bl	800adbc <HAL_GetTick>
 800d1bc:	eba0 0008 	sub.w	r0, r0, r8
 800d1c0:	2864      	cmp	r0, #100	; 0x64
 800d1c2:	d9f6      	bls.n	800d1b2 <HAL_RCC_OscConfig+0x31e>
 800d1c4:	e6c8      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1c6:	bb23      	cbnz	r3, 800d212 <HAL_RCC_OscConfig+0x37e>
 800d1c8:	6a23      	ldr	r3, [r4, #32]
 800d1ca:	f023 0301 	bic.w	r3, r3, #1
 800d1ce:	6223      	str	r3, [r4, #32]
 800d1d0:	6a23      	ldr	r3, [r4, #32]
 800d1d2:	f023 0304 	bic.w	r3, r3, #4
 800d1d6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800d1d8:	f7fd fdf0 	bl	800adbc <HAL_GetTick>
 800d1dc:	2702      	movs	r7, #2
 800d1de:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d1e0:	f241 3988 	movw	r9, #5000	; 0x1388
 800d1e4:	fa97 f3a7 	rbit	r3, r7
 800d1e8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d1ec:	b353      	cbz	r3, 800d244 <HAL_RCC_OscConfig+0x3b0>
 800d1ee:	6a22      	ldr	r2, [r4, #32]
 800d1f0:	fa97 f3a7 	rbit	r3, r7
 800d1f4:	fab3 f383 	clz	r3, r3
 800d1f8:	f003 031f 	and.w	r3, r3, #31
 800d1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d200:	07d8      	lsls	r0, r3, #31
 800d202:	d5be      	bpl.n	800d182 <HAL_RCC_OscConfig+0x2ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d204:	f7fd fdda 	bl	800adbc <HAL_GetTick>
 800d208:	eba0 0008 	sub.w	r0, r0, r8
 800d20c:	4548      	cmp	r0, r9
 800d20e:	d9e9      	bls.n	800d1e4 <HAL_RCC_OscConfig+0x350>
 800d210:	e6a2      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d212:	2b05      	cmp	r3, #5
 800d214:	6a23      	ldr	r3, [r4, #32]
 800d216:	d103      	bne.n	800d220 <HAL_RCC_OscConfig+0x38c>
 800d218:	f043 0304 	orr.w	r3, r3, #4
 800d21c:	6223      	str	r3, [r4, #32]
 800d21e:	e795      	b.n	800d14c <HAL_RCC_OscConfig+0x2b8>
 800d220:	f023 0301 	bic.w	r3, r3, #1
 800d224:	6223      	str	r3, [r4, #32]
 800d226:	6a23      	ldr	r3, [r4, #32]
 800d228:	f023 0304 	bic.w	r3, r3, #4
 800d22c:	e791      	b.n	800d152 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d22e:	f7fd fdc5 	bl	800adbc <HAL_GetTick>
 800d232:	eba0 0008 	sub.w	r0, r0, r8
 800d236:	4548      	cmp	r0, r9
 800d238:	d992      	bls.n	800d160 <HAL_RCC_OscConfig+0x2cc>
 800d23a:	e68d      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
 800d23c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d242:	e794      	b.n	800d16e <HAL_RCC_OscConfig+0x2da>
 800d244:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d248:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d24a:	e7d1      	b.n	800d1f0 <HAL_RCC_OscConfig+0x35c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d24c:	4c3f      	ldr	r4, [pc, #252]	; (800d34c <HAL_RCC_OscConfig+0x4b8>)
 800d24e:	6863      	ldr	r3, [r4, #4]
 800d250:	f003 030c 	and.w	r3, r3, #12
 800d254:	2b08      	cmp	r3, #8
 800d256:	f43f ae55 	beq.w	800cf04 <HAL_RCC_OscConfig+0x70>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d25a:	2a02      	cmp	r2, #2
 800d25c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d260:	d150      	bne.n	800d304 <HAL_RCC_OscConfig+0x470>
 800d262:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800d266:	fab3 f383 	clz	r3, r3
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800d270:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d278:	f7fd fda0 	bl	800adbc <HAL_GetTick>
 800d27c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800d280:	4606      	mov	r6, r0
 800d282:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d286:	6822      	ldr	r2, [r4, #0]
 800d288:	fa97 f3a7 	rbit	r3, r7
 800d28c:	fab3 f383 	clz	r3, r3
 800d290:	f003 031f 	and.w	r3, r3, #31
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
 800d298:	07d9      	lsls	r1, r3, #31
 800d29a:	d42d      	bmi.n	800d2f8 <HAL_RCC_OscConfig+0x464>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d29c:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800d2a0:	6862      	ldr	r2, [r4, #4]
 800d2a2:	430b      	orrs	r3, r1
 800d2a4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	6063      	str	r3, [r4, #4]
 800d2ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800d2b4:	fab3 f383 	clz	r3, r3
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800d2be:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d2c6:	f7fd fd79 	bl	800adbc <HAL_GetTick>
 800d2ca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800d2ce:	4605      	mov	r5, r0
 800d2d0:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	fa96 f3a6 	rbit	r3, r6
 800d2da:	fab3 f383 	clz	r3, r3
 800d2de:	f003 031f 	and.w	r3, r3, #31
 800d2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e6:	07da      	lsls	r2, r3, #31
 800d2e8:	f53f adea 	bmi.w	800cec0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d2ec:	f7fd fd66 	bl	800adbc <HAL_GetTick>
 800d2f0:	1b40      	subs	r0, r0, r5
 800d2f2:	2802      	cmp	r0, #2
 800d2f4:	d9ec      	bls.n	800d2d0 <HAL_RCC_OscConfig+0x43c>
 800d2f6:	e62f      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d2f8:	f7fd fd60 	bl	800adbc <HAL_GetTick>
 800d2fc:	1b80      	subs	r0, r0, r6
 800d2fe:	2802      	cmp	r0, #2
 800d300:	d9bf      	bls.n	800d282 <HAL_RCC_OscConfig+0x3ee>
 800d302:	e629      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
 800d304:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800d308:	fab3 f383 	clz	r3, r3
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800d312:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d31a:	f7fd fd4f 	bl	800adbc <HAL_GetTick>
 800d31e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800d322:	4605      	mov	r5, r0
 800d324:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	fa96 f3a6 	rbit	r3, r6
 800d32e:	fab3 f383 	clz	r3, r3
 800d332:	f003 031f 	and.w	r3, r3, #31
 800d336:	fa22 f303 	lsr.w	r3, r2, r3
 800d33a:	07db      	lsls	r3, r3, #31
 800d33c:	f57f adc0 	bpl.w	800cec0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d340:	f7fd fd3c 	bl	800adbc <HAL_GetTick>
 800d344:	1b40      	subs	r0, r0, r5
 800d346:	2802      	cmp	r0, #2
 800d348:	d9ec      	bls.n	800d324 <HAL_RCC_OscConfig+0x490>
 800d34a:	e605      	b.n	800cf58 <HAL_RCC_OscConfig+0xc4>
 800d34c:	40021000 	.word	0x40021000

0800d350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d350:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 800d352:	4c13      	ldr	r4, [pc, #76]	; (800d3a0 <HAL_RCC_GetSysClockFreq+0x50>)
 800d354:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d356:	f001 030c 	and.w	r3, r1, #12
 800d35a:	2b08      	cmp	r3, #8
 800d35c:	d11e      	bne.n	800d39c <HAL_RCC_GetSysClockFreq+0x4c>
 800d35e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800d362:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800d366:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800d36a:	fab3 f383 	clz	r3, r3
 800d36e:	fa22 f303 	lsr.w	r3, r2, r3
 800d372:	4a0c      	ldr	r2, [pc, #48]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x54>)
 800d374:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800d376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d378:	220f      	movs	r2, #15
 800d37a:	fa92 f2a2 	rbit	r2, r2
 800d37e:	fab2 f282 	clz	r2, r2
 800d382:	f003 030f 	and.w	r3, r3, #15
 800d386:	40d3      	lsrs	r3, r2
 800d388:	4a07      	ldr	r2, [pc, #28]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x58>)
 800d38a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800d38c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800d38e:	bf4a      	itet	mi
 800d390:	4b06      	ldrmi	r3, [pc, #24]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 800d392:	4b07      	ldrpl	r3, [pc, #28]	; (800d3b0 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800d394:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1) * pllmul;
 800d398:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d39a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800d39c:	4803      	ldr	r0, [pc, #12]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800d39e:	e7fc      	b.n	800d39a <HAL_RCC_GetSysClockFreq+0x4a>
 800d3a0:	40021000 	.word	0x40021000
 800d3a4:	08014c14 	.word	0x08014c14
 800d3a8:	08014c24 	.word	0x08014c24
 800d3ac:	007a1200 	.word	0x007a1200
 800d3b0:	003d0900 	.word	0x003d0900

0800d3b4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800d3b4:	4a54      	ldr	r2, [pc, #336]	; (800d508 <HAL_RCC_ClockConfig+0x154>)
 800d3b6:	6813      	ldr	r3, [r2, #0]
 800d3b8:	f003 0307 	and.w	r3, r3, #7
 800d3bc:	428b      	cmp	r3, r1
{
 800d3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800d3c6:	d32f      	bcc.n	800d428 <HAL_RCC_ClockConfig+0x74>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	0796      	lsls	r6, r2, #30
 800d3cc:	d439      	bmi.n	800d442 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d3ce:	07d0      	lsls	r0, r2, #31
 800d3d0:	d43f      	bmi.n	800d452 <HAL_RCC_ClockConfig+0x9e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800d3d2:	4a4d      	ldr	r2, [pc, #308]	; (800d508 <HAL_RCC_ClockConfig+0x154>)
 800d3d4:	6813      	ldr	r3, [r2, #0]
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	42ab      	cmp	r3, r5
 800d3dc:	f200 8082 	bhi.w	800d4e4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3e0:	6822      	ldr	r2, [r4, #0]
 800d3e2:	4d4a      	ldr	r5, [pc, #296]	; (800d50c <HAL_RCC_ClockConfig+0x158>)
 800d3e4:	f012 0f04 	tst.w	r2, #4
 800d3e8:	f040 8087 	bne.w	800d4fa <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3ec:	0713      	lsls	r3, r2, #28
 800d3ee:	d506      	bpl.n	800d3fe <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d3f0:	686b      	ldr	r3, [r5, #4]
 800d3f2:	6922      	ldr	r2, [r4, #16]
 800d3f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800d3f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d3fc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800d3fe:	f7ff ffa7 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800d402:	686b      	ldr	r3, [r5, #4]
 800d404:	22f0      	movs	r2, #240	; 0xf0
 800d406:	fa92 f2a2 	rbit	r2, r2
 800d40a:	fab2 f282 	clz	r2, r2
 800d40e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d412:	40d3      	lsrs	r3, r2
 800d414:	4a3e      	ldr	r2, [pc, #248]	; (800d510 <HAL_RCC_ClockConfig+0x15c>)
 800d416:	5cd3      	ldrb	r3, [r2, r3]
 800d418:	40d8      	lsrs	r0, r3
 800d41a:	4b3e      	ldr	r3, [pc, #248]	; (800d514 <HAL_RCC_ClockConfig+0x160>)
 800d41c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800d41e:	2000      	movs	r0, #0
 800d420:	f7fd fc9c 	bl	800ad5c <HAL_InitTick>
  return HAL_OK;
 800d424:	2000      	movs	r0, #0
 800d426:	e00a      	b.n	800d43e <HAL_RCC_ClockConfig+0x8a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d428:	6813      	ldr	r3, [r2, #0]
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	430b      	orrs	r3, r1
 800d430:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d432:	6813      	ldr	r3, [r2, #0]
 800d434:	f003 0307 	and.w	r3, r3, #7
 800d438:	428b      	cmp	r3, r1
 800d43a:	d0c5      	beq.n	800d3c8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800d43c:	2001      	movs	r0, #1
}
 800d43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d442:	4932      	ldr	r1, [pc, #200]	; (800d50c <HAL_RCC_ClockConfig+0x158>)
 800d444:	68a0      	ldr	r0, [r4, #8]
 800d446:	684b      	ldr	r3, [r1, #4]
 800d448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d44c:	4303      	orrs	r3, r0
 800d44e:	604b      	str	r3, [r1, #4]
 800d450:	e7bd      	b.n	800d3ce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	4e2d      	ldr	r6, [pc, #180]	; (800d50c <HAL_RCC_ClockConfig+0x158>)
 800d456:	2a01      	cmp	r2, #1
 800d458:	d127      	bne.n	800d4aa <HAL_RCC_ClockConfig+0xf6>
 800d45a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d45e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d462:	6831      	ldr	r1, [r6, #0]
 800d464:	fa93 f3a3 	rbit	r3, r3
 800d468:	fab3 f383 	clz	r3, r3
 800d46c:	f003 031f 	and.w	r3, r3, #31
 800d470:	fa21 f303 	lsr.w	r3, r1, r3
 800d474:	07d9      	lsls	r1, r3, #31
 800d476:	d5e1      	bpl.n	800d43c <HAL_RCC_ClockConfig+0x88>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d478:	6873      	ldr	r3, [r6, #4]
 800d47a:	f023 0303 	bic.w	r3, r3, #3
 800d47e:	431a      	orrs	r2, r3
 800d480:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800d482:	f7fd fc9b 	bl	800adbc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800d48a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d48c:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d490:	d111      	bne.n	800d4b6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d492:	6873      	ldr	r3, [r6, #4]
 800d494:	f003 030c 	and.w	r3, r3, #12
 800d498:	2b04      	cmp	r3, #4
 800d49a:	d09a      	beq.n	800d3d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d49c:	f7fd fc8e 	bl	800adbc <HAL_GetTick>
 800d4a0:	1bc0      	subs	r0, r0, r7
 800d4a2:	4540      	cmp	r0, r8
 800d4a4:	d9f5      	bls.n	800d492 <HAL_RCC_ClockConfig+0xde>
          return HAL_TIMEOUT;
 800d4a6:	2003      	movs	r0, #3
 800d4a8:	e7c9      	b.n	800d43e <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d4aa:	2a02      	cmp	r2, #2
 800d4ac:	bf0c      	ite	eq
 800d4ae:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800d4b2:	2302      	movne	r3, #2
 800d4b4:	e7d3      	b.n	800d45e <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d10f      	bne.n	800d4da <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d4ba:	6873      	ldr	r3, [r6, #4]
 800d4bc:	f003 030c 	and.w	r3, r3, #12
 800d4c0:	2b08      	cmp	r3, #8
 800d4c2:	d086      	beq.n	800d3d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4c4:	f7fd fc7a 	bl	800adbc <HAL_GetTick>
 800d4c8:	1bc0      	subs	r0, r0, r7
 800d4ca:	4540      	cmp	r0, r8
 800d4cc:	d9f5      	bls.n	800d4ba <HAL_RCC_ClockConfig+0x106>
 800d4ce:	e7ea      	b.n	800d4a6 <HAL_RCC_ClockConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4d0:	f7fd fc74 	bl	800adbc <HAL_GetTick>
 800d4d4:	1bc0      	subs	r0, r0, r7
 800d4d6:	4540      	cmp	r0, r8
 800d4d8:	d8e5      	bhi.n	800d4a6 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d4da:	6873      	ldr	r3, [r6, #4]
 800d4dc:	f013 0f0c 	tst.w	r3, #12
 800d4e0:	d1f6      	bne.n	800d4d0 <HAL_RCC_ClockConfig+0x11c>
 800d4e2:	e776      	b.n	800d3d2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4e4:	6813      	ldr	r3, [r2, #0]
 800d4e6:	f023 0307 	bic.w	r3, r3, #7
 800d4ea:	432b      	orrs	r3, r5
 800d4ec:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d4ee:	6813      	ldr	r3, [r2, #0]
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	42ab      	cmp	r3, r5
 800d4f6:	d1a1      	bne.n	800d43c <HAL_RCC_ClockConfig+0x88>
 800d4f8:	e772      	b.n	800d3e0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4fa:	686b      	ldr	r3, [r5, #4]
 800d4fc:	68e1      	ldr	r1, [r4, #12]
 800d4fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d502:	430b      	orrs	r3, r1
 800d504:	606b      	str	r3, [r5, #4]
 800d506:	e771      	b.n	800d3ec <HAL_RCC_ClockConfig+0x38>
 800d508:	40022000 	.word	0x40022000
 800d50c:	40021000 	.word	0x40021000
 800d510:	08014c37 	.word	0x08014c37
 800d514:	2000002c 	.word	0x2000002c

0800d518 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800d518:	4b01      	ldr	r3, [pc, #4]	; (800d520 <HAL_RCC_GetHCLKFreq+0x8>)
 800d51a:	6818      	ldr	r0, [r3, #0]
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2000002c 	.word	0x2000002c

0800d524 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800d524:	4b08      	ldr	r3, [pc, #32]	; (800d548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d526:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	fa92 f2a2 	rbit	r2, r2
 800d530:	fab2 f282 	clz	r2, r2
 800d534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d538:	40d3      	lsrs	r3, r2
 800d53a:	4a04      	ldr	r2, [pc, #16]	; (800d54c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d53c:	5cd3      	ldrb	r3, [r2, r3]
 800d53e:	4a04      	ldr	r2, [pc, #16]	; (800d550 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800d540:	6810      	ldr	r0, [r2, #0]
}    
 800d542:	40d8      	lsrs	r0, r3
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	40021000 	.word	0x40021000
 800d54c:	08014c47 	.word	0x08014c47
 800d550:	2000002c 	.word	0x2000002c

0800d554 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800d554:	4b08      	ldr	r3, [pc, #32]	; (800d578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d556:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	fa92 f2a2 	rbit	r2, r2
 800d560:	fab2 f282 	clz	r2, r2
 800d564:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800d568:	40d3      	lsrs	r3, r2
 800d56a:	4a04      	ldr	r2, [pc, #16]	; (800d57c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d56c:	5cd3      	ldrb	r3, [r2, r3]
 800d56e:	4a04      	ldr	r2, [pc, #16]	; (800d580 <HAL_RCC_GetPCLK2Freq+0x2c>)
 800d570:	6810      	ldr	r0, [r2, #0]
} 
 800d572:	40d8      	lsrs	r0, r3
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	40021000 	.word	0x40021000
 800d57c:	08014c47 	.word	0x08014c47
 800d580:	2000002c 	.word	0x2000002c

0800d584 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d584:	6803      	ldr	r3, [r0, #0]
{
 800d586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d58a:	03df      	lsls	r7, r3, #15
{
 800d58c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d58e:	d523      	bpl.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d590:	4d7b      	ldr	r5, [pc, #492]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d592:	69eb      	ldr	r3, [r5, #28]
 800d594:	00de      	lsls	r6, r3, #3
 800d596:	f100 809a 	bmi.w	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d59a:	69eb      	ldr	r3, [r5, #28]
 800d59c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5a0:	61eb      	str	r3, [r5, #28]
 800d5a2:	69eb      	ldr	r3, [r5, #28]
 800d5a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d5ac:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5ae:	4f75      	ldr	r7, [pc, #468]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	05d8      	lsls	r0, r3, #23
 800d5b4:	f140 808d 	bpl.w	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d5b8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d5ba:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800d5be:	f040 809d 	bne.w	800d6fc <HAL_RCCEx_PeriphCLKConfig+0x178>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800d5c2:	6a2b      	ldr	r3, [r5, #32]
 800d5c4:	6862      	ldr	r2, [r4, #4]
 800d5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d5ce:	b11e      	cbz	r6, 800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5d0:	69eb      	ldr	r3, [r5, #28]
 800d5d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5d6:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	07df      	lsls	r7, r3, #31
 800d5dc:	d506      	bpl.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d5de:	4968      	ldr	r1, [pc, #416]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d5e0:	68a0      	ldr	r0, [r4, #8]
 800d5e2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d5e4:	f022 0203 	bic.w	r2, r2, #3
 800d5e8:	4302      	orrs	r2, r0
 800d5ea:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d5ec:	079e      	lsls	r6, r3, #30
 800d5ee:	d506      	bpl.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d5f0:	4963      	ldr	r1, [pc, #396]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d5f2:	68e0      	ldr	r0, [r4, #12]
 800d5f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d5f6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d5fa:	4302      	orrs	r2, r0
 800d5fc:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d5fe:	075d      	lsls	r5, r3, #29
 800d600:	d506      	bpl.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d602:	495f      	ldr	r1, [pc, #380]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d604:	6920      	ldr	r0, [r4, #16]
 800d606:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d608:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800d60c:	4302      	orrs	r2, r0
 800d60e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d610:	0698      	lsls	r0, r3, #26
 800d612:	d506      	bpl.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d614:	495a      	ldr	r1, [pc, #360]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d616:	69e0      	ldr	r0, [r4, #28]
 800d618:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d61a:	f022 0210 	bic.w	r2, r2, #16
 800d61e:	4302      	orrs	r2, r0
 800d620:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d622:	0399      	lsls	r1, r3, #14
 800d624:	d506      	bpl.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800d626:	4956      	ldr	r1, [pc, #344]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d628:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d62a:	684a      	ldr	r2, [r1, #4]
 800d62c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800d630:	4302      	orrs	r2, r0
 800d632:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d634:	065a      	lsls	r2, r3, #25
 800d636:	d506      	bpl.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d638:	4951      	ldr	r1, [pc, #324]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d63a:	6a20      	ldr	r0, [r4, #32]
 800d63c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d63e:	f022 0220 	bic.w	r2, r2, #32
 800d642:	4302      	orrs	r2, r0
 800d644:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d646:	071f      	lsls	r7, r3, #28
 800d648:	d506      	bpl.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d64a:	494d      	ldr	r1, [pc, #308]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d64c:	6960      	ldr	r0, [r4, #20]
 800d64e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d650:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d654:	4302      	orrs	r2, r0
 800d656:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d658:	06de      	lsls	r6, r3, #27
 800d65a:	d506      	bpl.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d65c:	4948      	ldr	r1, [pc, #288]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d65e:	69a0      	ldr	r0, [r4, #24]
 800d660:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d662:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d666:	4302      	orrs	r2, r0
 800d668:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d66a:	059d      	lsls	r5, r3, #22
 800d66c:	d506      	bpl.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d66e:	4944      	ldr	r1, [pc, #272]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d672:	684a      	ldr	r2, [r1, #4]
 800d674:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d678:	4302      	orrs	r2, r0
 800d67a:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d67c:	0618      	lsls	r0, r3, #24
 800d67e:	d506      	bpl.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d680:	493f      	ldr	r1, [pc, #252]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d684:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800d686:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800d68a:	4302      	orrs	r2, r0
 800d68c:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800d68e:	05d9      	lsls	r1, r3, #23
 800d690:	d506      	bpl.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800d692:	493b      	ldr	r1, [pc, #236]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d694:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d696:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800d698:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800d69c:	4302      	orrs	r2, r0
 800d69e:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800d6a0:	04da      	lsls	r2, r3, #19
 800d6a2:	d506      	bpl.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800d6a4:	4936      	ldr	r1, [pc, #216]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d6a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d6a8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d6aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6ae:	4302      	orrs	r2, r0
 800d6b0:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800d6b2:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800d6b6:	bf1f      	itttt	ne
 800d6b8:	4a31      	ldrne	r2, [pc, #196]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d6ba:	6b61      	ldrne	r1, [r4, #52]	; 0x34
 800d6bc:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 800d6be:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
 800d6c2:	bf1d      	ittte	ne
 800d6c4:	430b      	orrne	r3, r1
 800d6c6:	6313      	strne	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800d6c8:	2000      	movne	r0, #0
 800d6ca:	4618      	moveq	r0, r3
 800d6cc:	e013      	b.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x172>
    FlagStatus       pwrclkchanged = RESET;
 800d6ce:	2600      	movs	r6, #0
 800d6d0:	e76d      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6d8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800d6da:	f7fd fb6f 	bl	800adbc <HAL_GetTick>
 800d6de:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	05d9      	lsls	r1, r3, #23
 800d6e4:	f53f af68 	bmi.w	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6e8:	f7fd fb68 	bl	800adbc <HAL_GetTick>
 800d6ec:	eba0 0008 	sub.w	r0, r0, r8
 800d6f0:	2864      	cmp	r0, #100	; 0x64
 800d6f2:	d9f5      	bls.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          return HAL_TIMEOUT;
 800d6f4:	2003      	movs	r0, #3
}
 800d6f6:	b003      	add	sp, #12
 800d6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d6fc:	6862      	ldr	r2, [r4, #4]
 800d6fe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800d702:	429a      	cmp	r2, r3
 800d704:	f43f af5d 	beq.w	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d708:	6a29      	ldr	r1, [r5, #32]
 800d70a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d70e:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 800d712:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800d716:	481c      	ldr	r0, [pc, #112]	; (800d788 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800d718:	fab2 f282 	clz	r2, r2
 800d71c:	f04f 0c01 	mov.w	ip, #1
 800d720:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
 800d724:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d728:	fab3 f383 	clz	r3, r3
 800d72c:	2200      	movs	r2, #0
 800d72e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800d732:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800d734:	622f      	str	r7, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800d736:	f57f af44 	bpl.w	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800d73a:	f7fd fb3f 	bl	800adbc <HAL_GetTick>
 800d73e:	2702      	movs	r7, #2
 800d740:	4680      	mov	r8, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d742:	f241 3988 	movw	r9, #5000	; 0x1388
 800d746:	fa97 f3a7 	rbit	r3, r7
 800d74a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d74e:	b193      	cbz	r3, 800d776 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800d750:	6a2a      	ldr	r2, [r5, #32]
 800d752:	fa97 f3a7 	rbit	r3, r7
 800d756:	fab3 f383 	clz	r3, r3
 800d75a:	f003 031f 	and.w	r3, r3, #31
 800d75e:	fa22 f303 	lsr.w	r3, r2, r3
 800d762:	07db      	lsls	r3, r3, #31
 800d764:	f53f af2d 	bmi.w	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d768:	f7fd fb28 	bl	800adbc <HAL_GetTick>
 800d76c:	eba0 0008 	sub.w	r0, r0, r8
 800d770:	4548      	cmp	r0, r9
 800d772:	d9e8      	bls.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800d774:	e7be      	b.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800d776:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d77a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800d77c:	e7e9      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800d77e:	bf00      	nop
 800d780:	40021000 	.word	0x40021000
 800d784:	40007000 	.word	0x40007000
 800d788:	42420400 	.word	0x42420400

0800d78c <SPI_WaitFifoStateUntilTimeout>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
 800d78c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d790:	4604      	mov	r4, r0
 800d792:	460f      	mov	r7, r1
 800d794:	4616      	mov	r6, r2
 800d796:	461d      	mov	r5, r3
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 800d798:	f7fd fb10 	bl	800adbc <HAL_GetTick>
 800d79c:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Fifo) != State)
 800d79e:	6822      	ldr	r2, [r4, #0]
 800d7a0:	6893      	ldr	r3, [r2, #8]
 800d7a2:	403b      	ands	r3, r7
 800d7a4:	42b3      	cmp	r3, r6
 800d7a6:	d101      	bne.n	800d7ac <SPI_WaitFifoStateUntilTimeout+0x20>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	e035      	b.n	800d818 <SPI_WaitFifoStateUntilTimeout+0x8c>
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d7ac:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800d7b0:	d106      	bne.n	800d7c0 <SPI_WaitFifoStateUntilTimeout+0x34>
 800d7b2:	b92e      	cbnz	r6, 800d7c0 <SPI_WaitFifoStateUntilTimeout+0x34>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800d7b4:	7b13      	ldrb	r3, [r2, #12]
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800d7bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800d7c0:	1c6b      	adds	r3, r5, #1
 800d7c2:	d0ed      	beq.n	800d7a0 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d7c4:	bb5d      	cbnz	r5, 800d81e <SPI_WaitFifoStateUntilTimeout+0x92>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d7ce:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7d0:	6862      	ldr	r2, [r4, #4]
 800d7d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d7d6:	d10a      	bne.n	800d7ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800d7d8:	68a2      	ldr	r2, [r4, #8]
 800d7da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d7de:	d002      	beq.n	800d7e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800d7e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d7e4:	d103      	bne.n	800d7ee <SPI_WaitFifoStateUntilTimeout+0x62>
          __HAL_SPI_DISABLE(hspi);
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7ec:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d7ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d7f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d7f4:	d109      	bne.n	800d80a <SPI_WaitFifoStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7fc:	0412      	lsls	r2, r2, #16
 800d7fe:	0c12      	lsrs	r2, r2, #16
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d808:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800d80a:	2301      	movs	r3, #1
 800d80c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d810:	2300      	movs	r3, #0
 800d812:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d816:	2003      	movs	r0, #3
}
 800d818:	b002      	add	sp, #8
 800d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d81e:	f7fd facd 	bl	800adbc <HAL_GetTick>
 800d822:	eba0 0008 	sub.w	r0, r0, r8
 800d826:	42a8      	cmp	r0, r5
 800d828:	d3b9      	bcc.n	800d79e <SPI_WaitFifoStateUntilTimeout+0x12>
 800d82a:	e7cc      	b.n	800d7c6 <SPI_WaitFifoStateUntilTimeout+0x3a>

0800d82c <SPI_WaitFlagStateUntilTimeout>:
{
 800d82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d830:	4604      	mov	r4, r0
 800d832:	460f      	mov	r7, r1
 800d834:	4616      	mov	r6, r2
 800d836:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800d838:	f7fd fac0 	bl	800adbc <HAL_GetTick>
 800d83c:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800d83e:	6822      	ldr	r2, [r4, #0]
 800d840:	6893      	ldr	r3, [r2, #8]
 800d842:	403b      	ands	r3, r7
 800d844:	42b3      	cmp	r3, r6
 800d846:	d101      	bne.n	800d84c <SPI_WaitFlagStateUntilTimeout+0x20>
  return HAL_OK;
 800d848:	2000      	movs	r0, #0
 800d84a:	e02b      	b.n	800d8a4 <SPI_WaitFlagStateUntilTimeout+0x78>
    if(Timeout != HAL_MAX_DELAY)
 800d84c:	1c6b      	adds	r3, r5, #1
 800d84e:	d0f7      	beq.n	800d840 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d850:	bb55      	cbnz	r5, 800d8a8 <SPI_WaitFlagStateUntilTimeout+0x7c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d85a:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d85c:	6862      	ldr	r2, [r4, #4]
 800d85e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d862:	d10a      	bne.n	800d87a <SPI_WaitFlagStateUntilTimeout+0x4e>
 800d864:	68a2      	ldr	r2, [r4, #8]
 800d866:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d86a:	d002      	beq.n	800d872 <SPI_WaitFlagStateUntilTimeout+0x46>
 800d86c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d870:	d103      	bne.n	800d87a <SPI_WaitFlagStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d878:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d87a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d87c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d880:	d109      	bne.n	800d896 <SPI_WaitFlagStateUntilTimeout+0x6a>
          SPI_RESET_CRC(hspi);
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d888:	0412      	lsls	r2, r2, #16
 800d88a:	0c12      	lsrs	r2, r2, #16
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d894:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 800d896:	2301      	movs	r3, #1
 800d898:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d89c:	2300      	movs	r3, #0
 800d89e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800d8a2:	2003      	movs	r0, #3
}
 800d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d8a8:	f7fd fa88 	bl	800adbc <HAL_GetTick>
 800d8ac:	eba0 0008 	sub.w	r0, r0, r8
 800d8b0:	42a8      	cmp	r0, r5
 800d8b2:	d3c4      	bcc.n	800d83e <SPI_WaitFlagStateUntilTimeout+0x12>
 800d8b4:	e7cd      	b.n	800d852 <SPI_WaitFlagStateUntilTimeout+0x26>

0800d8b6 <SPI_EndRxTxTransaction>:
  * @brief Handle the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800d8b6:	b513      	push	{r0, r1, r4, lr}
 800d8b8:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800d8ba:	9101      	str	r1, [sp, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800d8c2:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800d8c4:	f7ff ff62 	bl	800d78c <SPI_WaitFifoStateUntilTimeout>
 800d8c8:	9b01      	ldr	r3, [sp, #4]
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	b128      	cbz	r0, 800d8da <SPI_EndRxTxTransaction+0x24>
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800d8ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d8d0:	f043 0320 	orr.w	r3, r3, #32
 800d8d4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800d8d6:	2003      	movs	r0, #3
 800d8d8:	e005      	b.n	800d8e6 <SPI_EndRxTxTransaction+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800d8da:	2180      	movs	r1, #128	; 0x80
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f7ff ffa5 	bl	800d82c <SPI_WaitFlagStateUntilTimeout>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d1f3      	bne.n	800d8ce <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800d8e6:	b002      	add	sp, #8
 800d8e8:	bd10      	pop	{r4, pc}

0800d8ea <HAL_SPI_Init>:
{
 800d8ea:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d04d      	beq.n	800d98e <HAL_SPI_Init+0xa4>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800d8f2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800d8f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d8fa:	b91b      	cbnz	r3, 800d904 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 800d8fc:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d900:	f000 fd2e 	bl	800e360 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d904:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d906:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d908:	2302      	movs	r3, #2
 800d90a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800d90e:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d910:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800d914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d918:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d91a:	f04f 0300 	mov.w	r3, #0
 800d91e:	d838      	bhi.n	800d992 <HAL_SPI_Init+0xa8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800d924:	d000      	beq.n	800d928 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d926:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d928:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d92a:	b92b      	cbnz	r3, 800d938 <HAL_SPI_Init+0x4e>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d92c:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d930:	bf8c      	ite	hi
 800d932:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d934:	2301      	movls	r3, #1
 800d936:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800d938:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d93c:	4333      	orrs	r3, r6
 800d93e:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800d940:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800d942:	4333      	orrs	r3, r6
 800d944:	6966      	ldr	r6, [r4, #20]
 800d946:	4333      	orrs	r3, r6
 800d948:	69e6      	ldr	r6, [r4, #28]
 800d94a:	4333      	orrs	r3, r6
 800d94c:	6a26      	ldr	r6, [r4, #32]
 800d94e:	4333      	orrs	r3, r6
 800d950:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d952:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800d954:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800d958:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800d95a:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800d95c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d95e:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800d960:	bf02      	ittt	eq
 800d962:	6813      	ldreq	r3, [r2, #0]
 800d964:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800d968:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800d96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d96c:	432b      	orrs	r3, r5
 800d96e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d970:	0c00      	lsrs	r0, r0, #16
 800d972:	f000 0004 	and.w	r0, r0, #4
 800d976:	432b      	orrs	r3, r5
 800d978:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800d97a:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800d97c:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800d97e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d980:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d982:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800d984:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d986:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800d988:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800d98c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d98e:	2001      	movs	r0, #1
 800d990:	e7fc      	b.n	800d98c <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d992:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800d994:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800d998:	e7c4      	b.n	800d924 <HAL_SPI_Init+0x3a>

0800d99a <HAL_SPI_TransmitReceive>:
{
 800d99a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d99e:	4604      	mov	r4, r0
 800d9a0:	461d      	mov	r5, r3
 800d9a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d9a4:	4688      	mov	r8, r1
 800d9a6:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800d9a8:	f7fd fa08 	bl	800adbc <HAL_GetTick>
  __HAL_LOCK(hspi);
 800d9ac:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800d9b0:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800d9b2:	4607      	mov	r7, r0
  __HAL_LOCK(hspi);
 800d9b4:	f000 8139 	beq.w	800dc2a <HAL_SPI_TransmitReceive+0x290>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->State != HAL_SPI_STATE_READY)
 800d9be:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	f040 812f 	bne.w	800dc26 <HAL_SPI_TransmitReceive+0x28c>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800d9c8:	f1b8 0f00 	cmp.w	r8, #0
 800d9cc:	d10a      	bne.n	800d9e4 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_ERROR;
 800d9ce:	2501      	movs	r5, #1
  hspi->State = HAL_SPI_STATE_READY;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d9dc:	4628      	mov	r0, r5
 800d9de:	b003      	add	sp, #12
 800d9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800d9e4:	f1b9 0f00 	cmp.w	r9, #0
 800d9e8:	d0f1      	beq.n	800d9ce <HAL_SPI_TransmitReceive+0x34>
 800d9ea:	2d00      	cmp	r5, #0
 800d9ec:	d0ef      	beq.n	800d9ce <HAL_SPI_TransmitReceive+0x34>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d9ee:	2305      	movs	r3, #5
 800d9f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	6623      	str	r3, [r4, #96]	; 0x60
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d9f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SPI_RESET_CRC(hspi);
 800d9fa:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = pRxData;
 800d9fc:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferCount = Size;
 800da04:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800da08:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800da0c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800da10:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800da12:	87a5      	strh	r5, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da14:	d109      	bne.n	800da2a <HAL_SPI_TransmitReceive+0x90>
    SPI_RESET_CRC(hspi);
 800da16:	6813      	ldr	r3, [r2, #0]
 800da18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da1c:	041b      	lsls	r3, r3, #16
 800da1e:	0c1b      	lsrs	r3, r3, #16
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	6813      	ldr	r3, [r2, #0]
 800da24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da28:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800da2a:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da2c:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800da2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da32:	d801      	bhi.n	800da38 <HAL_SPI_TransmitReceive+0x9e>
 800da34:	2d01      	cmp	r5, #1
 800da36:	d014      	beq.n	800da62 <HAL_SPI_TransmitReceive+0xc8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da3c:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800da3e:	6813      	ldr	r3, [r2, #0]
 800da40:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800da42:	bf5e      	ittt	pl
 800da44:	6813      	ldrpl	r3, [r2, #0]
 800da46:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800da4a:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da50:	d841      	bhi.n	800dad6 <HAL_SPI_TransmitReceive+0x13c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800da52:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800da54:	2a00      	cmp	r2, #0
 800da56:	d156      	bne.n	800db06 <HAL_SPI_TransmitReceive+0x16c>
 800da58:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d174      	bne.n	800db4a <HAL_SPI_TransmitReceive+0x1b0>
 800da60:	e040      	b.n	800dae4 <HAL_SPI_TransmitReceive+0x14a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da66:	e7e9      	b.n	800da3c <HAL_SPI_TransmitReceive+0xa2>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	6899      	ldr	r1, [r3, #8]
 800da6c:	0789      	lsls	r1, r1, #30
 800da6e:	d51a      	bpl.n	800daa6 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800da72:	3a01      	subs	r2, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da74:	f831 5b02 	ldrh.w	r5, [r1], #2
 800da78:	60dd      	str	r5, [r3, #12]
        hspi->TxXferCount--;
 800da7a:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da7c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800da7e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800da80:	b98a      	cbnz	r2, 800daa6 <HAL_SPI_TransmitReceive+0x10c>
 800da82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800da84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800da88:	d10d      	bne.n	800daa6 <HAL_SPI_TransmitReceive+0x10c>
          if(((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	0755      	lsls	r5, r2, #29
 800da8e:	d406      	bmi.n	800da9e <HAL_SPI_TransmitReceive+0x104>
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	0711      	lsls	r1, r2, #28
             SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800da94:	bf42      	ittt	mi
 800da96:	681a      	ldrmi	r2, [r3, #0]
 800da98:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800da9c:	601a      	strmi	r2, [r3, #0]
          hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800daa4:	601a      	str	r2, [r3, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800daa6:	b168      	cbz	r0, 800dac4 <HAL_SPI_TransmitReceive+0x12a>
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	689a      	ldr	r2, [r3, #8]
 800daac:	07d2      	lsls	r2, r2, #31
 800daae:	d509      	bpl.n	800dac4 <HAL_SPI_TransmitReceive+0x12a>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dab4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dab8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800daba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800dabe:	3b01      	subs	r3, #1
 800dac0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800dac4:	1c75      	adds	r5, r6, #1
 800dac6:	d006      	beq.n	800dad6 <HAL_SPI_TransmitReceive+0x13c>
 800dac8:	f7fd f978 	bl	800adbc <HAL_GetTick>
 800dacc:	1bc0      	subs	r0, r0, r7
 800dace:	42b0      	cmp	r0, r6
 800dad0:	d301      	bcc.n	800dad6 <HAL_SPI_TransmitReceive+0x13c>
          errorcode = HAL_TIMEOUT;
 800dad2:	2503      	movs	r5, #3
          goto error;
 800dad4:	e77c      	b.n	800d9d0 <HAL_SPI_TransmitReceive+0x36>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800dad6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800dad8:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800dadc:	2a00      	cmp	r2, #0
 800dade:	d1c3      	bne.n	800da68 <HAL_SPI_TransmitReceive+0xce>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d1e1      	bne.n	800daa8 <HAL_SPI_TransmitReceive+0x10e>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daea:	d16f      	bne.n	800dbcc <HAL_SPI_TransmitReceive+0x232>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800daec:	2201      	movs	r2, #1
 800daee:	4633      	mov	r3, r6
 800daf0:	4611      	mov	r1, r2
 800daf2:	4620      	mov	r0, r4
 800daf4:	f7ff fe9a 	bl	800d82c <SPI_WaitFlagStateUntilTimeout>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d05c      	beq.n	800dbb6 <HAL_SPI_TransmitReceive+0x21c>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800dafc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dafe:	f043 0302 	orr.w	r3, r3, #2
 800db02:	6623      	str	r3, [r4, #96]	; 0x60
 800db04:	e7e5      	b.n	800dad2 <HAL_SPI_TransmitReceive+0x138>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800db06:	6821      	ldr	r1, [r4, #0]
 800db08:	688b      	ldr	r3, [r1, #8]
 800db0a:	0798      	lsls	r0, r3, #30
 800db0c:	d51d      	bpl.n	800db4a <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 1)
 800db0e:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800db10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if(hspi->TxXferCount > 1)
 800db12:	d03e      	beq.n	800db92 <HAL_SPI_TransmitReceive+0x1f8>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800db14:	f833 0b02 	ldrh.w	r0, [r3], #2
 800db18:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800db1a:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db1c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800db1e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800db20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db22:	b993      	cbnz	r3, 800db4a <HAL_SPI_TransmitReceive+0x1b0>
 800db24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db2a:	d10e      	bne.n	800db4a <HAL_SPI_TransmitReceive+0x1b0>
          if(((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	0752      	lsls	r2, r2, #29
 800db32:	d406      	bmi.n	800db42 <HAL_SPI_TransmitReceive+0x1a8>
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	0715      	lsls	r5, r2, #28
             SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800db38:	bf42      	ittt	mi
 800db3a:	681a      	ldrmi	r2, [r3, #0]
 800db3c:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800db40:	601a      	strmi	r2, [r3, #0]
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db48:	601a      	str	r2, [r3, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800db4a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800db4e:	b1b1      	cbz	r1, 800db7e <HAL_SPI_TransmitReceive+0x1e4>
 800db50:	6822      	ldr	r2, [r4, #0]
 800db52:	6893      	ldr	r3, [r2, #8]
 800db54:	07d8      	lsls	r0, r3, #31
 800db56:	d512      	bpl.n	800db7e <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800db58:	2901      	cmp	r1, #1
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800db5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if(hspi->RxXferCount > 1)
 800db5c:	d021      	beq.n	800dba2 <HAL_SPI_TransmitReceive+0x208>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800db5e:	68d1      	ldr	r1, [r2, #12]
 800db60:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800db64:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800db66:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800db6a:	3b02      	subs	r3, #2
 800db6c:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800db6e:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800db70:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800db74:	d803      	bhi.n	800db7e <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db76:	6853      	ldr	r3, [r2, #4]
 800db78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db7c:	6053      	str	r3, [r2, #4]
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800db7e:	1c73      	adds	r3, r6, #1
 800db80:	f43f af67 	beq.w	800da52 <HAL_SPI_TransmitReceive+0xb8>
 800db84:	f7fd f91a 	bl	800adbc <HAL_GetTick>
 800db88:	1bc0      	subs	r0, r0, r7
 800db8a:	42b0      	cmp	r0, r6
 800db8c:	f4ff af61 	bcc.w	800da52 <HAL_SPI_TransmitReceive+0xb8>
 800db90:	e79f      	b.n	800dad2 <HAL_SPI_TransmitReceive+0x138>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	63a2      	str	r2, [r4, #56]	; 0x38
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800db9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db9c:	3b01      	subs	r3, #1
 800db9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dba0:	e7be      	b.n	800db20 <HAL_SPI_TransmitReceive+0x186>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800dba2:	1c59      	adds	r1, r3, #1
 800dba4:	6421      	str	r1, [r4, #64]	; 0x40
 800dba6:	7b12      	ldrb	r2, [r2, #12]
 800dba8:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800dbaa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800dbb4:	e7e3      	b.n	800db7e <HAL_SPI_TransmitReceive+0x1e4>
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbb6:	68e2      	ldr	r2, [r4, #12]
      tmpreg = hspi->Instance->DR;
 800dbb8:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbba:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800dbbe:	d11e      	bne.n	800dbfe <HAL_SPI_TransmitReceive+0x264>
      tmpreg = hspi->Instance->DR;
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800dbc4:	f8ad 3006 	strh.w	r3, [sp, #6]
        UNUSED(tmpreg);
 800dbc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	6895      	ldr	r5, [r2, #8]
 800dbd0:	f015 0510 	ands.w	r5, r5, #16
 800dbd4:	d007      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x24c>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800dbd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbd8:	f043 0302 	orr.w	r3, r3, #2
 800dbdc:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800dbde:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800dbe2:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800dbe4:	2501      	movs	r5, #1
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f7ff fe64 	bl	800d8b6 <SPI_EndRxTxTransaction>
 800dbee:	b108      	cbz	r0, 800dbf4 <HAL_SPI_TransmitReceive+0x25a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	6623      	str	r3, [r4, #96]	; 0x60
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f47f aee9 	bne.w	800d9ce <HAL_SPI_TransmitReceive+0x34>
 800dbfc:	e6e8      	b.n	800d9d0 <HAL_SPI_TransmitReceive+0x36>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800dbfe:	7b1b      	ldrb	r3, [r3, #12]
 800dc00:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 800dc04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800dc08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d1de      	bne.n	800dbcc <HAL_SPI_TransmitReceive+0x232>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4633      	mov	r3, r6
 800dc12:	4611      	mov	r1, r2
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff fe09 	bl	800d82c <SPI_WaitFlagStateUntilTimeout>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f47f af6e 	bne.w	800dafc <HAL_SPI_TransmitReceive+0x162>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	7b1b      	ldrb	r3, [r3, #12]
 800dc24:	e7ce      	b.n	800dbc4 <HAL_SPI_TransmitReceive+0x22a>
    errorcode = HAL_BUSY;
 800dc26:	2502      	movs	r5, #2
 800dc28:	e6d2      	b.n	800d9d0 <HAL_SPI_TransmitReceive+0x36>
  __HAL_LOCK(hspi);
 800dc2a:	2502      	movs	r5, #2
 800dc2c:	e6d6      	b.n	800d9dc <HAL_SPI_TransmitReceive+0x42>
	...

0800dc30 <HAL_UART_Receive_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc30:	b570      	push	{r4, r5, r6, lr}

  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800dc32:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800dc36:	2b20      	cmp	r3, #32
{
 800dc38:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 800dc3a:	d129      	bne.n	800dc90 <HAL_UART_Receive_DMA+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 800dc3c:	b331      	cbz	r1, 800dc8c <HAL_UART_Receive_DMA+0x5c>
 800dc3e:	b32a      	cbz	r2, 800dc8c <HAL_UART_Receive_DMA+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dc40:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d023      	beq.n	800dc90 <HAL_UART_Receive_DMA+0x60>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc4e:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc50:	2322      	movs	r3, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800dc52:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800dc54:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc58:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc5a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc5e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800dc60:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <HAL_UART_Receive_DMA+0x64>)
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 800dc62:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc64:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc66:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <HAL_UART_Receive_DMA+0x68>)
 800dc68:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc6a:	4b0c      	ldr	r3, [pc, #48]	; (800dc9c <HAL_UART_Receive_DMA+0x6c>)
 800dc6c:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 800dc6e:	4613      	mov	r3, r2
 800dc70:	460a      	mov	r2, r1
 800dc72:	f106 0124 	add.w	r1, r6, #36	; 0x24
 800dc76:	f7fe f8ca 	bl	800be0e <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 800dc7a:	6822      	ldr	r2, [r4, #0]
 800dc7c:	6893      	ldr	r3, [r2, #8]
 800dc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc82:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);

    return HAL_OK;
 800dc84:	4628      	mov	r0, r5
     __HAL_UNLOCK(huart);
 800dc86:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	e7fc      	b.n	800dc8a <HAL_UART_Receive_DMA+0x5a>
    return HAL_BUSY;
 800dc90:	2002      	movs	r0, #2
 800dc92:	e7fa      	b.n	800dc8a <HAL_UART_Receive_DMA+0x5a>
 800dc94:	0800dca3 	.word	0x0800dca3
 800dc98:	0800dccf 	.word	0x0800dccf
 800dc9c:	0800dcdb 	.word	0x0800dcdb

0800dca0 <HAL_UART_RxCpltCallback>:
 800dca0:	4770      	bx	lr

0800dca2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dca2:	b508      	push	{r3, lr}
 800dca4:	4603      	mov	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dca6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f013 0320 	ands.w	r3, r3, #32
 800dcb0:	d109      	bne.n	800dcc6 <UART_DMAReceiveCplt+0x24>
  {
    huart->RxXferCount = 0;

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800dcb2:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0;
 800dcb4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800dcb8:	6893      	ldr	r3, [r2, #8]
 800dcba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcbe:	6093      	str	r3, [r2, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dcc0:	2320      	movs	r3, #32
 800dcc2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  }
  
  HAL_UART_RxCpltCallback(huart);
 800dcc6:	f7ff ffeb 	bl	800dca0 <HAL_UART_RxCpltCallback>
}
 800dcca:	bd08      	pop	{r3, pc}

0800dccc <HAL_UART_RxHalfCpltCallback>:
 800dccc:	4770      	bx	lr

0800dcce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcce:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 800dcd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dcd2:	f7ff fffb 	bl	800dccc <HAL_UART_RxHalfCpltCallback>
}
 800dcd6:	bd08      	pop	{r3, pc}

0800dcd8 <HAL_UART_ErrorCallback>:
 800dcd8:	4770      	bx	lr

0800dcda <UART_DMAError>:
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dcda:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800dcdc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0;
 800dce4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->gState= HAL_UART_STATE_READY;
 800dce8:	2320      	movs	r3, #32
 800dcea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800dcee:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dcf2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800dcf4:	f043 0310 	orr.w	r3, r3, #16
 800dcf8:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800dcfa:	f7ff ffed 	bl	800dcd8 <HAL_UART_ErrorCallback>
}
 800dcfe:	bd08      	pop	{r3, pc}

0800dd00 <UART_SetConfig>:
{
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800dd04:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd06:	6925      	ldr	r5, [r4, #16]
 800dd08:	68a1      	ldr	r1, [r4, #8]
 800dd0a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800dd0c:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd0e:	4329      	orrs	r1, r5
 800dd10:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800dd12:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd16:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800dd18:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd1c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800dd1e:	4301      	orrs	r1, r0
 800dd20:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd22:	6851      	ldr	r1, [r2, #4]
 800dd24:	68e0      	ldr	r0, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800dd26:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd28:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800dd2c:	4301      	orrs	r1, r0
 800dd2e:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800dd30:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800dd32:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800dd34:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800dd38:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800dd3a:	4301      	orrs	r1, r0
 800dd3c:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd3e:	4975      	ldr	r1, [pc, #468]	; (800df14 <UART_SetConfig+0x214>)
 800dd40:	428a      	cmp	r2, r1
 800dd42:	d116      	bne.n	800dd72 <UART_SetConfig+0x72>
 800dd44:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 800dd48:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dd4a:	f001 0103 	and.w	r1, r1, #3
 800dd4e:	3901      	subs	r1, #1
 800dd50:	2902      	cmp	r1, #2
 800dd52:	f200 80af 	bhi.w	800deb4 <UART_SetConfig+0x1b4>
 800dd56:	4870      	ldr	r0, [pc, #448]	; (800df18 <UART_SetConfig+0x218>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd5c:	5c41      	ldrb	r1, [r0, r1]
 800dd5e:	d170      	bne.n	800de42 <UART_SetConfig+0x142>
    switch (clocksource)
 800dd60:	2908      	cmp	r1, #8
 800dd62:	d86b      	bhi.n	800de3c <UART_SetConfig+0x13c>
 800dd64:	e8df f001 	tbb	[pc, r1]
 800dd68:	6a24a9c3 	.word	0x6a24a9c3
 800dd6c:	6a6a6aaf 	.word	0x6a6a6aaf
 800dd70:	bb          	.byte	0xbb
 800dd71:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd72:	496a      	ldr	r1, [pc, #424]	; (800df1c <UART_SetConfig+0x21c>)
 800dd74:	428a      	cmp	r2, r1
 800dd76:	d124      	bne.n	800ddc2 <UART_SetConfig+0xc2>
 800dd78:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 800dd7c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dd7e:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800dd82:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800dd86:	f000 80a7 	beq.w	800ded8 <UART_SetConfig+0x1d8>
 800dd8a:	d80b      	bhi.n	800dda4 <UART_SetConfig+0xa4>
 800dd8c:	2900      	cmp	r1, #0
 800dd8e:	f000 80ab 	beq.w	800dee8 <UART_SetConfig+0x1e8>
 800dd92:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800dd96:	f000 8093 	beq.w	800dec0 <UART_SetConfig+0x1c0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd9e:	d04d      	beq.n	800de3c <UART_SetConfig+0x13c>
        ret = HAL_ERROR;
 800dda0:	2001      	movs	r0, #1
  return ret;
 800dda2:	e0b5      	b.n	800df10 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dda4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800dda8:	d1f7      	bne.n	800dd9a <UART_SetConfig+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddae:	d16e      	bne.n	800de8e <UART_SetConfig+0x18e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ddb0:	6862      	ldr	r2, [r4, #4]
 800ddb2:	0853      	lsrs	r3, r2, #1
 800ddb4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800ddb8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ddbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddc0:	e09d      	b.n	800defe <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ddc2:	4957      	ldr	r1, [pc, #348]	; (800df20 <UART_SetConfig+0x220>)
 800ddc4:	428a      	cmp	r2, r1
 800ddc6:	d111      	bne.n	800ddec <UART_SetConfig+0xec>
 800ddc8:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 800ddcc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800ddce:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 800ddd2:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800ddd6:	d07f      	beq.n	800ded8 <UART_SetConfig+0x1d8>
 800ddd8:	d805      	bhi.n	800dde6 <UART_SetConfig+0xe6>
 800ddda:	2900      	cmp	r1, #0
 800dddc:	f000 8084 	beq.w	800dee8 <UART_SetConfig+0x1e8>
 800dde0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800dde4:	e7d7      	b.n	800dd96 <UART_SetConfig+0x96>
 800dde6:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800ddea:	e7dd      	b.n	800dda8 <UART_SetConfig+0xa8>
 800ddec:	494d      	ldr	r1, [pc, #308]	; (800df24 <UART_SetConfig+0x224>)
 800ddee:	428a      	cmp	r2, r1
 800ddf0:	d110      	bne.n	800de14 <UART_SetConfig+0x114>
 800ddf2:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800ddf6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800ddf8:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 800ddfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800de00:	d06a      	beq.n	800ded8 <UART_SetConfig+0x1d8>
 800de02:	d804      	bhi.n	800de0e <UART_SetConfig+0x10e>
 800de04:	2900      	cmp	r1, #0
 800de06:	d06f      	beq.n	800dee8 <UART_SetConfig+0x1e8>
 800de08:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800de0c:	e7c3      	b.n	800dd96 <UART_SetConfig+0x96>
 800de0e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800de12:	e7c9      	b.n	800dda8 <UART_SetConfig+0xa8>
 800de14:	4944      	ldr	r1, [pc, #272]	; (800df28 <UART_SetConfig+0x228>)
 800de16:	428a      	cmp	r2, r1
 800de18:	d1bf      	bne.n	800dd9a <UART_SetConfig+0x9a>
 800de1a:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 800de1e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800de20:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 800de24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800de28:	d056      	beq.n	800ded8 <UART_SetConfig+0x1d8>
 800de2a:	d804      	bhi.n	800de36 <UART_SetConfig+0x136>
 800de2c:	2900      	cmp	r1, #0
 800de2e:	d05b      	beq.n	800dee8 <UART_SetConfig+0x1e8>
 800de30:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800de34:	e7af      	b.n	800dd96 <UART_SetConfig+0x96>
 800de36:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800de3a:	e7b5      	b.n	800dda8 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 800de3c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 800de3e:	2300      	movs	r3, #0
 800de40:	e05f      	b.n	800df02 <UART_SetConfig+0x202>
    switch (clocksource)
 800de42:	2908      	cmp	r1, #8
 800de44:	d8ac      	bhi.n	800dda0 <UART_SetConfig+0xa0>
 800de46:	a301      	add	r3, pc, #4	; (adr r3, 800de4c <UART_SetConfig+0x14c>)
 800de48:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800de4c:	0800de71 	.word	0x0800de71
 800de50:	0800de89 	.word	0x0800de89
 800de54:	0800de8f 	.word	0x0800de8f
 800de58:	0800dda1 	.word	0x0800dda1
 800de5c:	0800dea5 	.word	0x0800dea5
 800de60:	0800dda1 	.word	0x0800dda1
 800de64:	0800dda1 	.word	0x0800dda1
 800de68:	0800dda1 	.word	0x0800dda1
 800de6c:	0800deab 	.word	0x0800deab
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800de70:	f7ff fb58 	bl	800d524 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800de74:	e9d4 2300 	ldrd	r2, r3, [r4]
 800de78:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800de7c:	fbb0 f0f3 	udiv	r0, r0, r3
 800de80:	b280      	uxth	r0, r0
 800de82:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800de84:	2000      	movs	r0, #0
        break;
 800de86:	e043      	b.n	800df10 <UART_SetConfig+0x210>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800de88:	f7ff fb64 	bl	800d554 <HAL_RCC_GetPCLK2Freq>
 800de8c:	e7f2      	b.n	800de74 <UART_SetConfig+0x174>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 800de8e:	6861      	ldr	r1, [r4, #4]
 800de90:	084b      	lsrs	r3, r1, #1
 800de92:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800de96:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 800de9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	60d3      	str	r3, [r2, #12]
 800dea2:	e7ef      	b.n	800de84 <UART_SetConfig+0x184>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800dea4:	f7ff fa54 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800dea8:	e7e4      	b.n	800de74 <UART_SetConfig+0x174>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 800deaa:	6861      	ldr	r1, [r4, #4]
 800deac:	084b      	lsrs	r3, r1, #1
 800deae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800deb2:	e7f2      	b.n	800de9a <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800deb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb8:	d1e6      	bne.n	800de88 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800deba:	f7ff fb4b 	bl	800d554 <HAL_RCC_GetPCLK2Freq>
 800debe:	e018      	b.n	800def2 <UART_SetConfig+0x1f2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dec4:	d1ee      	bne.n	800dea4 <UART_SetConfig+0x1a4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800dec6:	f7ff fa43 	bl	800d350 <HAL_RCC_GetSysClockFreq>
 800deca:	6861      	ldr	r1, [r4, #4]
 800decc:	084a      	lsrs	r2, r1, #1
 800dece:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800ded2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ded6:	e012      	b.n	800defe <UART_SetConfig+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ded8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dedc:	d1e5      	bne.n	800deaa <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800dede:	6862      	ldr	r2, [r4, #4]
 800dee0:	0853      	lsrs	r3, r2, #1
 800dee2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800dee6:	e769      	b.n	800ddbc <UART_SetConfig+0xbc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deec:	d1c0      	bne.n	800de70 <UART_SetConfig+0x170>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800deee:	f7ff fb19 	bl	800d524 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800def2:	6863      	ldr	r3, [r4, #4]
 800def4:	085a      	lsrs	r2, r3, #1
 800def6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800defa:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800defe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800df00:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 800df02:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800df06:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800df08:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800df0c:	4313      	orrs	r3, r2
 800df0e:	60cb      	str	r3, [r1, #12]
}
 800df10:	bd38      	pop	{r3, r4, r5, pc}
 800df12:	bf00      	nop
 800df14:	40013800 	.word	0x40013800
 800df18:	08014c34 	.word	0x08014c34
 800df1c:	40004400 	.word	0x40004400
 800df20:	40004800 	.word	0x40004800
 800df24:	40004c00 	.word	0x40004c00
 800df28:	40005000 	.word	0x40005000

0800df2c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df2e:	07da      	lsls	r2, r3, #31
{
 800df30:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df32:	d506      	bpl.n	800df42 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df34:	6801      	ldr	r1, [r0, #0]
 800df36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800df38:	684a      	ldr	r2, [r1, #4]
 800df3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800df3e:	4322      	orrs	r2, r4
 800df40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df42:	079c      	lsls	r4, r3, #30
 800df44:	d506      	bpl.n	800df54 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df46:	6801      	ldr	r1, [r0, #0]
 800df48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800df4a:	684a      	ldr	r2, [r1, #4]
 800df4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800df50:	4322      	orrs	r2, r4
 800df52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df54:	0759      	lsls	r1, r3, #29
 800df56:	d506      	bpl.n	800df66 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df58:	6801      	ldr	r1, [r0, #0]
 800df5a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800df5c:	684a      	ldr	r2, [r1, #4]
 800df5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800df62:	4322      	orrs	r2, r4
 800df64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df66:	071a      	lsls	r2, r3, #28
 800df68:	d506      	bpl.n	800df78 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df6a:	6801      	ldr	r1, [r0, #0]
 800df6c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800df6e:	684a      	ldr	r2, [r1, #4]
 800df70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df74:	4322      	orrs	r2, r4
 800df76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df78:	06dc      	lsls	r4, r3, #27
 800df7a:	d506      	bpl.n	800df8a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df7c:	6801      	ldr	r1, [r0, #0]
 800df7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800df80:	688a      	ldr	r2, [r1, #8]
 800df82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df86:	4322      	orrs	r2, r4
 800df88:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df8a:	0699      	lsls	r1, r3, #26
 800df8c:	d506      	bpl.n	800df9c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df8e:	6801      	ldr	r1, [r0, #0]
 800df90:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800df92:	688a      	ldr	r2, [r1, #8]
 800df94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df98:	4322      	orrs	r2, r4
 800df9a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df9c:	065a      	lsls	r2, r3, #25
 800df9e:	d50f      	bpl.n	800dfc0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfa0:	6801      	ldr	r1, [r0, #0]
 800dfa2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800dfa4:	684a      	ldr	r2, [r1, #4]
 800dfa6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dfaa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfb0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfb2:	d105      	bne.n	800dfc0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfb4:	684a      	ldr	r2, [r1, #4]
 800dfb6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800dfb8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800dfbc:	4322      	orrs	r2, r4
 800dfbe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfc0:	061b      	lsls	r3, r3, #24
 800dfc2:	d506      	bpl.n	800dfd2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfc4:	6802      	ldr	r2, [r0, #0]
 800dfc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800dfc8:	6853      	ldr	r3, [r2, #4]
 800dfca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800dfce:	430b      	orrs	r3, r1
 800dfd0:	6053      	str	r3, [r2, #4]
}
 800dfd2:	bd10      	pop	{r4, pc}

0800dfd4 <UART_WaitOnFlagUntilTimeout>:
{
 800dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	4604      	mov	r4, r0
 800dfda:	460e      	mov	r6, r1
 800dfdc:	4690      	mov	r8, r2
 800dfde:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800dfe0:	f7fc feec 	bl	800adbc <HAL_GetTick>
 800dfe4:	4607      	mov	r7, r0
  if(Status == RESET)
 800dfe6:	f1b8 0f00 	cmp.w	r8, #0
 800dfea:	d030      	beq.n	800e04e <UART_WaitOnFlagUntilTimeout+0x7a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800dfec:	6822      	ldr	r2, [r4, #0]
 800dfee:	69d3      	ldr	r3, [r2, #28]
 800dff0:	ea36 0303 	bics.w	r3, r6, r3
 800dff4:	d130      	bne.n	800e058 <UART_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 800dff6:	1c6b      	adds	r3, r5, #1
 800dff8:	d0f9      	beq.n	800dfee <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800dffa:	b16d      	cbz	r5, 800e018 <UART_WaitOnFlagUntilTimeout+0x44>
 800dffc:	f7fc fede 	bl	800adbc <HAL_GetTick>
 800e000:	1bc0      	subs	r0, r0, r7
 800e002:	42a8      	cmp	r0, r5
 800e004:	d9f2      	bls.n	800dfec <UART_WaitOnFlagUntilTimeout+0x18>
 800e006:	e007      	b.n	800e018 <UART_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800e008:	1c69      	adds	r1, r5, #1
 800e00a:	d021      	beq.n	800e050 <UART_WaitOnFlagUntilTimeout+0x7c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800e00c:	b125      	cbz	r5, 800e018 <UART_WaitOnFlagUntilTimeout+0x44>
 800e00e:	f7fc fed5 	bl	800adbc <HAL_GetTick>
 800e012:	1bc0      	subs	r0, r0, r7
 800e014:	42a8      	cmp	r0, r5
 800e016:	d91a      	bls.n	800e04e <UART_WaitOnFlagUntilTimeout+0x7a>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e020:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	f022 0220 	bic.w	r2, r2, #32
 800e028:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e030:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	f022 0201 	bic.w	r2, r2, #1
 800e038:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800e03a:	2320      	movs	r3, #32
 800e03c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 800e040:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
          __HAL_UNLOCK(huart);
 800e044:	2300      	movs	r3, #0
 800e046:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
          return HAL_TIMEOUT;
 800e04a:	2003      	movs	r0, #3
 800e04c:	e005      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0x86>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800e04e:	6822      	ldr	r2, [r4, #0]
 800e050:	69d3      	ldr	r3, [r2, #28]
 800e052:	ea36 0303 	bics.w	r3, r6, r3
 800e056:	d1d7      	bne.n	800e008 <UART_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800e058:	2000      	movs	r0, #0
}
 800e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e05e <HAL_UART_Transmit>:
{
 800e05e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e060:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800e062:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 800e066:	2920      	cmp	r1, #32
{
 800e068:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800e06a:	d141      	bne.n	800e0f0 <HAL_UART_Transmit+0x92>
    if((pData == NULL ) || (Size == 0))
 800e06c:	2d00      	cmp	r5, #0
 800e06e:	d03d      	beq.n	800e0ec <HAL_UART_Transmit+0x8e>
 800e070:	2a00      	cmp	r2, #0
 800e072:	d03b      	beq.n	800e0ec <HAL_UART_Transmit+0x8e>
    __HAL_LOCK(huart);
 800e074:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 800e078:	2901      	cmp	r1, #1
 800e07a:	d039      	beq.n	800e0f0 <HAL_UART_Transmit+0x92>
 800e07c:	2101      	movs	r1, #1
 800e07e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e082:	2100      	movs	r1, #0
 800e084:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e086:	2121      	movs	r1, #33	; 0x21
 800e088:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    huart->TxXferSize = Size;
 800e08c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800e090:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800e094:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800e098:	b952      	cbnz	r2, 800e0b0 <HAL_UART_Transmit+0x52>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800e09a:	2140      	movs	r1, #64	; 0x40
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7ff ff99 	bl	800dfd4 <UART_WaitOnFlagUntilTimeout>
 800e0a2:	b980      	cbnz	r0, 800e0c6 <HAL_UART_Transmit+0x68>
    huart->gState = HAL_UART_STATE_READY;
 800e0a4:	2320      	movs	r3, #32
 800e0a6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800e0aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800e0ae:	e00b      	b.n	800e0c8 <HAL_UART_Transmit+0x6a>
      huart->TxXferCount--;
 800e0b0:	3a01      	subs	r2, #1
 800e0b2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800e0b6:	2180      	movs	r1, #128	; 0x80
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	f7ff ff89 	bl	800dfd4 <UART_WaitOnFlagUntilTimeout>
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	b110      	cbz	r0, 800e0cc <HAL_UART_Transmit+0x6e>
        return HAL_TIMEOUT;
 800e0c6:	2003      	movs	r0, #3
}
 800e0c8:	b003      	add	sp, #12
 800e0ca:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0cc:	68a2      	ldr	r2, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800e0ce:	6821      	ldr	r1, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0d0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e0d4:	d107      	bne.n	800e0e6 <HAL_UART_Transmit+0x88>
 800e0d6:	6922      	ldr	r2, [r4, #16]
 800e0d8:	b92a      	cbnz	r2, 800e0e6 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800e0da:	f835 2b02 	ldrh.w	r2, [r5], #2
 800e0de:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 800e0e2:	850a      	strh	r2, [r1, #40]	; 0x28
 800e0e4:	e7d6      	b.n	800e094 <HAL_UART_Transmit+0x36>
 800e0e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e0ea:	e7fa      	b.n	800e0e2 <HAL_UART_Transmit+0x84>
      return  HAL_ERROR;
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	e7eb      	b.n	800e0c8 <HAL_UART_Transmit+0x6a>
    return HAL_BUSY;
 800e0f0:	2002      	movs	r0, #2
 800e0f2:	e7e9      	b.n	800e0c8 <HAL_UART_Transmit+0x6a>

0800e0f4 <UART_CheckIdleState>:
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0f4:	6803      	ldr	r3, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0f6:	2200      	movs	r2, #0
{
 800e0f8:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0fa:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	0719      	lsls	r1, r3, #28
{
 800e100:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e102:	d415      	bmi.n	800e130 <UART_CheckIdleState+0x3c>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	075b      	lsls	r3, r3, #29
 800e10a:	d508      	bpl.n	800e11e <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e10c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e110:	2200      	movs	r2, #0
 800e112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e116:	4620      	mov	r0, r4
 800e118:	f7ff ff5c 	bl	800dfd4 <UART_WaitOnFlagUntilTimeout>
 800e11c:	b980      	cbnz	r0, 800e140 <UART_CheckIdleState+0x4c>
  huart->gState= HAL_UART_STATE_READY;
 800e11e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800e120:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800e122:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800e126:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 800e12a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800e12e:	e008      	b.n	800e142 <UART_CheckIdleState+0x4e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800e130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e134:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e138:	f7ff ff4c 	bl	800dfd4 <UART_WaitOnFlagUntilTimeout>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d0e1      	beq.n	800e104 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 800e140:	2003      	movs	r0, #3
}
 800e142:	bd10      	pop	{r4, pc}

0800e144 <HAL_UART_Init>:
{
 800e144:	b510      	push	{r4, lr}
  if(huart == NULL)
 800e146:	4604      	mov	r4, r0
 800e148:	b360      	cbz	r0, 800e1a4 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800e14a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800e14e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e152:	b91b      	cbnz	r3, 800e15c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800e154:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800e158:	f000 f960 	bl	800e41c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800e15c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e15e:	2324      	movs	r3, #36	; 0x24
 800e160:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800e164:	6813      	ldr	r3, [r2, #0]
 800e166:	f023 0301 	bic.w	r3, r3, #1
 800e16a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e16c:	4620      	mov	r0, r4
 800e16e:	f7ff fdc7 	bl	800dd00 <UART_SetConfig>
 800e172:	2801      	cmp	r0, #1
 800e174:	d016      	beq.n	800e1a4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e178:	b113      	cbz	r3, 800e180 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800e17a:	4620      	mov	r0, r4
 800e17c:	f7ff fed6 	bl	800df2c <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800e180:	6823      	ldr	r3, [r4, #0]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e188:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e190:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800e198:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800e19a:	601a      	str	r2, [r3, #0]
}
 800e19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800e1a0:	f7ff bfa8 	b.w	800e0f4 <UART_CheckIdleState>
}
 800e1a4:	2001      	movs	r0, #1
 800e1a6:	bd10      	pop	{r4, pc}

0800e1a8 <PendSV_Handler>:
 800e1a8:	4770      	bx	lr

0800e1aa <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800e1aa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e1ac:	f7fc fdfe 	bl	800adac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e1b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800e1b4:	f7fd be02 	b.w	800bdbc <HAL_SYSTICK_IRQHandler>

0800e1b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1b8:	4b1d      	ldr	r3, [pc, #116]	; (800e230 <HAL_MspInit+0x78>)
{
 800e1ba:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1bc:	699a      	ldr	r2, [r3, #24]
 800e1be:	f042 0201 	orr.w	r2, r2, #1
 800e1c2:	619a      	str	r2, [r3, #24]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e1cc:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e1d0:	f7fd fd84 	bl	800bcdc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	f06f 000b 	mvn.w	r0, #11
 800e1dc:	f7fd fd90 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	4611      	mov	r1, r2
 800e1e4:	f06f 000a 	mvn.w	r0, #10
 800e1e8:	f7fd fd8a 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	f06f 0009 	mvn.w	r0, #9
 800e1f4:	f7fd fd84 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	f06f 0004 	mvn.w	r0, #4
 800e200:	f7fd fd7e 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800e204:	2200      	movs	r2, #0
 800e206:	4611      	mov	r1, r2
 800e208:	f06f 0003 	mvn.w	r0, #3
 800e20c:	f7fd fd78 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800e210:	2200      	movs	r2, #0
 800e212:	4611      	mov	r1, r2
 800e214:	f06f 0001 	mvn.w	r0, #1
 800e218:	f7fd fd72 	bl	800bd00 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800e21c:	2200      	movs	r2, #0
 800e21e:	4611      	mov	r1, r2
 800e220:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e224:	b003      	add	sp, #12
 800e226:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800e22a:	f7fd bd69 	b.w	800bd00 <HAL_NVIC_SetPriority>
 800e22e:	bf00      	nop
 800e230:	40021000 	.word	0x40021000

0800e234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800e236:	6803      	ldr	r3, [r0, #0]
 800e238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e23c:	d117      	bne.n	800e26e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800e23e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800e242:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = VoutSense_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VoutSense_GPIO_Port, &GPIO_InitStruct);
 800e246:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 800e248:	695a      	ldr	r2, [r3, #20]
 800e24a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e24e:	615a      	str	r2, [r3, #20]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e25a:	2202      	movs	r2, #2
 800e25c:	2303      	movs	r3, #3
 800e25e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(VoutSense_GPIO_Port, &GPIO_InitStruct);
 800e262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e266:	2300      	movs	r3, #0
 800e268:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VoutSense_GPIO_Port, &GPIO_InitStruct);
 800e26a:	f7fe f9c5 	bl	800c5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e26e:	b007      	add	sp, #28
 800e270:	f85d fb04 	ldr.w	pc, [sp], #4

0800e274 <HAL_CAN_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800e274:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 800e276:	6802      	ldr	r2, [r0, #0]
 800e278:	4b14      	ldr	r3, [pc, #80]	; (800e2cc <HAL_CAN_MspInit+0x58>)
 800e27a:	429a      	cmp	r2, r3
{
 800e27c:	b086      	sub	sp, #24
  if(hcan->Instance==CAN)
 800e27e:	d122      	bne.n	800e2c6 <HAL_CAN_MspInit+0x52>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800e280:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e284:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 800e286:	69da      	ldr	r2, [r3, #28]
 800e288:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800e28c:	61da      	str	r2, [r3, #28]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e294:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e296:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_CAN1_CLK_ENABLE();
 800e29a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e29c:	2302      	movs	r3, #2
 800e29e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e2a2:	2303      	movs	r3, #3
 800e2a4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2a8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800e2aa:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800e2b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2b2:	f7fe f9a1 	bl	800c5f8 <HAL_GPIO_Init>
		
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800e2b6:	2014      	movs	r0, #20
 800e2b8:	4622      	mov	r2, r4
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	f7fd fd20 	bl	800bd00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800e2c0:	2014      	movs	r0, #20
 800e2c2:	f7fd fd4f 	bl	800bd64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800e2c6:	b006      	add	sp, #24
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	bf00      	nop
 800e2cc:	40006400 	.word	0x40006400

0800e2d0 <HAL_I2C_MspInit>:
  /* USER CODE END CAN_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e2d0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800e2d2:	6803      	ldr	r3, [r0, #0]
 800e2d4:	4a1e      	ldr	r2, [pc, #120]	; (800e350 <HAL_I2C_MspInit+0x80>)
 800e2d6:	4293      	cmp	r3, r2
{
 800e2d8:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 800e2da:	d11b      	bne.n	800e314 <HAL_I2C_MspInit+0x44>
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e2dc:	20c0      	movs	r0, #192	; 0xc0
 800e2de:	2312      	movs	r3, #18
 800e2e0:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e2e4:	f04f 0c01 	mov.w	ip, #1
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e9cd c305 	strd	ip, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2ee:	4819      	ldr	r0, [pc, #100]	; (800e354 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e2f0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e2f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2f6:	f7fe f97f 	bl	800c5f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e2fa:	4b17      	ldr	r3, [pc, #92]	; (800e358 <HAL_I2C_MspInit+0x88>)
 800e2fc:	69da      	ldr	r2, [r3, #28]
 800e2fe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800e302:	61da      	str	r2, [r3, #28]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e30e:	b009      	add	sp, #36	; 0x24
 800e310:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hi2c->Instance==I2C2)
 800e314:	4a11      	ldr	r2, [pc, #68]	; (800e35c <HAL_I2C_MspInit+0x8c>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d1f9      	bne.n	800e30e <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e31a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e31e:	2312      	movs	r3, #18
 800e320:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e324:	2101      	movs	r1, #1
 800e326:	2303      	movs	r3, #3
 800e328:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e32c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e330:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e332:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e334:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e336:	f7fe f95f 	bl	800c5f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e33a:	4b07      	ldr	r3, [pc, #28]	; (800e358 <HAL_I2C_MspInit+0x88>)
 800e33c:	69da      	ldr	r2, [r3, #28]
 800e33e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e342:	61da      	str	r2, [r3, #28]
 800e344:	69db      	ldr	r3, [r3, #28]
 800e346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e34a:	9302      	str	r3, [sp, #8]
 800e34c:	9b02      	ldr	r3, [sp, #8]
}
 800e34e:	e7de      	b.n	800e30e <HAL_I2C_MspInit+0x3e>
 800e350:	40005400 	.word	0x40005400
 800e354:	48000400 	.word	0x48000400
 800e358:	40021000 	.word	0x40021000
 800e35c:	40005800 	.word	0x40005800

0800e360 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e360:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800e362:	6803      	ldr	r3, [r0, #0]
 800e364:	4a29      	ldr	r2, [pc, #164]	; (800e40c <HAL_SPI_MspInit+0xac>)
 800e366:	4293      	cmp	r3, r2
{
 800e368:	b088      	sub	sp, #32
  if(hspi->Instance==SPI1)
 800e36a:	d134      	bne.n	800e3d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e36c:	4b28      	ldr	r3, [pc, #160]	; (800e410 <HAL_SPI_MspInit+0xb0>)
 800e36e:	699a      	ldr	r2, [r3, #24]
 800e370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e374:	619a      	str	r2, [r3, #24]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	9b01      	ldr	r3, [sp, #4]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LTC_SCK_Pin|LTC_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e380:	20a0      	movs	r0, #160	; 0xa0
 800e382:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e384:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e386:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e38a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e38c:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e38e:	a903      	add	r1, sp, #12
 800e390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e394:	e9cd 4505 	strd	r4, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e398:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e39a:	f7fe f92d 	bl	800c5f8 <HAL_GPIO_Init>
		
		GPIO_InitStruct.Pin = LTC_MISO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e39e:	2312      	movs	r3, #18
 800e3a0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3a4:	a903      	add	r1, sp, #12
 800e3a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e3aa:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e3ae:	e9cd 4505 	strd	r4, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e3b2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3b4:	f7fe f920 	bl	800c5f8 <HAL_GPIO_Init>
		
		GPIO_InitStruct.Pin = LTC6804_CS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e3b8:	f04f 0e10 	mov.w	lr, #16
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e9cd e303 	strd	lr, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e3c2:	e9cd 4505 	strd	r4, r5, [sp, #20]
    GPIO_InitStruct.Alternate = 0;
 800e3c6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3c8:	a903      	add	r1, sp, #12
 800e3ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3ce:	f7fe f913 	bl	800c5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e3d2:	b008      	add	sp, #32
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}
  else if(hspi->Instance==SPI2)
 800e3d6:	4a0f      	ldr	r2, [pc, #60]	; (800e414 <HAL_SPI_MspInit+0xb4>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d1fa      	bne.n	800e3d2 <HAL_SPI_MspInit+0x72>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e3dc:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3de:	480e      	ldr	r0, [pc, #56]	; (800e418 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e3e0:	69da      	ldr	r2, [r3, #28]
 800e3e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e3e6:	61da      	str	r2, [r3, #28]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3ee:	9302      	str	r3, [sp, #8]
 800e3f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3f2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800e3f6:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e3f8:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e404:	2305      	movs	r3, #5
 800e406:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e408:	a903      	add	r1, sp, #12
 800e40a:	e7e0      	b.n	800e3ce <HAL_SPI_MspInit+0x6e>
 800e40c:	40013000 	.word	0x40013000
 800e410:	40021000 	.word	0x40021000
 800e414:	40003800 	.word	0x40003800
 800e418:	48000400 	.word	0x48000400

0800e41c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e41c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800e41e:	6802      	ldr	r2, [r0, #0]
 800e420:	4b0f      	ldr	r3, [pc, #60]	; (800e460 <HAL_UART_MspInit+0x44>)
 800e422:	429a      	cmp	r2, r3
 800e424:	d119      	bne.n	800e45a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e426:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = BOOTLOADER_TX_Pin|BOOTLOADER_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e42a:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800e42c:	69da      	ldr	r2, [r3, #28]
 800e42e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e432:	61da      	str	r2, [r3, #28]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e43e:	220c      	movs	r2, #12
 800e440:	2302      	movs	r3, #2
 800e442:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e446:	2303      	movs	r3, #3
 800e448:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e44c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e450:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e452:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e454:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e456:	f7fe f8cf 	bl	800c5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e45a:	b007      	add	sp, #28
 800e45c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e460:	40004400 	.word	0x40004400

0800e464 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e464:	4915      	ldr	r1, [pc, #84]	; (800e4bc <SystemInit+0x58>)
 800e466:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800e46a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e46e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800e472:	4b13      	ldr	r3, [pc, #76]	; (800e4c0 <SystemInit+0x5c>)
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	f042 0201 	orr.w	r2, r2, #1
 800e47a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800e47c:	6858      	ldr	r0, [r3, #4]
 800e47e:	4a11      	ldr	r2, [pc, #68]	; (800e4c4 <SystemInit+0x60>)
 800e480:	4002      	ands	r2, r0
 800e482:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800e48a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e48e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e496:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800e49e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	f022 020f 	bic.w	r2, r2, #15
 800e4a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800e4a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e4aa:	4a07      	ldr	r2, [pc, #28]	; (800e4c8 <SystemInit+0x64>)
 800e4ac:	4002      	ands	r2, r0
 800e4ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e4b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4b8:	608b      	str	r3, [r1, #8]
#endif
}
 800e4ba:	4770      	bx	lr
 800e4bc:	e000ed00 	.word	0xe000ed00
 800e4c0:	40021000 	.word	0x40021000
 800e4c4:	f87fc00c 	.word	0xf87fc00c
 800e4c8:	ff00fccc 	.word	0xff00fccc

0800e4cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800e4cc:	4912      	ldr	r1, [pc, #72]	; (800e518 <SystemCoreClockUpdate+0x4c>)
 800e4ce:	4a13      	ldr	r2, [pc, #76]	; (800e51c <SystemCoreClockUpdate+0x50>)
 800e4d0:	684b      	ldr	r3, [r1, #4]
 800e4d2:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 800e4d6:	2b08      	cmp	r3, #8
{
 800e4d8:	b510      	push	{r4, lr}
  switch (tmp)
 800e4da:	d00a      	beq.n	800e4f2 <SystemCoreClockUpdate+0x26>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800e4dc:	4b10      	ldr	r3, [pc, #64]	; (800e520 <SystemCoreClockUpdate+0x54>)
      }
      else
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 800e4de:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800e4e0:	684b      	ldr	r3, [r1, #4]
 800e4e2:	4910      	ldr	r1, [pc, #64]	; (800e524 <SystemCoreClockUpdate+0x58>)
 800e4e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e4e8:	5cc9      	ldrb	r1, [r1, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800e4ea:	6813      	ldr	r3, [r2, #0]
 800e4ec:	40cb      	lsrs	r3, r1
 800e4ee:	6013      	str	r3, [r2, #0]
}
 800e4f0:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800e4f2:	684b      	ldr	r3, [r1, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800e4f4:	6848      	ldr	r0, [r1, #4]
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 800e4f6:	03c0      	lsls	r0, r0, #15
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800e4f8:	bf49      	itett	mi
 800e4fa:	6ac8      	ldrmi	r0, [r1, #44]	; 0x2c
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800e4fc:	480a      	ldrpl	r0, [pc, #40]	; (800e528 <SystemCoreClockUpdate+0x5c>)
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800e4fe:	f000 000f 	andmi.w	r0, r0, #15
 800e502:	1c44      	addmi	r4, r0, #1
      pllmull = ( pllmull >> 18) + 2;
 800e504:	f3c3 4383 	ubfx	r3, r3, #18, #4
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 800e508:	bf44      	itt	mi
 800e50a:	4805      	ldrmi	r0, [pc, #20]	; (800e520 <SystemCoreClockUpdate+0x54>)
 800e50c:	fbb0 f0f4 	udivmi	r0, r0, r4
      pllmull = ( pllmull >> 18) + 2;
 800e510:	3302      	adds	r3, #2
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 800e512:	4343      	muls	r3, r0
 800e514:	e7e3      	b.n	800e4de <SystemCoreClockUpdate+0x12>
 800e516:	bf00      	nop
 800e518:	40021000 	.word	0x40021000
 800e51c:	2000002c 	.word	0x2000002c
 800e520:	007a1200 	.word	0x007a1200
 800e524:	08014c37 	.word	0x08014c37
 800e528:	003d0900 	.word	0x003d0900

0800e52c <libBufferAppend_uint8>:
void libBufferAppend_int8(uint8_t* buffer, int8_t number, int32_t *index) {
	buffer[(*index)++] = number;
}

void libBufferAppend_uint8(uint8_t* buffer, uint8_t number, int32_t *index) {
	buffer[(*index)++] = number;
 800e52c:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_uint8(uint8_t* buffer, uint8_t number, int32_t *index) {
 800e52e:	b510      	push	{r4, lr}
	buffer[(*index)++] = number;
 800e530:	1c5c      	adds	r4, r3, #1
 800e532:	6014      	str	r4, [r2, #0]
 800e534:	54c1      	strb	r1, [r0, r3]
}
 800e536:	bd10      	pop	{r4, pc}

0800e538 <libBufferAppend_int16>:

void libBufferAppend_int16(uint8_t* buffer, int16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 800e538:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_int16(uint8_t* buffer, int16_t number, int32_t *index) {
 800e53a:	b510      	push	{r4, lr}
	buffer[(*index)++] = number >> 8;
 800e53c:	1c5c      	adds	r4, r3, #1
 800e53e:	6014      	str	r4, [r2, #0]
 800e540:	120c      	asrs	r4, r1, #8
 800e542:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800e544:	6813      	ldr	r3, [r2, #0]
 800e546:	1c5c      	adds	r4, r3, #1
 800e548:	6014      	str	r4, [r2, #0]
 800e54a:	54c1      	strb	r1, [r0, r3]
}
 800e54c:	bd10      	pop	{r4, pc}

0800e54e <libBufferAppend_uint16>:

void libBufferAppend_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 800e54e:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
 800e550:	b510      	push	{r4, lr}
	buffer[(*index)++] = number >> 8;
 800e552:	1c5c      	adds	r4, r3, #1
 800e554:	6014      	str	r4, [r2, #0]
 800e556:	0a0c      	lsrs	r4, r1, #8
 800e558:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800e55a:	6813      	ldr	r3, [r2, #0]
 800e55c:	1c5c      	adds	r4, r3, #1
 800e55e:	6014      	str	r4, [r2, #0]
 800e560:	54c1      	strb	r1, [r0, r3]
}
 800e562:	bd10      	pop	{r4, pc}

0800e564 <libBufferAppend_int32>:

void libBufferAppend_int32(uint8_t* buffer, int32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 800e564:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800e566:	b510      	push	{r4, lr}
	buffer[(*index)++] = number >> 24;
 800e568:	1c5c      	adds	r4, r3, #1
 800e56a:	6014      	str	r4, [r2, #0]
 800e56c:	160c      	asrs	r4, r1, #24
 800e56e:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 800e570:	6813      	ldr	r3, [r2, #0]
 800e572:	1c5c      	adds	r4, r3, #1
 800e574:	6014      	str	r4, [r2, #0]
 800e576:	140c      	asrs	r4, r1, #16
 800e578:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 800e57a:	6813      	ldr	r3, [r2, #0]
 800e57c:	1c5c      	adds	r4, r3, #1
 800e57e:	6014      	str	r4, [r2, #0]
 800e580:	120c      	asrs	r4, r1, #8
 800e582:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800e584:	6813      	ldr	r3, [r2, #0]
 800e586:	1c5c      	adds	r4, r3, #1
 800e588:	6014      	str	r4, [r2, #0]
 800e58a:	54c1      	strb	r1, [r0, r3]
}
 800e58c:	bd10      	pop	{r4, pc}

0800e58e <libBufferAppend_uint32>:

void libBufferAppend_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 800e58e:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
 800e590:	b510      	push	{r4, lr}
	buffer[(*index)++] = number >> 24;
 800e592:	1c5c      	adds	r4, r3, #1
 800e594:	6014      	str	r4, [r2, #0]
 800e596:	0e0c      	lsrs	r4, r1, #24
 800e598:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 800e59a:	6813      	ldr	r3, [r2, #0]
 800e59c:	1c5c      	adds	r4, r3, #1
 800e59e:	6014      	str	r4, [r2, #0]
 800e5a0:	0c0c      	lsrs	r4, r1, #16
 800e5a2:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 800e5a4:	6813      	ldr	r3, [r2, #0]
 800e5a6:	1c5c      	adds	r4, r3, #1
 800e5a8:	6014      	str	r4, [r2, #0]
 800e5aa:	0a0c      	lsrs	r4, r1, #8
 800e5ac:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800e5ae:	6813      	ldr	r3, [r2, #0]
 800e5b0:	1c5c      	adds	r4, r3, #1
 800e5b2:	6014      	str	r4, [r2, #0]
 800e5b4:	54c1      	strb	r1, [r0, r3]
}
 800e5b6:	bd10      	pop	{r4, pc}

0800e5b8 <libBufferAppend_uint16_LSBFirst>:
	buffer[(*index)++] = number;
	buffer[(*index)++] = number >> 8;
}

void libBufferAppend_uint16_LSBFirst(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number;
 800e5b8:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_uint16_LSBFirst(uint8_t* buffer, uint16_t number, int32_t *index) {
 800e5ba:	b510      	push	{r4, lr}
	buffer[(*index)++] = number;
 800e5bc:	1c5c      	adds	r4, r3, #1
 800e5be:	6014      	str	r4, [r2, #0]
 800e5c0:	54c1      	strb	r1, [r0, r3]
	buffer[(*index)++] = number >> 8;
 800e5c2:	6813      	ldr	r3, [r2, #0]
 800e5c4:	0a09      	lsrs	r1, r1, #8
 800e5c6:	1c5c      	adds	r4, r3, #1
 800e5c8:	6014      	str	r4, [r2, #0]
 800e5ca:	54c1      	strb	r1, [r0, r3]
}
 800e5cc:	bd10      	pop	{r4, pc}

0800e5ce <libBufferAppend_uint32_LSBFirst>:
	buffer[(*index)++] = number >> 16;
	buffer[(*index)++] = number >> 24;
}

void libBufferAppend_uint32_LSBFirst(uint8_t* buffer, uint32_t number, int32_t *index) {
	buffer[(*index)++] = number;
 800e5ce:	6813      	ldr	r3, [r2, #0]
void libBufferAppend_uint32_LSBFirst(uint8_t* buffer, uint32_t number, int32_t *index) {
 800e5d0:	b510      	push	{r4, lr}
	buffer[(*index)++] = number;
 800e5d2:	1c5c      	adds	r4, r3, #1
 800e5d4:	6014      	str	r4, [r2, #0]
 800e5d6:	54c1      	strb	r1, [r0, r3]
	buffer[(*index)++] = number >> 8;
 800e5d8:	6813      	ldr	r3, [r2, #0]
 800e5da:	1c5c      	adds	r4, r3, #1
 800e5dc:	6014      	str	r4, [r2, #0]
 800e5de:	0a0c      	lsrs	r4, r1, #8
 800e5e0:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 800e5e2:	6813      	ldr	r3, [r2, #0]
 800e5e4:	1c5c      	adds	r4, r3, #1
 800e5e6:	6014      	str	r4, [r2, #0]
 800e5e8:	0c0c      	lsrs	r4, r1, #16
 800e5ea:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 24;
 800e5ec:	6813      	ldr	r3, [r2, #0]
 800e5ee:	0e09      	lsrs	r1, r1, #24
 800e5f0:	1c5c      	adds	r4, r3, #1
 800e5f2:	6014      	str	r4, [r2, #0]
 800e5f4:	54c1      	strb	r1, [r0, r3]
}
 800e5f6:	bd10      	pop	{r4, pc}

0800e5f8 <libBufferAppend_float16>:

void libBufferAppend_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
    libBufferAppend_int16(buffer, (int16_t)(number * scale), index);
 800e5f8:	ee60 0a20 	vmul.f32	s1, s0, s1
void libBufferAppend_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 800e5fc:	460a      	mov	r2, r1
    libBufferAppend_int16(buffer, (int16_t)(number * scale), index);
 800e5fe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800e602:	ee10 3a90 	vmov	r3, s1
 800e606:	b219      	sxth	r1, r3
 800e608:	f7ff bf96 	b.w	800e538 <libBufferAppend_int16>

0800e60c <libBufferAppend_float32>:
}

void libBufferAppend_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
    libBufferAppend_int32(buffer, (int32_t)(number * scale), index);
 800e60c:	ee60 0a20 	vmul.f32	s1, s0, s1
void libBufferAppend_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
 800e610:	460a      	mov	r2, r1
    libBufferAppend_int32(buffer, (int32_t)(number * scale), index);
 800e612:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800e616:	ee17 1a90 	vmov	r1, s15
 800e61a:	f7ff bfa3 	b.w	800e564 <libBufferAppend_int32>
	...

0800e620 <libBufferAppend_float32_auto>:
 * 8388608.0 is 2^23, which scales the result to fit within 23 bits if sig_abs < 1.0.
 *
 * This should be a relatively fast and efficient way to serialize
 * floating point numbers in a fully defined manner.
 */
void libBufferAppend_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 800e620:	b530      	push	{r4, r5, lr}
 800e622:	b085      	sub	sp, #20
 800e624:	4605      	mov	r5, r0
	int e = 0;
 800e626:	2400      	movs	r4, #0
	float sig = frexpf(number, &e);
 800e628:	a803      	add	r0, sp, #12
void libBufferAppend_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 800e62a:	9101      	str	r1, [sp, #4]
	int e = 0;
 800e62c:	9403      	str	r4, [sp, #12]
	float sig = frexpf(number, &e);
 800e62e:	f001 fc3d 	bl	800feac <frexpf>
	float sig_abs = fabsf(sig);
	uint32_t sig_i = 0;

	if (sig_abs >= 0.5f) {
 800e632:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	float sig_abs = fabsf(sig);
 800e636:	eef0 7ac0 	vabs.f32	s15, s0
	if (sig_abs >= 0.5f) {
 800e63a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e642:	9a01      	ldr	r2, [sp, #4]
 800e644:	db0e      	blt.n	800e664 <libBufferAppend_float32_auto+0x44>
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800e646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e64a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e690 <libBufferAppend_float32_auto+0x70>
		e += 126;
 800e64e:	9b03      	ldr	r3, [sp, #12]
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800e650:	ee77 7aa7 	vadd.f32	s15, s15, s15
		e += 126;
 800e654:	337e      	adds	r3, #126	; 0x7e
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800e656:	ee67 7a87 	vmul.f32	s15, s15, s14
		e += 126;
 800e65a:	9303      	str	r3, [sp, #12]
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800e65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e660:	ee17 4a90 	vmov	r4, s15
	}

	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	05db      	lsls	r3, r3, #23
 800e668:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800e66c:	f3c4 0416 	ubfx	r4, r4, #0, #23
	if (sig < 0) {
 800e670:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 800e674:	ea43 0104 	orr.w	r1, r3, r4
	if (sig < 0) {
 800e678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		//res |= 1 << 31;
		res |= 0x80000000;
 800e67c:	bf48      	it	mi
 800e67e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
	}

	libBufferAppend_uint32(buffer, res, index);
 800e682:	4628      	mov	r0, r5
}
 800e684:	b005      	add	sp, #20
 800e686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	libBufferAppend_uint32(buffer, res, index);
 800e68a:	f7ff bf80 	b.w	800e58e <libBufferAppend_uint32>
 800e68e:	bf00      	nop
 800e690:	4b000000 	.word	0x4b000000

0800e694 <libBufferGet_uint8>:
	*index += 1;
	return res;
}

uint8_t libBufferGet_uint8(const uint8_t *buffer, int32_t *index) {
	uint8_t res = 	((uint8_t) buffer[*index]);
 800e694:	680b      	ldr	r3, [r1, #0]
 800e696:	5cc0      	ldrb	r0, [r0, r3]
	*index += 1;
 800e698:	3301      	adds	r3, #1
 800e69a:	600b      	str	r3, [r1, #0]
	return res;
}
 800e69c:	4770      	bx	lr

0800e69e <libBufferGet_int16>:

int16_t libBufferGet_int16(const uint8_t *buffer, int32_t *index) {
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e69e:	680b      	ldr	r3, [r1, #0]
 800e6a0:	5cc2      	ldrb	r2, [r0, r3]
					((uint16_t) buffer[*index + 1]);
 800e6a2:	4418      	add	r0, r3
	*index += 2;
 800e6a4:	3302      	adds	r3, #2
					((uint16_t) buffer[*index + 1]);
 800e6a6:	7840      	ldrb	r0, [r0, #1]
	*index += 2;
 800e6a8:	600b      	str	r3, [r1, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e6aa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	return res;
}
 800e6ae:	b200      	sxth	r0, r0
 800e6b0:	4770      	bx	lr

0800e6b2 <libBufferGet_uint16>:

uint16_t libBufferGet_uint16(const uint8_t *buffer, int32_t *index) {
 800e6b2:	b510      	push	{r4, lr}
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e6b4:	680b      	ldr	r3, [r1, #0]
 800e6b6:	5cc4      	ldrb	r4, [r0, r3]
					((uint16_t) buffer[*index + 1]);
 800e6b8:	4418      	add	r0, r3
	*index += 2;
 800e6ba:	3302      	adds	r3, #2
					((uint16_t) buffer[*index + 1]);
 800e6bc:	7840      	ldrb	r0, [r0, #1]
	*index += 2;
 800e6be:	600b      	str	r3, [r1, #0]
	return res;
}
 800e6c0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800e6c4:	bd10      	pop	{r4, pc}

0800e6c6 <libBufferGet_int32>:

int32_t libBufferGet_int32(const uint8_t *buffer, int32_t *index) {
 800e6c6:	b530      	push	{r4, r5, lr}
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e6c8:	680c      	ldr	r4, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 800e6ca:	1903      	adds	r3, r0, r4
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e6cc:	5d05      	ldrb	r5, [r0, r4]
					((uint32_t) buffer[*index + 3]);
 800e6ce:	78da      	ldrb	r2, [r3, #3]
					((uint32_t) buffer[*index + 1]) << 16 |
 800e6d0:	7858      	ldrb	r0, [r3, #1]
					((uint32_t) buffer[*index + 2]) << 8 |
 800e6d2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800e6d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e6da:	7898      	ldrb	r0, [r3, #2]
	*index += 4;
 800e6dc:	3404      	adds	r4, #4
 800e6de:	600c      	str	r4, [r1, #0]
	return res;
}
 800e6e0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800e6e4:	bd30      	pop	{r4, r5, pc}

0800e6e6 <libBufferGet_uint32>:

uint32_t libBufferGet_uint32(const uint8_t *buffer, int32_t *index) {
 800e6e6:	b530      	push	{r4, r5, lr}
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e6e8:	680c      	ldr	r4, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 800e6ea:	1903      	adds	r3, r0, r4
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e6ec:	5d05      	ldrb	r5, [r0, r4]
					((uint32_t) buffer[*index + 3]);
 800e6ee:	78da      	ldrb	r2, [r3, #3]
					((uint32_t) buffer[*index + 1]) << 16 |
 800e6f0:	7858      	ldrb	r0, [r3, #1]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e6f2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800e6f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
					((uint32_t) buffer[*index + 2]) << 8 |
 800e6fa:	7898      	ldrb	r0, [r3, #2]
	*index += 4;
 800e6fc:	3404      	adds	r4, #4
 800e6fe:	600c      	str	r4, [r1, #0]
	return res;
}
 800e700:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800e704:	bd30      	pop	{r4, r5, pc}

0800e706 <libBufferGet_float16>:

float libBufferGet_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800e706:	b508      	push	{r3, lr}
    return (float)libBufferGet_int16(buffer, index) / scale;
 800e708:	f7ff ffc9 	bl	800e69e <libBufferGet_int16>
 800e70c:	ee07 0a90 	vmov	s15, r0
 800e710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800e714:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e718:	bd08      	pop	{r3, pc}
	...

0800e71c <libBufferGet_float32_auto>:

float libBufferGet_float32(const uint8_t *buffer, float scale, int32_t *index) {
    return (float)libBufferGet_int32(buffer, index) / scale;
}

float libBufferGet_float32_auto(const uint8_t *buffer, int32_t *index) {
 800e71c:	b508      	push	{r3, lr}
	uint32_t res = libBufferGet_uint32(buffer, index);
 800e71e:	f7ff ffe2 	bl	800e6e6 <libBufferGet_uint32>

	int e = (res >> 23) & 0xFF;
 800e722:	f3c0 51c7 	ubfx	r1, r0, #23, #8
	uint32_t sig_i = res & 0x7FFFFF;
 800e726:	f3c0 0216 	ubfx	r2, r0, #0, #23
	uint32_t res = libBufferGet_uint32(buffer, index);
 800e72a:	4603      	mov	r3, r0
	//bool neg = res & (1 << 31);
	bool neg = res & (0x80000000);
	

	float sig = 0.0;
	if (e != 0 || sig_i != 0) {
 800e72c:	ea51 0002 	orrs.w	r0, r1, r2
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800e730:	bf1b      	ittet	ne
 800e732:	ee07 2a90 	vmovne	s15, r2
 800e736:	ed9f 7a0a 	vldrne	s14, [pc, #40]	; 800e760 <libBufferGet_float32_auto+0x44>
	float sig = 0.0;
 800e73a:	ed9f 0a0a 	vldreq	s0, [pc, #40]	; 800e764 <libBufferGet_float32_auto+0x48>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800e73e:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
 800e742:	bf1e      	ittt	ne
 800e744:	eeb6 0a00 	vmovne.f32	s0, #96	; 0x3f000000  0.5
 800e748:	eea7 0a87 	vfmane.f32	s0, s15, s14
		e -= 126;
 800e74c:	f1a1 007e 	subne.w	r0, r1, #126	; 0x7e
	}

	if (neg) {
 800e750:	2b00      	cmp	r3, #0
		sig = -sig;
	}

	return ldexpf(sig, e);
}
 800e752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sig = -sig;
 800e756:	bfb8      	it	lt
 800e758:	eeb1 0a40 	vneglt.f32	s0, s0
	return ldexpf(sig, e);
 800e75c:	f001 bbcc 	b.w	800fef8 <ldexpf>
 800e760:	33800000 	.word	0x33800000
 800e764:	00000000 	.word	0x00000000

0800e768 <libCRCCalcCRC16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short libCRCCalcCRC16(unsigned char *buf, unsigned int len) {
 800e768:	b510      	push	{r4, lr}
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
		cksum = libCRCLookupTable[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800e76a:	4c08      	ldr	r4, [pc, #32]	; (800e78c <libCRCCalcCRC16+0x24>)
unsigned short libCRCCalcCRC16(unsigned char *buf, unsigned int len) {
 800e76c:	4602      	mov	r2, r0
 800e76e:	4401      	add	r1, r0
	unsigned short cksum = 0;
 800e770:	2000      	movs	r0, #0
	for (i = 0; i < len; i++) {
 800e772:	428a      	cmp	r2, r1
 800e774:	d100      	bne.n	800e778 <libCRCCalcCRC16+0x10>
	}
	return cksum;
}
 800e776:	bd10      	pop	{r4, pc}
		cksum = libCRCLookupTable[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800e778:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e77c:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
 800e780:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800e784:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
 800e788:	b298      	uxth	r0, r3
	for (i = 0; i < len; i++) {
 800e78a:	e7f2      	b.n	800e772 <libCRCCalcCRC16+0xa>
 800e78c:	08014c50 	.word	0x08014c50

0800e790 <libGraphicsInit>:
#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

void libGraphicsInit(int16_t w, int16_t h){
  _width    = WIDTH = w;
 800e790:	4b0f      	ldr	r3, [pc, #60]	; (800e7d0 <libGraphicsInit+0x40>)
  _height   = HEIGHT = h;
  rotation  = 0;
 800e792:	4a10      	ldr	r2, [pc, #64]	; (800e7d4 <libGraphicsInit+0x44>)
  _width    = WIDTH = w;
 800e794:	8018      	strh	r0, [r3, #0]
 800e796:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <libGraphicsInit+0x48>)
 800e798:	8018      	strh	r0, [r3, #0]
  _height   = HEIGHT = h;
 800e79a:	4b10      	ldr	r3, [pc, #64]	; (800e7dc <libGraphicsInit+0x4c>)
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 800e79c:	4810      	ldr	r0, [pc, #64]	; (800e7e0 <libGraphicsInit+0x50>)
  _height   = HEIGHT = h;
 800e79e:	8019      	strh	r1, [r3, #0]
 800e7a0:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <libGraphicsInit+0x54>)
 800e7a2:	8019      	strh	r1, [r3, #0]
  rotation  = 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	7013      	strb	r3, [r2, #0]
  cursor_y  = cursor_x    = 0;
 800e7a8:	4a0f      	ldr	r2, [pc, #60]	; (800e7e8 <libGraphicsInit+0x58>)
  textsize  = 1;
 800e7aa:	4910      	ldr	r1, [pc, #64]	; (800e7ec <libGraphicsInit+0x5c>)
  cursor_y  = cursor_x    = 0;
 800e7ac:	8013      	strh	r3, [r2, #0]
 800e7ae:	4a10      	ldr	r2, [pc, #64]	; (800e7f0 <libGraphicsInit+0x60>)
 800e7b0:	8013      	strh	r3, [r2, #0]
  textsize  = 1;
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	700a      	strb	r2, [r1, #0]
  textcolor = textbgcolor = 0xFFFF;
 800e7b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7ba:	8001      	strh	r1, [r0, #0]
 800e7bc:	480d      	ldr	r0, [pc, #52]	; (800e7f4 <libGraphicsInit+0x64>)
 800e7be:	8001      	strh	r1, [r0, #0]
  wrap      = true;
 800e7c0:	490d      	ldr	r1, [pc, #52]	; (800e7f8 <libGraphicsInit+0x68>)
 800e7c2:	700a      	strb	r2, [r1, #0]
  _cp437    = false;
 800e7c4:	4a0d      	ldr	r2, [pc, #52]	; (800e7fc <libGraphicsInit+0x6c>)
 800e7c6:	7013      	strb	r3, [r2, #0]
  gfxFont   = NULL;
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	; (800e800 <libGraphicsInit+0x70>)
 800e7ca:	6013      	str	r3, [r2, #0]
}; // Constructor
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	20005a6a 	.word	0x20005a6a
 800e7d4:	20005a7c 	.word	0x20005a7c
 800e7d8:	20005a70 	.word	0x20005a70
 800e7dc:	20005a68 	.word	0x20005a68
 800e7e0:	20005a7e 	.word	0x20005a7e
 800e7e4:	20005a6e 	.word	0x20005a6e
 800e7e8:	20005a72 	.word	0x20005a72
 800e7ec:	20005a82 	.word	0x20005a82
 800e7f0:	20005a74 	.word	0x20005a74
 800e7f4:	20005a80 	.word	0x20005a80
 800e7f8:	20005a83 	.word	0x20005a83
 800e7fc:	20005a6c 	.word	0x20005a6c
 800e800:	20005a78 	.word	0x20005a78

0800e804 <libGraphicsDrawLine>:
	
void libGraphicsDrawPixel(int16_t x, int16_t y, uint16_t color){
	driverSWSSD1306DrawPixel(x,y,color);
};
	
void libGraphicsDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
 800e804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800e808:	eba3 0801 	sub.w	r8, r3, r1
void libGraphicsDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
 800e80c:	4617      	mov	r7, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800e80e:	eba7 0900 	sub.w	r9, r7, r0
 800e812:	f1b8 0f00 	cmp.w	r8, #0
 800e816:	bfb8      	it	lt
 800e818:	f1c8 0800 	rsblt	r8, r8, #0
 800e81c:	f1b9 0f00 	cmp.w	r9, #0
 800e820:	bfb8      	it	lt
 800e822:	f1c9 0900 	rsblt	r9, r9, #0
  if (steep) {
 800e826:	45c8      	cmp	r8, r9
void libGraphicsDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
 800e828:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800e82c:	4604      	mov	r4, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	461e      	mov	r6, r3
  if (steep) {
 800e832:	dd04      	ble.n	800e83e <libGraphicsDrawLine+0x3a>
 800e834:	463b      	mov	r3, r7
    _swap_int16_t(x0, y0);
 800e836:	460c      	mov	r4, r1
    _swap_int16_t(x1, y1);
 800e838:	4637      	mov	r7, r6
    _swap_int16_t(x0, y0);
 800e83a:	4605      	mov	r5, r0
    _swap_int16_t(x1, y1);
 800e83c:	461e      	mov	r6, r3
  }

  if (x0 > x1) {
 800e83e:	42bc      	cmp	r4, r7
 800e840:	dd05      	ble.n	800e84e <libGraphicsDrawLine+0x4a>
 800e842:	462b      	mov	r3, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 800e844:	4635      	mov	r5, r6
 800e846:	461e      	mov	r6, r3
  if (x0 > x1) {
 800e848:	4623      	mov	r3, r4
 800e84a:	463c      	mov	r4, r7
 800e84c:	461f      	mov	r7, r3
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800e84e:	1b3b      	subs	r3, r7, r4
 800e850:	b299      	uxth	r1, r3
  dy = abs(y1 - y0);
 800e852:	eba6 0a05 	sub.w	sl, r6, r5
  dx = x1 - x0;
 800e856:	9100      	str	r1, [sp, #0]

  int16_t err = dx / 2;
 800e858:	f3c3 31c0 	ubfx	r1, r3, #15, #1
  dy = abs(y1 - y0);
 800e85c:	f1ba 0f00 	cmp.w	sl, #0
  int16_t err = dx / 2;
 800e860:	fa01 f383 	sxtah	r3, r1, r3
  dy = abs(y1 - y0);
 800e864:	bfb8      	it	lt
 800e866:	f1ca 0a00 	rsblt	sl, sl, #0
  int16_t err = dx / 2;
 800e86a:	ea4f 0b63 	mov.w	fp, r3, asr #1
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 800e86e:	42b5      	cmp	r5, r6
 800e870:	bfb4      	ite	lt
 800e872:	2601      	movlt	r6, #1
 800e874:	f04f 36ff 	movge.w	r6, #4294967295
  }

  for (; x0<=x1; x0++) {
 800e878:	42bc      	cmp	r4, r7
 800e87a:	dd02      	ble.n	800e882 <libGraphicsDrawLine+0x7e>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
};
 800e87c:	b003      	add	sp, #12
 800e87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (steep) {
 800e882:	45c8      	cmp	r8, r9
	driverSWSSD1306DrawPixel(x,y,color);
 800e884:	bfcb      	itete	gt
 800e886:	4628      	movgt	r0, r5
 800e888:	4620      	movle	r0, r4
 800e88a:	4621      	movgt	r1, r4
 800e88c:	4629      	movle	r1, r5
 800e88e:	9201      	str	r2, [sp, #4]
 800e890:	f7fa fbd8 	bl	8009044 <driverSWSSD1306DrawPixel>
    err -= dy;
 800e894:	ebab 030a 	sub.w	r3, fp, sl
 800e898:	fa0f fb83 	sxth.w	fp, r3
    if (err < 0) {
 800e89c:	f1bb 0f00 	cmp.w	fp, #0
	driverSWSSD1306DrawPixel(x,y,color);
 800e8a0:	9a01      	ldr	r2, [sp, #4]
    err -= dy;
 800e8a2:	b298      	uxth	r0, r3
    if (err < 0) {
 800e8a4:	da05      	bge.n	800e8b2 <libGraphicsDrawLine+0xae>
      err += dx;
 800e8a6:	9b00      	ldr	r3, [sp, #0]
      y0 += ystep;
 800e8a8:	4435      	add	r5, r6
      err += dx;
 800e8aa:	4403      	add	r3, r0
      y0 += ystep;
 800e8ac:	b22d      	sxth	r5, r5
      err += dx;
 800e8ae:	fa0f fb83 	sxth.w	fp, r3
  for (; x0<=x1; x0++) {
 800e8b2:	3401      	adds	r4, #1
 800e8b4:	b224      	sxth	r4, r4
 800e8b6:	e7df      	b.n	800e878 <libGraphicsDrawLine+0x74>

0800e8b8 <libGraphicsDrawFastVLine>:
	
void libGraphicsDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
 800e8b8:	b507      	push	{r0, r1, r2, lr}
  libGraphicsDrawLine(x, y, x, y+h-1, color);
 800e8ba:	3a01      	subs	r2, #1
 800e8bc:	440a      	add	r2, r1
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	b213      	sxth	r3, r2
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	f7ff ff9e 	bl	800e804 <libGraphicsDrawLine>
};
 800e8c8:	b003      	add	sp, #12
 800e8ca:	f85d fb04 	ldr.w	pc, [sp], #4

0800e8ce <libGraphicsFillRect>:
  libGraphicsDrawFastHLine(x, y+h-1, w, color);
  libGraphicsDrawFastVLine(x, y, h, color);
  libGraphicsDrawFastVLine(x+w-1, y, h, color);
};
	
void libGraphicsFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 800e8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800e8d6:	4688      	mov	r8, r1
 800e8d8:	461e      	mov	r6, r3
  for (int16_t i=x; i<x+w; i++) {
 800e8da:	4604      	mov	r4, r0
 800e8dc:	1885      	adds	r5, r0, r2
 800e8de:	42ac      	cmp	r4, r5
 800e8e0:	db01      	blt.n	800e8e6 <libGraphicsFillRect+0x18>
    libGraphicsDrawFastVLine(i, y, h, color);
  }
};
 800e8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    libGraphicsDrawFastVLine(i, y, h, color);
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	463b      	mov	r3, r7
 800e8ea:	4632      	mov	r2, r6
 800e8ec:	4641      	mov	r1, r8
 800e8ee:	3401      	adds	r4, #1
 800e8f0:	f7ff ffe2 	bl	800e8b8 <libGraphicsDrawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
 800e8f4:	b224      	sxth	r4, r4
 800e8f6:	e7f2      	b.n	800e8de <libGraphicsFillRect+0x10>

0800e8f8 <libGraphicsDrawChar>:
      if(byte & 0x01) libGraphicsDrawPixel(x+i, y+j, color);
    }
  }
};
	
void libGraphicsDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size){
 800e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fc:	ed2d 8b02 	vpush	{d8}
 800e900:	4605      	mov	r5, r0
  if(!gfxFont) { // 'Classic' built-in font
 800e902:	4880      	ldr	r0, [pc, #512]	; (800eb04 <libGraphicsDrawChar+0x20c>)
void libGraphicsDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size){
 800e904:	b08f      	sub	sp, #60	; 0x3c
  if(!gfxFont) { // 'Classic' built-in font
 800e906:	6807      	ldr	r7, [r0, #0]
void libGraphicsDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size){
 800e908:	9302      	str	r3, [sp, #8]
 800e90a:	2600      	movs	r6, #0
 800e90c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800e910:	9303      	str	r3, [sp, #12]
 800e912:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 800e916:	9604      	str	r6, [sp, #16]
 800e918:	4633      	mov	r3, r6
  if(!gfxFont) { // 'Classic' built-in font
 800e91a:	2f00      	cmp	r7, #0
 800e91c:	d178      	bne.n	800ea10 <libGraphicsDrawChar+0x118>

    if((x >= _width)            || // Clip right
 800e91e:	4b7a      	ldr	r3, [pc, #488]	; (800eb08 <libGraphicsDrawChar+0x210>)
 800e920:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e924:	42ab      	cmp	r3, r5
 800e926:	dd5b      	ble.n	800e9e0 <libGraphicsDrawChar+0xe8>
       (y >= _height)           || // Clip bottom
 800e928:	4b78      	ldr	r3, [pc, #480]	; (800eb0c <libGraphicsDrawChar+0x214>)
    if((x >= _width)            || // Clip right
 800e92a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e92e:	428b      	cmp	r3, r1
 800e930:	dd56      	ble.n	800e9e0 <libGraphicsDrawChar+0xe8>
       ((x + 6 * size - 1) < 0) || // Clip left
 800e932:	2306      	movs	r3, #6
 800e934:	fb13 5304 	smlabb	r3, r3, r4, r5
       (y >= _height)           || // Clip bottom
 800e938:	42b3      	cmp	r3, r6
 800e93a:	dd51      	ble.n	800e9e0 <libGraphicsDrawChar+0xe8>
       ((y + 8 * size - 1) < 0))   // Clip top
 800e93c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
       ((x + 6 * size - 1) < 0) || // Clip left
 800e940:	42b3      	cmp	r3, r6
 800e942:	dd4d      	ble.n	800e9e0 <libGraphicsDrawChar+0xe8>
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800e944:	4b72      	ldr	r3, [pc, #456]	; (800eb10 <libGraphicsDrawChar+0x218>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	b91b      	cbnz	r3, 800e952 <libGraphicsDrawChar+0x5a>
 800e94a:	2aaf      	cmp	r2, #175	; 0xaf
 800e94c:	bf84      	itt	hi
 800e94e:	3201      	addhi	r2, #1
 800e950:	b2d2      	uxtbhi	r2, r2

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 800e952:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800e956:	9308      	str	r3, [sp, #32]
 800e958:	2306      	movs	r3, #6
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	b28b      	uxth	r3, r1
 800e95e:	9304      	str	r3, [sp, #16]
 800e960:	3308      	adds	r3, #8
 800e962:	b29b      	uxth	r3, r3
    for(int8_t i=0; i<6; i++ ) {
 800e964:	2600      	movs	r6, #0
 800e966:	9307      	str	r3, [sp, #28]
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 800e968:	2e05      	cmp	r6, #5
 800e96a:	bf1c      	itt	ne
 800e96c:	9b08      	ldrne	r3, [sp, #32]
 800e96e:	4a69      	ldrne	r2, [pc, #420]	; (800eb14 <libGraphicsDrawChar+0x21c>)
 800e970:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e974:	bf18      	it	ne
 800e976:	199b      	addne	r3, r3, r6
        if(line & 0x1) {
          if(size == 1) libGraphicsDrawPixel(x+i, y+j, color);
          else          libGraphicsFillRect(x+(i*size), y+(j*size), size, size, color);
        } else if(bg != color) {
          if(size == 1) libGraphicsDrawPixel(x+i, y+j, bg);
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800e978:	fb06 f904 	mul.w	r9, r6, r4
 800e97c:	fa19 f985 	uxtah	r9, r9, r5
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 800e980:	bf18      	it	ne
 800e982:	f813 b002 	ldrbne.w	fp, [r3, r2]
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800e986:	b2a3      	uxth	r3, r4
 800e988:	9306      	str	r3, [sp, #24]
 800e98a:	fa0f f389 	sxth.w	r3, r9
          if(size == 1) libGraphicsDrawPixel(x+i, y+j, bg);
 800e98e:	eb06 0a05 	add.w	sl, r6, r5
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800e992:	ee08 3a10 	vmov	s16, r3
      else      line = 0x0;
 800e996:	bf08      	it	eq
 800e998:	f04f 0b00 	moveq.w	fp, #0
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800e99c:	4647      	mov	r7, r8
 800e99e:	fa0f f984 	sxth.w	r9, r4
	driverSWSSD1306DrawPixel(x,y,color);
 800e9a2:	fa0f fa8a 	sxth.w	sl, sl
        if(line & 0x1) {
 800e9a6:	f01b 0f01 	tst.w	fp, #1
 800e9aa:	d029      	beq.n	800ea00 <libGraphicsDrawChar+0x108>
          if(size == 1) libGraphicsDrawPixel(x+i, y+j, color);
 800e9ac:	2c01      	cmp	r4, #1
 800e9ae:	d11c      	bne.n	800e9ea <libGraphicsDrawChar+0xf2>
	driverSWSSD1306DrawPixel(x,y,color);
 800e9b0:	9a02      	ldr	r2, [sp, #8]
 800e9b2:	b239      	sxth	r1, r7
 800e9b4:	4650      	mov	r0, sl
 800e9b6:	f7fa fb45 	bl	8009044 <driverSWSSD1306DrawPixel>
      for(int8_t j=0; j<8; j++, line >>= 1) {
 800e9ba:	9b06      	ldr	r3, [sp, #24]
 800e9bc:	3701      	adds	r7, #1
 800e9be:	4498      	add	r8, r3
 800e9c0:	9b07      	ldr	r3, [sp, #28]
 800e9c2:	b2bf      	uxth	r7, r7
 800e9c4:	42bb      	cmp	r3, r7
 800e9c6:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800e9ca:	fa1f f888 	uxth.w	r8, r8
 800e9ce:	d1ea      	bne.n	800e9a6 <libGraphicsDrawChar+0xae>
    for(int8_t i=0; i<6; i++ ) {
 800e9d0:	9b05      	ldr	r3, [sp, #20]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	3601      	adds	r6, #1
 800e9d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800e9da:	b276      	sxtb	r6, r6
 800e9dc:	9305      	str	r3, [sp, #20]
 800e9de:	d1c3      	bne.n	800e968 <libGraphicsDrawChar+0x70>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
};
 800e9e0:	b00f      	add	sp, #60	; 0x3c
 800e9e2:	ecbd 8b02 	vpop	{d8}
 800e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          else          libGraphicsFillRect(x+(i*size), y+(j*size), size, size, color);
 800e9ea:	9b02      	ldr	r3, [sp, #8]
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	ee18 0a10 	vmov	r0, s16
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	464a      	mov	r2, r9
 800e9f6:	fa0f f188 	sxth.w	r1, r8
 800e9fa:	f7ff ff68 	bl	800e8ce <libGraphicsFillRect>
 800e9fe:	e7dc      	b.n	800e9ba <libGraphicsDrawChar+0xc2>
        } else if(bg != color) {
 800ea00:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d0d8      	beq.n	800e9ba <libGraphicsDrawChar+0xc2>
          if(size == 1) libGraphicsDrawPixel(x+i, y+j, bg);
 800ea08:	2c01      	cmp	r4, #1
 800ea0a:	d0d2      	beq.n	800e9b2 <libGraphicsDrawChar+0xba>
          else          libGraphicsFillRect(x+i*size, y+j*size, size, size, bg);
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	e7ed      	b.n	800e9ec <libGraphicsDrawChar+0xf4>
    c -= pgm_read_byte(&gfxFont->first);
 800ea10:	7a38      	ldrb	r0, [r7, #8]
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 800ea12:	f8d7 c004 	ldr.w	ip, [r7, #4]
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 800ea16:	683f      	ldr	r7, [r7, #0]
 800ea18:	9709      	str	r7, [sp, #36]	; 0x24
    c -= pgm_read_byte(&gfxFont->first);
 800ea1a:	1a12      	subs	r2, r2, r0
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	eb0c 00c2 	add.w	r0, ip, r2, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 800ea22:	f83c 9032 	ldrh.w	r9, [ip, r2, lsl #3]
    uint8_t  w  = pgm_read_byte(&glyph->width),
 800ea26:	7882      	ldrb	r2, [r0, #2]
 800ea28:	920a      	str	r2, [sp, #40]	; 0x28
             h  = pgm_read_byte(&glyph->height);
 800ea2a:	78c2      	ldrb	r2, [r0, #3]
 800ea2c:	920b      	str	r2, [sp, #44]	; 0x2c
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
 800ea2e:	f990 2005 	ldrsb.w	r2, [r0, #5]
 800ea32:	9205      	str	r2, [sp, #20]
    if(size > 1) {
 800ea34:	2c01      	cmp	r4, #1
             yo = pgm_read_byte(&glyph->yOffset);
 800ea36:	f990 2006 	ldrsb.w	r2, [r0, #6]
      xo16 = xo;
 800ea3a:	bf84      	itt	hi
 800ea3c:	f9bd 3014 	ldrshhi.w	r3, [sp, #20]
      yo16 = yo;
 800ea40:	b210      	sxthhi	r0, r2
 800ea42:	fb04 f303 	mul.w	r3, r4, r3
 800ea46:	bf88      	it	hi
 800ea48:	9004      	strhi	r0, [sp, #16]
            libGraphicsFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 800ea4a:	b2a0      	uxth	r0, r4
 800ea4c:	9003      	str	r0, [sp, #12]
 800ea4e:	b2a8      	uxth	r0, r5
 800ea50:	fa13 f585 	uxtah	r5, r3, r5
 800ea54:	b2ab      	uxth	r3, r5
 800ea56:	9006      	str	r0, [sp, #24]
 800ea58:	9308      	str	r3, [sp, #32]
 800ea5a:	b288      	uxth	r0, r1
    uint8_t  xx, yy, bits, bit = 0;
 800ea5c:	2300      	movs	r3, #0
            libGraphicsDrawPixel(x+xo+xx, y+yo+yy, color);
 800ea5e:	fa12 f281 	uxtah	r2, r2, r1
    for(yy=0; yy<h; yy++) {
 800ea62:	461d      	mov	r5, r3
            libGraphicsFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 800ea64:	900c      	str	r0, [sp, #48]	; 0x30
            libGraphicsDrawPixel(x+xo+xx, y+yo+yy, color);
 800ea66:	920d      	str	r2, [sp, #52]	; 0x34
    for(yy=0; yy<h; yy++) {
 800ea68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea6a:	4295      	cmp	r5, r2
 800ea6c:	d2b8      	bcs.n	800e9e0 <libGraphicsDrawChar+0xe8>
            libGraphicsFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 800ea6e:	9a04      	ldr	r2, [sp, #16]
 800ea70:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea72:	9803      	ldr	r0, [sp, #12]
 800ea74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea78:	442a      	add	r2, r5
 800ea7a:	fb02 1200 	mla	r2, r2, r0, r1
 800ea7e:	b212      	sxth	r2, r2
 800ea80:	ee08 2a10 	vmov	s16, r2
 800ea84:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800ea88:	1857      	adds	r7, r2, r1
 800ea8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea8c:	189a      	adds	r2, r3, r2
 800ea8e:	b2d2      	uxtb	r2, r2
 800ea90:	9207      	str	r2, [sp, #28]
            libGraphicsDrawPixel(x+xo+xx, y+yo+yy, color);
 800ea92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea94:	eb02 0a05 	add.w	sl, r2, r5
 800ea98:	b2bf      	uxth	r7, r7
	driverSWSSD1306DrawPixel(x,y,color);
 800ea9a:	fa0f fa8a 	sxth.w	sl, sl
 800ea9e:	e01f      	b.n	800eae0 <libGraphicsDrawChar+0x1e8>
        if(!(bit++ & 7)) {
 800eaa0:	075a      	lsls	r2, r3, #29
          bits = pgm_read_byte(&bitmap[bo++]);
 800eaa2:	bf04      	itt	eq
 800eaa4:	9a09      	ldreq	r2, [sp, #36]	; 0x24
 800eaa6:	f812 6009 	ldrbeq.w	r6, [r2, r9]
        if(!(bit++ & 7)) {
 800eaaa:	f103 0b01 	add.w	fp, r3, #1
          bits = pgm_read_byte(&bitmap[bo++]);
 800eaae:	bf04      	itt	eq
 800eab0:	f109 0301 	addeq.w	r3, r9, #1
 800eab4:	fa1f f983 	uxtheq.w	r9, r3
        if(bits & 0x80) {
 800eab8:	0633      	lsls	r3, r6, #24
        if(!(bit++ & 7)) {
 800eaba:	fa5f fb8b 	uxtb.w	fp, fp
        if(bits & 0x80) {
 800eabe:	d506      	bpl.n	800eace <libGraphicsDrawChar+0x1d6>
          if(size == 1) {
 800eac0:	2c01      	cmp	r4, #1
 800eac2:	d113      	bne.n	800eaec <libGraphicsDrawChar+0x1f4>
	driverSWSSD1306DrawPixel(x,y,color);
 800eac4:	9a02      	ldr	r2, [sp, #8]
 800eac6:	4651      	mov	r1, sl
 800eac8:	b238      	sxth	r0, r7
 800eaca:	f7fa fabb 	bl	8009044 <driverSWSSD1306DrawPixel>
        bits <<= 1;
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	0076      	lsls	r6, r6, #1
 800ead2:	4498      	add	r8, r3
 800ead4:	3701      	adds	r7, #1
 800ead6:	b2f6      	uxtb	r6, r6
      for(xx=0; xx<w; xx++) {
 800ead8:	fa1f f888 	uxth.w	r8, r8
 800eadc:	b2bf      	uxth	r7, r7
        if(!(bit++ & 7)) {
 800eade:	465b      	mov	r3, fp
      for(xx=0; xx<w; xx++) {
 800eae0:	9a07      	ldr	r2, [sp, #28]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d1dc      	bne.n	800eaa0 <libGraphicsDrawChar+0x1a8>
    for(yy=0; yy<h; yy++) {
 800eae6:	3501      	adds	r5, #1
 800eae8:	b2ed      	uxtb	r5, r5
 800eaea:	e7bd      	b.n	800ea68 <libGraphicsDrawChar+0x170>
            libGraphicsFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 800eaec:	9a02      	ldr	r2, [sp, #8]
 800eaee:	9200      	str	r2, [sp, #0]
 800eaf0:	b223      	sxth	r3, r4
 800eaf2:	ee18 1a10 	vmov	r1, s16
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	fa0f f088 	sxth.w	r0, r8
 800eafc:	f7ff fee7 	bl	800e8ce <libGraphicsFillRect>
 800eb00:	e7e5      	b.n	800eace <libGraphicsDrawChar+0x1d6>
 800eb02:	bf00      	nop
 800eb04:	20005a78 	.word	0x20005a78
 800eb08:	20005a70 	.word	0x20005a70
 800eb0c:	20005a6e 	.word	0x20005a6e
 800eb10:	20005a6c 	.word	0x20005a6c
 800eb14:	08016a50 	.word	0x08016a50

0800eb18 <libGraphicsSetCursor>:
	
void libGraphicsSetCursor(int16_t x, int16_t y){
  cursor_x = x;
 800eb18:	4b02      	ldr	r3, [pc, #8]	; (800eb24 <libGraphicsSetCursor+0xc>)
 800eb1a:	8018      	strh	r0, [r3, #0]
  cursor_y = y;
 800eb1c:	4b02      	ldr	r3, [pc, #8]	; (800eb28 <libGraphicsSetCursor+0x10>)
 800eb1e:	8019      	strh	r1, [r3, #0]
};
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	20005a72 	.word	0x20005a72
 800eb28:	20005a74 	.word	0x20005a74

0800eb2c <libGraphicsSetTextColor_0>:
	
void libGraphicsSetTextColor_0(uint16_t c){
	textcolor = textbgcolor = c;
 800eb2c:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <libGraphicsSetTextColor_0+0xc>)
 800eb2e:	8018      	strh	r0, [r3, #0]
 800eb30:	4b02      	ldr	r3, [pc, #8]	; (800eb3c <libGraphicsSetTextColor_0+0x10>)
 800eb32:	8018      	strh	r0, [r3, #0]
};
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	20005a7e 	.word	0x20005a7e
 800eb3c:	20005a80 	.word	0x20005a80

0800eb40 <libGraphicsSetTextSize>:
  textcolor   = c;
  textbgcolor = bg;
};
	
void libGraphicsSetTextSize(uint8_t s){
	textsize = (s > 0) ? s : 1;
 800eb40:	4b02      	ldr	r3, [pc, #8]	; (800eb4c <libGraphicsSetTextSize+0xc>)
 800eb42:	2801      	cmp	r0, #1
 800eb44:	bf38      	it	cc
 800eb46:	2001      	movcc	r0, #1
 800eb48:	7018      	strb	r0, [r3, #0]
};
 800eb4a:	4770      	bx	lr
 800eb4c:	20005a82 	.word	0x20005a82

0800eb50 <libGraphicsWrite>:
  } // End classic vs custom font
};
	
//getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);
bool libGraphicsWrite(uint8_t c){
  if(!gfxFont) { // 'Classic' built-in font
 800eb50:	4b49      	ldr	r3, [pc, #292]	; (800ec78 <libGraphicsWrite+0x128>)
 800eb52:	681b      	ldr	r3, [r3, #0]
bool libGraphicsWrite(uint8_t c){
 800eb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb56:	4602      	mov	r2, r0
  if(!gfxFont) { // 'Classic' built-in font
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d13a      	bne.n	800ebd2 <libGraphicsWrite+0x82>

    if(c == '\n') {
 800eb5c:	280a      	cmp	r0, #10
 800eb5e:	d109      	bne.n	800eb74 <libGraphicsWrite+0x24>
      cursor_y += textsize*8;
 800eb60:	4946      	ldr	r1, [pc, #280]	; (800ec7c <libGraphicsWrite+0x12c>)
 800eb62:	4a47      	ldr	r2, [pc, #284]	; (800ec80 <libGraphicsWrite+0x130>)
 800eb64:	7810      	ldrb	r0, [r2, #0]
 800eb66:	880a      	ldrh	r2, [r1, #0]
 800eb68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eb6c:	800a      	strh	r2, [r1, #0]
      cursor_x  = 0;
 800eb6e:	4a45      	ldr	r2, [pc, #276]	; (800ec84 <libGraphicsWrite+0x134>)

  } else { // Custom font

    if(c == '\n') {
      cursor_x  = 0;
      cursor_y += (int16_t)textsize *
 800eb70:	8013      	strh	r3, [r2, #0]
 800eb72:	e02b      	b.n	800ebcc <libGraphicsWrite+0x7c>
    } else if(c == '\r') {
 800eb74:	280d      	cmp	r0, #13
 800eb76:	d029      	beq.n	800ebcc <libGraphicsWrite+0x7c>
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
 800eb78:	4943      	ldr	r1, [pc, #268]	; (800ec88 <libGraphicsWrite+0x138>)
      cursor_y += textsize*8;
 800eb7a:	4e41      	ldr	r6, [pc, #260]	; (800ec80 <libGraphicsWrite+0x130>)
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
 800eb7c:	780d      	ldrb	r5, [r1, #0]
      cursor_y += textsize*8;
 800eb7e:	7830      	ldrb	r0, [r6, #0]
 800eb80:	493e      	ldr	r1, [pc, #248]	; (800ec7c <libGraphicsWrite+0x12c>)
 800eb82:	4c40      	ldr	r4, [pc, #256]	; (800ec84 <libGraphicsWrite+0x134>)
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
 800eb84:	b17d      	cbz	r5, 800eba6 <libGraphicsWrite+0x56>
 800eb86:	f9b4 7000 	ldrsh.w	r7, [r4]
 800eb8a:	2506      	movs	r5, #6
 800eb8c:	fb15 7500 	smlabb	r5, r5, r0, r7
 800eb90:	4f3e      	ldr	r7, [pc, #248]	; (800ec8c <libGraphicsWrite+0x13c>)
 800eb92:	f9b7 7000 	ldrsh.w	r7, [r7]
 800eb96:	42bd      	cmp	r5, r7
      cursor_y += textsize*8;
 800eb98:	bfa1      	itttt	ge
 800eb9a:	f9b1 5000 	ldrshge.w	r5, [r1]
        cursor_x  = 0;            // Reset x to zero
 800eb9e:	8023      	strhge	r3, [r4, #0]
        cursor_y += textsize * 8; // Advance y one line
 800eba0:	eb05 03c0 	addge.w	r3, r5, r0, lsl #3
 800eba4:	800b      	strhge	r3, [r1, #0]
      libGraphicsDrawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 800eba6:	4b3a      	ldr	r3, [pc, #232]	; (800ec90 <libGraphicsWrite+0x140>)
 800eba8:	9001      	str	r0, [sp, #4]
 800ebaa:	881b      	ldrh	r3, [r3, #0]
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	4b39      	ldr	r3, [pc, #228]	; (800ec94 <libGraphicsWrite+0x144>)
 800ebb0:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ebb4:	881b      	ldrh	r3, [r3, #0]
 800ebb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ebba:	f7ff fe9d 	bl	800e8f8 <libGraphicsDrawChar>
      cursor_x += textsize * 6;
 800ebbe:	7833      	ldrb	r3, [r6, #0]
 800ebc0:	8822      	ldrh	r2, [r4, #0]
 800ebc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ebc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ebca:	8023      	strh	r3, [r4, #0]
    }

  }
	
	return true;
};
 800ebcc:	2001      	movs	r0, #1
 800ebce:	b003      	add	sp, #12
 800ebd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(c == '\n') {
 800ebd2:	280a      	cmp	r0, #10
 800ebd4:	d10a      	bne.n	800ebec <libGraphicsWrite+0x9c>
      cursor_x  = 0;
 800ebd6:	4a2b      	ldr	r2, [pc, #172]	; (800ec84 <libGraphicsWrite+0x134>)
 800ebd8:	2100      	movs	r1, #0
 800ebda:	8011      	strh	r1, [r2, #0]
      cursor_y += (int16_t)textsize *
 800ebdc:	4928      	ldr	r1, [pc, #160]	; (800ec80 <libGraphicsWrite+0x130>)
 800ebde:	4a27      	ldr	r2, [pc, #156]	; (800ec7c <libGraphicsWrite+0x12c>)
 800ebe0:	7808      	ldrb	r0, [r1, #0]
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800ebe2:	7a99      	ldrb	r1, [r3, #10]
      cursor_y += (int16_t)textsize *
 800ebe4:	8813      	ldrh	r3, [r2, #0]
 800ebe6:	fb00 3301 	mla	r3, r0, r1, r3
 800ebea:	e7c1      	b.n	800eb70 <libGraphicsWrite+0x20>
    } else if(c != '\r') {
 800ebec:	280d      	cmp	r0, #13
 800ebee:	d0ed      	beq.n	800ebcc <libGraphicsWrite+0x7c>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 800ebf0:	7a1c      	ldrb	r4, [r3, #8]
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800ebf2:	42a0      	cmp	r0, r4
 800ebf4:	d3ea      	bcc.n	800ebcc <libGraphicsWrite+0x7c>
 800ebf6:	7a59      	ldrb	r1, [r3, #9]
 800ebf8:	4281      	cmp	r1, r0
 800ebfa:	d3e7      	bcc.n	800ebcc <libGraphicsWrite+0x7c>
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
 800ebfc:	6859      	ldr	r1, [r3, #4]
 800ebfe:	4e20      	ldr	r6, [pc, #128]	; (800ec80 <libGraphicsWrite+0x130>)
 800ec00:	4d20      	ldr	r5, [pc, #128]	; (800ec84 <libGraphicsWrite+0x134>)
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
 800ec02:	1b04      	subs	r4, r0, r4
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
 800ec04:	b2e4      	uxtb	r4, r4
 800ec06:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
        uint8_t   w     = pgm_read_byte(&glyph->width),
 800ec0a:	f894 c002 	ldrb.w	ip, [r4, #2]
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800ec0e:	f1bc 0f00 	cmp.w	ip, #0
 800ec12:	d029      	beq.n	800ec68 <libGraphicsWrite+0x118>
 800ec14:	78e1      	ldrb	r1, [r4, #3]
 800ec16:	b339      	cbz	r1, 800ec68 <libGraphicsWrite+0x118>
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
 800ec18:	491b      	ldr	r1, [pc, #108]	; (800ec88 <libGraphicsWrite+0x138>)
      cursor_y += textsize*8;
 800ec1a:	7830      	ldrb	r0, [r6, #0]
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
 800ec1c:	780f      	ldrb	r7, [r1, #0]
 800ec1e:	4917      	ldr	r1, [pc, #92]	; (800ec7c <libGraphicsWrite+0x12c>)
 800ec20:	b1b7      	cbz	r7, 800ec50 <libGraphicsWrite+0x100>
 800ec22:	f994 7005 	ldrsb.w	r7, [r4, #5]
 800ec26:	44bc      	add	ip, r7
 800ec28:	f9b5 7000 	ldrsh.w	r7, [r5]
 800ec2c:	fb00 770c 	mla	r7, r0, ip, r7
 800ec30:	f8df c058 	ldr.w	ip, [pc, #88]	; 800ec8c <libGraphicsWrite+0x13c>
 800ec34:	f9bc c000 	ldrsh.w	ip, [ip]
 800ec38:	4567      	cmp	r7, ip
 800ec3a:	db09      	blt.n	800ec50 <libGraphicsWrite+0x100>
      cursor_y += textsize*8;
 800ec3c:	f9b1 7000 	ldrsh.w	r7, [r1]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800ec40:	7a9b      	ldrb	r3, [r3, #10]
            cursor_x  = 0;
 800ec42:	f04f 0c00 	mov.w	ip, #0
            cursor_y += (int16_t)textsize *
 800ec46:	fb03 7300 	mla	r3, r3, r0, r7
            cursor_x  = 0;
 800ec4a:	f8a5 c000 	strh.w	ip, [r5]
            cursor_y += (int16_t)textsize *
 800ec4e:	800b      	strh	r3, [r1, #0]
          libGraphicsDrawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 800ec50:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <libGraphicsWrite+0x140>)
 800ec52:	9001      	str	r0, [sp, #4]
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	4b0e      	ldr	r3, [pc, #56]	; (800ec94 <libGraphicsWrite+0x144>)
 800ec5a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	f9b5 0000 	ldrsh.w	r0, [r5]
 800ec64:	f7ff fe48 	bl	800e8f8 <libGraphicsDrawChar>
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 800ec68:	882b      	ldrh	r3, [r5, #0]
 800ec6a:	7921      	ldrb	r1, [r4, #4]
 800ec6c:	7832      	ldrb	r2, [r6, #0]
 800ec6e:	fb01 3302 	mla	r3, r1, r2, r3
 800ec72:	802b      	strh	r3, [r5, #0]
 800ec74:	e7aa      	b.n	800ebcc <libGraphicsWrite+0x7c>
 800ec76:	bf00      	nop
 800ec78:	20005a78 	.word	0x20005a78
 800ec7c:	20005a74 	.word	0x20005a74
 800ec80:	20005a82 	.word	0x20005a82
 800ec84:	20005a72 	.word	0x20005a72
 800ec88:	20005a83 	.word	0x20005a83
 800ec8c:	20005a70 	.word	0x20005a70
 800ec90:	20005a7e 	.word	0x20005a7e
 800ec94:	20005a80 	.word	0x20005a80

0800ec98 <libGraphicsHeight>:
	
int16_t libGraphicsHeight(void){
	return _height;
};
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <libGraphicsHeight+0x8>)
 800ec9a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800ec9e:	4770      	bx	lr
 800eca0:	20005a6e 	.word	0x20005a6e

0800eca4 <libGraphicsWidth>:
	
int16_t libGraphicsWidth(void){
	return _width;
};
 800eca4:	4b01      	ldr	r3, [pc, #4]	; (800ecac <libGraphicsWidth+0x8>)
 800eca6:	f9b3 0000 	ldrsh.w	r0, [r3]
 800ecaa:	4770      	bx	lr
 800ecac:	20005a70 	.word	0x20005a70

0800ecb0 <libGraphicsGetRotation>:
	
uint8_t libGraphicsGetRotation(void){
	return rotation;
};
 800ecb0:	4b01      	ldr	r3, [pc, #4]	; (800ecb8 <libGraphicsGetRotation+0x8>)
 800ecb2:	7818      	ldrb	r0, [r3, #0]
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	20005a7c 	.word	0x20005a7c

0800ecbc <libPacketInit>:
} PACKET_STATE_t;

static PACKET_STATE_t libPacketHandlerStates[PACKET_HANDLERS];

void libPacketInit(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 800ecbc:	b510      	push	{r4, lr}
	libPacketHandlerStates[handler_num].send_func = s_func;
 800ecbe:	4b04      	ldr	r3, [pc, #16]	; (800ecd0 <libPacketInit+0x14>)
 800ecc0:	f44f 6402 	mov.w	r4, #2080	; 0x820
 800ecc4:	fb04 3202 	mla	r2, r4, r2, r3
	libPacketHandlerStates[handler_num].process_func = p_func;
 800ecc8:	e9c2 0101 	strd	r0, r1, [r2, #4]
}
 800eccc:	bd10      	pop	{r4, pc}
 800ecce:	bf00      	nop
 800ecd0:	20005a84 	.word	0x20005a84

0800ecd4 <libPacketSendPacket>:

void libPacketSendPacket(unsigned char *data, unsigned int len, int handler_num) {
	if (len > PACKET_MAX_PL_LEN) {
 800ecd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
void libPacketSendPacket(unsigned char *data, unsigned int len, int handler_num) {
 800ecd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecdc:	4607      	mov	r7, r0
 800ecde:	460d      	mov	r5, r1
	if (len > PACKET_MAX_PL_LEN) {
 800ece0:	d83a      	bhi.n	800ed58 <libPacketSendPacket+0x84>
		return;
	}

	int b_ind = 0;

	if (len <= 256) {
 800ece2:	4e1e      	ldr	r6, [pc, #120]	; (800ed5c <libPacketSendPacket+0x88>)
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len & 0xFF;
	}

	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 800ece4:	f44f 6802 	mov.w	r8, #2080	; 0x820
 800ece8:	fb08 f802 	mul.w	r8, r8, r2
 800ecec:	f44f 6302 	mov.w	r3, #2080	; 0x820
	if (len <= 256) {
 800ecf0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 2;
 800ecf4:	fb03 6302 	mla	r3, r3, r2, r6
	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 800ecf8:	f508 6982 	add.w	r9, r8, #1040	; 0x410
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 2;
 800ecfc:	bf92      	itee	ls
 800ecfe:	2402      	movls	r4, #2
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800ed00:	2403      	movhi	r4, #3
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
 800ed02:	0a28      	lsrhi	r0, r5, #8
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len;
 800ed04:	b2c9      	uxtb	r1, r1
	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 800ed06:	44b1      	add	r9, r6
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 2;
 800ed08:	bf99      	ittee	ls
 800ed0a:	f883 4410 	strbls.w	r4, [r3, #1040]	; 0x410
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len;
 800ed0e:	f883 1411 	strbls.w	r1, [r3, #1041]	; 0x411
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800ed12:	f883 4410 	strbhi.w	r4, [r3, #1040]	; 0x410
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
 800ed16:	f883 0411 	strbhi.w	r0, [r3, #1041]	; 0x411
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 800ed1a:	bf88      	it	hi
 800ed1c:	f883 1412 	strbhi.w	r1, [r3, #1042]	; 0x412
	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 800ed20:	462a      	mov	r2, r5
 800ed22:	4639      	mov	r1, r7
 800ed24:	eb09 0004 	add.w	r0, r9, r4
 800ed28:	f000 fb50 	bl	800f3cc <memcpy>
	b_ind += len;

	unsigned short crc = libCRCCalcCRC16(data, len);
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f7ff fd1a 	bl	800e768 <libCRCCalcCRC16>
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 800ed34:	4446      	add	r6, r8
	b_ind += len;
 800ed36:	442c      	add	r4, r5
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 800ed38:	1933      	adds	r3, r6, r4
 800ed3a:	0a02      	lsrs	r2, r0, #8
 800ed3c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800ed40:	2203      	movs	r2, #3
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 800ed42:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800ed46:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

	if (libPacketHandlerStates[handler_num].send_func) {
 800ed4a:	6873      	ldr	r3, [r6, #4]
 800ed4c:	b123      	cbz	r3, 800ed58 <libPacketSendPacket+0x84>
		libPacketHandlerStates[handler_num].send_func(libPacketHandlerStates[handler_num].tx_buffer, b_ind);
 800ed4e:	18a1      	adds	r1, r4, r2
 800ed50:	4648      	mov	r0, r9
	}
}
 800ed52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		libPacketHandlerStates[handler_num].send_func(libPacketHandlerStates[handler_num].tx_buffer, b_ind);
 800ed56:	4718      	bx	r3
}
 800ed58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5c:	20005a84 	.word	0x20005a84

0800ed60 <libPacketProcessByte>:
		}
	}
}

void libPacketProcessByte(uint8_t rx_data, int handler_num) {
	switch (libPacketHandlerStates[handler_num].rx_state) {
 800ed60:	f44f 6302 	mov.w	r3, #2080	; 0x820
void libPacketProcessByte(uint8_t rx_data, int handler_num) {
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (libPacketHandlerStates[handler_num].rx_state) {
 800ed68:	fb03 f201 	mul.w	r2, r3, r1
 800ed6c:	4d3f      	ldr	r5, [pc, #252]	; (800ee6c <libPacketProcessByte+0x10c>)
 800ed6e:	5caa      	ldrb	r2, [r5, r2]
void libPacketProcessByte(uint8_t rx_data, int handler_num) {
 800ed70:	460e      	mov	r6, r1
	switch (libPacketHandlerStates[handler_num].rx_state) {
 800ed72:	2a06      	cmp	r2, #6
 800ed74:	d877      	bhi.n	800ee66 <libPacketProcessByte+0x106>
 800ed76:	e8df f002 	tbb	[pc, r2]
 800ed7a:	2104      	.short	0x2104
 800ed7c:	5550382c 	.word	0x5550382c
 800ed80:	5a          	.byte	0x5a
 800ed81:	00          	.byte	0x00
	case 0:
		if (rx_data == 2) {
 800ed82:	2802      	cmp	r0, #2
 800ed84:	d10c      	bne.n	800eda0 <libPacketProcessByte+0x40>
			// 1 byte PL len
			libPacketHandlerStates[handler_num].rx_state += 2;
 800ed86:	4373      	muls	r3, r6
 800ed88:	18e9      	adds	r1, r5, r3
 800ed8a:	5cea      	ldrb	r2, [r5, r3]
 800ed8c:	3202      	adds	r2, #2
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	54ea      	strb	r2, [r5, r3]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800ed92:	7048      	strb	r0, [r1, #1]
			libPacketHandlerStates[handler_num].payload_length = 0;
		} else if (rx_data == 3) {
			// 2 byte PL len
			libPacketHandlerStates[handler_num].rx_state++;
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	f8c1 3818 	str.w	r3, [r1, #2072]	; 0x818
			libPacketHandlerStates[handler_num].payload_length = 0;
 800ed9a:	60cb      	str	r3, [r1, #12]

	default:
		libPacketHandlerStates[handler_num].rx_state = 0;
		break;
	}
}
 800ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (rx_data == 3) {
 800eda0:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800eda4:	2803      	cmp	r0, #3
			libPacketHandlerStates[handler_num].rx_state++;
 800eda6:	fb06 f303 	mul.w	r3, r6, r3
		} else if (rx_data == 3) {
 800edaa:	d11b      	bne.n	800ede4 <libPacketProcessByte+0x84>
			libPacketHandlerStates[handler_num].rx_state++;
 800edac:	5cea      	ldrb	r2, [r5, r3]
 800edae:	3201      	adds	r2, #1
 800edb0:	18e9      	adds	r1, r5, r3
 800edb2:	b2d2      	uxtb	r2, r2
 800edb4:	54ea      	strb	r2, [r5, r3]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800edb6:	2302      	movs	r3, #2
 800edb8:	704b      	strb	r3, [r1, #1]
 800edba:	e7eb      	b.n	800ed94 <libPacketProcessByte+0x34>
		libPacketHandlerStates[handler_num].payload_length = (unsigned int)rx_data << 8;
 800edbc:	4373      	muls	r3, r6
 800edbe:	18e9      	adds	r1, r5, r3
 800edc0:	0200      	lsls	r0, r0, #8
 800edc2:	60c8      	str	r0, [r1, #12]
		libPacketHandlerStates[handler_num].rx_state++;
 800edc4:	5cea      	ldrb	r2, [r5, r3]
 800edc6:	3201      	adds	r2, #1
 800edc8:	b2d2      	uxtb	r2, r2
 800edca:	54ea      	strb	r2, [r5, r3]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800edcc:	2302      	movs	r3, #2
 800edce:	704b      	strb	r3, [r1, #1]
		break;
 800edd0:	e7e4      	b.n	800ed9c <libPacketProcessByte+0x3c>
		libPacketHandlerStates[handler_num].payload_length |= (unsigned int)rx_data;
 800edd2:	4373      	muls	r3, r6
 800edd4:	18e9      	adds	r1, r5, r3
 800edd6:	68ca      	ldr	r2, [r1, #12]
 800edd8:	4310      	orrs	r0, r2
 800edda:	60c8      	str	r0, [r1, #12]
		if (libPacketHandlerStates[handler_num].payload_length > 0 &&
 800eddc:	3801      	subs	r0, #1
 800edde:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ede2:	d3ef      	bcc.n	800edc4 <libPacketProcessByte+0x64>
		libPacketHandlerStates[handler_num].rx_state = 0;
 800ede4:	2200      	movs	r2, #0
 800ede6:	54ea      	strb	r2, [r5, r3]
}
 800ede8:	e7d8      	b.n	800ed9c <libPacketProcessByte+0x3c>
		libPacketHandlerStates[handler_num].rx_buffer[libPacketHandlerStates[handler_num].rx_data_ptr++] = rx_data;
 800edea:	fb03 f206 	mul.w	r2, r3, r6
 800edee:	18ab      	adds	r3, r5, r2
 800edf0:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800edf4:	1c4c      	adds	r4, r1, #1
 800edf6:	f8c3 4818 	str.w	r4, [r3, #2072]	; 0x818
 800edfa:	4419      	add	r1, r3
		if (libPacketHandlerStates[handler_num].rx_data_ptr == libPacketHandlerStates[handler_num].payload_length) {
 800edfc:	68db      	ldr	r3, [r3, #12]
		libPacketHandlerStates[handler_num].rx_buffer[libPacketHandlerStates[handler_num].rx_data_ptr++] = rx_data;
 800edfe:	7408      	strb	r0, [r1, #16]
		if (libPacketHandlerStates[handler_num].rx_data_ptr == libPacketHandlerStates[handler_num].payload_length) {
 800ee00:	429c      	cmp	r4, r3
			libPacketHandlerStates[handler_num].rx_state++;
 800ee02:	bf01      	itttt	eq
 800ee04:	5cab      	ldrbeq	r3, [r5, r2]
 800ee06:	3301      	addeq	r3, #1
 800ee08:	b2db      	uxtbeq	r3, r3
 800ee0a:	54ab      	strbeq	r3, [r5, r2]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800ee0c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800ee10:	fb03 5306 	mla	r3, r3, r6, r5
 800ee14:	2202      	movs	r2, #2
 800ee16:	705a      	strb	r2, [r3, #1]
		break;
 800ee18:	e7c0      	b.n	800ed9c <libPacketProcessByte+0x3c>
		libPacketHandlerStates[handler_num].crc_high = rx_data;
 800ee1a:	4373      	muls	r3, r6
 800ee1c:	18e9      	adds	r1, r5, r3
 800ee1e:	f881 081d 	strb.w	r0, [r1, #2077]	; 0x81d
		libPacketHandlerStates[handler_num].rx_state++;
 800ee22:	e7cf      	b.n	800edc4 <libPacketProcessByte+0x64>
		libPacketHandlerStates[handler_num].crc_low = rx_data;
 800ee24:	4373      	muls	r3, r6
 800ee26:	18e9      	adds	r1, r5, r3
 800ee28:	f881 081c 	strb.w	r0, [r1, #2076]	; 0x81c
 800ee2c:	e7ca      	b.n	800edc4 <libPacketProcessByte+0x64>
		if (rx_data == 3) {
 800ee2e:	2803      	cmp	r0, #3
 800ee30:	d117      	bne.n	800ee62 <libPacketProcessByte+0x102>
			if (libCRCCalcCRC16(libPacketHandlerStates[handler_num].rx_buffer, libPacketHandlerStates[handler_num].payload_length)
 800ee32:	fb03 f406 	mul.w	r4, r3, r6
 800ee36:	f104 0710 	add.w	r7, r4, #16
 800ee3a:	eb05 0804 	add.w	r8, r5, r4
 800ee3e:	442f      	add	r7, r5
 800ee40:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ee44:	4638      	mov	r0, r7
 800ee46:	f7ff fc8f 	bl	800e768 <libCRCCalcCRC16>
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <libPacketProcessByte+0x110>)
 800ee4c:	441c      	add	r4, r3
 800ee4e:	88a3      	ldrh	r3, [r4, #4]
 800ee50:	4283      	cmp	r3, r0
 800ee52:	d106      	bne.n	800ee62 <libPacketProcessByte+0x102>
				if (libPacketHandlerStates[handler_num].process_func) {
 800ee54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee58:	b11b      	cbz	r3, 800ee62 <libPacketProcessByte+0x102>
					libPacketHandlerStates[handler_num].process_func(libPacketHandlerStates[handler_num].rx_buffer,
 800ee5a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ee5e:	4638      	mov	r0, r7
 800ee60:	4798      	blx	r3
		libPacketHandlerStates[handler_num].rx_state = 0;
 800ee62:	f44f 6302 	mov.w	r3, #2080	; 0x820
		libPacketHandlerStates[handler_num].rx_state = 0;
 800ee66:	4373      	muls	r3, r6
 800ee68:	e7bc      	b.n	800ede4 <libPacketProcessByte+0x84>
 800ee6a:	bf00      	nop
 800ee6c:	20005a84 	.word	0x20005a84
 800ee70:	2000629c 	.word	0x2000629c

0800ee74 <libRingBufferNextEndIndex>:
  return 0;
};

/////// PRIVATE METHODS //////////
// get next empty index
int libRingBufferNextEndIndex(libRingBufferTypedef *self) {
 800ee74:	b538      	push	{r3, r4, r5, lr}
  //buffer is full
  if (self->isFull(self)) return -1;
 800ee76:	6a43      	ldr	r3, [r0, #36]	; 0x24
int libRingBufferNextEndIndex(libRingBufferTypedef *self) {
 800ee78:	4604      	mov	r4, r0
  if (self->isFull(self)) return -1;
 800ee7a:	4798      	blx	r3
 800ee7c:	b968      	cbnz	r0, 800ee9a <libRingBufferNextEndIndex+0x26>
  //if empty dont incriment
  return (self->end+(unsigned int)!self->isEmpty(self))%self->len;
 800ee7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee80:	6925      	ldr	r5, [r4, #16]
 800ee82:	4620      	mov	r0, r4
 800ee84:	4798      	blx	r3
 800ee86:	f080 0301 	eor.w	r3, r0, #1
 800ee8a:	6860      	ldr	r0, [r4, #4]
 800ee8c:	fa55 f383 	uxtab	r3, r5, r3
 800ee90:	fbb3 f2f0 	udiv	r2, r3, r0
 800ee94:	fb00 3012 	mls	r0, r0, r2, r3
};
 800ee98:	bd38      	pop	{r3, r4, r5, pc}
  if (self->isFull(self)) return -1;
 800ee9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee9e:	e7fb      	b.n	800ee98 <libRingBufferNextEndIndex+0x24>

0800eea0 <libRingBufferIncrEnd>:

// incriment index of RingBuf struct, only call if safe to do so
int libRingBufferIncrEnd(libRingBufferTypedef *self) {
  self->end = (self->end+1)%self->len;
 800eea0:	6903      	ldr	r3, [r0, #16]
int libRingBufferIncrEnd(libRingBufferTypedef *self) {
 800eea2:	4602      	mov	r2, r0
  self->end = (self->end+1)%self->len;
 800eea4:	6840      	ldr	r0, [r0, #4]
 800eea6:	3301      	adds	r3, #1
 800eea8:	fbb3 f1f0 	udiv	r1, r3, r0
 800eeac:	fb00 3011 	mls	r0, r0, r1, r3
 800eeb0:	6110      	str	r0, [r2, #16]
  return self->end;
};
 800eeb2:	4770      	bx	lr

0800eeb4 <libRingBufferIncrStart>:


// incriment index of RingBuf struct, only call if safe to do so
int libRingBufferIncrStart(libRingBufferTypedef *self) {
  self->start = (self->start+1)%self->len;
 800eeb4:	68c3      	ldr	r3, [r0, #12]
int libRingBufferIncrStart(libRingBufferTypedef *self) {
 800eeb6:	4602      	mov	r2, r0
  self->start = (self->start+1)%self->len;
 800eeb8:	6840      	ldr	r0, [r0, #4]
 800eeba:	3301      	adds	r3, #1
 800eebc:	fbb3 f1f0 	udiv	r1, r3, r0
 800eec0:	fb00 3011 	mls	r0, r0, r1, r3
 800eec4:	60d0      	str	r0, [r2, #12]
  return self->start;
};
 800eec6:	4770      	bx	lr

0800eec8 <libRingBufferNumElements>:
  unsigned int elements;

  elements = self->elements;
	
  return elements;
}
 800eec8:	6940      	ldr	r0, [r0, #20]
 800eeca:	4770      	bx	lr

0800eecc <libRingBufferIsFull>:

// Returns true if buffer is full
bool libRingBufferIsFull(libRingBufferTypedef *self) {
  bool ret;

  ret = self->elements == self->len;  
 800eecc:	6942      	ldr	r2, [r0, #20]
 800eece:	6840      	ldr	r0, [r0, #4]

  return ret;
}
 800eed0:	1a13      	subs	r3, r2, r0
 800eed2:	4258      	negs	r0, r3
 800eed4:	4158      	adcs	r0, r3
 800eed6:	4770      	bx	lr

0800eed8 <libRingBufferIsEmpty>:

// Returns true if buffer is empty
bool libRingBufferIsEmpty(libRingBufferTypedef *self) {
  bool ret;

  ret = !self->elements;
 800eed8:	6940      	ldr	r0, [r0, #20]

  return ret;
}
 800eeda:	fab0 f080 	clz	r0, r0
 800eede:	0940      	lsrs	r0, r0, #5
 800eee0:	4770      	bx	lr

0800eee2 <libRingBufferAdd>:
int libRingBufferAdd(libRingBufferTypedef *self, const void *object) {
 800eee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	index = self->next_end_index(self);
 800eee4:	6983      	ldr	r3, [r0, #24]
int libRingBufferAdd(libRingBufferTypedef *self, const void *object) {
 800eee6:	9101      	str	r1, [sp, #4]
 800eee8:	4604      	mov	r4, r0
	index = self->next_end_index(self);
 800eeea:	4798      	blx	r3
	if (index >= 0) {
 800eeec:	1e05      	subs	r5, r0, #0
 800eeee:	db10      	blt.n	800ef12 <libRingBufferAdd+0x30>
		memcpy(self->buf + index*self->size, object, self->size);
 800eef0:	6820      	ldr	r0, [r4, #0]
 800eef2:	68a2      	ldr	r2, [r4, #8]
 800eef4:	9901      	ldr	r1, [sp, #4]
 800eef6:	fb02 0005 	mla	r0, r2, r5, r0
 800eefa:	f000 fa67 	bl	800f3cc <memcpy>
		if (!self->isEmpty(self)) self->incr_end_index(self);
 800eefe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef00:	4620      	mov	r0, r4
 800ef02:	4798      	blx	r3
 800ef04:	b910      	cbnz	r0, 800ef0c <libRingBufferAdd+0x2a>
 800ef06:	69e3      	ldr	r3, [r4, #28]
 800ef08:	4620      	mov	r0, r4
 800ef0a:	4798      	blx	r3
		self->elements++;
 800ef0c:	6963      	ldr	r3, [r4, #20]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	6163      	str	r3, [r4, #20]
}
 800ef12:	4628      	mov	r0, r5
 800ef14:	b003      	add	sp, #12
 800ef16:	bd30      	pop	{r4, r5, pc}

0800ef18 <libRingBufferPeek>:
void *libRingBufferPeek(libRingBufferTypedef *self, unsigned int num) {
 800ef18:	b538      	push	{r3, r4, r5, lr}
	if (self->isEmpty(self) || num > self->elements - 1)
 800ef1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
void *libRingBufferPeek(libRingBufferTypedef *self, unsigned int num) {
 800ef1c:	4605      	mov	r5, r0
 800ef1e:	460c      	mov	r4, r1
	if (self->isEmpty(self) || num > self->elements - 1)
 800ef20:	4798      	blx	r3
 800ef22:	b978      	cbnz	r0, 800ef44 <libRingBufferPeek+0x2c>
 800ef24:	696b      	ldr	r3, [r5, #20]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	42a3      	cmp	r3, r4
 800ef2a:	d30a      	bcc.n	800ef42 <libRingBufferPeek+0x2a>
		ret = &self->buf[((self->start + num)%self->len)*self->size];
 800ef2c:	68e8      	ldr	r0, [r5, #12]
 800ef2e:	68ab      	ldr	r3, [r5, #8]
 800ef30:	4404      	add	r4, r0
 800ef32:	6868      	ldr	r0, [r5, #4]
 800ef34:	fbb4 f1f0 	udiv	r1, r4, r0
 800ef38:	fb00 4411 	mls	r4, r0, r1, r4
 800ef3c:	6828      	ldr	r0, [r5, #0]
 800ef3e:	fb03 0004 	mla	r0, r3, r4, r0
}
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
 800ef44:	2000      	movs	r0, #0
 800ef46:	e7fc      	b.n	800ef42 <libRingBufferPeek+0x2a>

0800ef48 <libRingBufferPull>:
void *libRingBufferPull(libRingBufferTypedef *self, void *object) {
 800ef48:	b538      	push	{r3, r4, r5, lr}
	if (self->isEmpty(self))
 800ef4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
void *libRingBufferPull(libRingBufferTypedef *self, void *object) {
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	460d      	mov	r5, r1
	if (self->isEmpty(self))
 800ef50:	4798      	blx	r3
 800ef52:	b998      	cbnz	r0, 800ef7c <libRingBufferPull+0x34>
		memcpy(object, self->buf+self->start*self->size, self->size);
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	68e1      	ldr	r1, [r4, #12]
 800ef58:	68a2      	ldr	r2, [r4, #8]
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	fb01 3102 	mla	r1, r1, r2, r3
 800ef60:	f000 fa34 	bl	800f3cc <memcpy>
		self->elements--;
 800ef64:	6963      	ldr	r3, [r4, #20]
 800ef66:	3b01      	subs	r3, #1
 800ef68:	6163      	str	r3, [r4, #20]
		if (!self->isEmpty(self)) self->incr_start_index(self);
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef6e:	4798      	blx	r3
 800ef70:	b910      	cbnz	r0, 800ef78 <libRingBufferPull+0x30>
 800ef72:	6a23      	ldr	r3, [r4, #32]
 800ef74:	4620      	mov	r0, r4
 800ef76:	4798      	blx	r3
}
 800ef78:	4628      	mov	r0, r5
 800ef7a:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
 800ef7c:	2500      	movs	r5, #0
 800ef7e:	e7fb      	b.n	800ef78 <libRingBufferPull+0x30>

0800ef80 <libRingBufferInit>:
int libRingBufferInit(libRingBufferTypedef *self, int size, int len) {
 800ef80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef82:	4615      	mov	r5, r2
  self->buf = (unsigned char *)malloc(size*len);
 800ef84:	434a      	muls	r2, r1
int libRingBufferInit(libRingBufferTypedef *self, int size, int len) {
 800ef86:	4604      	mov	r4, r0
  self->buf = (unsigned char *)malloc(size*len);
 800ef88:	4610      	mov	r0, r2
int libRingBufferInit(libRingBufferTypedef *self, int size, int len) {
 800ef8a:	460e      	mov	r6, r1
  self->buf = (unsigned char *)malloc(size*len);
 800ef8c:	9201      	str	r2, [sp, #4]
 800ef8e:	f000 f9fd 	bl	800f38c <malloc>
 800ef92:	6020      	str	r0, [r4, #0]
  if (!self->buf) return -1;
 800ef94:	b1e8      	cbz	r0, 800efd2 <libRingBufferInit+0x52>
  memset(self->buf, 0, size*len);
 800ef96:	9a01      	ldr	r2, [sp, #4]
 800ef98:	2100      	movs	r1, #0
 800ef9a:	f000 fa25 	bl	800f3e8 <memset>
  self->next_end_index = &libRingBufferNextEndIndex;
 800ef9e:	4b0e      	ldr	r3, [pc, #56]	; (800efd8 <libRingBufferInit+0x58>)
 800efa0:	61a3      	str	r3, [r4, #24]
  self->incr_end_index = &libRingBufferIncrEnd;
 800efa2:	4b0e      	ldr	r3, [pc, #56]	; (800efdc <libRingBufferInit+0x5c>)
 800efa4:	61e3      	str	r3, [r4, #28]
  self->incr_start_index = &libRingBufferIncrStart;
 800efa6:	4b0e      	ldr	r3, [pc, #56]	; (800efe0 <libRingBufferInit+0x60>)
 800efa8:	6223      	str	r3, [r4, #32]
  self->isFull = &libRingBufferIsFull;
 800efaa:	4b0e      	ldr	r3, [pc, #56]	; (800efe4 <libRingBufferInit+0x64>)
 800efac:	6263      	str	r3, [r4, #36]	; 0x24
  self->isEmpty = &libRingBufferIsEmpty;
 800efae:	4b0e      	ldr	r3, [pc, #56]	; (800efe8 <libRingBufferInit+0x68>)
 800efb0:	62a3      	str	r3, [r4, #40]	; 0x28
  self->add = &libRingBufferAdd;
 800efb2:	4b0e      	ldr	r3, [pc, #56]	; (800efec <libRingBufferInit+0x6c>)
 800efb4:	6323      	str	r3, [r4, #48]	; 0x30
  self->start = 0;
 800efb6:	2000      	movs	r0, #0
  self->numElements = &libRingBufferNumElements;
 800efb8:	4b0d      	ldr	r3, [pc, #52]	; (800eff0 <libRingBufferInit+0x70>)
 800efba:	62e3      	str	r3, [r4, #44]	; 0x2c
  self->len = len;
 800efbc:	e9c4 5601 	strd	r5, r6, [r4, #4]
  self->peek = &libRingBufferPeek;
 800efc0:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <libRingBufferInit+0x74>)
 800efc2:	6363      	str	r3, [r4, #52]	; 0x34
  self->end = 0;
 800efc4:	e9c4 0003 	strd	r0, r0, [r4, #12]
  self->pull = &libRingBufferPull;
 800efc8:	4b0b      	ldr	r3, [pc, #44]	; (800eff8 <libRingBufferInit+0x78>)
  self->elements = 0;
 800efca:	6160      	str	r0, [r4, #20]
  self->pull = &libRingBufferPull;
 800efcc:	63a3      	str	r3, [r4, #56]	; 0x38
};
 800efce:	b002      	add	sp, #8
 800efd0:	bd70      	pop	{r4, r5, r6, pc}
  if (!self->buf) return -1;
 800efd2:	f04f 30ff 	mov.w	r0, #4294967295
 800efd6:	e7fa      	b.n	800efce <libRingBufferInit+0x4e>
 800efd8:	0800ee75 	.word	0x0800ee75
 800efdc:	0800eea1 	.word	0x0800eea1
 800efe0:	0800eeb5 	.word	0x0800eeb5
 800efe4:	0800eecd 	.word	0x0800eecd
 800efe8:	0800eed9 	.word	0x0800eed9
 800efec:	0800eee3 	.word	0x0800eee3
 800eff0:	0800eec9 	.word	0x0800eec9
 800eff4:	0800ef19 	.word	0x0800ef19
 800eff8:	0800ef49 	.word	0x0800ef49

0800effc <libRingBufferNew>:
libRingBufferTypedef *libRingBufferNew(int size, int len) {
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	4605      	mov	r5, r0
  libRingBufferTypedef *self = (libRingBufferTypedef *)malloc(sizeof(libRingBufferTypedef));
 800f000:	203c      	movs	r0, #60	; 0x3c
libRingBufferTypedef *libRingBufferNew(int size, int len) {
 800f002:	460e      	mov	r6, r1
  libRingBufferTypedef *self = (libRingBufferTypedef *)malloc(sizeof(libRingBufferTypedef));
 800f004:	f000 f9c2 	bl	800f38c <malloc>
  if (!self)
 800f008:	4604      	mov	r4, r0
 800f00a:	b170      	cbz	r0, 800f02a <libRingBufferNew+0x2e>
  memset(self, 0, sizeof(libRingBufferTypedef));
 800f00c:	223c      	movs	r2, #60	; 0x3c
 800f00e:	2100      	movs	r1, #0
 800f010:	f000 f9ea 	bl	800f3e8 <memset>
  if (libRingBufferInit(self, size, len) < 0) {
 800f014:	4632      	mov	r2, r6
 800f016:	4629      	mov	r1, r5
 800f018:	4620      	mov	r0, r4
 800f01a:	f7ff ffb1 	bl	800ef80 <libRingBufferInit>
 800f01e:	2800      	cmp	r0, #0
 800f020:	da03      	bge.n	800f02a <libRingBufferNew+0x2e>
    free(self);
 800f022:	4620      	mov	r0, r4
 800f024:	f000 f9ba 	bl	800f39c <free>
    return NULL;
 800f028:	2400      	movs	r4, #0
};
 800f02a:	4620      	mov	r0, r4
 800f02c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f030 <libMempools_alloc_conf>:
// Private variables
static conf_container_t m_confs[LIBMEMPOOLS_CONF_NUM] = {{0}};
static int m_conf_highest = 0;

main_config_t *libMempools_alloc_conf(void) {
	for (int i = 0;i < LIBMEMPOOLS_CONF_NUM;i++) {
 800f030:	4a10      	ldr	r2, [pc, #64]	; (800f074 <libMempools_alloc_conf+0x44>)
		if (i > m_conf_highest) {
			m_conf_highest = i;
		}
		if (!m_confs[i].is_taken) {
 800f032:	4811      	ldr	r0, [pc, #68]	; (800f078 <libMempools_alloc_conf+0x48>)
 800f034:	6811      	ldr	r1, [r2, #0]
main_config_t *libMempools_alloc_conf(void) {
 800f036:	b570      	push	{r4, r5, r6, lr}
 800f038:	2400      	movs	r4, #0
	for (int i = 0;i < LIBMEMPOOLS_CONF_NUM;i++) {
 800f03a:	4623      	mov	r3, r4
		if (!m_confs[i].is_taken) {
 800f03c:	2533      	movs	r5, #51	; 0x33
 800f03e:	fb05 f603 	mul.w	r6, r5, r3
		if (i > m_conf_highest) {
 800f042:	4299      	cmp	r1, r3
		if (!m_confs[i].is_taken) {
 800f044:	5d86      	ldrb	r6, [r0, r6]
 800f046:	bfbc      	itt	lt
 800f048:	4619      	movlt	r1, r3
 800f04a:	2401      	movlt	r4, #1
 800f04c:	b946      	cbnz	r6, 800f060 <libMempools_alloc_conf+0x30>
 800f04e:	b104      	cbz	r4, 800f052 <libMempools_alloc_conf+0x22>
 800f050:	6011      	str	r1, [r2, #0]
			m_confs[i].is_taken = true;
 800f052:	2233      	movs	r2, #51	; 0x33
 800f054:	4353      	muls	r3, r2
 800f056:	2201      	movs	r2, #1
 800f058:	54c2      	strb	r2, [r0, r3]
			return &m_confs[i].conf;
 800f05a:	4413      	add	r3, r2
 800f05c:	4418      	add	r0, r3
	}

	m_conf_highest++;

	return 0;
}
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0;i < LIBMEMPOOLS_CONF_NUM;i++) {
 800f060:	3301      	adds	r3, #1
 800f062:	2b0a      	cmp	r3, #10
 800f064:	d1eb      	bne.n	800f03e <libMempools_alloc_conf+0xe>
 800f066:	b104      	cbz	r4, 800f06a <libMempools_alloc_conf+0x3a>
 800f068:	6011      	str	r1, [r2, #0]
	m_conf_highest++;
 800f06a:	6813      	ldr	r3, [r2, #0]
 800f06c:	3301      	adds	r3, #1
 800f06e:	6013      	str	r3, [r2, #0]
	return 0;
 800f070:	2000      	movs	r0, #0
 800f072:	e7f4      	b.n	800f05e <libMempools_alloc_conf+0x2e>
 800f074:	20006ac4 	.word	0x20006ac4
 800f078:	20006ac8 	.word	0x20006ac8

0800f07c <libMempools_free_conf>:

void libMempools_free_conf(main_config_t *conf) {
	for (int i = 0;i < LIBMEMPOOLS_CONF_NUM;i++) {
 800f07c:	4a07      	ldr	r2, [pc, #28]	; (800f09c <libMempools_free_conf+0x20>)
 800f07e:	2300      	movs	r3, #0
		if (&m_confs[i].conf == conf) {
 800f080:	4282      	cmp	r2, r0
 800f082:	d105      	bne.n	800f090 <libMempools_free_conf+0x14>
			m_confs[i].is_taken = false;
 800f084:	2233      	movs	r2, #51	; 0x33
 800f086:	4353      	muls	r3, r2
 800f088:	4a05      	ldr	r2, [pc, #20]	; (800f0a0 <libMempools_free_conf+0x24>)
 800f08a:	2100      	movs	r1, #0
 800f08c:	54d1      	strb	r1, [r2, r3]
			return;
 800f08e:	4770      	bx	lr
	for (int i = 0;i < LIBMEMPOOLS_CONF_NUM;i++) {
 800f090:	3301      	adds	r3, #1
 800f092:	2b0a      	cmp	r3, #10
 800f094:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800f098:	d1f2      	bne.n	800f080 <libMempools_free_conf+0x4>
		}
	}
}
 800f09a:	4770      	bx	lr
 800f09c:	20006ac9 	.word	0x20006ac9
 800f0a0:	20006ac8 	.word	0x20006ac8

0800f0a4 <confparser_serialize_main_config_t>:

#include "libBuffer.h"
#include "conf_default.h"
#include "confparser.h"

int32_t confparser_serialize_main_config_t(uint8_t *buffer, const main_config_t *conf) {
 800f0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int32_t ind = 0;
 800f0a6:	2300      	movs	r3, #0
int32_t confparser_serialize_main_config_t(uint8_t *buffer, const main_config_t *conf) {
 800f0a8:	460d      	mov	r5, r1

	libBufferAppend_uint32(buffer, MAIN_CONFIG_T_SIGNATURE, &ind);
 800f0aa:	aa01      	add	r2, sp, #4
 800f0ac:	4937      	ldr	r1, [pc, #220]	; (800f18c <confparser_serialize_main_config_t+0xe8>)
	int32_t ind = 0;
 800f0ae:	9301      	str	r3, [sp, #4]
int32_t confparser_serialize_main_config_t(uint8_t *buffer, const main_config_t *conf) {
 800f0b0:	4604      	mov	r4, r0
	libBufferAppend_uint32(buffer, MAIN_CONFIG_T_SIGNATURE, &ind);
 800f0b2:	f7ff fa6c 	bl	800e58e <libBufferAppend_uint32>

	buffer[ind++] = (uint8_t)conf->controller_id;
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	782a      	ldrb	r2, [r5, #0]
 800f0ba:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->can_baud_rate;
 800f0bc:	1c9a      	adds	r2, r3, #2
 800f0be:	4423      	add	r3, r4
 800f0c0:	9201      	str	r2, [sp, #4]
 800f0c2:	786a      	ldrb	r2, [r5, #1]
 800f0c4:	705a      	strb	r2, [r3, #1]
	libBufferAppend_int16(buffer, conf->cell_num, &ind);
 800f0c6:	f8d5 1002 	ldr.w	r1, [r5, #2]
 800f0ca:	aa01      	add	r2, sp, #4
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	b209      	sxth	r1, r1
 800f0d0:	f7ff fa32 	bl	800e538 <libBufferAppend_int16>
	libBufferAppend_int16(buffer, conf->temp_num, &ind);
 800f0d4:	f8d5 1006 	ldr.w	r1, [r5, #6]
 800f0d8:	aa01      	add	r2, sp, #4
 800f0da:	4620      	mov	r0, r4
 800f0dc:	b209      	sxth	r1, r1
 800f0de:	f7ff fa2b 	bl	800e538 <libBufferAppend_int16>
	libBufferAppend_float32_auto(buffer, conf->balance_start_voltage, &ind);
 800f0e2:	f8d5 300a 	ldr.w	r3, [r5, #10]
 800f0e6:	a901      	add	r1, sp, #4
 800f0e8:	ee00 3a10 	vmov	s0, r3
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7ff fa97 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float32_auto(buffer, conf->balance_difference_threshold, &ind);
 800f0f2:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800f0f6:	a901      	add	r1, sp, #4
 800f0f8:	ee00 3a10 	vmov	s0, r3
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f7ff fa8f 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float32_auto(buffer, conf->soft_overvoltage, &ind);
 800f102:	f8d5 3012 	ldr.w	r3, [r5, #18]
 800f106:	a901      	add	r1, sp, #4
 800f108:	ee00 3a10 	vmov	s0, r3
 800f10c:	4620      	mov	r0, r4
 800f10e:	f7ff fa87 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float32_auto(buffer, conf->soft_undervoltage, &ind);
 800f112:	f8d5 3016 	ldr.w	r3, [r5, #22]
 800f116:	a901      	add	r1, sp, #4
 800f118:	ee00 3a10 	vmov	s0, r3
 800f11c:	4620      	mov	r0, r4
 800f11e:	f7ff fa7f 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float32_auto(buffer, conf->hard_overvoltage, &ind);
 800f122:	f8d5 301a 	ldr.w	r3, [r5, #26]
 800f126:	a901      	add	r1, sp, #4
 800f128:	ee00 3a10 	vmov	s0, r3
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff fa77 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float32_auto(buffer, conf->hard_undervoltage, &ind);
 800f132:	f8d5 301e 	ldr.w	r3, [r5, #30]
 800f136:	a901      	add	r1, sp, #4
 800f138:	ee00 3a10 	vmov	s0, r3
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7ff fa6f 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_float16(buffer, conf->t_charge_max, 10, &ind);
 800f142:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
 800f146:	a901      	add	r1, sp, #4
 800f148:	ee00 3a10 	vmov	s0, r3
 800f14c:	4620      	mov	r0, r4
 800f14e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800f152:	f7ff fa51 	bl	800e5f8 <libBufferAppend_float16>
	libBufferAppend_float16(buffer, conf->t_discharge_max, 10, &ind);
 800f156:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 800f15a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800f15e:	ee00 3a10 	vmov	s0, r3
 800f162:	a901      	add	r1, sp, #4
 800f164:	4620      	mov	r0, r4
 800f166:	f7ff fa47 	bl	800e5f8 <libBufferAppend_float16>
	libBufferAppend_float32_auto(buffer, conf->not_used_current_threshold, &ind);
 800f16a:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 800f16e:	a901      	add	r1, sp, #4
 800f170:	ee00 3a10 	vmov	s0, r3
 800f174:	4620      	mov	r0, r4
 800f176:	f7ff fa53 	bl	800e620 <libBufferAppend_float32_auto>
	libBufferAppend_int32(buffer, conf->not_used_timeout, &ind);
 800f17a:	4620      	mov	r0, r4
 800f17c:	f8d5 102e 	ldr.w	r1, [r5, #46]	; 0x2e
 800f180:	aa01      	add	r2, sp, #4
 800f182:	f7ff f9ef 	bl	800e564 <libBufferAppend_int32>

	return ind;
}
 800f186:	9801      	ldr	r0, [sp, #4]
 800f188:	b003      	add	sp, #12
 800f18a:	bd30      	pop	{r4, r5, pc}
 800f18c:	d89baff6 	.word	0xd89baff6

0800f190 <confparser_deserialize_main_config_t>:

bool confparser_deserialize_main_config_t(const uint8_t *buffer, main_config_t *conf) {
 800f190:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f192:	460c      	mov	r4, r1
	int32_t ind = 0;
 800f194:	2600      	movs	r6, #0

	uint32_t signature = libBufferGet_uint32(buffer, &ind);
 800f196:	a901      	add	r1, sp, #4
bool confparser_deserialize_main_config_t(const uint8_t *buffer, main_config_t *conf) {
 800f198:	4605      	mov	r5, r0
	int32_t ind = 0;
 800f19a:	9601      	str	r6, [sp, #4]
	uint32_t signature = libBufferGet_uint32(buffer, &ind);
 800f19c:	f7ff faa3 	bl	800e6e6 <libBufferGet_uint32>
	if (signature != MAIN_CONFIG_T_SIGNATURE) {
 800f1a0:	4b36      	ldr	r3, [pc, #216]	; (800f27c <confparser_deserialize_main_config_t+0xec>)
 800f1a2:	4298      	cmp	r0, r3
 800f1a4:	d168      	bne.n	800f278 <confparser_deserialize_main_config_t+0xe8>
		return false;
	}

	conf->controller_id = buffer[ind++];
 800f1a6:	9b01      	ldr	r3, [sp, #4]
 800f1a8:	5cea      	ldrb	r2, [r5, r3]
 800f1aa:	7022      	strb	r2, [r4, #0]
	conf->can_baud_rate = buffer[ind++];
 800f1ac:	1c9a      	adds	r2, r3, #2
 800f1ae:	442b      	add	r3, r5
	conf->cell_num = libBufferGet_int16(buffer, &ind);
 800f1b0:	a901      	add	r1, sp, #4
	conf->can_baud_rate = buffer[ind++];
 800f1b2:	785b      	ldrb	r3, [r3, #1]
 800f1b4:	7063      	strb	r3, [r4, #1]
	conf->cell_num = libBufferGet_int16(buffer, &ind);
 800f1b6:	4628      	mov	r0, r5
	conf->can_baud_rate = buffer[ind++];
 800f1b8:	9201      	str	r2, [sp, #4]
	conf->cell_num = libBufferGet_int16(buffer, &ind);
 800f1ba:	f7ff fa70 	bl	800e69e <libBufferGet_int16>
	conf->temp_num = libBufferGet_int16(buffer, &ind);
 800f1be:	a901      	add	r1, sp, #4
	conf->cell_num = libBufferGet_int16(buffer, &ind);
 800f1c0:	f8c4 0002 	str.w	r0, [r4, #2]
	conf->temp_num = libBufferGet_int16(buffer, &ind);
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f7ff fa6a 	bl	800e69e <libBufferGet_int16>
	conf->balance_start_voltage = libBufferGet_float32_auto(buffer, &ind);
 800f1ca:	a901      	add	r1, sp, #4
	conf->temp_num = libBufferGet_int16(buffer, &ind);
 800f1cc:	f8c4 0006 	str.w	r0, [r4, #6]
	conf->balance_start_voltage = libBufferGet_float32_auto(buffer, &ind);
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f7ff faa3 	bl	800e71c <libBufferGet_float32_auto>
 800f1d6:	ee10 3a10 	vmov	r3, s0
	conf->balance_difference_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f1da:	a901      	add	r1, sp, #4
	conf->balance_start_voltage = libBufferGet_float32_auto(buffer, &ind);
 800f1dc:	f8c4 300a 	str.w	r3, [r4, #10]
	conf->balance_difference_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	f7ff fa9b 	bl	800e71c <libBufferGet_float32_auto>
 800f1e6:	ee10 3a10 	vmov	r3, s0
	conf->soft_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f1ea:	a901      	add	r1, sp, #4
	conf->balance_difference_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f1ec:	f8c4 300e 	str.w	r3, [r4, #14]
	conf->soft_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	f7ff fa93 	bl	800e71c <libBufferGet_float32_auto>
 800f1f6:	ee10 3a10 	vmov	r3, s0
	conf->soft_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f1fa:	a901      	add	r1, sp, #4
	conf->soft_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f1fc:	f8c4 3012 	str.w	r3, [r4, #18]
	conf->soft_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f200:	4628      	mov	r0, r5
 800f202:	f7ff fa8b 	bl	800e71c <libBufferGet_float32_auto>
 800f206:	ee10 3a10 	vmov	r3, s0
	conf->hard_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f20a:	a901      	add	r1, sp, #4
	conf->soft_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f20c:	f8c4 3016 	str.w	r3, [r4, #22]
	conf->hard_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f210:	4628      	mov	r0, r5
 800f212:	f7ff fa83 	bl	800e71c <libBufferGet_float32_auto>
 800f216:	ee10 3a10 	vmov	r3, s0
	conf->hard_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f21a:	a901      	add	r1, sp, #4
	conf->hard_overvoltage = libBufferGet_float32_auto(buffer, &ind);
 800f21c:	f8c4 301a 	str.w	r3, [r4, #26]
	conf->hard_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f220:	4628      	mov	r0, r5
 800f222:	f7ff fa7b 	bl	800e71c <libBufferGet_float32_auto>
 800f226:	ee10 3a10 	vmov	r3, s0
	conf->t_charge_max = libBufferGet_float16(buffer, 10, &ind);
 800f22a:	a901      	add	r1, sp, #4
	conf->hard_undervoltage = libBufferGet_float32_auto(buffer, &ind);
 800f22c:	f8c4 301e 	str.w	r3, [r4, #30]
	conf->t_charge_max = libBufferGet_float16(buffer, 10, &ind);
 800f230:	4628      	mov	r0, r5
 800f232:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f236:	f7ff fa66 	bl	800e706 <libBufferGet_float16>
 800f23a:	ee10 3a10 	vmov	r3, s0
	conf->t_discharge_max = libBufferGet_float16(buffer, 10, &ind);
 800f23e:	a901      	add	r1, sp, #4
	conf->t_charge_max = libBufferGet_float16(buffer, 10, &ind);
 800f240:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
	conf->t_discharge_max = libBufferGet_float16(buffer, 10, &ind);
 800f244:	4628      	mov	r0, r5
 800f246:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f24a:	f7ff fa5c 	bl	800e706 <libBufferGet_float16>
 800f24e:	ee10 3a10 	vmov	r3, s0
	conf->not_used_current_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f252:	a901      	add	r1, sp, #4
	conf->t_discharge_max = libBufferGet_float16(buffer, 10, &ind);
 800f254:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
	conf->not_used_current_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f258:	4628      	mov	r0, r5
 800f25a:	f7ff fa5f 	bl	800e71c <libBufferGet_float32_auto>
 800f25e:	ee10 3a10 	vmov	r3, s0
	conf->not_used_timeout = libBufferGet_int32(buffer, &ind);
 800f262:	a901      	add	r1, sp, #4
	conf->not_used_current_threshold = libBufferGet_float32_auto(buffer, &ind);
 800f264:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
	conf->not_used_timeout = libBufferGet_int32(buffer, &ind);
 800f268:	4628      	mov	r0, r5
 800f26a:	f7ff fa2c 	bl	800e6c6 <libBufferGet_int32>
 800f26e:	f8c4 002e 	str.w	r0, [r4, #46]	; 0x2e

	return true;
 800f272:	2001      	movs	r0, #1
}
 800f274:	b002      	add	sp, #8
 800f276:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800f278:	4630      	mov	r0, r6
 800f27a:	e7fb      	b.n	800f274 <confparser_deserialize_main_config_t+0xe4>
 800f27c:	d89baff6 	.word	0xd89baff6

0800f280 <confparser_set_defaults_main_config_t>:
void confparser_set_defaults_main_config_t(main_config_t *conf) {
	conf->controller_id = CONF_CONTROLLER_ID;
	conf->can_baud_rate = CONF_CAN_BAUD_RATE;
	conf->cell_num = CONF_CELL_NUM;
	conf->temp_num = CONF_TEMP_NUM;
	conf->balance_start_voltage = CONF_BALANCE_START;
 800f280:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800f284:	f8c0 100a 	str.w	r1, [r0, #10]
	conf->balance_difference_threshold = CONF_BALANCE_DIFF;
 800f288:	4918      	ldr	r1, [pc, #96]	; (800f2ec <confparser_set_defaults_main_config_t+0x6c>)
 800f28a:	f8c0 100e 	str.w	r1, [r0, #14]
	conf->soft_overvoltage = CONF_SOFT_OVER;
 800f28e:	4918      	ldr	r1, [pc, #96]	; (800f2f0 <confparser_set_defaults_main_config_t+0x70>)
 800f290:	f8c0 1012 	str.w	r1, [r0, #18]
	conf->soft_undervoltage = CONF_SOFT_UNDER;
 800f294:	4917      	ldr	r1, [pc, #92]	; (800f2f4 <confparser_set_defaults_main_config_t+0x74>)
 800f296:	f8c0 1016 	str.w	r1, [r0, #22]
	conf->hard_overvoltage = CONF_HARD_OVER;
 800f29a:	4917      	ldr	r1, [pc, #92]	; (800f2f8 <confparser_set_defaults_main_config_t+0x78>)
 800f29c:	f8c0 101a 	str.w	r1, [r0, #26]
	conf->hard_undervoltage = CONF_HARD_UNDER;
 800f2a0:	f8c0 101e 	str.w	r1, [r0, #30]
	conf->t_charge_max = CONF_T_CHARGE_MAX;
 800f2a4:	4915      	ldr	r1, [pc, #84]	; (800f2fc <confparser_set_defaults_main_config_t+0x7c>)
 800f2a6:	f8c0 1022 	str.w	r1, [r0, #34]	; 0x22
	conf->controller_id = CONF_CONTROLLER_ID;
 800f2aa:	230a      	movs	r3, #10
	conf->t_discharge_max = CONF_T_DISCHARGE_MAX;
 800f2ac:	f8c0 1026 	str.w	r1, [r0, #38]	; 0x26
	conf->not_used_current_threshold = CONF_NOT_USED_THRESHOLD;
 800f2b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	conf->controller_id = CONF_CONTROLLER_ID;
 800f2b4:	7003      	strb	r3, [r0, #0]
	conf->not_used_current_threshold = CONF_NOT_USED_THRESHOLD;
 800f2b6:	f8c0 102a 	str.w	r1, [r0, #42]	; 0x2a
	conf->can_baud_rate = CONF_CAN_BAUD_RATE;
 800f2ba:	2302      	movs	r3, #2
	conf->not_used_timeout = CONF_NOT_USED_TIMEOUT;
 800f2bc:	f06f 017f 	mvn.w	r1, #127	; 0x7f
	conf->cell_num = CONF_CELL_NUM;
 800f2c0:	2212      	movs	r2, #18
	conf->can_baud_rate = CONF_CAN_BAUD_RATE;
 800f2c2:	7043      	strb	r3, [r0, #1]
	conf->not_used_timeout = CONF_NOT_USED_TIMEOUT;
 800f2c4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
	conf->cell_num = CONF_CELL_NUM;
 800f2c8:	2300      	movs	r3, #0
	conf->not_used_timeout = CONF_NOT_USED_TIMEOUT;
 800f2ca:	214f      	movs	r1, #79	; 0x4f
	conf->cell_num = CONF_CELL_NUM;
 800f2cc:	7082      	strb	r2, [r0, #2]
 800f2ce:	70c3      	strb	r3, [r0, #3]
 800f2d0:	7103      	strb	r3, [r0, #4]
 800f2d2:	7143      	strb	r3, [r0, #5]
	conf->temp_num = CONF_TEMP_NUM;
 800f2d4:	7183      	strb	r3, [r0, #6]
 800f2d6:	71c3      	strb	r3, [r0, #7]
 800f2d8:	7203      	strb	r3, [r0, #8]
 800f2da:	7243      	strb	r3, [r0, #9]
	conf->not_used_timeout = CONF_NOT_USED_TIMEOUT;
 800f2dc:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 800f2e0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 800f2e4:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
}
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	3c23d70a 	.word	0x3c23d70a
 800f2f0:	40833333 	.word	0x40833333
 800f2f4:	40400000 	.word	0x40400000
 800f2f8:	40866666 	.word	0x40866666
 800f2fc:	42d20000 	.word	0x42d20000

0800f300 <Default_Handler>:
extern uint32_t _sidata;


void Default_Handler()
{
    while(1){}
 800f300:	e7fe      	b.n	800f300 <Default_Handler>
	...

0800f304 <Reset_Handler>:
    uint32_t size = (uint32_t) &_edata - (uint32_t) &_sdata;
    uint8_t *pDst = (uint8_t *) &_sdata;  // sram
    uint8_t *pSrc = (uint8_t *) &_sidata; // flash
    for (uint32_t i=0; i<size; i++)
    {
        *pDst++ = *pSrc++;
 800f304:	480a      	ldr	r0, [pc, #40]	; (800f330 <Reset_Handler+0x2c>)
 800f306:	4a0b      	ldr	r2, [pc, #44]	; (800f334 <Reset_Handler+0x30>)
 800f308:	490b      	ldr	r1, [pc, #44]	; (800f338 <Reset_Handler+0x34>)
void Reset_Handler(){
 800f30a:	b508      	push	{r3, lr}
        *pDst++ = *pSrc++;
 800f30c:	1a12      	subs	r2, r2, r0
 800f30e:	f000 f85d 	bl	800f3cc <memcpy>
    }

    // zero out uninitialized data (.bss) in sram
    size = (uint32_t) &_ebss - (uint32_t) &_sbss;
 800f312:	480a      	ldr	r0, [pc, #40]	; (800f33c <Reset_Handler+0x38>)
    pDst = (uint8_t *) &_sbss;
    for (uint32_t i=0; i<size; i++)
    {
        *pDst++ = 0;
 800f314:	4a0a      	ldr	r2, [pc, #40]	; (800f340 <Reset_Handler+0x3c>)
 800f316:	2100      	movs	r1, #0
 800f318:	1a12      	subs	r2, r2, r0
 800f31a:	f000 f865 	bl	800f3e8 <memset>
    }

    // initialize system
    SystemInit();
 800f31e:	f7ff f8a1 	bl	800e464 <SystemInit>
    // initialize standard c library
    __libc_init_array();
 800f322:	f000 f80f 	bl	800f344 <__libc_init_array>
    // run main program
    main();
 800f326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    main();
 800f32a:	f7f3 b85b 	b.w	80023e4 <main>
 800f32e:	bf00      	nop
 800f330:	20000000 	.word	0x20000000
 800f334:	20000200 	.word	0x20000200
 800f338:	08017c08 	.word	0x08017c08
 800f33c:	20000200 	.word	0x20000200
 800f340:	20006cdc 	.word	0x20006cdc

0800f344 <__libc_init_array>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	4d0d      	ldr	r5, [pc, #52]	; (800f37c <__libc_init_array+0x38>)
 800f348:	4c0d      	ldr	r4, [pc, #52]	; (800f380 <__libc_init_array+0x3c>)
 800f34a:	1b64      	subs	r4, r4, r5
 800f34c:	10a4      	asrs	r4, r4, #2
 800f34e:	2600      	movs	r6, #0
 800f350:	42a6      	cmp	r6, r4
 800f352:	d109      	bne.n	800f368 <__libc_init_array+0x24>
 800f354:	4d0b      	ldr	r5, [pc, #44]	; (800f384 <__libc_init_array+0x40>)
 800f356:	4c0c      	ldr	r4, [pc, #48]	; (800f388 <__libc_init_array+0x44>)
 800f358:	f004 f832 	bl	80133c0 <_init>
 800f35c:	1b64      	subs	r4, r4, r5
 800f35e:	10a4      	asrs	r4, r4, #2
 800f360:	2600      	movs	r6, #0
 800f362:	42a6      	cmp	r6, r4
 800f364:	d105      	bne.n	800f372 <__libc_init_array+0x2e>
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	f855 3b04 	ldr.w	r3, [r5], #4
 800f36c:	4798      	blx	r3
 800f36e:	3601      	adds	r6, #1
 800f370:	e7ee      	b.n	800f350 <__libc_init_array+0xc>
 800f372:	f855 3b04 	ldr.w	r3, [r5], #4
 800f376:	4798      	blx	r3
 800f378:	3601      	adds	r6, #1
 800f37a:	e7f2      	b.n	800f362 <__libc_init_array+0x1e>
 800f37c:	08017c00 	.word	0x08017c00
 800f380:	08017c00 	.word	0x08017c00
 800f384:	08017c00 	.word	0x08017c00
 800f388:	08017c04 	.word	0x08017c04

0800f38c <malloc>:
 800f38c:	4b02      	ldr	r3, [pc, #8]	; (800f398 <malloc+0xc>)
 800f38e:	4601      	mov	r1, r0
 800f390:	6818      	ldr	r0, [r3, #0]
 800f392:	f000 b89d 	b.w	800f4d0 <_malloc_r>
 800f396:	bf00      	nop
 800f398:	20000030 	.word	0x20000030

0800f39c <free>:
 800f39c:	4b02      	ldr	r3, [pc, #8]	; (800f3a8 <free+0xc>)
 800f39e:	4601      	mov	r1, r0
 800f3a0:	6818      	ldr	r0, [r3, #0]
 800f3a2:	f000 b829 	b.w	800f3f8 <_free_r>
 800f3a6:	bf00      	nop
 800f3a8:	20000030 	.word	0x20000030

0800f3ac <memcmp>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	3901      	subs	r1, #1
 800f3b0:	4402      	add	r2, r0
 800f3b2:	4290      	cmp	r0, r2
 800f3b4:	d101      	bne.n	800f3ba <memcmp+0xe>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	e005      	b.n	800f3c6 <memcmp+0x1a>
 800f3ba:	7803      	ldrb	r3, [r0, #0]
 800f3bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f3c0:	42a3      	cmp	r3, r4
 800f3c2:	d001      	beq.n	800f3c8 <memcmp+0x1c>
 800f3c4:	1b18      	subs	r0, r3, r4
 800f3c6:	bd10      	pop	{r4, pc}
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	e7f2      	b.n	800f3b2 <memcmp+0x6>

0800f3cc <memcpy>:
 800f3cc:	440a      	add	r2, r1
 800f3ce:	4291      	cmp	r1, r2
 800f3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3d4:	d100      	bne.n	800f3d8 <memcpy+0xc>
 800f3d6:	4770      	bx	lr
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e2:	4291      	cmp	r1, r2
 800f3e4:	d1f9      	bne.n	800f3da <memcpy+0xe>
 800f3e6:	bd10      	pop	{r4, pc}

0800f3e8 <memset>:
 800f3e8:	4402      	add	r2, r0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d100      	bne.n	800f3f2 <memset+0xa>
 800f3f0:	4770      	bx	lr
 800f3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f3f6:	e7f9      	b.n	800f3ec <memset+0x4>

0800f3f8 <_free_r>:
 800f3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3fa:	2900      	cmp	r1, #0
 800f3fc:	d044      	beq.n	800f488 <_free_r+0x90>
 800f3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f402:	9001      	str	r0, [sp, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	f1a1 0404 	sub.w	r4, r1, #4
 800f40a:	bfb8      	it	lt
 800f40c:	18e4      	addlt	r4, r4, r3
 800f40e:	f001 fe03 	bl	8011018 <__malloc_lock>
 800f412:	4a1e      	ldr	r2, [pc, #120]	; (800f48c <_free_r+0x94>)
 800f414:	9801      	ldr	r0, [sp, #4]
 800f416:	6813      	ldr	r3, [r2, #0]
 800f418:	b933      	cbnz	r3, 800f428 <_free_r+0x30>
 800f41a:	6063      	str	r3, [r4, #4]
 800f41c:	6014      	str	r4, [r2, #0]
 800f41e:	b003      	add	sp, #12
 800f420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f424:	f001 bdfe 	b.w	8011024 <__malloc_unlock>
 800f428:	42a3      	cmp	r3, r4
 800f42a:	d908      	bls.n	800f43e <_free_r+0x46>
 800f42c:	6825      	ldr	r5, [r4, #0]
 800f42e:	1961      	adds	r1, r4, r5
 800f430:	428b      	cmp	r3, r1
 800f432:	bf01      	itttt	eq
 800f434:	6819      	ldreq	r1, [r3, #0]
 800f436:	685b      	ldreq	r3, [r3, #4]
 800f438:	1949      	addeq	r1, r1, r5
 800f43a:	6021      	streq	r1, [r4, #0]
 800f43c:	e7ed      	b.n	800f41a <_free_r+0x22>
 800f43e:	461a      	mov	r2, r3
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	b10b      	cbz	r3, 800f448 <_free_r+0x50>
 800f444:	42a3      	cmp	r3, r4
 800f446:	d9fa      	bls.n	800f43e <_free_r+0x46>
 800f448:	6811      	ldr	r1, [r2, #0]
 800f44a:	1855      	adds	r5, r2, r1
 800f44c:	42a5      	cmp	r5, r4
 800f44e:	d10b      	bne.n	800f468 <_free_r+0x70>
 800f450:	6824      	ldr	r4, [r4, #0]
 800f452:	4421      	add	r1, r4
 800f454:	1854      	adds	r4, r2, r1
 800f456:	42a3      	cmp	r3, r4
 800f458:	6011      	str	r1, [r2, #0]
 800f45a:	d1e0      	bne.n	800f41e <_free_r+0x26>
 800f45c:	681c      	ldr	r4, [r3, #0]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	6053      	str	r3, [r2, #4]
 800f462:	4421      	add	r1, r4
 800f464:	6011      	str	r1, [r2, #0]
 800f466:	e7da      	b.n	800f41e <_free_r+0x26>
 800f468:	d902      	bls.n	800f470 <_free_r+0x78>
 800f46a:	230c      	movs	r3, #12
 800f46c:	6003      	str	r3, [r0, #0]
 800f46e:	e7d6      	b.n	800f41e <_free_r+0x26>
 800f470:	6825      	ldr	r5, [r4, #0]
 800f472:	1961      	adds	r1, r4, r5
 800f474:	428b      	cmp	r3, r1
 800f476:	bf04      	itt	eq
 800f478:	6819      	ldreq	r1, [r3, #0]
 800f47a:	685b      	ldreq	r3, [r3, #4]
 800f47c:	6063      	str	r3, [r4, #4]
 800f47e:	bf04      	itt	eq
 800f480:	1949      	addeq	r1, r1, r5
 800f482:	6021      	streq	r1, [r4, #0]
 800f484:	6054      	str	r4, [r2, #4]
 800f486:	e7ca      	b.n	800f41e <_free_r+0x26>
 800f488:	b003      	add	sp, #12
 800f48a:	bd30      	pop	{r4, r5, pc}
 800f48c:	20006cc8 	.word	0x20006cc8

0800f490 <sbrk_aligned>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	4e0e      	ldr	r6, [pc, #56]	; (800f4cc <sbrk_aligned+0x3c>)
 800f494:	460c      	mov	r4, r1
 800f496:	6831      	ldr	r1, [r6, #0]
 800f498:	4605      	mov	r5, r0
 800f49a:	b911      	cbnz	r1, 800f4a2 <sbrk_aligned+0x12>
 800f49c:	f000 fcf6 	bl	800fe8c <_sbrk_r>
 800f4a0:	6030      	str	r0, [r6, #0]
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	f000 fcf1 	bl	800fe8c <_sbrk_r>
 800f4aa:	1c43      	adds	r3, r0, #1
 800f4ac:	d00a      	beq.n	800f4c4 <sbrk_aligned+0x34>
 800f4ae:	1cc4      	adds	r4, r0, #3
 800f4b0:	f024 0403 	bic.w	r4, r4, #3
 800f4b4:	42a0      	cmp	r0, r4
 800f4b6:	d007      	beq.n	800f4c8 <sbrk_aligned+0x38>
 800f4b8:	1a21      	subs	r1, r4, r0
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f000 fce6 	bl	800fe8c <_sbrk_r>
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d101      	bne.n	800f4c8 <sbrk_aligned+0x38>
 800f4c4:	f04f 34ff 	mov.w	r4, #4294967295
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	20006ccc 	.word	0x20006ccc

0800f4d0 <_malloc_r>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	1ccd      	adds	r5, r1, #3
 800f4d6:	f025 0503 	bic.w	r5, r5, #3
 800f4da:	3508      	adds	r5, #8
 800f4dc:	2d0c      	cmp	r5, #12
 800f4de:	bf38      	it	cc
 800f4e0:	250c      	movcc	r5, #12
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	4607      	mov	r7, r0
 800f4e6:	db01      	blt.n	800f4ec <_malloc_r+0x1c>
 800f4e8:	42a9      	cmp	r1, r5
 800f4ea:	d905      	bls.n	800f4f8 <_malloc_r+0x28>
 800f4ec:	230c      	movs	r3, #12
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	2600      	movs	r6, #0
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f8:	4e2e      	ldr	r6, [pc, #184]	; (800f5b4 <_malloc_r+0xe4>)
 800f4fa:	f001 fd8d 	bl	8011018 <__malloc_lock>
 800f4fe:	6833      	ldr	r3, [r6, #0]
 800f500:	461c      	mov	r4, r3
 800f502:	bb34      	cbnz	r4, 800f552 <_malloc_r+0x82>
 800f504:	4629      	mov	r1, r5
 800f506:	4638      	mov	r0, r7
 800f508:	f7ff ffc2 	bl	800f490 <sbrk_aligned>
 800f50c:	1c43      	adds	r3, r0, #1
 800f50e:	4604      	mov	r4, r0
 800f510:	d14d      	bne.n	800f5ae <_malloc_r+0xde>
 800f512:	6834      	ldr	r4, [r6, #0]
 800f514:	4626      	mov	r6, r4
 800f516:	2e00      	cmp	r6, #0
 800f518:	d140      	bne.n	800f59c <_malloc_r+0xcc>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	4631      	mov	r1, r6
 800f51e:	4638      	mov	r0, r7
 800f520:	eb04 0803 	add.w	r8, r4, r3
 800f524:	f000 fcb2 	bl	800fe8c <_sbrk_r>
 800f528:	4580      	cmp	r8, r0
 800f52a:	d13a      	bne.n	800f5a2 <_malloc_r+0xd2>
 800f52c:	6821      	ldr	r1, [r4, #0]
 800f52e:	3503      	adds	r5, #3
 800f530:	1a6d      	subs	r5, r5, r1
 800f532:	f025 0503 	bic.w	r5, r5, #3
 800f536:	3508      	adds	r5, #8
 800f538:	2d0c      	cmp	r5, #12
 800f53a:	bf38      	it	cc
 800f53c:	250c      	movcc	r5, #12
 800f53e:	4629      	mov	r1, r5
 800f540:	4638      	mov	r0, r7
 800f542:	f7ff ffa5 	bl	800f490 <sbrk_aligned>
 800f546:	3001      	adds	r0, #1
 800f548:	d02b      	beq.n	800f5a2 <_malloc_r+0xd2>
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	442b      	add	r3, r5
 800f54e:	6023      	str	r3, [r4, #0]
 800f550:	e00e      	b.n	800f570 <_malloc_r+0xa0>
 800f552:	6822      	ldr	r2, [r4, #0]
 800f554:	1b52      	subs	r2, r2, r5
 800f556:	d41e      	bmi.n	800f596 <_malloc_r+0xc6>
 800f558:	2a0b      	cmp	r2, #11
 800f55a:	d916      	bls.n	800f58a <_malloc_r+0xba>
 800f55c:	1961      	adds	r1, r4, r5
 800f55e:	42a3      	cmp	r3, r4
 800f560:	6025      	str	r5, [r4, #0]
 800f562:	bf18      	it	ne
 800f564:	6059      	strne	r1, [r3, #4]
 800f566:	6863      	ldr	r3, [r4, #4]
 800f568:	bf08      	it	eq
 800f56a:	6031      	streq	r1, [r6, #0]
 800f56c:	5162      	str	r2, [r4, r5]
 800f56e:	604b      	str	r3, [r1, #4]
 800f570:	4638      	mov	r0, r7
 800f572:	f104 060b 	add.w	r6, r4, #11
 800f576:	f001 fd55 	bl	8011024 <__malloc_unlock>
 800f57a:	f026 0607 	bic.w	r6, r6, #7
 800f57e:	1d23      	adds	r3, r4, #4
 800f580:	1af2      	subs	r2, r6, r3
 800f582:	d0b6      	beq.n	800f4f2 <_malloc_r+0x22>
 800f584:	1b9b      	subs	r3, r3, r6
 800f586:	50a3      	str	r3, [r4, r2]
 800f588:	e7b3      	b.n	800f4f2 <_malloc_r+0x22>
 800f58a:	6862      	ldr	r2, [r4, #4]
 800f58c:	42a3      	cmp	r3, r4
 800f58e:	bf0c      	ite	eq
 800f590:	6032      	streq	r2, [r6, #0]
 800f592:	605a      	strne	r2, [r3, #4]
 800f594:	e7ec      	b.n	800f570 <_malloc_r+0xa0>
 800f596:	4623      	mov	r3, r4
 800f598:	6864      	ldr	r4, [r4, #4]
 800f59a:	e7b2      	b.n	800f502 <_malloc_r+0x32>
 800f59c:	4634      	mov	r4, r6
 800f59e:	6876      	ldr	r6, [r6, #4]
 800f5a0:	e7b9      	b.n	800f516 <_malloc_r+0x46>
 800f5a2:	230c      	movs	r3, #12
 800f5a4:	603b      	str	r3, [r7, #0]
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	f001 fd3c 	bl	8011024 <__malloc_unlock>
 800f5ac:	e7a1      	b.n	800f4f2 <_malloc_r+0x22>
 800f5ae:	6025      	str	r5, [r4, #0]
 800f5b0:	e7de      	b.n	800f570 <_malloc_r+0xa0>
 800f5b2:	bf00      	nop
 800f5b4:	20006cc8 	.word	0x20006cc8

0800f5b8 <__cvt>:
 800f5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5bc:	ec55 4b10 	vmov	r4, r5, d0
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	460e      	mov	r6, r1
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	462b      	mov	r3, r5
 800f5c8:	bfbb      	ittet	lt
 800f5ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f5ce:	461d      	movlt	r5, r3
 800f5d0:	2300      	movge	r3, #0
 800f5d2:	232d      	movlt	r3, #45	; 0x2d
 800f5d4:	700b      	strb	r3, [r1, #0]
 800f5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f5dc:	4691      	mov	r9, r2
 800f5de:	f023 0820 	bic.w	r8, r3, #32
 800f5e2:	bfbc      	itt	lt
 800f5e4:	4622      	movlt	r2, r4
 800f5e6:	4614      	movlt	r4, r2
 800f5e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5ec:	d005      	beq.n	800f5fa <__cvt+0x42>
 800f5ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f5f2:	d100      	bne.n	800f5f6 <__cvt+0x3e>
 800f5f4:	3601      	adds	r6, #1
 800f5f6:	2102      	movs	r1, #2
 800f5f8:	e000      	b.n	800f5fc <__cvt+0x44>
 800f5fa:	2103      	movs	r1, #3
 800f5fc:	ab03      	add	r3, sp, #12
 800f5fe:	9301      	str	r3, [sp, #4]
 800f600:	ab02      	add	r3, sp, #8
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	ec45 4b10 	vmov	d0, r4, r5
 800f608:	4653      	mov	r3, sl
 800f60a:	4632      	mov	r2, r6
 800f60c:	f000 fee8 	bl	80103e0 <_dtoa_r>
 800f610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f614:	4607      	mov	r7, r0
 800f616:	d102      	bne.n	800f61e <__cvt+0x66>
 800f618:	f019 0f01 	tst.w	r9, #1
 800f61c:	d022      	beq.n	800f664 <__cvt+0xac>
 800f61e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f622:	eb07 0906 	add.w	r9, r7, r6
 800f626:	d110      	bne.n	800f64a <__cvt+0x92>
 800f628:	783b      	ldrb	r3, [r7, #0]
 800f62a:	2b30      	cmp	r3, #48	; 0x30
 800f62c:	d10a      	bne.n	800f644 <__cvt+0x8c>
 800f62e:	2200      	movs	r2, #0
 800f630:	2300      	movs	r3, #0
 800f632:	4620      	mov	r0, r4
 800f634:	4629      	mov	r1, r5
 800f636:	f7f2 fdfb 	bl	8002230 <__aeabi_dcmpeq>
 800f63a:	b918      	cbnz	r0, 800f644 <__cvt+0x8c>
 800f63c:	f1c6 0601 	rsb	r6, r6, #1
 800f640:	f8ca 6000 	str.w	r6, [sl]
 800f644:	f8da 3000 	ldr.w	r3, [sl]
 800f648:	4499      	add	r9, r3
 800f64a:	2200      	movs	r2, #0
 800f64c:	2300      	movs	r3, #0
 800f64e:	4620      	mov	r0, r4
 800f650:	4629      	mov	r1, r5
 800f652:	f7f2 fded 	bl	8002230 <__aeabi_dcmpeq>
 800f656:	b108      	cbz	r0, 800f65c <__cvt+0xa4>
 800f658:	f8cd 900c 	str.w	r9, [sp, #12]
 800f65c:	2230      	movs	r2, #48	; 0x30
 800f65e:	9b03      	ldr	r3, [sp, #12]
 800f660:	454b      	cmp	r3, r9
 800f662:	d307      	bcc.n	800f674 <__cvt+0xbc>
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f668:	1bdb      	subs	r3, r3, r7
 800f66a:	4638      	mov	r0, r7
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	b004      	add	sp, #16
 800f670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f674:	1c59      	adds	r1, r3, #1
 800f676:	9103      	str	r1, [sp, #12]
 800f678:	701a      	strb	r2, [r3, #0]
 800f67a:	e7f0      	b.n	800f65e <__cvt+0xa6>

0800f67c <__exponent>:
 800f67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f67e:	4603      	mov	r3, r0
 800f680:	2900      	cmp	r1, #0
 800f682:	bfb8      	it	lt
 800f684:	4249      	neglt	r1, r1
 800f686:	f803 2b02 	strb.w	r2, [r3], #2
 800f68a:	bfb4      	ite	lt
 800f68c:	222d      	movlt	r2, #45	; 0x2d
 800f68e:	222b      	movge	r2, #43	; 0x2b
 800f690:	2909      	cmp	r1, #9
 800f692:	7042      	strb	r2, [r0, #1]
 800f694:	dd2a      	ble.n	800f6ec <__exponent+0x70>
 800f696:	f10d 0407 	add.w	r4, sp, #7
 800f69a:	46a4      	mov	ip, r4
 800f69c:	270a      	movs	r7, #10
 800f69e:	46a6      	mov	lr, r4
 800f6a0:	460a      	mov	r2, r1
 800f6a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f6a6:	fb07 1516 	mls	r5, r7, r6, r1
 800f6aa:	3530      	adds	r5, #48	; 0x30
 800f6ac:	2a63      	cmp	r2, #99	; 0x63
 800f6ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800f6b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	dcf1      	bgt.n	800f69e <__exponent+0x22>
 800f6ba:	3130      	adds	r1, #48	; 0x30
 800f6bc:	f1ae 0502 	sub.w	r5, lr, #2
 800f6c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f6c4:	1c44      	adds	r4, r0, #1
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	4561      	cmp	r1, ip
 800f6ca:	d30a      	bcc.n	800f6e2 <__exponent+0x66>
 800f6cc:	f10d 0209 	add.w	r2, sp, #9
 800f6d0:	eba2 020e 	sub.w	r2, r2, lr
 800f6d4:	4565      	cmp	r5, ip
 800f6d6:	bf88      	it	hi
 800f6d8:	2200      	movhi	r2, #0
 800f6da:	4413      	add	r3, r2
 800f6dc:	1a18      	subs	r0, r3, r0
 800f6de:	b003      	add	sp, #12
 800f6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f6ea:	e7ed      	b.n	800f6c8 <__exponent+0x4c>
 800f6ec:	2330      	movs	r3, #48	; 0x30
 800f6ee:	3130      	adds	r1, #48	; 0x30
 800f6f0:	7083      	strb	r3, [r0, #2]
 800f6f2:	70c1      	strb	r1, [r0, #3]
 800f6f4:	1d03      	adds	r3, r0, #4
 800f6f6:	e7f1      	b.n	800f6dc <__exponent+0x60>

0800f6f8 <_printf_float>:
 800f6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	ed2d 8b02 	vpush	{d8}
 800f700:	b08d      	sub	sp, #52	; 0x34
 800f702:	460c      	mov	r4, r1
 800f704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f708:	4616      	mov	r6, r2
 800f70a:	461f      	mov	r7, r3
 800f70c:	4605      	mov	r5, r0
 800f70e:	f001 fc6d 	bl	8010fec <_localeconv_r>
 800f712:	f8d0 a000 	ldr.w	sl, [r0]
 800f716:	4650      	mov	r0, sl
 800f718:	f7f2 fac8 	bl	8001cac <strlen>
 800f71c:	2300      	movs	r3, #0
 800f71e:	930a      	str	r3, [sp, #40]	; 0x28
 800f720:	6823      	ldr	r3, [r4, #0]
 800f722:	9305      	str	r3, [sp, #20]
 800f724:	f8d8 3000 	ldr.w	r3, [r8]
 800f728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f72c:	3307      	adds	r3, #7
 800f72e:	f023 0307 	bic.w	r3, r3, #7
 800f732:	f103 0208 	add.w	r2, r3, #8
 800f736:	f8c8 2000 	str.w	r2, [r8]
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f74a:	9307      	str	r3, [sp, #28]
 800f74c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f750:	ee08 0a10 	vmov	s16, r0
 800f754:	4b9f      	ldr	r3, [pc, #636]	; (800f9d4 <_printf_float+0x2dc>)
 800f756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f75a:	f04f 32ff 	mov.w	r2, #4294967295
 800f75e:	f7f2 fd99 	bl	8002294 <__aeabi_dcmpun>
 800f762:	bb88      	cbnz	r0, 800f7c8 <_printf_float+0xd0>
 800f764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f768:	4b9a      	ldr	r3, [pc, #616]	; (800f9d4 <_printf_float+0x2dc>)
 800f76a:	f04f 32ff 	mov.w	r2, #4294967295
 800f76e:	f7f2 fd73 	bl	8002258 <__aeabi_dcmple>
 800f772:	bb48      	cbnz	r0, 800f7c8 <_printf_float+0xd0>
 800f774:	2200      	movs	r2, #0
 800f776:	2300      	movs	r3, #0
 800f778:	4640      	mov	r0, r8
 800f77a:	4649      	mov	r1, r9
 800f77c:	f7f2 fd62 	bl	8002244 <__aeabi_dcmplt>
 800f780:	b110      	cbz	r0, 800f788 <_printf_float+0x90>
 800f782:	232d      	movs	r3, #45	; 0x2d
 800f784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f788:	4b93      	ldr	r3, [pc, #588]	; (800f9d8 <_printf_float+0x2e0>)
 800f78a:	4894      	ldr	r0, [pc, #592]	; (800f9dc <_printf_float+0x2e4>)
 800f78c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f790:	bf94      	ite	ls
 800f792:	4698      	movls	r8, r3
 800f794:	4680      	movhi	r8, r0
 800f796:	2303      	movs	r3, #3
 800f798:	6123      	str	r3, [r4, #16]
 800f79a:	9b05      	ldr	r3, [sp, #20]
 800f79c:	f023 0204 	bic.w	r2, r3, #4
 800f7a0:	6022      	str	r2, [r4, #0]
 800f7a2:	f04f 0900 	mov.w	r9, #0
 800f7a6:	9700      	str	r7, [sp, #0]
 800f7a8:	4633      	mov	r3, r6
 800f7aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f000 f9d8 	bl	800fb64 <_printf_common>
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	f040 8090 	bne.w	800f8da <_printf_float+0x1e2>
 800f7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f7be:	b00d      	add	sp, #52	; 0x34
 800f7c0:	ecbd 8b02 	vpop	{d8}
 800f7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c8:	4642      	mov	r2, r8
 800f7ca:	464b      	mov	r3, r9
 800f7cc:	4640      	mov	r0, r8
 800f7ce:	4649      	mov	r1, r9
 800f7d0:	f7f2 fd60 	bl	8002294 <__aeabi_dcmpun>
 800f7d4:	b140      	cbz	r0, 800f7e8 <_printf_float+0xf0>
 800f7d6:	464b      	mov	r3, r9
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	bfbc      	itt	lt
 800f7dc:	232d      	movlt	r3, #45	; 0x2d
 800f7de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f7e2:	487f      	ldr	r0, [pc, #508]	; (800f9e0 <_printf_float+0x2e8>)
 800f7e4:	4b7f      	ldr	r3, [pc, #508]	; (800f9e4 <_printf_float+0x2ec>)
 800f7e6:	e7d1      	b.n	800f78c <_printf_float+0x94>
 800f7e8:	6863      	ldr	r3, [r4, #4]
 800f7ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f7ee:	9206      	str	r2, [sp, #24]
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	d13f      	bne.n	800f874 <_printf_float+0x17c>
 800f7f4:	2306      	movs	r3, #6
 800f7f6:	6063      	str	r3, [r4, #4]
 800f7f8:	9b05      	ldr	r3, [sp, #20]
 800f7fa:	6861      	ldr	r1, [r4, #4]
 800f7fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f800:	2300      	movs	r3, #0
 800f802:	9303      	str	r3, [sp, #12]
 800f804:	ab0a      	add	r3, sp, #40	; 0x28
 800f806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f80a:	ab09      	add	r3, sp, #36	; 0x24
 800f80c:	ec49 8b10 	vmov	d0, r8, r9
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	6022      	str	r2, [r4, #0]
 800f814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f818:	4628      	mov	r0, r5
 800f81a:	f7ff fecd 	bl	800f5b8 <__cvt>
 800f81e:	9b06      	ldr	r3, [sp, #24]
 800f820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f822:	2b47      	cmp	r3, #71	; 0x47
 800f824:	4680      	mov	r8, r0
 800f826:	d108      	bne.n	800f83a <_printf_float+0x142>
 800f828:	1cc8      	adds	r0, r1, #3
 800f82a:	db02      	blt.n	800f832 <_printf_float+0x13a>
 800f82c:	6863      	ldr	r3, [r4, #4]
 800f82e:	4299      	cmp	r1, r3
 800f830:	dd41      	ble.n	800f8b6 <_printf_float+0x1be>
 800f832:	f1ab 0b02 	sub.w	fp, fp, #2
 800f836:	fa5f fb8b 	uxtb.w	fp, fp
 800f83a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f83e:	d820      	bhi.n	800f882 <_printf_float+0x18a>
 800f840:	3901      	subs	r1, #1
 800f842:	465a      	mov	r2, fp
 800f844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f848:	9109      	str	r1, [sp, #36]	; 0x24
 800f84a:	f7ff ff17 	bl	800f67c <__exponent>
 800f84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f850:	1813      	adds	r3, r2, r0
 800f852:	2a01      	cmp	r2, #1
 800f854:	4681      	mov	r9, r0
 800f856:	6123      	str	r3, [r4, #16]
 800f858:	dc02      	bgt.n	800f860 <_printf_float+0x168>
 800f85a:	6822      	ldr	r2, [r4, #0]
 800f85c:	07d2      	lsls	r2, r2, #31
 800f85e:	d501      	bpl.n	800f864 <_printf_float+0x16c>
 800f860:	3301      	adds	r3, #1
 800f862:	6123      	str	r3, [r4, #16]
 800f864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d09c      	beq.n	800f7a6 <_printf_float+0xae>
 800f86c:	232d      	movs	r3, #45	; 0x2d
 800f86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f872:	e798      	b.n	800f7a6 <_printf_float+0xae>
 800f874:	9a06      	ldr	r2, [sp, #24]
 800f876:	2a47      	cmp	r2, #71	; 0x47
 800f878:	d1be      	bne.n	800f7f8 <_printf_float+0x100>
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1bc      	bne.n	800f7f8 <_printf_float+0x100>
 800f87e:	2301      	movs	r3, #1
 800f880:	e7b9      	b.n	800f7f6 <_printf_float+0xfe>
 800f882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f886:	d118      	bne.n	800f8ba <_printf_float+0x1c2>
 800f888:	2900      	cmp	r1, #0
 800f88a:	6863      	ldr	r3, [r4, #4]
 800f88c:	dd0b      	ble.n	800f8a6 <_printf_float+0x1ae>
 800f88e:	6121      	str	r1, [r4, #16]
 800f890:	b913      	cbnz	r3, 800f898 <_printf_float+0x1a0>
 800f892:	6822      	ldr	r2, [r4, #0]
 800f894:	07d0      	lsls	r0, r2, #31
 800f896:	d502      	bpl.n	800f89e <_printf_float+0x1a6>
 800f898:	3301      	adds	r3, #1
 800f89a:	440b      	add	r3, r1
 800f89c:	6123      	str	r3, [r4, #16]
 800f89e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f8a0:	f04f 0900 	mov.w	r9, #0
 800f8a4:	e7de      	b.n	800f864 <_printf_float+0x16c>
 800f8a6:	b913      	cbnz	r3, 800f8ae <_printf_float+0x1b6>
 800f8a8:	6822      	ldr	r2, [r4, #0]
 800f8aa:	07d2      	lsls	r2, r2, #31
 800f8ac:	d501      	bpl.n	800f8b2 <_printf_float+0x1ba>
 800f8ae:	3302      	adds	r3, #2
 800f8b0:	e7f4      	b.n	800f89c <_printf_float+0x1a4>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e7f2      	b.n	800f89c <_printf_float+0x1a4>
 800f8b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8bc:	4299      	cmp	r1, r3
 800f8be:	db05      	blt.n	800f8cc <_printf_float+0x1d4>
 800f8c0:	6823      	ldr	r3, [r4, #0]
 800f8c2:	6121      	str	r1, [r4, #16]
 800f8c4:	07d8      	lsls	r0, r3, #31
 800f8c6:	d5ea      	bpl.n	800f89e <_printf_float+0x1a6>
 800f8c8:	1c4b      	adds	r3, r1, #1
 800f8ca:	e7e7      	b.n	800f89c <_printf_float+0x1a4>
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	bfd4      	ite	le
 800f8d0:	f1c1 0202 	rsble	r2, r1, #2
 800f8d4:	2201      	movgt	r2, #1
 800f8d6:	4413      	add	r3, r2
 800f8d8:	e7e0      	b.n	800f89c <_printf_float+0x1a4>
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	055a      	lsls	r2, r3, #21
 800f8de:	d407      	bmi.n	800f8f0 <_printf_float+0x1f8>
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	4642      	mov	r2, r8
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d12c      	bne.n	800f948 <_printf_float+0x250>
 800f8ee:	e764      	b.n	800f7ba <_printf_float+0xc2>
 800f8f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8f4:	f240 80e0 	bls.w	800fab8 <_printf_float+0x3c0>
 800f8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2300      	movs	r3, #0
 800f900:	f7f2 fc96 	bl	8002230 <__aeabi_dcmpeq>
 800f904:	2800      	cmp	r0, #0
 800f906:	d034      	beq.n	800f972 <_printf_float+0x27a>
 800f908:	4a37      	ldr	r2, [pc, #220]	; (800f9e8 <_printf_float+0x2f0>)
 800f90a:	2301      	movs	r3, #1
 800f90c:	4631      	mov	r1, r6
 800f90e:	4628      	mov	r0, r5
 800f910:	47b8      	blx	r7
 800f912:	3001      	adds	r0, #1
 800f914:	f43f af51 	beq.w	800f7ba <_printf_float+0xc2>
 800f918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f91c:	429a      	cmp	r2, r3
 800f91e:	db02      	blt.n	800f926 <_printf_float+0x22e>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	07d8      	lsls	r0, r3, #31
 800f924:	d510      	bpl.n	800f948 <_printf_float+0x250>
 800f926:	ee18 3a10 	vmov	r3, s16
 800f92a:	4652      	mov	r2, sl
 800f92c:	4631      	mov	r1, r6
 800f92e:	4628      	mov	r0, r5
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	f43f af41 	beq.w	800f7ba <_printf_float+0xc2>
 800f938:	f04f 0800 	mov.w	r8, #0
 800f93c:	f104 091a 	add.w	r9, r4, #26
 800f940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f942:	3b01      	subs	r3, #1
 800f944:	4543      	cmp	r3, r8
 800f946:	dc09      	bgt.n	800f95c <_printf_float+0x264>
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	079b      	lsls	r3, r3, #30
 800f94c:	f100 8105 	bmi.w	800fb5a <_printf_float+0x462>
 800f950:	68e0      	ldr	r0, [r4, #12]
 800f952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f954:	4298      	cmp	r0, r3
 800f956:	bfb8      	it	lt
 800f958:	4618      	movlt	r0, r3
 800f95a:	e730      	b.n	800f7be <_printf_float+0xc6>
 800f95c:	2301      	movs	r3, #1
 800f95e:	464a      	mov	r2, r9
 800f960:	4631      	mov	r1, r6
 800f962:	4628      	mov	r0, r5
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f af27 	beq.w	800f7ba <_printf_float+0xc2>
 800f96c:	f108 0801 	add.w	r8, r8, #1
 800f970:	e7e6      	b.n	800f940 <_printf_float+0x248>
 800f972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f974:	2b00      	cmp	r3, #0
 800f976:	dc39      	bgt.n	800f9ec <_printf_float+0x2f4>
 800f978:	4a1b      	ldr	r2, [pc, #108]	; (800f9e8 <_printf_float+0x2f0>)
 800f97a:	2301      	movs	r3, #1
 800f97c:	4631      	mov	r1, r6
 800f97e:	4628      	mov	r0, r5
 800f980:	47b8      	blx	r7
 800f982:	3001      	adds	r0, #1
 800f984:	f43f af19 	beq.w	800f7ba <_printf_float+0xc2>
 800f988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f98c:	4313      	orrs	r3, r2
 800f98e:	d102      	bne.n	800f996 <_printf_float+0x29e>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	07d9      	lsls	r1, r3, #31
 800f994:	d5d8      	bpl.n	800f948 <_printf_float+0x250>
 800f996:	ee18 3a10 	vmov	r3, s16
 800f99a:	4652      	mov	r2, sl
 800f99c:	4631      	mov	r1, r6
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	f43f af09 	beq.w	800f7ba <_printf_float+0xc2>
 800f9a8:	f04f 0900 	mov.w	r9, #0
 800f9ac:	f104 0a1a 	add.w	sl, r4, #26
 800f9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b2:	425b      	negs	r3, r3
 800f9b4:	454b      	cmp	r3, r9
 800f9b6:	dc01      	bgt.n	800f9bc <_printf_float+0x2c4>
 800f9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9ba:	e792      	b.n	800f8e2 <_printf_float+0x1ea>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	4652      	mov	r2, sl
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	47b8      	blx	r7
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	f43f aef7 	beq.w	800f7ba <_printf_float+0xc2>
 800f9cc:	f109 0901 	add.w	r9, r9, #1
 800f9d0:	e7ee      	b.n	800f9b0 <_printf_float+0x2b8>
 800f9d2:	bf00      	nop
 800f9d4:	7fefffff 	.word	0x7fefffff
 800f9d8:	08017744 	.word	0x08017744
 800f9dc:	08017748 	.word	0x08017748
 800f9e0:	08017750 	.word	0x08017750
 800f9e4:	0801774c 	.word	0x0801774c
 800f9e8:	08017a79 	.word	0x08017a79
 800f9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	bfa8      	it	ge
 800f9f4:	461a      	movge	r2, r3
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	4691      	mov	r9, r2
 800f9fa:	dc37      	bgt.n	800fa6c <_printf_float+0x374>
 800f9fc:	f04f 0b00 	mov.w	fp, #0
 800fa00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa04:	f104 021a 	add.w	r2, r4, #26
 800fa08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa0a:	9305      	str	r3, [sp, #20]
 800fa0c:	eba3 0309 	sub.w	r3, r3, r9
 800fa10:	455b      	cmp	r3, fp
 800fa12:	dc33      	bgt.n	800fa7c <_printf_float+0x384>
 800fa14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	db3b      	blt.n	800fa94 <_printf_float+0x39c>
 800fa1c:	6823      	ldr	r3, [r4, #0]
 800fa1e:	07da      	lsls	r2, r3, #31
 800fa20:	d438      	bmi.n	800fa94 <_printf_float+0x39c>
 800fa22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa24:	9a05      	ldr	r2, [sp, #20]
 800fa26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa28:	1a9a      	subs	r2, r3, r2
 800fa2a:	eba3 0901 	sub.w	r9, r3, r1
 800fa2e:	4591      	cmp	r9, r2
 800fa30:	bfa8      	it	ge
 800fa32:	4691      	movge	r9, r2
 800fa34:	f1b9 0f00 	cmp.w	r9, #0
 800fa38:	dc35      	bgt.n	800faa6 <_printf_float+0x3ae>
 800fa3a:	f04f 0800 	mov.w	r8, #0
 800fa3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa42:	f104 0a1a 	add.w	sl, r4, #26
 800fa46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa4a:	1a9b      	subs	r3, r3, r2
 800fa4c:	eba3 0309 	sub.w	r3, r3, r9
 800fa50:	4543      	cmp	r3, r8
 800fa52:	f77f af79 	ble.w	800f948 <_printf_float+0x250>
 800fa56:	2301      	movs	r3, #1
 800fa58:	4652      	mov	r2, sl
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	47b8      	blx	r7
 800fa60:	3001      	adds	r0, #1
 800fa62:	f43f aeaa 	beq.w	800f7ba <_printf_float+0xc2>
 800fa66:	f108 0801 	add.w	r8, r8, #1
 800fa6a:	e7ec      	b.n	800fa46 <_printf_float+0x34e>
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	4631      	mov	r1, r6
 800fa70:	4642      	mov	r2, r8
 800fa72:	4628      	mov	r0, r5
 800fa74:	47b8      	blx	r7
 800fa76:	3001      	adds	r0, #1
 800fa78:	d1c0      	bne.n	800f9fc <_printf_float+0x304>
 800fa7a:	e69e      	b.n	800f7ba <_printf_float+0xc2>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	4631      	mov	r1, r6
 800fa80:	4628      	mov	r0, r5
 800fa82:	9205      	str	r2, [sp, #20]
 800fa84:	47b8      	blx	r7
 800fa86:	3001      	adds	r0, #1
 800fa88:	f43f ae97 	beq.w	800f7ba <_printf_float+0xc2>
 800fa8c:	9a05      	ldr	r2, [sp, #20]
 800fa8e:	f10b 0b01 	add.w	fp, fp, #1
 800fa92:	e7b9      	b.n	800fa08 <_printf_float+0x310>
 800fa94:	ee18 3a10 	vmov	r3, s16
 800fa98:	4652      	mov	r2, sl
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	47b8      	blx	r7
 800faa0:	3001      	adds	r0, #1
 800faa2:	d1be      	bne.n	800fa22 <_printf_float+0x32a>
 800faa4:	e689      	b.n	800f7ba <_printf_float+0xc2>
 800faa6:	9a05      	ldr	r2, [sp, #20]
 800faa8:	464b      	mov	r3, r9
 800faaa:	4442      	add	r2, r8
 800faac:	4631      	mov	r1, r6
 800faae:	4628      	mov	r0, r5
 800fab0:	47b8      	blx	r7
 800fab2:	3001      	adds	r0, #1
 800fab4:	d1c1      	bne.n	800fa3a <_printf_float+0x342>
 800fab6:	e680      	b.n	800f7ba <_printf_float+0xc2>
 800fab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faba:	2a01      	cmp	r2, #1
 800fabc:	dc01      	bgt.n	800fac2 <_printf_float+0x3ca>
 800fabe:	07db      	lsls	r3, r3, #31
 800fac0:	d538      	bpl.n	800fb34 <_printf_float+0x43c>
 800fac2:	2301      	movs	r3, #1
 800fac4:	4642      	mov	r2, r8
 800fac6:	4631      	mov	r1, r6
 800fac8:	4628      	mov	r0, r5
 800faca:	47b8      	blx	r7
 800facc:	3001      	adds	r0, #1
 800face:	f43f ae74 	beq.w	800f7ba <_printf_float+0xc2>
 800fad2:	ee18 3a10 	vmov	r3, s16
 800fad6:	4652      	mov	r2, sl
 800fad8:	4631      	mov	r1, r6
 800fada:	4628      	mov	r0, r5
 800fadc:	47b8      	blx	r7
 800fade:	3001      	adds	r0, #1
 800fae0:	f43f ae6b 	beq.w	800f7ba <_printf_float+0xc2>
 800fae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fae8:	2200      	movs	r2, #0
 800faea:	2300      	movs	r3, #0
 800faec:	f7f2 fba0 	bl	8002230 <__aeabi_dcmpeq>
 800faf0:	b9d8      	cbnz	r0, 800fb2a <_printf_float+0x432>
 800faf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf4:	f108 0201 	add.w	r2, r8, #1
 800faf8:	3b01      	subs	r3, #1
 800fafa:	4631      	mov	r1, r6
 800fafc:	4628      	mov	r0, r5
 800fafe:	47b8      	blx	r7
 800fb00:	3001      	adds	r0, #1
 800fb02:	d10e      	bne.n	800fb22 <_printf_float+0x42a>
 800fb04:	e659      	b.n	800f7ba <_printf_float+0xc2>
 800fb06:	2301      	movs	r3, #1
 800fb08:	4652      	mov	r2, sl
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	47b8      	blx	r7
 800fb10:	3001      	adds	r0, #1
 800fb12:	f43f ae52 	beq.w	800f7ba <_printf_float+0xc2>
 800fb16:	f108 0801 	add.w	r8, r8, #1
 800fb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	4543      	cmp	r3, r8
 800fb20:	dcf1      	bgt.n	800fb06 <_printf_float+0x40e>
 800fb22:	464b      	mov	r3, r9
 800fb24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb28:	e6dc      	b.n	800f8e4 <_printf_float+0x1ec>
 800fb2a:	f04f 0800 	mov.w	r8, #0
 800fb2e:	f104 0a1a 	add.w	sl, r4, #26
 800fb32:	e7f2      	b.n	800fb1a <_printf_float+0x422>
 800fb34:	2301      	movs	r3, #1
 800fb36:	4642      	mov	r2, r8
 800fb38:	e7df      	b.n	800fafa <_printf_float+0x402>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	464a      	mov	r2, r9
 800fb3e:	4631      	mov	r1, r6
 800fb40:	4628      	mov	r0, r5
 800fb42:	47b8      	blx	r7
 800fb44:	3001      	adds	r0, #1
 800fb46:	f43f ae38 	beq.w	800f7ba <_printf_float+0xc2>
 800fb4a:	f108 0801 	add.w	r8, r8, #1
 800fb4e:	68e3      	ldr	r3, [r4, #12]
 800fb50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb52:	1a5b      	subs	r3, r3, r1
 800fb54:	4543      	cmp	r3, r8
 800fb56:	dcf0      	bgt.n	800fb3a <_printf_float+0x442>
 800fb58:	e6fa      	b.n	800f950 <_printf_float+0x258>
 800fb5a:	f04f 0800 	mov.w	r8, #0
 800fb5e:	f104 0919 	add.w	r9, r4, #25
 800fb62:	e7f4      	b.n	800fb4e <_printf_float+0x456>

0800fb64 <_printf_common>:
 800fb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	4616      	mov	r6, r2
 800fb6a:	4699      	mov	r9, r3
 800fb6c:	688a      	ldr	r2, [r1, #8]
 800fb6e:	690b      	ldr	r3, [r1, #16]
 800fb70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb74:	4293      	cmp	r3, r2
 800fb76:	bfb8      	it	lt
 800fb78:	4613      	movlt	r3, r2
 800fb7a:	6033      	str	r3, [r6, #0]
 800fb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb80:	4607      	mov	r7, r0
 800fb82:	460c      	mov	r4, r1
 800fb84:	b10a      	cbz	r2, 800fb8a <_printf_common+0x26>
 800fb86:	3301      	adds	r3, #1
 800fb88:	6033      	str	r3, [r6, #0]
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	0699      	lsls	r1, r3, #26
 800fb8e:	bf42      	ittt	mi
 800fb90:	6833      	ldrmi	r3, [r6, #0]
 800fb92:	3302      	addmi	r3, #2
 800fb94:	6033      	strmi	r3, [r6, #0]
 800fb96:	6825      	ldr	r5, [r4, #0]
 800fb98:	f015 0506 	ands.w	r5, r5, #6
 800fb9c:	d106      	bne.n	800fbac <_printf_common+0x48>
 800fb9e:	f104 0a19 	add.w	sl, r4, #25
 800fba2:	68e3      	ldr	r3, [r4, #12]
 800fba4:	6832      	ldr	r2, [r6, #0]
 800fba6:	1a9b      	subs	r3, r3, r2
 800fba8:	42ab      	cmp	r3, r5
 800fbaa:	dc26      	bgt.n	800fbfa <_printf_common+0x96>
 800fbac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbb0:	1e13      	subs	r3, r2, #0
 800fbb2:	6822      	ldr	r2, [r4, #0]
 800fbb4:	bf18      	it	ne
 800fbb6:	2301      	movne	r3, #1
 800fbb8:	0692      	lsls	r2, r2, #26
 800fbba:	d42b      	bmi.n	800fc14 <_printf_common+0xb0>
 800fbbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbc0:	4649      	mov	r1, r9
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	47c0      	blx	r8
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	d01e      	beq.n	800fc08 <_printf_common+0xa4>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	68e5      	ldr	r5, [r4, #12]
 800fbce:	6832      	ldr	r2, [r6, #0]
 800fbd0:	f003 0306 	and.w	r3, r3, #6
 800fbd4:	2b04      	cmp	r3, #4
 800fbd6:	bf08      	it	eq
 800fbd8:	1aad      	subeq	r5, r5, r2
 800fbda:	68a3      	ldr	r3, [r4, #8]
 800fbdc:	6922      	ldr	r2, [r4, #16]
 800fbde:	bf0c      	ite	eq
 800fbe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbe4:	2500      	movne	r5, #0
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bfc4      	itt	gt
 800fbea:	1a9b      	subgt	r3, r3, r2
 800fbec:	18ed      	addgt	r5, r5, r3
 800fbee:	2600      	movs	r6, #0
 800fbf0:	341a      	adds	r4, #26
 800fbf2:	42b5      	cmp	r5, r6
 800fbf4:	d11a      	bne.n	800fc2c <_printf_common+0xc8>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	e008      	b.n	800fc0c <_printf_common+0xa8>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	4652      	mov	r2, sl
 800fbfe:	4649      	mov	r1, r9
 800fc00:	4638      	mov	r0, r7
 800fc02:	47c0      	blx	r8
 800fc04:	3001      	adds	r0, #1
 800fc06:	d103      	bne.n	800fc10 <_printf_common+0xac>
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc10:	3501      	adds	r5, #1
 800fc12:	e7c6      	b.n	800fba2 <_printf_common+0x3e>
 800fc14:	18e1      	adds	r1, r4, r3
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	2030      	movs	r0, #48	; 0x30
 800fc1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc1e:	4422      	add	r2, r4
 800fc20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc28:	3302      	adds	r3, #2
 800fc2a:	e7c7      	b.n	800fbbc <_printf_common+0x58>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	4622      	mov	r2, r4
 800fc30:	4649      	mov	r1, r9
 800fc32:	4638      	mov	r0, r7
 800fc34:	47c0      	blx	r8
 800fc36:	3001      	adds	r0, #1
 800fc38:	d0e6      	beq.n	800fc08 <_printf_common+0xa4>
 800fc3a:	3601      	adds	r6, #1
 800fc3c:	e7d9      	b.n	800fbf2 <_printf_common+0x8e>
	...

0800fc40 <_printf_i>:
 800fc40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc44:	7e0f      	ldrb	r7, [r1, #24]
 800fc46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc48:	2f78      	cmp	r7, #120	; 0x78
 800fc4a:	4691      	mov	r9, r2
 800fc4c:	4680      	mov	r8, r0
 800fc4e:	460c      	mov	r4, r1
 800fc50:	469a      	mov	sl, r3
 800fc52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc56:	d807      	bhi.n	800fc68 <_printf_i+0x28>
 800fc58:	2f62      	cmp	r7, #98	; 0x62
 800fc5a:	d80a      	bhi.n	800fc72 <_printf_i+0x32>
 800fc5c:	2f00      	cmp	r7, #0
 800fc5e:	f000 80d8 	beq.w	800fe12 <_printf_i+0x1d2>
 800fc62:	2f58      	cmp	r7, #88	; 0x58
 800fc64:	f000 80a3 	beq.w	800fdae <_printf_i+0x16e>
 800fc68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc70:	e03a      	b.n	800fce8 <_printf_i+0xa8>
 800fc72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc76:	2b15      	cmp	r3, #21
 800fc78:	d8f6      	bhi.n	800fc68 <_printf_i+0x28>
 800fc7a:	a101      	add	r1, pc, #4	; (adr r1, 800fc80 <_printf_i+0x40>)
 800fc7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc80:	0800fcd9 	.word	0x0800fcd9
 800fc84:	0800fced 	.word	0x0800fced
 800fc88:	0800fc69 	.word	0x0800fc69
 800fc8c:	0800fc69 	.word	0x0800fc69
 800fc90:	0800fc69 	.word	0x0800fc69
 800fc94:	0800fc69 	.word	0x0800fc69
 800fc98:	0800fced 	.word	0x0800fced
 800fc9c:	0800fc69 	.word	0x0800fc69
 800fca0:	0800fc69 	.word	0x0800fc69
 800fca4:	0800fc69 	.word	0x0800fc69
 800fca8:	0800fc69 	.word	0x0800fc69
 800fcac:	0800fdf9 	.word	0x0800fdf9
 800fcb0:	0800fd1d 	.word	0x0800fd1d
 800fcb4:	0800fddb 	.word	0x0800fddb
 800fcb8:	0800fc69 	.word	0x0800fc69
 800fcbc:	0800fc69 	.word	0x0800fc69
 800fcc0:	0800fe1b 	.word	0x0800fe1b
 800fcc4:	0800fc69 	.word	0x0800fc69
 800fcc8:	0800fd1d 	.word	0x0800fd1d
 800fccc:	0800fc69 	.word	0x0800fc69
 800fcd0:	0800fc69 	.word	0x0800fc69
 800fcd4:	0800fde3 	.word	0x0800fde3
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	1d1a      	adds	r2, r3, #4
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	602a      	str	r2, [r5, #0]
 800fce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fce8:	2301      	movs	r3, #1
 800fcea:	e0a3      	b.n	800fe34 <_printf_i+0x1f4>
 800fcec:	6820      	ldr	r0, [r4, #0]
 800fcee:	6829      	ldr	r1, [r5, #0]
 800fcf0:	0606      	lsls	r6, r0, #24
 800fcf2:	f101 0304 	add.w	r3, r1, #4
 800fcf6:	d50a      	bpl.n	800fd0e <_printf_i+0xce>
 800fcf8:	680e      	ldr	r6, [r1, #0]
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	2e00      	cmp	r6, #0
 800fcfe:	da03      	bge.n	800fd08 <_printf_i+0xc8>
 800fd00:	232d      	movs	r3, #45	; 0x2d
 800fd02:	4276      	negs	r6, r6
 800fd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd08:	485e      	ldr	r0, [pc, #376]	; (800fe84 <_printf_i+0x244>)
 800fd0a:	230a      	movs	r3, #10
 800fd0c:	e019      	b.n	800fd42 <_printf_i+0x102>
 800fd0e:	680e      	ldr	r6, [r1, #0]
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd16:	bf18      	it	ne
 800fd18:	b236      	sxthne	r6, r6
 800fd1a:	e7ef      	b.n	800fcfc <_printf_i+0xbc>
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	6820      	ldr	r0, [r4, #0]
 800fd20:	1d19      	adds	r1, r3, #4
 800fd22:	6029      	str	r1, [r5, #0]
 800fd24:	0601      	lsls	r1, r0, #24
 800fd26:	d501      	bpl.n	800fd2c <_printf_i+0xec>
 800fd28:	681e      	ldr	r6, [r3, #0]
 800fd2a:	e002      	b.n	800fd32 <_printf_i+0xf2>
 800fd2c:	0646      	lsls	r6, r0, #25
 800fd2e:	d5fb      	bpl.n	800fd28 <_printf_i+0xe8>
 800fd30:	881e      	ldrh	r6, [r3, #0]
 800fd32:	4854      	ldr	r0, [pc, #336]	; (800fe84 <_printf_i+0x244>)
 800fd34:	2f6f      	cmp	r7, #111	; 0x6f
 800fd36:	bf0c      	ite	eq
 800fd38:	2308      	moveq	r3, #8
 800fd3a:	230a      	movne	r3, #10
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd42:	6865      	ldr	r5, [r4, #4]
 800fd44:	60a5      	str	r5, [r4, #8]
 800fd46:	2d00      	cmp	r5, #0
 800fd48:	bfa2      	ittt	ge
 800fd4a:	6821      	ldrge	r1, [r4, #0]
 800fd4c:	f021 0104 	bicge.w	r1, r1, #4
 800fd50:	6021      	strge	r1, [r4, #0]
 800fd52:	b90e      	cbnz	r6, 800fd58 <_printf_i+0x118>
 800fd54:	2d00      	cmp	r5, #0
 800fd56:	d04d      	beq.n	800fdf4 <_printf_i+0x1b4>
 800fd58:	4615      	mov	r5, r2
 800fd5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd5e:	fb03 6711 	mls	r7, r3, r1, r6
 800fd62:	5dc7      	ldrb	r7, [r0, r7]
 800fd64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd68:	4637      	mov	r7, r6
 800fd6a:	42bb      	cmp	r3, r7
 800fd6c:	460e      	mov	r6, r1
 800fd6e:	d9f4      	bls.n	800fd5a <_printf_i+0x11a>
 800fd70:	2b08      	cmp	r3, #8
 800fd72:	d10b      	bne.n	800fd8c <_printf_i+0x14c>
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	07de      	lsls	r6, r3, #31
 800fd78:	d508      	bpl.n	800fd8c <_printf_i+0x14c>
 800fd7a:	6923      	ldr	r3, [r4, #16]
 800fd7c:	6861      	ldr	r1, [r4, #4]
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	bfde      	ittt	le
 800fd82:	2330      	movle	r3, #48	; 0x30
 800fd84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd8c:	1b52      	subs	r2, r2, r5
 800fd8e:	6122      	str	r2, [r4, #16]
 800fd90:	f8cd a000 	str.w	sl, [sp]
 800fd94:	464b      	mov	r3, r9
 800fd96:	aa03      	add	r2, sp, #12
 800fd98:	4621      	mov	r1, r4
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	f7ff fee2 	bl	800fb64 <_printf_common>
 800fda0:	3001      	adds	r0, #1
 800fda2:	d14c      	bne.n	800fe3e <_printf_i+0x1fe>
 800fda4:	f04f 30ff 	mov.w	r0, #4294967295
 800fda8:	b004      	add	sp, #16
 800fdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdae:	4835      	ldr	r0, [pc, #212]	; (800fe84 <_printf_i+0x244>)
 800fdb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fdb4:	6829      	ldr	r1, [r5, #0]
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdbc:	6029      	str	r1, [r5, #0]
 800fdbe:	061d      	lsls	r5, r3, #24
 800fdc0:	d514      	bpl.n	800fdec <_printf_i+0x1ac>
 800fdc2:	07df      	lsls	r7, r3, #31
 800fdc4:	bf44      	itt	mi
 800fdc6:	f043 0320 	orrmi.w	r3, r3, #32
 800fdca:	6023      	strmi	r3, [r4, #0]
 800fdcc:	b91e      	cbnz	r6, 800fdd6 <_printf_i+0x196>
 800fdce:	6823      	ldr	r3, [r4, #0]
 800fdd0:	f023 0320 	bic.w	r3, r3, #32
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	2310      	movs	r3, #16
 800fdd8:	e7b0      	b.n	800fd3c <_printf_i+0xfc>
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	f043 0320 	orr.w	r3, r3, #32
 800fde0:	6023      	str	r3, [r4, #0]
 800fde2:	2378      	movs	r3, #120	; 0x78
 800fde4:	4828      	ldr	r0, [pc, #160]	; (800fe88 <_printf_i+0x248>)
 800fde6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdea:	e7e3      	b.n	800fdb4 <_printf_i+0x174>
 800fdec:	0659      	lsls	r1, r3, #25
 800fdee:	bf48      	it	mi
 800fdf0:	b2b6      	uxthmi	r6, r6
 800fdf2:	e7e6      	b.n	800fdc2 <_printf_i+0x182>
 800fdf4:	4615      	mov	r5, r2
 800fdf6:	e7bb      	b.n	800fd70 <_printf_i+0x130>
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	6826      	ldr	r6, [r4, #0]
 800fdfc:	6961      	ldr	r1, [r4, #20]
 800fdfe:	1d18      	adds	r0, r3, #4
 800fe00:	6028      	str	r0, [r5, #0]
 800fe02:	0635      	lsls	r5, r6, #24
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	d501      	bpl.n	800fe0c <_printf_i+0x1cc>
 800fe08:	6019      	str	r1, [r3, #0]
 800fe0a:	e002      	b.n	800fe12 <_printf_i+0x1d2>
 800fe0c:	0670      	lsls	r0, r6, #25
 800fe0e:	d5fb      	bpl.n	800fe08 <_printf_i+0x1c8>
 800fe10:	8019      	strh	r1, [r3, #0]
 800fe12:	2300      	movs	r3, #0
 800fe14:	6123      	str	r3, [r4, #16]
 800fe16:	4615      	mov	r5, r2
 800fe18:	e7ba      	b.n	800fd90 <_printf_i+0x150>
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	1d1a      	adds	r2, r3, #4
 800fe1e:	602a      	str	r2, [r5, #0]
 800fe20:	681d      	ldr	r5, [r3, #0]
 800fe22:	6862      	ldr	r2, [r4, #4]
 800fe24:	2100      	movs	r1, #0
 800fe26:	4628      	mov	r0, r5
 800fe28:	f7f1 ff4a 	bl	8001cc0 <memchr>
 800fe2c:	b108      	cbz	r0, 800fe32 <_printf_i+0x1f2>
 800fe2e:	1b40      	subs	r0, r0, r5
 800fe30:	6060      	str	r0, [r4, #4]
 800fe32:	6863      	ldr	r3, [r4, #4]
 800fe34:	6123      	str	r3, [r4, #16]
 800fe36:	2300      	movs	r3, #0
 800fe38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe3c:	e7a8      	b.n	800fd90 <_printf_i+0x150>
 800fe3e:	6923      	ldr	r3, [r4, #16]
 800fe40:	462a      	mov	r2, r5
 800fe42:	4649      	mov	r1, r9
 800fe44:	4640      	mov	r0, r8
 800fe46:	47d0      	blx	sl
 800fe48:	3001      	adds	r0, #1
 800fe4a:	d0ab      	beq.n	800fda4 <_printf_i+0x164>
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	079b      	lsls	r3, r3, #30
 800fe50:	d413      	bmi.n	800fe7a <_printf_i+0x23a>
 800fe52:	68e0      	ldr	r0, [r4, #12]
 800fe54:	9b03      	ldr	r3, [sp, #12]
 800fe56:	4298      	cmp	r0, r3
 800fe58:	bfb8      	it	lt
 800fe5a:	4618      	movlt	r0, r3
 800fe5c:	e7a4      	b.n	800fda8 <_printf_i+0x168>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	4632      	mov	r2, r6
 800fe62:	4649      	mov	r1, r9
 800fe64:	4640      	mov	r0, r8
 800fe66:	47d0      	blx	sl
 800fe68:	3001      	adds	r0, #1
 800fe6a:	d09b      	beq.n	800fda4 <_printf_i+0x164>
 800fe6c:	3501      	adds	r5, #1
 800fe6e:	68e3      	ldr	r3, [r4, #12]
 800fe70:	9903      	ldr	r1, [sp, #12]
 800fe72:	1a5b      	subs	r3, r3, r1
 800fe74:	42ab      	cmp	r3, r5
 800fe76:	dcf2      	bgt.n	800fe5e <_printf_i+0x21e>
 800fe78:	e7eb      	b.n	800fe52 <_printf_i+0x212>
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	f104 0619 	add.w	r6, r4, #25
 800fe80:	e7f5      	b.n	800fe6e <_printf_i+0x22e>
 800fe82:	bf00      	nop
 800fe84:	08017754 	.word	0x08017754
 800fe88:	08017765 	.word	0x08017765

0800fe8c <_sbrk_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d06      	ldr	r5, [pc, #24]	; (800fea8 <_sbrk_r+0x1c>)
 800fe90:	2300      	movs	r3, #0
 800fe92:	4604      	mov	r4, r0
 800fe94:	4608      	mov	r0, r1
 800fe96:	602b      	str	r3, [r5, #0]
 800fe98:	f002 ffc0 	bl	8012e1c <_sbrk>
 800fe9c:	1c43      	adds	r3, r0, #1
 800fe9e:	d102      	bne.n	800fea6 <_sbrk_r+0x1a>
 800fea0:	682b      	ldr	r3, [r5, #0]
 800fea2:	b103      	cbz	r3, 800fea6 <_sbrk_r+0x1a>
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	bd38      	pop	{r3, r4, r5, pc}
 800fea8:	20006cd0 	.word	0x20006cd0

0800feac <frexpf>:
 800feac:	ee10 3a10 	vmov	r3, s0
 800feb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800feb4:	2100      	movs	r1, #0
 800feb6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800feba:	6001      	str	r1, [r0, #0]
 800febc:	da19      	bge.n	800fef2 <frexpf+0x46>
 800febe:	b1c2      	cbz	r2, 800fef2 <frexpf+0x46>
 800fec0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fec4:	d10a      	bne.n	800fedc <frexpf+0x30>
 800fec6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fef4 <frexpf+0x48>
 800feca:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fece:	f06f 0118 	mvn.w	r1, #24
 800fed2:	ee17 3a90 	vmov	r3, s15
 800fed6:	6001      	str	r1, [r0, #0]
 800fed8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fedc:	6801      	ldr	r1, [r0, #0]
 800fede:	15d2      	asrs	r2, r2, #23
 800fee0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fee4:	3a7e      	subs	r2, #126	; 0x7e
 800fee6:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 800feea:	440a      	add	r2, r1
 800feec:	ee00 3a10 	vmov	s0, r3
 800fef0:	6002      	str	r2, [r0, #0]
 800fef2:	4770      	bx	lr
 800fef4:	4c000000 	.word	0x4c000000

0800fef8 <ldexpf>:
 800fef8:	b510      	push	{r4, lr}
 800fefa:	ed2d 8b02 	vpush	{d8}
 800fefe:	4604      	mov	r4, r0
 800ff00:	eeb0 8a40 	vmov.f32	s16, s0
 800ff04:	f002 fa52 	bl	80123ac <finitef>
 800ff08:	b1b8      	cbz	r0, 800ff3a <ldexpf+0x42>
 800ff0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ff0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff12:	d012      	beq.n	800ff3a <ldexpf+0x42>
 800ff14:	eeb0 0a48 	vmov.f32	s0, s16
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f000 f813 	bl	800ff44 <scalbnf>
 800ff1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff22:	f002 fa43 	bl	80123ac <finitef>
 800ff26:	b120      	cbz	r0, 800ff32 <ldexpf+0x3a>
 800ff28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ff2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff30:	d103      	bne.n	800ff3a <ldexpf+0x42>
 800ff32:	f001 f843 	bl	8010fbc <__errno>
 800ff36:	2322      	movs	r3, #34	; 0x22
 800ff38:	6003      	str	r3, [r0, #0]
 800ff3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ff3e:	ecbd 8b02 	vpop	{d8}
 800ff42:	bd10      	pop	{r4, pc}

0800ff44 <scalbnf>:
 800ff44:	ee10 3a10 	vmov	r3, s0
 800ff48:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ff4c:	d025      	beq.n	800ff9a <scalbnf+0x56>
 800ff4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ff52:	d302      	bcc.n	800ff5a <scalbnf+0x16>
 800ff54:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff58:	4770      	bx	lr
 800ff5a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff5e:	d122      	bne.n	800ffa6 <scalbnf+0x62>
 800ff60:	4b2a      	ldr	r3, [pc, #168]	; (801000c <scalbnf+0xc8>)
 800ff62:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010010 <scalbnf+0xcc>
 800ff66:	4298      	cmp	r0, r3
 800ff68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff6c:	db16      	blt.n	800ff9c <scalbnf+0x58>
 800ff6e:	ee10 3a10 	vmov	r3, s0
 800ff72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ff76:	3a19      	subs	r2, #25
 800ff78:	4402      	add	r2, r0
 800ff7a:	2afe      	cmp	r2, #254	; 0xfe
 800ff7c:	dd15      	ble.n	800ffaa <scalbnf+0x66>
 800ff7e:	ee10 3a10 	vmov	r3, s0
 800ff82:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010014 <scalbnf+0xd0>
 800ff86:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010018 <scalbnf+0xd4>
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	eeb0 7a67 	vmov.f32	s14, s15
 800ff90:	bfb8      	it	lt
 800ff92:	eef0 7a66 	vmovlt.f32	s15, s13
 800ff96:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ff9a:	4770      	bx	lr
 800ff9c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801001c <scalbnf+0xd8>
 800ffa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffa4:	4770      	bx	lr
 800ffa6:	0dd2      	lsrs	r2, r2, #23
 800ffa8:	e7e6      	b.n	800ff78 <scalbnf+0x34>
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	dd06      	ble.n	800ffbc <scalbnf+0x78>
 800ffae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ffb6:	ee00 3a10 	vmov	s0, r3
 800ffba:	4770      	bx	lr
 800ffbc:	f112 0f16 	cmn.w	r2, #22
 800ffc0:	da1a      	bge.n	800fff8 <scalbnf+0xb4>
 800ffc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ffc6:	4298      	cmp	r0, r3
 800ffc8:	ee10 3a10 	vmov	r3, s0
 800ffcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffd0:	dd0a      	ble.n	800ffe8 <scalbnf+0xa4>
 800ffd2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010014 <scalbnf+0xd0>
 800ffd6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010018 <scalbnf+0xd4>
 800ffda:	eef0 7a40 	vmov.f32	s15, s0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	bf18      	it	ne
 800ffe2:	eeb0 0a47 	vmovne.f32	s0, s14
 800ffe6:	e7db      	b.n	800ffa0 <scalbnf+0x5c>
 800ffe8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801001c <scalbnf+0xd8>
 800ffec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010020 <scalbnf+0xdc>
 800fff0:	eef0 7a40 	vmov.f32	s15, s0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	e7f3      	b.n	800ffe0 <scalbnf+0x9c>
 800fff8:	3219      	adds	r2, #25
 800fffa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fffe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010002:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010024 <scalbnf+0xe0>
 8010006:	ee07 3a10 	vmov	s14, r3
 801000a:	e7c4      	b.n	800ff96 <scalbnf+0x52>
 801000c:	ffff3cb0 	.word	0xffff3cb0
 8010010:	4c000000 	.word	0x4c000000
 8010014:	7149f2ca 	.word	0x7149f2ca
 8010018:	f149f2ca 	.word	0xf149f2ca
 801001c:	0da24260 	.word	0x0da24260
 8010020:	8da24260 	.word	0x8da24260
 8010024:	33000000 	.word	0x33000000

08010028 <siscanf>:
 8010028:	b40e      	push	{r1, r2, r3}
 801002a:	b510      	push	{r4, lr}
 801002c:	b09f      	sub	sp, #124	; 0x7c
 801002e:	ac21      	add	r4, sp, #132	; 0x84
 8010030:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010034:	f854 2b04 	ldr.w	r2, [r4], #4
 8010038:	9201      	str	r2, [sp, #4]
 801003a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801003e:	9004      	str	r0, [sp, #16]
 8010040:	9008      	str	r0, [sp, #32]
 8010042:	f7f1 fe33 	bl	8001cac <strlen>
 8010046:	4b0c      	ldr	r3, [pc, #48]	; (8010078 <siscanf+0x50>)
 8010048:	9005      	str	r0, [sp, #20]
 801004a:	9009      	str	r0, [sp, #36]	; 0x24
 801004c:	930d      	str	r3, [sp, #52]	; 0x34
 801004e:	480b      	ldr	r0, [pc, #44]	; (801007c <siscanf+0x54>)
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	6800      	ldr	r0, [r0, #0]
 8010054:	9403      	str	r4, [sp, #12]
 8010056:	2300      	movs	r3, #0
 8010058:	9311      	str	r3, [sp, #68]	; 0x44
 801005a:	9316      	str	r3, [sp, #88]	; 0x58
 801005c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010060:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010064:	a904      	add	r1, sp, #16
 8010066:	4623      	mov	r3, r4
 8010068:	f001 fd32 	bl	8011ad0 <__ssvfiscanf_r>
 801006c:	b01f      	add	sp, #124	; 0x7c
 801006e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010072:	b003      	add	sp, #12
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	080100a3 	.word	0x080100a3
 801007c:	20000030 	.word	0x20000030

08010080 <__sread>:
 8010080:	b510      	push	{r4, lr}
 8010082:	460c      	mov	r4, r1
 8010084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010088:	f002 f946 	bl	8012318 <_read_r>
 801008c:	2800      	cmp	r0, #0
 801008e:	bfab      	itete	ge
 8010090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010092:	89a3      	ldrhlt	r3, [r4, #12]
 8010094:	181b      	addge	r3, r3, r0
 8010096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801009a:	bfac      	ite	ge
 801009c:	6563      	strge	r3, [r4, #84]	; 0x54
 801009e:	81a3      	strhlt	r3, [r4, #12]
 80100a0:	bd10      	pop	{r4, pc}

080100a2 <__seofread>:
 80100a2:	2000      	movs	r0, #0
 80100a4:	4770      	bx	lr

080100a6 <__swrite>:
 80100a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100aa:	461f      	mov	r7, r3
 80100ac:	898b      	ldrh	r3, [r1, #12]
 80100ae:	05db      	lsls	r3, r3, #23
 80100b0:	4605      	mov	r5, r0
 80100b2:	460c      	mov	r4, r1
 80100b4:	4616      	mov	r6, r2
 80100b6:	d505      	bpl.n	80100c4 <__swrite+0x1e>
 80100b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100bc:	2302      	movs	r3, #2
 80100be:	2200      	movs	r2, #0
 80100c0:	f000 ff98 	bl	8010ff4 <_lseek_r>
 80100c4:	89a3      	ldrh	r3, [r4, #12]
 80100c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100ce:	81a3      	strh	r3, [r4, #12]
 80100d0:	4632      	mov	r2, r6
 80100d2:	463b      	mov	r3, r7
 80100d4:	4628      	mov	r0, r5
 80100d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100da:	f000 b8b5 	b.w	8010248 <_write_r>

080100de <__sseek>:
 80100de:	b510      	push	{r4, lr}
 80100e0:	460c      	mov	r4, r1
 80100e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e6:	f000 ff85 	bl	8010ff4 <_lseek_r>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	bf15      	itete	ne
 80100f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80100f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100fa:	81a3      	strheq	r3, [r4, #12]
 80100fc:	bf18      	it	ne
 80100fe:	81a3      	strhne	r3, [r4, #12]
 8010100:	bd10      	pop	{r4, pc}

08010102 <__sclose>:
 8010102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010106:	f000 b8cf 	b.w	80102a8 <_close_r>

0801010a <strcpy>:
 801010a:	4603      	mov	r3, r0
 801010c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010110:	f803 2b01 	strb.w	r2, [r3], #1
 8010114:	2a00      	cmp	r2, #0
 8010116:	d1f9      	bne.n	801010c <strcpy+0x2>
 8010118:	4770      	bx	lr
	...

0801011c <strtok>:
 801011c:	4b16      	ldr	r3, [pc, #88]	; (8010178 <strtok+0x5c>)
 801011e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010120:	681e      	ldr	r6, [r3, #0]
 8010122:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010124:	4605      	mov	r5, r0
 8010126:	b9fc      	cbnz	r4, 8010168 <strtok+0x4c>
 8010128:	2050      	movs	r0, #80	; 0x50
 801012a:	9101      	str	r1, [sp, #4]
 801012c:	f7ff f92e 	bl	800f38c <malloc>
 8010130:	9901      	ldr	r1, [sp, #4]
 8010132:	65b0      	str	r0, [r6, #88]	; 0x58
 8010134:	4602      	mov	r2, r0
 8010136:	b920      	cbnz	r0, 8010142 <strtok+0x26>
 8010138:	4b10      	ldr	r3, [pc, #64]	; (801017c <strtok+0x60>)
 801013a:	4811      	ldr	r0, [pc, #68]	; (8010180 <strtok+0x64>)
 801013c:	2157      	movs	r1, #87	; 0x57
 801013e:	f000 f895 	bl	801026c <__assert_func>
 8010142:	e9c0 4400 	strd	r4, r4, [r0]
 8010146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801014a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801014e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010152:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010156:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801015a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801015e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010162:	6184      	str	r4, [r0, #24]
 8010164:	7704      	strb	r4, [r0, #28]
 8010166:	6244      	str	r4, [r0, #36]	; 0x24
 8010168:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801016a:	2301      	movs	r3, #1
 801016c:	4628      	mov	r0, r5
 801016e:	b002      	add	sp, #8
 8010170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010174:	f000 b806 	b.w	8010184 <__strtok_r>
 8010178:	20000030 	.word	0x20000030
 801017c:	08017776 	.word	0x08017776
 8010180:	0801778d 	.word	0x0801778d

08010184 <__strtok_r>:
 8010184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010186:	b908      	cbnz	r0, 801018c <__strtok_r+0x8>
 8010188:	6810      	ldr	r0, [r2, #0]
 801018a:	b188      	cbz	r0, 80101b0 <__strtok_r+0x2c>
 801018c:	4604      	mov	r4, r0
 801018e:	4620      	mov	r0, r4
 8010190:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010194:	460f      	mov	r7, r1
 8010196:	f817 6b01 	ldrb.w	r6, [r7], #1
 801019a:	b91e      	cbnz	r6, 80101a4 <__strtok_r+0x20>
 801019c:	b965      	cbnz	r5, 80101b8 <__strtok_r+0x34>
 801019e:	6015      	str	r5, [r2, #0]
 80101a0:	4628      	mov	r0, r5
 80101a2:	e005      	b.n	80101b0 <__strtok_r+0x2c>
 80101a4:	42b5      	cmp	r5, r6
 80101a6:	d1f6      	bne.n	8010196 <__strtok_r+0x12>
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1f0      	bne.n	801018e <__strtok_r+0xa>
 80101ac:	6014      	str	r4, [r2, #0]
 80101ae:	7003      	strb	r3, [r0, #0]
 80101b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b2:	461c      	mov	r4, r3
 80101b4:	e00c      	b.n	80101d0 <__strtok_r+0x4c>
 80101b6:	b915      	cbnz	r5, 80101be <__strtok_r+0x3a>
 80101b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101bc:	460e      	mov	r6, r1
 80101be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80101c2:	42ab      	cmp	r3, r5
 80101c4:	d1f7      	bne.n	80101b6 <__strtok_r+0x32>
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0f3      	beq.n	80101b2 <__strtok_r+0x2e>
 80101ca:	2300      	movs	r3, #0
 80101cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80101d0:	6014      	str	r4, [r2, #0]
 80101d2:	e7ed      	b.n	80101b0 <__strtok_r+0x2c>

080101d4 <_vsniprintf_r>:
 80101d4:	b530      	push	{r4, r5, lr}
 80101d6:	4614      	mov	r4, r2
 80101d8:	2c00      	cmp	r4, #0
 80101da:	b09b      	sub	sp, #108	; 0x6c
 80101dc:	4605      	mov	r5, r0
 80101de:	461a      	mov	r2, r3
 80101e0:	da05      	bge.n	80101ee <_vsniprintf_r+0x1a>
 80101e2:	238b      	movs	r3, #139	; 0x8b
 80101e4:	6003      	str	r3, [r0, #0]
 80101e6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ea:	b01b      	add	sp, #108	; 0x6c
 80101ec:	bd30      	pop	{r4, r5, pc}
 80101ee:	f44f 7302 	mov.w	r3, #520	; 0x208
 80101f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80101f6:	bf14      	ite	ne
 80101f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80101fc:	4623      	moveq	r3, r4
 80101fe:	9302      	str	r3, [sp, #8]
 8010200:	9305      	str	r3, [sp, #20]
 8010202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010206:	9100      	str	r1, [sp, #0]
 8010208:	9104      	str	r1, [sp, #16]
 801020a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801020e:	4669      	mov	r1, sp
 8010210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010212:	f001 fb03 	bl	801181c <_svfiprintf_r>
 8010216:	1c43      	adds	r3, r0, #1
 8010218:	bfbc      	itt	lt
 801021a:	238b      	movlt	r3, #139	; 0x8b
 801021c:	602b      	strlt	r3, [r5, #0]
 801021e:	2c00      	cmp	r4, #0
 8010220:	d0e3      	beq.n	80101ea <_vsniprintf_r+0x16>
 8010222:	9b00      	ldr	r3, [sp, #0]
 8010224:	2200      	movs	r2, #0
 8010226:	701a      	strb	r2, [r3, #0]
 8010228:	e7df      	b.n	80101ea <_vsniprintf_r+0x16>
	...

0801022c <vsniprintf>:
 801022c:	b507      	push	{r0, r1, r2, lr}
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	4613      	mov	r3, r2
 8010232:	460a      	mov	r2, r1
 8010234:	4601      	mov	r1, r0
 8010236:	4803      	ldr	r0, [pc, #12]	; (8010244 <vsniprintf+0x18>)
 8010238:	6800      	ldr	r0, [r0, #0]
 801023a:	f7ff ffcb 	bl	80101d4 <_vsniprintf_r>
 801023e:	b003      	add	sp, #12
 8010240:	f85d fb04 	ldr.w	pc, [sp], #4
 8010244:	20000030 	.word	0x20000030

08010248 <_write_r>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	4d07      	ldr	r5, [pc, #28]	; (8010268 <_write_r+0x20>)
 801024c:	4604      	mov	r4, r0
 801024e:	4608      	mov	r0, r1
 8010250:	4611      	mov	r1, r2
 8010252:	2200      	movs	r2, #0
 8010254:	602a      	str	r2, [r5, #0]
 8010256:	461a      	mov	r2, r3
 8010258:	f002 fdee 	bl	8012e38 <_write>
 801025c:	1c43      	adds	r3, r0, #1
 801025e:	d102      	bne.n	8010266 <_write_r+0x1e>
 8010260:	682b      	ldr	r3, [r5, #0]
 8010262:	b103      	cbz	r3, 8010266 <_write_r+0x1e>
 8010264:	6023      	str	r3, [r4, #0]
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	20006cd0 	.word	0x20006cd0

0801026c <__assert_func>:
 801026c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801026e:	4614      	mov	r4, r2
 8010270:	461a      	mov	r2, r3
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <__assert_func+0x2c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4605      	mov	r5, r0
 8010278:	68d8      	ldr	r0, [r3, #12]
 801027a:	b14c      	cbz	r4, 8010290 <__assert_func+0x24>
 801027c:	4b07      	ldr	r3, [pc, #28]	; (801029c <__assert_func+0x30>)
 801027e:	9100      	str	r1, [sp, #0]
 8010280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010284:	4906      	ldr	r1, [pc, #24]	; (80102a0 <__assert_func+0x34>)
 8010286:	462b      	mov	r3, r5
 8010288:	f000 fe9e 	bl	8010fc8 <fiprintf>
 801028c:	f002 fa8e 	bl	80127ac <abort>
 8010290:	4b04      	ldr	r3, [pc, #16]	; (80102a4 <__assert_func+0x38>)
 8010292:	461c      	mov	r4, r3
 8010294:	e7f3      	b.n	801027e <__assert_func+0x12>
 8010296:	bf00      	nop
 8010298:	20000030 	.word	0x20000030
 801029c:	0801780d 	.word	0x0801780d
 80102a0:	0801781a 	.word	0x0801781a
 80102a4:	08013857 	.word	0x08013857

080102a8 <_close_r>:
 80102a8:	b538      	push	{r3, r4, r5, lr}
 80102aa:	4d06      	ldr	r5, [pc, #24]	; (80102c4 <_close_r+0x1c>)
 80102ac:	2300      	movs	r3, #0
 80102ae:	4604      	mov	r4, r0
 80102b0:	4608      	mov	r0, r1
 80102b2:	602b      	str	r3, [r5, #0]
 80102b4:	f002 fd7a 	bl	8012dac <_close>
 80102b8:	1c43      	adds	r3, r0, #1
 80102ba:	d102      	bne.n	80102c2 <_close_r+0x1a>
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	b103      	cbz	r3, 80102c2 <_close_r+0x1a>
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	20006cd0 	.word	0x20006cd0

080102c8 <quorem>:
 80102c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	6903      	ldr	r3, [r0, #16]
 80102ce:	690c      	ldr	r4, [r1, #16]
 80102d0:	42a3      	cmp	r3, r4
 80102d2:	4607      	mov	r7, r0
 80102d4:	f2c0 8081 	blt.w	80103da <quorem+0x112>
 80102d8:	3c01      	subs	r4, #1
 80102da:	f101 0814 	add.w	r8, r1, #20
 80102de:	f100 0514 	add.w	r5, r0, #20
 80102e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102e6:	9301      	str	r3, [sp, #4]
 80102e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80102ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102f0:	3301      	adds	r3, #1
 80102f2:	429a      	cmp	r2, r3
 80102f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80102f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80102fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010300:	d331      	bcc.n	8010366 <quorem+0x9e>
 8010302:	f04f 0e00 	mov.w	lr, #0
 8010306:	4640      	mov	r0, r8
 8010308:	46ac      	mov	ip, r5
 801030a:	46f2      	mov	sl, lr
 801030c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010310:	b293      	uxth	r3, r2
 8010312:	fb06 e303 	mla	r3, r6, r3, lr
 8010316:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801031a:	b29b      	uxth	r3, r3
 801031c:	ebaa 0303 	sub.w	r3, sl, r3
 8010320:	f8dc a000 	ldr.w	sl, [ip]
 8010324:	0c12      	lsrs	r2, r2, #16
 8010326:	fa13 f38a 	uxtah	r3, r3, sl
 801032a:	fb06 e202 	mla	r2, r6, r2, lr
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	9b00      	ldr	r3, [sp, #0]
 8010332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010336:	b292      	uxth	r2, r2
 8010338:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801033c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010340:	f8bd 3000 	ldrh.w	r3, [sp]
 8010344:	4581      	cmp	r9, r0
 8010346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801034a:	f84c 3b04 	str.w	r3, [ip], #4
 801034e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010352:	d2db      	bcs.n	801030c <quorem+0x44>
 8010354:	f855 300b 	ldr.w	r3, [r5, fp]
 8010358:	b92b      	cbnz	r3, 8010366 <quorem+0x9e>
 801035a:	9b01      	ldr	r3, [sp, #4]
 801035c:	3b04      	subs	r3, #4
 801035e:	429d      	cmp	r5, r3
 8010360:	461a      	mov	r2, r3
 8010362:	d32e      	bcc.n	80103c2 <quorem+0xfa>
 8010364:	613c      	str	r4, [r7, #16]
 8010366:	4638      	mov	r0, r7
 8010368:	f001 f8e4 	bl	8011534 <__mcmp>
 801036c:	2800      	cmp	r0, #0
 801036e:	db24      	blt.n	80103ba <quorem+0xf2>
 8010370:	3601      	adds	r6, #1
 8010372:	4628      	mov	r0, r5
 8010374:	f04f 0c00 	mov.w	ip, #0
 8010378:	f858 2b04 	ldr.w	r2, [r8], #4
 801037c:	f8d0 e000 	ldr.w	lr, [r0]
 8010380:	b293      	uxth	r3, r2
 8010382:	ebac 0303 	sub.w	r3, ip, r3
 8010386:	0c12      	lsrs	r2, r2, #16
 8010388:	fa13 f38e 	uxtah	r3, r3, lr
 801038c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010394:	b29b      	uxth	r3, r3
 8010396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801039a:	45c1      	cmp	r9, r8
 801039c:	f840 3b04 	str.w	r3, [r0], #4
 80103a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80103a4:	d2e8      	bcs.n	8010378 <quorem+0xb0>
 80103a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103ae:	b922      	cbnz	r2, 80103ba <quorem+0xf2>
 80103b0:	3b04      	subs	r3, #4
 80103b2:	429d      	cmp	r5, r3
 80103b4:	461a      	mov	r2, r3
 80103b6:	d30a      	bcc.n	80103ce <quorem+0x106>
 80103b8:	613c      	str	r4, [r7, #16]
 80103ba:	4630      	mov	r0, r6
 80103bc:	b003      	add	sp, #12
 80103be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c2:	6812      	ldr	r2, [r2, #0]
 80103c4:	3b04      	subs	r3, #4
 80103c6:	2a00      	cmp	r2, #0
 80103c8:	d1cc      	bne.n	8010364 <quorem+0x9c>
 80103ca:	3c01      	subs	r4, #1
 80103cc:	e7c7      	b.n	801035e <quorem+0x96>
 80103ce:	6812      	ldr	r2, [r2, #0]
 80103d0:	3b04      	subs	r3, #4
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d1f0      	bne.n	80103b8 <quorem+0xf0>
 80103d6:	3c01      	subs	r4, #1
 80103d8:	e7eb      	b.n	80103b2 <quorem+0xea>
 80103da:	2000      	movs	r0, #0
 80103dc:	e7ee      	b.n	80103bc <quorem+0xf4>
	...

080103e0 <_dtoa_r>:
 80103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e4:	ed2d 8b04 	vpush	{d8-d9}
 80103e8:	ec57 6b10 	vmov	r6, r7, d0
 80103ec:	b093      	sub	sp, #76	; 0x4c
 80103ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80103f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80103f4:	9106      	str	r1, [sp, #24]
 80103f6:	ee10 aa10 	vmov	sl, s0
 80103fa:	4604      	mov	r4, r0
 80103fc:	9209      	str	r2, [sp, #36]	; 0x24
 80103fe:	930c      	str	r3, [sp, #48]	; 0x30
 8010400:	46bb      	mov	fp, r7
 8010402:	b975      	cbnz	r5, 8010422 <_dtoa_r+0x42>
 8010404:	2010      	movs	r0, #16
 8010406:	f7fe ffc1 	bl	800f38c <malloc>
 801040a:	4602      	mov	r2, r0
 801040c:	6260      	str	r0, [r4, #36]	; 0x24
 801040e:	b920      	cbnz	r0, 801041a <_dtoa_r+0x3a>
 8010410:	4ba7      	ldr	r3, [pc, #668]	; (80106b0 <_dtoa_r+0x2d0>)
 8010412:	21ea      	movs	r1, #234	; 0xea
 8010414:	48a7      	ldr	r0, [pc, #668]	; (80106b4 <_dtoa_r+0x2d4>)
 8010416:	f7ff ff29 	bl	801026c <__assert_func>
 801041a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801041e:	6005      	str	r5, [r0, #0]
 8010420:	60c5      	str	r5, [r0, #12]
 8010422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010424:	6819      	ldr	r1, [r3, #0]
 8010426:	b151      	cbz	r1, 801043e <_dtoa_r+0x5e>
 8010428:	685a      	ldr	r2, [r3, #4]
 801042a:	604a      	str	r2, [r1, #4]
 801042c:	2301      	movs	r3, #1
 801042e:	4093      	lsls	r3, r2
 8010430:	608b      	str	r3, [r1, #8]
 8010432:	4620      	mov	r0, r4
 8010434:	f000 fe3c 	bl	80110b0 <_Bfree>
 8010438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801043a:	2200      	movs	r2, #0
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	1e3b      	subs	r3, r7, #0
 8010440:	bfaa      	itet	ge
 8010442:	2300      	movge	r3, #0
 8010444:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010448:	f8c8 3000 	strge.w	r3, [r8]
 801044c:	4b9a      	ldr	r3, [pc, #616]	; (80106b8 <_dtoa_r+0x2d8>)
 801044e:	bfbc      	itt	lt
 8010450:	2201      	movlt	r2, #1
 8010452:	f8c8 2000 	strlt.w	r2, [r8]
 8010456:	ea33 030b 	bics.w	r3, r3, fp
 801045a:	d11b      	bne.n	8010494 <_dtoa_r+0xb4>
 801045c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801045e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010462:	6013      	str	r3, [r2, #0]
 8010464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010468:	4333      	orrs	r3, r6
 801046a:	f000 8592 	beq.w	8010f92 <_dtoa_r+0xbb2>
 801046e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010470:	b963      	cbnz	r3, 801048c <_dtoa_r+0xac>
 8010472:	4b92      	ldr	r3, [pc, #584]	; (80106bc <_dtoa_r+0x2dc>)
 8010474:	e022      	b.n	80104bc <_dtoa_r+0xdc>
 8010476:	4b92      	ldr	r3, [pc, #584]	; (80106c0 <_dtoa_r+0x2e0>)
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	3308      	adds	r3, #8
 801047c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	9801      	ldr	r0, [sp, #4]
 8010482:	b013      	add	sp, #76	; 0x4c
 8010484:	ecbd 8b04 	vpop	{d8-d9}
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	4b8b      	ldr	r3, [pc, #556]	; (80106bc <_dtoa_r+0x2dc>)
 801048e:	9301      	str	r3, [sp, #4]
 8010490:	3303      	adds	r3, #3
 8010492:	e7f3      	b.n	801047c <_dtoa_r+0x9c>
 8010494:	2200      	movs	r2, #0
 8010496:	2300      	movs	r3, #0
 8010498:	4650      	mov	r0, sl
 801049a:	4659      	mov	r1, fp
 801049c:	f7f1 fec8 	bl	8002230 <__aeabi_dcmpeq>
 80104a0:	ec4b ab19 	vmov	d9, sl, fp
 80104a4:	4680      	mov	r8, r0
 80104a6:	b158      	cbz	r0, 80104c0 <_dtoa_r+0xe0>
 80104a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104aa:	2301      	movs	r3, #1
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 856b 	beq.w	8010f8c <_dtoa_r+0xbac>
 80104b6:	4883      	ldr	r0, [pc, #524]	; (80106c4 <_dtoa_r+0x2e4>)
 80104b8:	6018      	str	r0, [r3, #0]
 80104ba:	1e43      	subs	r3, r0, #1
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	e7df      	b.n	8010480 <_dtoa_r+0xa0>
 80104c0:	ec4b ab10 	vmov	d0, sl, fp
 80104c4:	aa10      	add	r2, sp, #64	; 0x40
 80104c6:	a911      	add	r1, sp, #68	; 0x44
 80104c8:	4620      	mov	r0, r4
 80104ca:	f001 f8d9 	bl	8011680 <__d2b>
 80104ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80104d2:	ee08 0a10 	vmov	s16, r0
 80104d6:	2d00      	cmp	r5, #0
 80104d8:	f000 8084 	beq.w	80105e4 <_dtoa_r+0x204>
 80104dc:	ee19 3a90 	vmov	r3, s19
 80104e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80104e8:	4656      	mov	r6, sl
 80104ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80104ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80104f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80104f6:	4b74      	ldr	r3, [pc, #464]	; (80106c8 <_dtoa_r+0x2e8>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	4630      	mov	r0, r6
 80104fc:	4639      	mov	r1, r7
 80104fe:	f7f1 f9a3 	bl	8001848 <__aeabi_dsub>
 8010502:	a365      	add	r3, pc, #404	; (adr r3, 8010698 <_dtoa_r+0x2b8>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7f1 fc2a 	bl	8001d60 <__aeabi_dmul>
 801050c:	a364      	add	r3, pc, #400	; (adr r3, 80106a0 <_dtoa_r+0x2c0>)
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f7f1 f99b 	bl	800184c <__adddf3>
 8010516:	4606      	mov	r6, r0
 8010518:	4628      	mov	r0, r5
 801051a:	460f      	mov	r7, r1
 801051c:	f7f1 fae2 	bl	8001ae4 <__aeabi_i2d>
 8010520:	a361      	add	r3, pc, #388	; (adr r3, 80106a8 <_dtoa_r+0x2c8>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7f1 fc1b 	bl	8001d60 <__aeabi_dmul>
 801052a:	4602      	mov	r2, r0
 801052c:	460b      	mov	r3, r1
 801052e:	4630      	mov	r0, r6
 8010530:	4639      	mov	r1, r7
 8010532:	f7f1 f98b 	bl	800184c <__adddf3>
 8010536:	4606      	mov	r6, r0
 8010538:	460f      	mov	r7, r1
 801053a:	f7f1 fec1 	bl	80022c0 <__aeabi_d2iz>
 801053e:	2200      	movs	r2, #0
 8010540:	9000      	str	r0, [sp, #0]
 8010542:	2300      	movs	r3, #0
 8010544:	4630      	mov	r0, r6
 8010546:	4639      	mov	r1, r7
 8010548:	f7f1 fe7c 	bl	8002244 <__aeabi_dcmplt>
 801054c:	b150      	cbz	r0, 8010564 <_dtoa_r+0x184>
 801054e:	9800      	ldr	r0, [sp, #0]
 8010550:	f7f1 fac8 	bl	8001ae4 <__aeabi_i2d>
 8010554:	4632      	mov	r2, r6
 8010556:	463b      	mov	r3, r7
 8010558:	f7f1 fe6a 	bl	8002230 <__aeabi_dcmpeq>
 801055c:	b910      	cbnz	r0, 8010564 <_dtoa_r+0x184>
 801055e:	9b00      	ldr	r3, [sp, #0]
 8010560:	3b01      	subs	r3, #1
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	9b00      	ldr	r3, [sp, #0]
 8010566:	2b16      	cmp	r3, #22
 8010568:	d85a      	bhi.n	8010620 <_dtoa_r+0x240>
 801056a:	9a00      	ldr	r2, [sp, #0]
 801056c:	4b57      	ldr	r3, [pc, #348]	; (80106cc <_dtoa_r+0x2ec>)
 801056e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010576:	ec51 0b19 	vmov	r0, r1, d9
 801057a:	f7f1 fe63 	bl	8002244 <__aeabi_dcmplt>
 801057e:	2800      	cmp	r0, #0
 8010580:	d050      	beq.n	8010624 <_dtoa_r+0x244>
 8010582:	9b00      	ldr	r3, [sp, #0]
 8010584:	3b01      	subs	r3, #1
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	2300      	movs	r3, #0
 801058a:	930b      	str	r3, [sp, #44]	; 0x2c
 801058c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801058e:	1b5d      	subs	r5, r3, r5
 8010590:	1e6b      	subs	r3, r5, #1
 8010592:	9305      	str	r3, [sp, #20]
 8010594:	bf45      	ittet	mi
 8010596:	f1c5 0301 	rsbmi	r3, r5, #1
 801059a:	9304      	strmi	r3, [sp, #16]
 801059c:	2300      	movpl	r3, #0
 801059e:	2300      	movmi	r3, #0
 80105a0:	bf4c      	ite	mi
 80105a2:	9305      	strmi	r3, [sp, #20]
 80105a4:	9304      	strpl	r3, [sp, #16]
 80105a6:	9b00      	ldr	r3, [sp, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	db3d      	blt.n	8010628 <_dtoa_r+0x248>
 80105ac:	9b05      	ldr	r3, [sp, #20]
 80105ae:	9a00      	ldr	r2, [sp, #0]
 80105b0:	920a      	str	r2, [sp, #40]	; 0x28
 80105b2:	4413      	add	r3, r2
 80105b4:	9305      	str	r3, [sp, #20]
 80105b6:	2300      	movs	r3, #0
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	9b06      	ldr	r3, [sp, #24]
 80105bc:	2b09      	cmp	r3, #9
 80105be:	f200 8089 	bhi.w	80106d4 <_dtoa_r+0x2f4>
 80105c2:	2b05      	cmp	r3, #5
 80105c4:	bfc4      	itt	gt
 80105c6:	3b04      	subgt	r3, #4
 80105c8:	9306      	strgt	r3, [sp, #24]
 80105ca:	9b06      	ldr	r3, [sp, #24]
 80105cc:	f1a3 0302 	sub.w	r3, r3, #2
 80105d0:	bfcc      	ite	gt
 80105d2:	2500      	movgt	r5, #0
 80105d4:	2501      	movle	r5, #1
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	f200 8087 	bhi.w	80106ea <_dtoa_r+0x30a>
 80105dc:	e8df f003 	tbb	[pc, r3]
 80105e0:	59383a2d 	.word	0x59383a2d
 80105e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80105e8:	441d      	add	r5, r3
 80105ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80105ee:	2b20      	cmp	r3, #32
 80105f0:	bfc1      	itttt	gt
 80105f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80105f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80105fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80105fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010602:	bfda      	itte	le
 8010604:	f1c3 0320 	rsble	r3, r3, #32
 8010608:	fa06 f003 	lslle.w	r0, r6, r3
 801060c:	4318      	orrgt	r0, r3
 801060e:	f7f1 fa59 	bl	8001ac4 <__aeabi_ui2d>
 8010612:	2301      	movs	r3, #1
 8010614:	4606      	mov	r6, r0
 8010616:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801061a:	3d01      	subs	r5, #1
 801061c:	930e      	str	r3, [sp, #56]	; 0x38
 801061e:	e76a      	b.n	80104f6 <_dtoa_r+0x116>
 8010620:	2301      	movs	r3, #1
 8010622:	e7b2      	b.n	801058a <_dtoa_r+0x1aa>
 8010624:	900b      	str	r0, [sp, #44]	; 0x2c
 8010626:	e7b1      	b.n	801058c <_dtoa_r+0x1ac>
 8010628:	9b04      	ldr	r3, [sp, #16]
 801062a:	9a00      	ldr	r2, [sp, #0]
 801062c:	1a9b      	subs	r3, r3, r2
 801062e:	9304      	str	r3, [sp, #16]
 8010630:	4253      	negs	r3, r2
 8010632:	9307      	str	r3, [sp, #28]
 8010634:	2300      	movs	r3, #0
 8010636:	930a      	str	r3, [sp, #40]	; 0x28
 8010638:	e7bf      	b.n	80105ba <_dtoa_r+0x1da>
 801063a:	2300      	movs	r3, #0
 801063c:	9308      	str	r3, [sp, #32]
 801063e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010640:	2b00      	cmp	r3, #0
 8010642:	dc55      	bgt.n	80106f0 <_dtoa_r+0x310>
 8010644:	2301      	movs	r3, #1
 8010646:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801064a:	461a      	mov	r2, r3
 801064c:	9209      	str	r2, [sp, #36]	; 0x24
 801064e:	e00c      	b.n	801066a <_dtoa_r+0x28a>
 8010650:	2301      	movs	r3, #1
 8010652:	e7f3      	b.n	801063c <_dtoa_r+0x25c>
 8010654:	2300      	movs	r3, #0
 8010656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010658:	9308      	str	r3, [sp, #32]
 801065a:	9b00      	ldr	r3, [sp, #0]
 801065c:	4413      	add	r3, r2
 801065e:	9302      	str	r3, [sp, #8]
 8010660:	3301      	adds	r3, #1
 8010662:	2b01      	cmp	r3, #1
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	bfb8      	it	lt
 8010668:	2301      	movlt	r3, #1
 801066a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801066c:	2200      	movs	r2, #0
 801066e:	6042      	str	r2, [r0, #4]
 8010670:	2204      	movs	r2, #4
 8010672:	f102 0614 	add.w	r6, r2, #20
 8010676:	429e      	cmp	r6, r3
 8010678:	6841      	ldr	r1, [r0, #4]
 801067a:	d93d      	bls.n	80106f8 <_dtoa_r+0x318>
 801067c:	4620      	mov	r0, r4
 801067e:	f000 fcd7 	bl	8011030 <_Balloc>
 8010682:	9001      	str	r0, [sp, #4]
 8010684:	2800      	cmp	r0, #0
 8010686:	d13b      	bne.n	8010700 <_dtoa_r+0x320>
 8010688:	4b11      	ldr	r3, [pc, #68]	; (80106d0 <_dtoa_r+0x2f0>)
 801068a:	4602      	mov	r2, r0
 801068c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010690:	e6c0      	b.n	8010414 <_dtoa_r+0x34>
 8010692:	2301      	movs	r3, #1
 8010694:	e7df      	b.n	8010656 <_dtoa_r+0x276>
 8010696:	bf00      	nop
 8010698:	636f4361 	.word	0x636f4361
 801069c:	3fd287a7 	.word	0x3fd287a7
 80106a0:	8b60c8b3 	.word	0x8b60c8b3
 80106a4:	3fc68a28 	.word	0x3fc68a28
 80106a8:	509f79fb 	.word	0x509f79fb
 80106ac:	3fd34413 	.word	0x3fd34413
 80106b0:	08017776 	.word	0x08017776
 80106b4:	08017856 	.word	0x08017856
 80106b8:	7ff00000 	.word	0x7ff00000
 80106bc:	08017852 	.word	0x08017852
 80106c0:	08017849 	.word	0x08017849
 80106c4:	08017a7a 	.word	0x08017a7a
 80106c8:	3ff80000 	.word	0x3ff80000
 80106cc:	08017990 	.word	0x08017990
 80106d0:	080178d4 	.word	0x080178d4
 80106d4:	2501      	movs	r5, #1
 80106d6:	2300      	movs	r3, #0
 80106d8:	9306      	str	r3, [sp, #24]
 80106da:	9508      	str	r5, [sp, #32]
 80106dc:	f04f 33ff 	mov.w	r3, #4294967295
 80106e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80106e4:	2200      	movs	r2, #0
 80106e6:	2312      	movs	r3, #18
 80106e8:	e7b0      	b.n	801064c <_dtoa_r+0x26c>
 80106ea:	2301      	movs	r3, #1
 80106ec:	9308      	str	r3, [sp, #32]
 80106ee:	e7f5      	b.n	80106dc <_dtoa_r+0x2fc>
 80106f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80106f6:	e7b8      	b.n	801066a <_dtoa_r+0x28a>
 80106f8:	3101      	adds	r1, #1
 80106fa:	6041      	str	r1, [r0, #4]
 80106fc:	0052      	lsls	r2, r2, #1
 80106fe:	e7b8      	b.n	8010672 <_dtoa_r+0x292>
 8010700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010702:	9a01      	ldr	r2, [sp, #4]
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	9b03      	ldr	r3, [sp, #12]
 8010708:	2b0e      	cmp	r3, #14
 801070a:	f200 809d 	bhi.w	8010848 <_dtoa_r+0x468>
 801070e:	2d00      	cmp	r5, #0
 8010710:	f000 809a 	beq.w	8010848 <_dtoa_r+0x468>
 8010714:	9b00      	ldr	r3, [sp, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	dd32      	ble.n	8010780 <_dtoa_r+0x3a0>
 801071a:	4ab7      	ldr	r2, [pc, #732]	; (80109f8 <_dtoa_r+0x618>)
 801071c:	f003 030f 	and.w	r3, r3, #15
 8010720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010724:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010728:	9b00      	ldr	r3, [sp, #0]
 801072a:	05d8      	lsls	r0, r3, #23
 801072c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010730:	d516      	bpl.n	8010760 <_dtoa_r+0x380>
 8010732:	4bb2      	ldr	r3, [pc, #712]	; (80109fc <_dtoa_r+0x61c>)
 8010734:	ec51 0b19 	vmov	r0, r1, d9
 8010738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801073c:	f7f1 fc3a 	bl	8001fb4 <__aeabi_ddiv>
 8010740:	f007 070f 	and.w	r7, r7, #15
 8010744:	4682      	mov	sl, r0
 8010746:	468b      	mov	fp, r1
 8010748:	2503      	movs	r5, #3
 801074a:	4eac      	ldr	r6, [pc, #688]	; (80109fc <_dtoa_r+0x61c>)
 801074c:	b957      	cbnz	r7, 8010764 <_dtoa_r+0x384>
 801074e:	4642      	mov	r2, r8
 8010750:	464b      	mov	r3, r9
 8010752:	4650      	mov	r0, sl
 8010754:	4659      	mov	r1, fp
 8010756:	f7f1 fc2d 	bl	8001fb4 <__aeabi_ddiv>
 801075a:	4682      	mov	sl, r0
 801075c:	468b      	mov	fp, r1
 801075e:	e028      	b.n	80107b2 <_dtoa_r+0x3d2>
 8010760:	2502      	movs	r5, #2
 8010762:	e7f2      	b.n	801074a <_dtoa_r+0x36a>
 8010764:	07f9      	lsls	r1, r7, #31
 8010766:	d508      	bpl.n	801077a <_dtoa_r+0x39a>
 8010768:	4640      	mov	r0, r8
 801076a:	4649      	mov	r1, r9
 801076c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010770:	f7f1 faf6 	bl	8001d60 <__aeabi_dmul>
 8010774:	3501      	adds	r5, #1
 8010776:	4680      	mov	r8, r0
 8010778:	4689      	mov	r9, r1
 801077a:	107f      	asrs	r7, r7, #1
 801077c:	3608      	adds	r6, #8
 801077e:	e7e5      	b.n	801074c <_dtoa_r+0x36c>
 8010780:	f000 809b 	beq.w	80108ba <_dtoa_r+0x4da>
 8010784:	9b00      	ldr	r3, [sp, #0]
 8010786:	4f9d      	ldr	r7, [pc, #628]	; (80109fc <_dtoa_r+0x61c>)
 8010788:	425e      	negs	r6, r3
 801078a:	4b9b      	ldr	r3, [pc, #620]	; (80109f8 <_dtoa_r+0x618>)
 801078c:	f006 020f 	and.w	r2, r6, #15
 8010790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	ec51 0b19 	vmov	r0, r1, d9
 801079c:	f7f1 fae0 	bl	8001d60 <__aeabi_dmul>
 80107a0:	1136      	asrs	r6, r6, #4
 80107a2:	4682      	mov	sl, r0
 80107a4:	468b      	mov	fp, r1
 80107a6:	2300      	movs	r3, #0
 80107a8:	2502      	movs	r5, #2
 80107aa:	2e00      	cmp	r6, #0
 80107ac:	d17a      	bne.n	80108a4 <_dtoa_r+0x4c4>
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1d3      	bne.n	801075a <_dtoa_r+0x37a>
 80107b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f000 8082 	beq.w	80108be <_dtoa_r+0x4de>
 80107ba:	4b91      	ldr	r3, [pc, #580]	; (8010a00 <_dtoa_r+0x620>)
 80107bc:	2200      	movs	r2, #0
 80107be:	4650      	mov	r0, sl
 80107c0:	4659      	mov	r1, fp
 80107c2:	f7f1 fd3f 	bl	8002244 <__aeabi_dcmplt>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d079      	beq.n	80108be <_dtoa_r+0x4de>
 80107ca:	9b03      	ldr	r3, [sp, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d076      	beq.n	80108be <_dtoa_r+0x4de>
 80107d0:	9b02      	ldr	r3, [sp, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	dd36      	ble.n	8010844 <_dtoa_r+0x464>
 80107d6:	9b00      	ldr	r3, [sp, #0]
 80107d8:	4650      	mov	r0, sl
 80107da:	4659      	mov	r1, fp
 80107dc:	1e5f      	subs	r7, r3, #1
 80107de:	2200      	movs	r2, #0
 80107e0:	4b88      	ldr	r3, [pc, #544]	; (8010a04 <_dtoa_r+0x624>)
 80107e2:	f7f1 fabd 	bl	8001d60 <__aeabi_dmul>
 80107e6:	9e02      	ldr	r6, [sp, #8]
 80107e8:	4682      	mov	sl, r0
 80107ea:	468b      	mov	fp, r1
 80107ec:	3501      	adds	r5, #1
 80107ee:	4628      	mov	r0, r5
 80107f0:	f7f1 f978 	bl	8001ae4 <__aeabi_i2d>
 80107f4:	4652      	mov	r2, sl
 80107f6:	465b      	mov	r3, fp
 80107f8:	f7f1 fab2 	bl	8001d60 <__aeabi_dmul>
 80107fc:	4b82      	ldr	r3, [pc, #520]	; (8010a08 <_dtoa_r+0x628>)
 80107fe:	2200      	movs	r2, #0
 8010800:	f7f1 f824 	bl	800184c <__adddf3>
 8010804:	46d0      	mov	r8, sl
 8010806:	46d9      	mov	r9, fp
 8010808:	4682      	mov	sl, r0
 801080a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801080e:	2e00      	cmp	r6, #0
 8010810:	d158      	bne.n	80108c4 <_dtoa_r+0x4e4>
 8010812:	4b7e      	ldr	r3, [pc, #504]	; (8010a0c <_dtoa_r+0x62c>)
 8010814:	2200      	movs	r2, #0
 8010816:	4640      	mov	r0, r8
 8010818:	4649      	mov	r1, r9
 801081a:	f7f1 f815 	bl	8001848 <__aeabi_dsub>
 801081e:	4652      	mov	r2, sl
 8010820:	465b      	mov	r3, fp
 8010822:	4680      	mov	r8, r0
 8010824:	4689      	mov	r9, r1
 8010826:	f7f1 fd2b 	bl	8002280 <__aeabi_dcmpgt>
 801082a:	2800      	cmp	r0, #0
 801082c:	f040 8295 	bne.w	8010d5a <_dtoa_r+0x97a>
 8010830:	4652      	mov	r2, sl
 8010832:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010836:	4640      	mov	r0, r8
 8010838:	4649      	mov	r1, r9
 801083a:	f7f1 fd03 	bl	8002244 <__aeabi_dcmplt>
 801083e:	2800      	cmp	r0, #0
 8010840:	f040 8289 	bne.w	8010d56 <_dtoa_r+0x976>
 8010844:	ec5b ab19 	vmov	sl, fp, d9
 8010848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801084a:	2b00      	cmp	r3, #0
 801084c:	f2c0 8148 	blt.w	8010ae0 <_dtoa_r+0x700>
 8010850:	9a00      	ldr	r2, [sp, #0]
 8010852:	2a0e      	cmp	r2, #14
 8010854:	f300 8144 	bgt.w	8010ae0 <_dtoa_r+0x700>
 8010858:	4b67      	ldr	r3, [pc, #412]	; (80109f8 <_dtoa_r+0x618>)
 801085a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801085e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	f280 80d5 	bge.w	8010a14 <_dtoa_r+0x634>
 801086a:	9b03      	ldr	r3, [sp, #12]
 801086c:	2b00      	cmp	r3, #0
 801086e:	f300 80d1 	bgt.w	8010a14 <_dtoa_r+0x634>
 8010872:	f040 826f 	bne.w	8010d54 <_dtoa_r+0x974>
 8010876:	4b65      	ldr	r3, [pc, #404]	; (8010a0c <_dtoa_r+0x62c>)
 8010878:	2200      	movs	r2, #0
 801087a:	4640      	mov	r0, r8
 801087c:	4649      	mov	r1, r9
 801087e:	f7f1 fa6f 	bl	8001d60 <__aeabi_dmul>
 8010882:	4652      	mov	r2, sl
 8010884:	465b      	mov	r3, fp
 8010886:	f7f1 fcf1 	bl	800226c <__aeabi_dcmpge>
 801088a:	9e03      	ldr	r6, [sp, #12]
 801088c:	4637      	mov	r7, r6
 801088e:	2800      	cmp	r0, #0
 8010890:	f040 8245 	bne.w	8010d1e <_dtoa_r+0x93e>
 8010894:	9d01      	ldr	r5, [sp, #4]
 8010896:	2331      	movs	r3, #49	; 0x31
 8010898:	f805 3b01 	strb.w	r3, [r5], #1
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	3301      	adds	r3, #1
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	e240      	b.n	8010d26 <_dtoa_r+0x946>
 80108a4:	07f2      	lsls	r2, r6, #31
 80108a6:	d505      	bpl.n	80108b4 <_dtoa_r+0x4d4>
 80108a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108ac:	f7f1 fa58 	bl	8001d60 <__aeabi_dmul>
 80108b0:	3501      	adds	r5, #1
 80108b2:	2301      	movs	r3, #1
 80108b4:	1076      	asrs	r6, r6, #1
 80108b6:	3708      	adds	r7, #8
 80108b8:	e777      	b.n	80107aa <_dtoa_r+0x3ca>
 80108ba:	2502      	movs	r5, #2
 80108bc:	e779      	b.n	80107b2 <_dtoa_r+0x3d2>
 80108be:	9f00      	ldr	r7, [sp, #0]
 80108c0:	9e03      	ldr	r6, [sp, #12]
 80108c2:	e794      	b.n	80107ee <_dtoa_r+0x40e>
 80108c4:	9901      	ldr	r1, [sp, #4]
 80108c6:	4b4c      	ldr	r3, [pc, #304]	; (80109f8 <_dtoa_r+0x618>)
 80108c8:	4431      	add	r1, r6
 80108ca:	910d      	str	r1, [sp, #52]	; 0x34
 80108cc:	9908      	ldr	r1, [sp, #32]
 80108ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80108d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80108d6:	2900      	cmp	r1, #0
 80108d8:	d043      	beq.n	8010962 <_dtoa_r+0x582>
 80108da:	494d      	ldr	r1, [pc, #308]	; (8010a10 <_dtoa_r+0x630>)
 80108dc:	2000      	movs	r0, #0
 80108de:	f7f1 fb69 	bl	8001fb4 <__aeabi_ddiv>
 80108e2:	4652      	mov	r2, sl
 80108e4:	465b      	mov	r3, fp
 80108e6:	f7f0 ffaf 	bl	8001848 <__aeabi_dsub>
 80108ea:	9d01      	ldr	r5, [sp, #4]
 80108ec:	4682      	mov	sl, r0
 80108ee:	468b      	mov	fp, r1
 80108f0:	4649      	mov	r1, r9
 80108f2:	4640      	mov	r0, r8
 80108f4:	f7f1 fce4 	bl	80022c0 <__aeabi_d2iz>
 80108f8:	4606      	mov	r6, r0
 80108fa:	f7f1 f8f3 	bl	8001ae4 <__aeabi_i2d>
 80108fe:	4602      	mov	r2, r0
 8010900:	460b      	mov	r3, r1
 8010902:	4640      	mov	r0, r8
 8010904:	4649      	mov	r1, r9
 8010906:	f7f0 ff9f 	bl	8001848 <__aeabi_dsub>
 801090a:	3630      	adds	r6, #48	; 0x30
 801090c:	f805 6b01 	strb.w	r6, [r5], #1
 8010910:	4652      	mov	r2, sl
 8010912:	465b      	mov	r3, fp
 8010914:	4680      	mov	r8, r0
 8010916:	4689      	mov	r9, r1
 8010918:	f7f1 fc94 	bl	8002244 <__aeabi_dcmplt>
 801091c:	2800      	cmp	r0, #0
 801091e:	d163      	bne.n	80109e8 <_dtoa_r+0x608>
 8010920:	4642      	mov	r2, r8
 8010922:	464b      	mov	r3, r9
 8010924:	4936      	ldr	r1, [pc, #216]	; (8010a00 <_dtoa_r+0x620>)
 8010926:	2000      	movs	r0, #0
 8010928:	f7f0 ff8e 	bl	8001848 <__aeabi_dsub>
 801092c:	4652      	mov	r2, sl
 801092e:	465b      	mov	r3, fp
 8010930:	f7f1 fc88 	bl	8002244 <__aeabi_dcmplt>
 8010934:	2800      	cmp	r0, #0
 8010936:	f040 80b5 	bne.w	8010aa4 <_dtoa_r+0x6c4>
 801093a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801093c:	429d      	cmp	r5, r3
 801093e:	d081      	beq.n	8010844 <_dtoa_r+0x464>
 8010940:	4b30      	ldr	r3, [pc, #192]	; (8010a04 <_dtoa_r+0x624>)
 8010942:	2200      	movs	r2, #0
 8010944:	4650      	mov	r0, sl
 8010946:	4659      	mov	r1, fp
 8010948:	f7f1 fa0a 	bl	8001d60 <__aeabi_dmul>
 801094c:	4b2d      	ldr	r3, [pc, #180]	; (8010a04 <_dtoa_r+0x624>)
 801094e:	4682      	mov	sl, r0
 8010950:	468b      	mov	fp, r1
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	2200      	movs	r2, #0
 8010958:	f7f1 fa02 	bl	8001d60 <__aeabi_dmul>
 801095c:	4680      	mov	r8, r0
 801095e:	4689      	mov	r9, r1
 8010960:	e7c6      	b.n	80108f0 <_dtoa_r+0x510>
 8010962:	4650      	mov	r0, sl
 8010964:	4659      	mov	r1, fp
 8010966:	f7f1 f9fb 	bl	8001d60 <__aeabi_dmul>
 801096a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801096c:	9d01      	ldr	r5, [sp, #4]
 801096e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010970:	4682      	mov	sl, r0
 8010972:	468b      	mov	fp, r1
 8010974:	4649      	mov	r1, r9
 8010976:	4640      	mov	r0, r8
 8010978:	f7f1 fca2 	bl	80022c0 <__aeabi_d2iz>
 801097c:	4606      	mov	r6, r0
 801097e:	f7f1 f8b1 	bl	8001ae4 <__aeabi_i2d>
 8010982:	3630      	adds	r6, #48	; 0x30
 8010984:	4602      	mov	r2, r0
 8010986:	460b      	mov	r3, r1
 8010988:	4640      	mov	r0, r8
 801098a:	4649      	mov	r1, r9
 801098c:	f7f0 ff5c 	bl	8001848 <__aeabi_dsub>
 8010990:	f805 6b01 	strb.w	r6, [r5], #1
 8010994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010996:	429d      	cmp	r5, r3
 8010998:	4680      	mov	r8, r0
 801099a:	4689      	mov	r9, r1
 801099c:	f04f 0200 	mov.w	r2, #0
 80109a0:	d124      	bne.n	80109ec <_dtoa_r+0x60c>
 80109a2:	4b1b      	ldr	r3, [pc, #108]	; (8010a10 <_dtoa_r+0x630>)
 80109a4:	4650      	mov	r0, sl
 80109a6:	4659      	mov	r1, fp
 80109a8:	f7f0 ff50 	bl	800184c <__adddf3>
 80109ac:	4602      	mov	r2, r0
 80109ae:	460b      	mov	r3, r1
 80109b0:	4640      	mov	r0, r8
 80109b2:	4649      	mov	r1, r9
 80109b4:	f7f1 fc64 	bl	8002280 <__aeabi_dcmpgt>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d173      	bne.n	8010aa4 <_dtoa_r+0x6c4>
 80109bc:	4652      	mov	r2, sl
 80109be:	465b      	mov	r3, fp
 80109c0:	4913      	ldr	r1, [pc, #76]	; (8010a10 <_dtoa_r+0x630>)
 80109c2:	2000      	movs	r0, #0
 80109c4:	f7f0 ff40 	bl	8001848 <__aeabi_dsub>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	4640      	mov	r0, r8
 80109ce:	4649      	mov	r1, r9
 80109d0:	f7f1 fc38 	bl	8002244 <__aeabi_dcmplt>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	f43f af35 	beq.w	8010844 <_dtoa_r+0x464>
 80109da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80109dc:	1e6b      	subs	r3, r5, #1
 80109de:	930f      	str	r3, [sp, #60]	; 0x3c
 80109e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80109e4:	2b30      	cmp	r3, #48	; 0x30
 80109e6:	d0f8      	beq.n	80109da <_dtoa_r+0x5fa>
 80109e8:	9700      	str	r7, [sp, #0]
 80109ea:	e049      	b.n	8010a80 <_dtoa_r+0x6a0>
 80109ec:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <_dtoa_r+0x624>)
 80109ee:	f7f1 f9b7 	bl	8001d60 <__aeabi_dmul>
 80109f2:	4680      	mov	r8, r0
 80109f4:	4689      	mov	r9, r1
 80109f6:	e7bd      	b.n	8010974 <_dtoa_r+0x594>
 80109f8:	08017990 	.word	0x08017990
 80109fc:	08017968 	.word	0x08017968
 8010a00:	3ff00000 	.word	0x3ff00000
 8010a04:	40240000 	.word	0x40240000
 8010a08:	401c0000 	.word	0x401c0000
 8010a0c:	40140000 	.word	0x40140000
 8010a10:	3fe00000 	.word	0x3fe00000
 8010a14:	9d01      	ldr	r5, [sp, #4]
 8010a16:	4656      	mov	r6, sl
 8010a18:	465f      	mov	r7, fp
 8010a1a:	4642      	mov	r2, r8
 8010a1c:	464b      	mov	r3, r9
 8010a1e:	4630      	mov	r0, r6
 8010a20:	4639      	mov	r1, r7
 8010a22:	f7f1 fac7 	bl	8001fb4 <__aeabi_ddiv>
 8010a26:	f7f1 fc4b 	bl	80022c0 <__aeabi_d2iz>
 8010a2a:	4682      	mov	sl, r0
 8010a2c:	f7f1 f85a 	bl	8001ae4 <__aeabi_i2d>
 8010a30:	4642      	mov	r2, r8
 8010a32:	464b      	mov	r3, r9
 8010a34:	f7f1 f994 	bl	8001d60 <__aeabi_dmul>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	4639      	mov	r1, r7
 8010a40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010a44:	f7f0 ff00 	bl	8001848 <__aeabi_dsub>
 8010a48:	f805 6b01 	strb.w	r6, [r5], #1
 8010a4c:	9e01      	ldr	r6, [sp, #4]
 8010a4e:	9f03      	ldr	r7, [sp, #12]
 8010a50:	1bae      	subs	r6, r5, r6
 8010a52:	42b7      	cmp	r7, r6
 8010a54:	4602      	mov	r2, r0
 8010a56:	460b      	mov	r3, r1
 8010a58:	d135      	bne.n	8010ac6 <_dtoa_r+0x6e6>
 8010a5a:	f7f0 fef7 	bl	800184c <__adddf3>
 8010a5e:	4642      	mov	r2, r8
 8010a60:	464b      	mov	r3, r9
 8010a62:	4606      	mov	r6, r0
 8010a64:	460f      	mov	r7, r1
 8010a66:	f7f1 fc0b 	bl	8002280 <__aeabi_dcmpgt>
 8010a6a:	b9d0      	cbnz	r0, 8010aa2 <_dtoa_r+0x6c2>
 8010a6c:	4642      	mov	r2, r8
 8010a6e:	464b      	mov	r3, r9
 8010a70:	4630      	mov	r0, r6
 8010a72:	4639      	mov	r1, r7
 8010a74:	f7f1 fbdc 	bl	8002230 <__aeabi_dcmpeq>
 8010a78:	b110      	cbz	r0, 8010a80 <_dtoa_r+0x6a0>
 8010a7a:	f01a 0f01 	tst.w	sl, #1
 8010a7e:	d110      	bne.n	8010aa2 <_dtoa_r+0x6c2>
 8010a80:	4620      	mov	r0, r4
 8010a82:	ee18 1a10 	vmov	r1, s16
 8010a86:	f000 fb13 	bl	80110b0 <_Bfree>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	9800      	ldr	r0, [sp, #0]
 8010a8e:	702b      	strb	r3, [r5, #0]
 8010a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a92:	3001      	adds	r0, #1
 8010a94:	6018      	str	r0, [r3, #0]
 8010a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f43f acf1 	beq.w	8010480 <_dtoa_r+0xa0>
 8010a9e:	601d      	str	r5, [r3, #0]
 8010aa0:	e4ee      	b.n	8010480 <_dtoa_r+0xa0>
 8010aa2:	9f00      	ldr	r7, [sp, #0]
 8010aa4:	462b      	mov	r3, r5
 8010aa6:	461d      	mov	r5, r3
 8010aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010aac:	2a39      	cmp	r2, #57	; 0x39
 8010aae:	d106      	bne.n	8010abe <_dtoa_r+0x6de>
 8010ab0:	9a01      	ldr	r2, [sp, #4]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d1f7      	bne.n	8010aa6 <_dtoa_r+0x6c6>
 8010ab6:	9901      	ldr	r1, [sp, #4]
 8010ab8:	2230      	movs	r2, #48	; 0x30
 8010aba:	3701      	adds	r7, #1
 8010abc:	700a      	strb	r2, [r1, #0]
 8010abe:	781a      	ldrb	r2, [r3, #0]
 8010ac0:	3201      	adds	r2, #1
 8010ac2:	701a      	strb	r2, [r3, #0]
 8010ac4:	e790      	b.n	80109e8 <_dtoa_r+0x608>
 8010ac6:	4ba6      	ldr	r3, [pc, #664]	; (8010d60 <_dtoa_r+0x980>)
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f7f1 f949 	bl	8001d60 <__aeabi_dmul>
 8010ace:	2200      	movs	r2, #0
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	4606      	mov	r6, r0
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	f7f1 fbab 	bl	8002230 <__aeabi_dcmpeq>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d09d      	beq.n	8010a1a <_dtoa_r+0x63a>
 8010ade:	e7cf      	b.n	8010a80 <_dtoa_r+0x6a0>
 8010ae0:	9a08      	ldr	r2, [sp, #32]
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	f000 80d7 	beq.w	8010c96 <_dtoa_r+0x8b6>
 8010ae8:	9a06      	ldr	r2, [sp, #24]
 8010aea:	2a01      	cmp	r2, #1
 8010aec:	f300 80ba 	bgt.w	8010c64 <_dtoa_r+0x884>
 8010af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010af2:	2a00      	cmp	r2, #0
 8010af4:	f000 80b2 	beq.w	8010c5c <_dtoa_r+0x87c>
 8010af8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010afc:	9e07      	ldr	r6, [sp, #28]
 8010afe:	9d04      	ldr	r5, [sp, #16]
 8010b00:	9a04      	ldr	r2, [sp, #16]
 8010b02:	441a      	add	r2, r3
 8010b04:	9204      	str	r2, [sp, #16]
 8010b06:	9a05      	ldr	r2, [sp, #20]
 8010b08:	2101      	movs	r1, #1
 8010b0a:	441a      	add	r2, r3
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	9205      	str	r2, [sp, #20]
 8010b10:	f000 fb86 	bl	8011220 <__i2b>
 8010b14:	4607      	mov	r7, r0
 8010b16:	2d00      	cmp	r5, #0
 8010b18:	dd0c      	ble.n	8010b34 <_dtoa_r+0x754>
 8010b1a:	9b05      	ldr	r3, [sp, #20]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	dd09      	ble.n	8010b34 <_dtoa_r+0x754>
 8010b20:	42ab      	cmp	r3, r5
 8010b22:	9a04      	ldr	r2, [sp, #16]
 8010b24:	bfa8      	it	ge
 8010b26:	462b      	movge	r3, r5
 8010b28:	1ad2      	subs	r2, r2, r3
 8010b2a:	9204      	str	r2, [sp, #16]
 8010b2c:	9a05      	ldr	r2, [sp, #20]
 8010b2e:	1aed      	subs	r5, r5, r3
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	9305      	str	r3, [sp, #20]
 8010b34:	9b07      	ldr	r3, [sp, #28]
 8010b36:	b31b      	cbz	r3, 8010b80 <_dtoa_r+0x7a0>
 8010b38:	9b08      	ldr	r3, [sp, #32]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f000 80af 	beq.w	8010c9e <_dtoa_r+0x8be>
 8010b40:	2e00      	cmp	r6, #0
 8010b42:	dd13      	ble.n	8010b6c <_dtoa_r+0x78c>
 8010b44:	4639      	mov	r1, r7
 8010b46:	4632      	mov	r2, r6
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f000 fc29 	bl	80113a0 <__pow5mult>
 8010b4e:	ee18 2a10 	vmov	r2, s16
 8010b52:	4601      	mov	r1, r0
 8010b54:	4607      	mov	r7, r0
 8010b56:	4620      	mov	r0, r4
 8010b58:	f000 fb78 	bl	801124c <__multiply>
 8010b5c:	ee18 1a10 	vmov	r1, s16
 8010b60:	4680      	mov	r8, r0
 8010b62:	4620      	mov	r0, r4
 8010b64:	f000 faa4 	bl	80110b0 <_Bfree>
 8010b68:	ee08 8a10 	vmov	s16, r8
 8010b6c:	9b07      	ldr	r3, [sp, #28]
 8010b6e:	1b9a      	subs	r2, r3, r6
 8010b70:	d006      	beq.n	8010b80 <_dtoa_r+0x7a0>
 8010b72:	ee18 1a10 	vmov	r1, s16
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 fc12 	bl	80113a0 <__pow5mult>
 8010b7c:	ee08 0a10 	vmov	s16, r0
 8010b80:	2101      	movs	r1, #1
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 fb4c 	bl	8011220 <__i2b>
 8010b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	f340 8088 	ble.w	8010ca2 <_dtoa_r+0x8c2>
 8010b92:	461a      	mov	r2, r3
 8010b94:	4601      	mov	r1, r0
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 fc02 	bl	80113a0 <__pow5mult>
 8010b9c:	9b06      	ldr	r3, [sp, #24]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	f340 8081 	ble.w	8010ca8 <_dtoa_r+0x8c8>
 8010ba6:	f04f 0800 	mov.w	r8, #0
 8010baa:	6933      	ldr	r3, [r6, #16]
 8010bac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010bb0:	6918      	ldr	r0, [r3, #16]
 8010bb2:	f000 fae5 	bl	8011180 <__hi0bits>
 8010bb6:	f1c0 0020 	rsb	r0, r0, #32
 8010bba:	9b05      	ldr	r3, [sp, #20]
 8010bbc:	4418      	add	r0, r3
 8010bbe:	f010 001f 	ands.w	r0, r0, #31
 8010bc2:	f000 8092 	beq.w	8010cea <_dtoa_r+0x90a>
 8010bc6:	f1c0 0320 	rsb	r3, r0, #32
 8010bca:	2b04      	cmp	r3, #4
 8010bcc:	f340 808a 	ble.w	8010ce4 <_dtoa_r+0x904>
 8010bd0:	f1c0 001c 	rsb	r0, r0, #28
 8010bd4:	9b04      	ldr	r3, [sp, #16]
 8010bd6:	4403      	add	r3, r0
 8010bd8:	9304      	str	r3, [sp, #16]
 8010bda:	9b05      	ldr	r3, [sp, #20]
 8010bdc:	4403      	add	r3, r0
 8010bde:	4405      	add	r5, r0
 8010be0:	9305      	str	r3, [sp, #20]
 8010be2:	9b04      	ldr	r3, [sp, #16]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dd07      	ble.n	8010bf8 <_dtoa_r+0x818>
 8010be8:	ee18 1a10 	vmov	r1, s16
 8010bec:	461a      	mov	r2, r3
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 fc30 	bl	8011454 <__lshift>
 8010bf4:	ee08 0a10 	vmov	s16, r0
 8010bf8:	9b05      	ldr	r3, [sp, #20]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	dd05      	ble.n	8010c0a <_dtoa_r+0x82a>
 8010bfe:	4631      	mov	r1, r6
 8010c00:	461a      	mov	r2, r3
 8010c02:	4620      	mov	r0, r4
 8010c04:	f000 fc26 	bl	8011454 <__lshift>
 8010c08:	4606      	mov	r6, r0
 8010c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d06e      	beq.n	8010cee <_dtoa_r+0x90e>
 8010c10:	ee18 0a10 	vmov	r0, s16
 8010c14:	4631      	mov	r1, r6
 8010c16:	f000 fc8d 	bl	8011534 <__mcmp>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	da67      	bge.n	8010cee <_dtoa_r+0x90e>
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	ee18 1a10 	vmov	r1, s16
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	220a      	movs	r2, #10
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f000 fa61 	bl	80110f4 <__multadd>
 8010c32:	9b08      	ldr	r3, [sp, #32]
 8010c34:	ee08 0a10 	vmov	s16, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 81b1 	beq.w	8010fa0 <_dtoa_r+0xbc0>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4639      	mov	r1, r7
 8010c42:	220a      	movs	r2, #10
 8010c44:	4620      	mov	r0, r4
 8010c46:	f000 fa55 	bl	80110f4 <__multadd>
 8010c4a:	9b02      	ldr	r3, [sp, #8]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	4607      	mov	r7, r0
 8010c50:	f300 808e 	bgt.w	8010d70 <_dtoa_r+0x990>
 8010c54:	9b06      	ldr	r3, [sp, #24]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	dc51      	bgt.n	8010cfe <_dtoa_r+0x91e>
 8010c5a:	e089      	b.n	8010d70 <_dtoa_r+0x990>
 8010c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010c62:	e74b      	b.n	8010afc <_dtoa_r+0x71c>
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	1e5e      	subs	r6, r3, #1
 8010c68:	9b07      	ldr	r3, [sp, #28]
 8010c6a:	42b3      	cmp	r3, r6
 8010c6c:	bfbf      	itttt	lt
 8010c6e:	9b07      	ldrlt	r3, [sp, #28]
 8010c70:	9607      	strlt	r6, [sp, #28]
 8010c72:	1af2      	sublt	r2, r6, r3
 8010c74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010c76:	bfb6      	itet	lt
 8010c78:	189b      	addlt	r3, r3, r2
 8010c7a:	1b9e      	subge	r6, r3, r6
 8010c7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010c7e:	9b03      	ldr	r3, [sp, #12]
 8010c80:	bfb8      	it	lt
 8010c82:	2600      	movlt	r6, #0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	bfb7      	itett	lt
 8010c88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010c8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010c90:	1a9d      	sublt	r5, r3, r2
 8010c92:	2300      	movlt	r3, #0
 8010c94:	e734      	b.n	8010b00 <_dtoa_r+0x720>
 8010c96:	9e07      	ldr	r6, [sp, #28]
 8010c98:	9d04      	ldr	r5, [sp, #16]
 8010c9a:	9f08      	ldr	r7, [sp, #32]
 8010c9c:	e73b      	b.n	8010b16 <_dtoa_r+0x736>
 8010c9e:	9a07      	ldr	r2, [sp, #28]
 8010ca0:	e767      	b.n	8010b72 <_dtoa_r+0x792>
 8010ca2:	9b06      	ldr	r3, [sp, #24]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	dc18      	bgt.n	8010cda <_dtoa_r+0x8fa>
 8010ca8:	f1ba 0f00 	cmp.w	sl, #0
 8010cac:	d115      	bne.n	8010cda <_dtoa_r+0x8fa>
 8010cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cb2:	b993      	cbnz	r3, 8010cda <_dtoa_r+0x8fa>
 8010cb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cb8:	0d1b      	lsrs	r3, r3, #20
 8010cba:	051b      	lsls	r3, r3, #20
 8010cbc:	b183      	cbz	r3, 8010ce0 <_dtoa_r+0x900>
 8010cbe:	9b04      	ldr	r3, [sp, #16]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	9304      	str	r3, [sp, #16]
 8010cc4:	9b05      	ldr	r3, [sp, #20]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	9305      	str	r3, [sp, #20]
 8010cca:	f04f 0801 	mov.w	r8, #1
 8010cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f47f af6a 	bne.w	8010baa <_dtoa_r+0x7ca>
 8010cd6:	2001      	movs	r0, #1
 8010cd8:	e76f      	b.n	8010bba <_dtoa_r+0x7da>
 8010cda:	f04f 0800 	mov.w	r8, #0
 8010cde:	e7f6      	b.n	8010cce <_dtoa_r+0x8ee>
 8010ce0:	4698      	mov	r8, r3
 8010ce2:	e7f4      	b.n	8010cce <_dtoa_r+0x8ee>
 8010ce4:	f43f af7d 	beq.w	8010be2 <_dtoa_r+0x802>
 8010ce8:	4618      	mov	r0, r3
 8010cea:	301c      	adds	r0, #28
 8010cec:	e772      	b.n	8010bd4 <_dtoa_r+0x7f4>
 8010cee:	9b03      	ldr	r3, [sp, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dc37      	bgt.n	8010d64 <_dtoa_r+0x984>
 8010cf4:	9b06      	ldr	r3, [sp, #24]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	dd34      	ble.n	8010d64 <_dtoa_r+0x984>
 8010cfa:	9b03      	ldr	r3, [sp, #12]
 8010cfc:	9302      	str	r3, [sp, #8]
 8010cfe:	9b02      	ldr	r3, [sp, #8]
 8010d00:	b96b      	cbnz	r3, 8010d1e <_dtoa_r+0x93e>
 8010d02:	4631      	mov	r1, r6
 8010d04:	2205      	movs	r2, #5
 8010d06:	4620      	mov	r0, r4
 8010d08:	f000 f9f4 	bl	80110f4 <__multadd>
 8010d0c:	4601      	mov	r1, r0
 8010d0e:	4606      	mov	r6, r0
 8010d10:	ee18 0a10 	vmov	r0, s16
 8010d14:	f000 fc0e 	bl	8011534 <__mcmp>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	f73f adbb 	bgt.w	8010894 <_dtoa_r+0x4b4>
 8010d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d20:	9d01      	ldr	r5, [sp, #4]
 8010d22:	43db      	mvns	r3, r3
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	f04f 0800 	mov.w	r8, #0
 8010d2a:	4631      	mov	r1, r6
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f000 f9bf 	bl	80110b0 <_Bfree>
 8010d32:	2f00      	cmp	r7, #0
 8010d34:	f43f aea4 	beq.w	8010a80 <_dtoa_r+0x6a0>
 8010d38:	f1b8 0f00 	cmp.w	r8, #0
 8010d3c:	d005      	beq.n	8010d4a <_dtoa_r+0x96a>
 8010d3e:	45b8      	cmp	r8, r7
 8010d40:	d003      	beq.n	8010d4a <_dtoa_r+0x96a>
 8010d42:	4641      	mov	r1, r8
 8010d44:	4620      	mov	r0, r4
 8010d46:	f000 f9b3 	bl	80110b0 <_Bfree>
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f000 f9af 	bl	80110b0 <_Bfree>
 8010d52:	e695      	b.n	8010a80 <_dtoa_r+0x6a0>
 8010d54:	2600      	movs	r6, #0
 8010d56:	4637      	mov	r7, r6
 8010d58:	e7e1      	b.n	8010d1e <_dtoa_r+0x93e>
 8010d5a:	9700      	str	r7, [sp, #0]
 8010d5c:	4637      	mov	r7, r6
 8010d5e:	e599      	b.n	8010894 <_dtoa_r+0x4b4>
 8010d60:	40240000 	.word	0x40240000
 8010d64:	9b08      	ldr	r3, [sp, #32]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f000 80ca 	beq.w	8010f00 <_dtoa_r+0xb20>
 8010d6c:	9b03      	ldr	r3, [sp, #12]
 8010d6e:	9302      	str	r3, [sp, #8]
 8010d70:	2d00      	cmp	r5, #0
 8010d72:	dd05      	ble.n	8010d80 <_dtoa_r+0x9a0>
 8010d74:	4639      	mov	r1, r7
 8010d76:	462a      	mov	r2, r5
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 fb6b 	bl	8011454 <__lshift>
 8010d7e:	4607      	mov	r7, r0
 8010d80:	f1b8 0f00 	cmp.w	r8, #0
 8010d84:	d05b      	beq.n	8010e3e <_dtoa_r+0xa5e>
 8010d86:	6879      	ldr	r1, [r7, #4]
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f000 f951 	bl	8011030 <_Balloc>
 8010d8e:	4605      	mov	r5, r0
 8010d90:	b928      	cbnz	r0, 8010d9e <_dtoa_r+0x9be>
 8010d92:	4b87      	ldr	r3, [pc, #540]	; (8010fb0 <_dtoa_r+0xbd0>)
 8010d94:	4602      	mov	r2, r0
 8010d96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010d9a:	f7ff bb3b 	b.w	8010414 <_dtoa_r+0x34>
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	3202      	adds	r2, #2
 8010da2:	0092      	lsls	r2, r2, #2
 8010da4:	f107 010c 	add.w	r1, r7, #12
 8010da8:	300c      	adds	r0, #12
 8010daa:	f7fe fb0f 	bl	800f3cc <memcpy>
 8010dae:	2201      	movs	r2, #1
 8010db0:	4629      	mov	r1, r5
 8010db2:	4620      	mov	r0, r4
 8010db4:	f000 fb4e 	bl	8011454 <__lshift>
 8010db8:	9b01      	ldr	r3, [sp, #4]
 8010dba:	f103 0901 	add.w	r9, r3, #1
 8010dbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	9305      	str	r3, [sp, #20]
 8010dc6:	f00a 0301 	and.w	r3, sl, #1
 8010dca:	46b8      	mov	r8, r7
 8010dcc:	9304      	str	r3, [sp, #16]
 8010dce:	4607      	mov	r7, r0
 8010dd0:	4631      	mov	r1, r6
 8010dd2:	ee18 0a10 	vmov	r0, s16
 8010dd6:	f7ff fa77 	bl	80102c8 <quorem>
 8010dda:	4641      	mov	r1, r8
 8010ddc:	9002      	str	r0, [sp, #8]
 8010dde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010de2:	ee18 0a10 	vmov	r0, s16
 8010de6:	f000 fba5 	bl	8011534 <__mcmp>
 8010dea:	463a      	mov	r2, r7
 8010dec:	9003      	str	r0, [sp, #12]
 8010dee:	4631      	mov	r1, r6
 8010df0:	4620      	mov	r0, r4
 8010df2:	f000 fbbb 	bl	801156c <__mdiff>
 8010df6:	68c2      	ldr	r2, [r0, #12]
 8010df8:	f109 3bff 	add.w	fp, r9, #4294967295
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	bb02      	cbnz	r2, 8010e42 <_dtoa_r+0xa62>
 8010e00:	4601      	mov	r1, r0
 8010e02:	ee18 0a10 	vmov	r0, s16
 8010e06:	f000 fb95 	bl	8011534 <__mcmp>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	4629      	mov	r1, r5
 8010e0e:	4620      	mov	r0, r4
 8010e10:	9207      	str	r2, [sp, #28]
 8010e12:	f000 f94d 	bl	80110b0 <_Bfree>
 8010e16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010e1a:	ea43 0102 	orr.w	r1, r3, r2
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	430b      	orrs	r3, r1
 8010e22:	464d      	mov	r5, r9
 8010e24:	d10f      	bne.n	8010e46 <_dtoa_r+0xa66>
 8010e26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e2a:	d02a      	beq.n	8010e82 <_dtoa_r+0xaa2>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	dd02      	ble.n	8010e38 <_dtoa_r+0xa58>
 8010e32:	9b02      	ldr	r3, [sp, #8]
 8010e34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010e38:	f88b a000 	strb.w	sl, [fp]
 8010e3c:	e775      	b.n	8010d2a <_dtoa_r+0x94a>
 8010e3e:	4638      	mov	r0, r7
 8010e40:	e7ba      	b.n	8010db8 <_dtoa_r+0x9d8>
 8010e42:	2201      	movs	r2, #1
 8010e44:	e7e2      	b.n	8010e0c <_dtoa_r+0xa2c>
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	db04      	blt.n	8010e56 <_dtoa_r+0xa76>
 8010e4c:	9906      	ldr	r1, [sp, #24]
 8010e4e:	430b      	orrs	r3, r1
 8010e50:	9904      	ldr	r1, [sp, #16]
 8010e52:	430b      	orrs	r3, r1
 8010e54:	d122      	bne.n	8010e9c <_dtoa_r+0xabc>
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	ddee      	ble.n	8010e38 <_dtoa_r+0xa58>
 8010e5a:	ee18 1a10 	vmov	r1, s16
 8010e5e:	2201      	movs	r2, #1
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 faf7 	bl	8011454 <__lshift>
 8010e66:	4631      	mov	r1, r6
 8010e68:	ee08 0a10 	vmov	s16, r0
 8010e6c:	f000 fb62 	bl	8011534 <__mcmp>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	dc03      	bgt.n	8010e7c <_dtoa_r+0xa9c>
 8010e74:	d1e0      	bne.n	8010e38 <_dtoa_r+0xa58>
 8010e76:	f01a 0f01 	tst.w	sl, #1
 8010e7a:	d0dd      	beq.n	8010e38 <_dtoa_r+0xa58>
 8010e7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e80:	d1d7      	bne.n	8010e32 <_dtoa_r+0xa52>
 8010e82:	2339      	movs	r3, #57	; 0x39
 8010e84:	f88b 3000 	strb.w	r3, [fp]
 8010e88:	462b      	mov	r3, r5
 8010e8a:	461d      	mov	r5, r3
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e92:	2a39      	cmp	r2, #57	; 0x39
 8010e94:	d071      	beq.n	8010f7a <_dtoa_r+0xb9a>
 8010e96:	3201      	adds	r2, #1
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	e746      	b.n	8010d2a <_dtoa_r+0x94a>
 8010e9c:	2a00      	cmp	r2, #0
 8010e9e:	dd07      	ble.n	8010eb0 <_dtoa_r+0xad0>
 8010ea0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ea4:	d0ed      	beq.n	8010e82 <_dtoa_r+0xaa2>
 8010ea6:	f10a 0301 	add.w	r3, sl, #1
 8010eaa:	f88b 3000 	strb.w	r3, [fp]
 8010eae:	e73c      	b.n	8010d2a <_dtoa_r+0x94a>
 8010eb0:	9b05      	ldr	r3, [sp, #20]
 8010eb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010eb6:	4599      	cmp	r9, r3
 8010eb8:	d047      	beq.n	8010f4a <_dtoa_r+0xb6a>
 8010eba:	ee18 1a10 	vmov	r1, s16
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	220a      	movs	r2, #10
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 f916 	bl	80110f4 <__multadd>
 8010ec8:	45b8      	cmp	r8, r7
 8010eca:	ee08 0a10 	vmov	s16, r0
 8010ece:	f04f 0300 	mov.w	r3, #0
 8010ed2:	f04f 020a 	mov.w	r2, #10
 8010ed6:	4641      	mov	r1, r8
 8010ed8:	4620      	mov	r0, r4
 8010eda:	d106      	bne.n	8010eea <_dtoa_r+0xb0a>
 8010edc:	f000 f90a 	bl	80110f4 <__multadd>
 8010ee0:	4680      	mov	r8, r0
 8010ee2:	4607      	mov	r7, r0
 8010ee4:	f109 0901 	add.w	r9, r9, #1
 8010ee8:	e772      	b.n	8010dd0 <_dtoa_r+0x9f0>
 8010eea:	f000 f903 	bl	80110f4 <__multadd>
 8010eee:	4639      	mov	r1, r7
 8010ef0:	4680      	mov	r8, r0
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	220a      	movs	r2, #10
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f8fc 	bl	80110f4 <__multadd>
 8010efc:	4607      	mov	r7, r0
 8010efe:	e7f1      	b.n	8010ee4 <_dtoa_r+0xb04>
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	9302      	str	r3, [sp, #8]
 8010f04:	9d01      	ldr	r5, [sp, #4]
 8010f06:	ee18 0a10 	vmov	r0, s16
 8010f0a:	4631      	mov	r1, r6
 8010f0c:	f7ff f9dc 	bl	80102c8 <quorem>
 8010f10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010f14:	9b01      	ldr	r3, [sp, #4]
 8010f16:	f805 ab01 	strb.w	sl, [r5], #1
 8010f1a:	1aea      	subs	r2, r5, r3
 8010f1c:	9b02      	ldr	r3, [sp, #8]
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	dd09      	ble.n	8010f36 <_dtoa_r+0xb56>
 8010f22:	ee18 1a10 	vmov	r1, s16
 8010f26:	2300      	movs	r3, #0
 8010f28:	220a      	movs	r2, #10
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f000 f8e2 	bl	80110f4 <__multadd>
 8010f30:	ee08 0a10 	vmov	s16, r0
 8010f34:	e7e7      	b.n	8010f06 <_dtoa_r+0xb26>
 8010f36:	9b02      	ldr	r3, [sp, #8]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	bfc8      	it	gt
 8010f3c:	461d      	movgt	r5, r3
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	bfd8      	it	le
 8010f42:	2501      	movle	r5, #1
 8010f44:	441d      	add	r5, r3
 8010f46:	f04f 0800 	mov.w	r8, #0
 8010f4a:	ee18 1a10 	vmov	r1, s16
 8010f4e:	2201      	movs	r2, #1
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 fa7f 	bl	8011454 <__lshift>
 8010f56:	4631      	mov	r1, r6
 8010f58:	ee08 0a10 	vmov	s16, r0
 8010f5c:	f000 faea 	bl	8011534 <__mcmp>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	dc91      	bgt.n	8010e88 <_dtoa_r+0xaa8>
 8010f64:	d102      	bne.n	8010f6c <_dtoa_r+0xb8c>
 8010f66:	f01a 0f01 	tst.w	sl, #1
 8010f6a:	d18d      	bne.n	8010e88 <_dtoa_r+0xaa8>
 8010f6c:	462b      	mov	r3, r5
 8010f6e:	461d      	mov	r5, r3
 8010f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f74:	2a30      	cmp	r2, #48	; 0x30
 8010f76:	d0fa      	beq.n	8010f6e <_dtoa_r+0xb8e>
 8010f78:	e6d7      	b.n	8010d2a <_dtoa_r+0x94a>
 8010f7a:	9a01      	ldr	r2, [sp, #4]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d184      	bne.n	8010e8a <_dtoa_r+0xaaa>
 8010f80:	9b00      	ldr	r3, [sp, #0]
 8010f82:	3301      	adds	r3, #1
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	2331      	movs	r3, #49	; 0x31
 8010f88:	7013      	strb	r3, [r2, #0]
 8010f8a:	e6ce      	b.n	8010d2a <_dtoa_r+0x94a>
 8010f8c:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <_dtoa_r+0xbd4>)
 8010f8e:	f7ff ba95 	b.w	80104bc <_dtoa_r+0xdc>
 8010f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f47f aa6e 	bne.w	8010476 <_dtoa_r+0x96>
 8010f9a:	4b07      	ldr	r3, [pc, #28]	; (8010fb8 <_dtoa_r+0xbd8>)
 8010f9c:	f7ff ba8e 	b.w	80104bc <_dtoa_r+0xdc>
 8010fa0:	9b02      	ldr	r3, [sp, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	dcae      	bgt.n	8010f04 <_dtoa_r+0xb24>
 8010fa6:	9b06      	ldr	r3, [sp, #24]
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	f73f aea8 	bgt.w	8010cfe <_dtoa_r+0x91e>
 8010fae:	e7a9      	b.n	8010f04 <_dtoa_r+0xb24>
 8010fb0:	080178d4 	.word	0x080178d4
 8010fb4:	08017a79 	.word	0x08017a79
 8010fb8:	08017849 	.word	0x08017849

08010fbc <__errno>:
 8010fbc:	4b01      	ldr	r3, [pc, #4]	; (8010fc4 <__errno+0x8>)
 8010fbe:	6818      	ldr	r0, [r3, #0]
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	20000030 	.word	0x20000030

08010fc8 <fiprintf>:
 8010fc8:	b40e      	push	{r1, r2, r3}
 8010fca:	b503      	push	{r0, r1, lr}
 8010fcc:	4601      	mov	r1, r0
 8010fce:	ab03      	add	r3, sp, #12
 8010fd0:	4805      	ldr	r0, [pc, #20]	; (8010fe8 <fiprintf+0x20>)
 8010fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd6:	6800      	ldr	r0, [r0, #0]
 8010fd8:	9301      	str	r3, [sp, #4]
 8010fda:	f000 ff1b 	bl	8011e14 <_vfiprintf_r>
 8010fde:	b002      	add	sp, #8
 8010fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fe4:	b003      	add	sp, #12
 8010fe6:	4770      	bx	lr
 8010fe8:	20000030 	.word	0x20000030

08010fec <_localeconv_r>:
 8010fec:	4800      	ldr	r0, [pc, #0]	; (8010ff0 <_localeconv_r+0x4>)
 8010fee:	4770      	bx	lr
 8010ff0:	20000184 	.word	0x20000184

08010ff4 <_lseek_r>:
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	4d07      	ldr	r5, [pc, #28]	; (8011014 <_lseek_r+0x20>)
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	2200      	movs	r2, #0
 8011000:	602a      	str	r2, [r5, #0]
 8011002:	461a      	mov	r2, r3
 8011004:	f001 fefa 	bl	8012dfc <_lseek>
 8011008:	1c43      	adds	r3, r0, #1
 801100a:	d102      	bne.n	8011012 <_lseek_r+0x1e>
 801100c:	682b      	ldr	r3, [r5, #0]
 801100e:	b103      	cbz	r3, 8011012 <_lseek_r+0x1e>
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	bd38      	pop	{r3, r4, r5, pc}
 8011014:	20006cd0 	.word	0x20006cd0

08011018 <__malloc_lock>:
 8011018:	4801      	ldr	r0, [pc, #4]	; (8011020 <__malloc_lock+0x8>)
 801101a:	f001 bd87 	b.w	8012b2c <__retarget_lock_acquire_recursive>
 801101e:	bf00      	nop
 8011020:	20006cd4 	.word	0x20006cd4

08011024 <__malloc_unlock>:
 8011024:	4801      	ldr	r0, [pc, #4]	; (801102c <__malloc_unlock+0x8>)
 8011026:	f001 bd82 	b.w	8012b2e <__retarget_lock_release_recursive>
 801102a:	bf00      	nop
 801102c:	20006cd4 	.word	0x20006cd4

08011030 <_Balloc>:
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011034:	4604      	mov	r4, r0
 8011036:	460d      	mov	r5, r1
 8011038:	b976      	cbnz	r6, 8011058 <_Balloc+0x28>
 801103a:	2010      	movs	r0, #16
 801103c:	f7fe f9a6 	bl	800f38c <malloc>
 8011040:	4602      	mov	r2, r0
 8011042:	6260      	str	r0, [r4, #36]	; 0x24
 8011044:	b920      	cbnz	r0, 8011050 <_Balloc+0x20>
 8011046:	4b18      	ldr	r3, [pc, #96]	; (80110a8 <_Balloc+0x78>)
 8011048:	4818      	ldr	r0, [pc, #96]	; (80110ac <_Balloc+0x7c>)
 801104a:	2166      	movs	r1, #102	; 0x66
 801104c:	f7ff f90e 	bl	801026c <__assert_func>
 8011050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011054:	6006      	str	r6, [r0, #0]
 8011056:	60c6      	str	r6, [r0, #12]
 8011058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801105a:	68f3      	ldr	r3, [r6, #12]
 801105c:	b183      	cbz	r3, 8011080 <_Balloc+0x50>
 801105e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011066:	b9b8      	cbnz	r0, 8011098 <_Balloc+0x68>
 8011068:	2101      	movs	r1, #1
 801106a:	fa01 f605 	lsl.w	r6, r1, r5
 801106e:	1d72      	adds	r2, r6, #5
 8011070:	0092      	lsls	r2, r2, #2
 8011072:	4620      	mov	r0, r4
 8011074:	f000 fb60 	bl	8011738 <_calloc_r>
 8011078:	b160      	cbz	r0, 8011094 <_Balloc+0x64>
 801107a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801107e:	e00e      	b.n	801109e <_Balloc+0x6e>
 8011080:	2221      	movs	r2, #33	; 0x21
 8011082:	2104      	movs	r1, #4
 8011084:	4620      	mov	r0, r4
 8011086:	f000 fb57 	bl	8011738 <_calloc_r>
 801108a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801108c:	60f0      	str	r0, [r6, #12]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1e4      	bne.n	801105e <_Balloc+0x2e>
 8011094:	2000      	movs	r0, #0
 8011096:	bd70      	pop	{r4, r5, r6, pc}
 8011098:	6802      	ldr	r2, [r0, #0]
 801109a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801109e:	2300      	movs	r3, #0
 80110a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80110a4:	e7f7      	b.n	8011096 <_Balloc+0x66>
 80110a6:	bf00      	nop
 80110a8:	08017776 	.word	0x08017776
 80110ac:	080178e5 	.word	0x080178e5

080110b0 <_Bfree>:
 80110b0:	b570      	push	{r4, r5, r6, lr}
 80110b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80110b4:	4605      	mov	r5, r0
 80110b6:	460c      	mov	r4, r1
 80110b8:	b976      	cbnz	r6, 80110d8 <_Bfree+0x28>
 80110ba:	2010      	movs	r0, #16
 80110bc:	f7fe f966 	bl	800f38c <malloc>
 80110c0:	4602      	mov	r2, r0
 80110c2:	6268      	str	r0, [r5, #36]	; 0x24
 80110c4:	b920      	cbnz	r0, 80110d0 <_Bfree+0x20>
 80110c6:	4b09      	ldr	r3, [pc, #36]	; (80110ec <_Bfree+0x3c>)
 80110c8:	4809      	ldr	r0, [pc, #36]	; (80110f0 <_Bfree+0x40>)
 80110ca:	218a      	movs	r1, #138	; 0x8a
 80110cc:	f7ff f8ce 	bl	801026c <__assert_func>
 80110d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110d4:	6006      	str	r6, [r0, #0]
 80110d6:	60c6      	str	r6, [r0, #12]
 80110d8:	b13c      	cbz	r4, 80110ea <_Bfree+0x3a>
 80110da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80110dc:	6862      	ldr	r2, [r4, #4]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80110e4:	6021      	str	r1, [r4, #0]
 80110e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110ea:	bd70      	pop	{r4, r5, r6, pc}
 80110ec:	08017776 	.word	0x08017776
 80110f0:	080178e5 	.word	0x080178e5

080110f4 <__multadd>:
 80110f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f8:	690d      	ldr	r5, [r1, #16]
 80110fa:	4607      	mov	r7, r0
 80110fc:	460c      	mov	r4, r1
 80110fe:	461e      	mov	r6, r3
 8011100:	f101 0c14 	add.w	ip, r1, #20
 8011104:	2000      	movs	r0, #0
 8011106:	f8dc 3000 	ldr.w	r3, [ip]
 801110a:	b299      	uxth	r1, r3
 801110c:	fb02 6101 	mla	r1, r2, r1, r6
 8011110:	0c1e      	lsrs	r6, r3, #16
 8011112:	0c0b      	lsrs	r3, r1, #16
 8011114:	fb02 3306 	mla	r3, r2, r6, r3
 8011118:	b289      	uxth	r1, r1
 801111a:	3001      	adds	r0, #1
 801111c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011120:	4285      	cmp	r5, r0
 8011122:	f84c 1b04 	str.w	r1, [ip], #4
 8011126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801112a:	dcec      	bgt.n	8011106 <__multadd+0x12>
 801112c:	b30e      	cbz	r6, 8011172 <__multadd+0x7e>
 801112e:	68a3      	ldr	r3, [r4, #8]
 8011130:	42ab      	cmp	r3, r5
 8011132:	dc19      	bgt.n	8011168 <__multadd+0x74>
 8011134:	6861      	ldr	r1, [r4, #4]
 8011136:	4638      	mov	r0, r7
 8011138:	3101      	adds	r1, #1
 801113a:	f7ff ff79 	bl	8011030 <_Balloc>
 801113e:	4680      	mov	r8, r0
 8011140:	b928      	cbnz	r0, 801114e <__multadd+0x5a>
 8011142:	4602      	mov	r2, r0
 8011144:	4b0c      	ldr	r3, [pc, #48]	; (8011178 <__multadd+0x84>)
 8011146:	480d      	ldr	r0, [pc, #52]	; (801117c <__multadd+0x88>)
 8011148:	21b5      	movs	r1, #181	; 0xb5
 801114a:	f7ff f88f 	bl	801026c <__assert_func>
 801114e:	6922      	ldr	r2, [r4, #16]
 8011150:	3202      	adds	r2, #2
 8011152:	f104 010c 	add.w	r1, r4, #12
 8011156:	0092      	lsls	r2, r2, #2
 8011158:	300c      	adds	r0, #12
 801115a:	f7fe f937 	bl	800f3cc <memcpy>
 801115e:	4621      	mov	r1, r4
 8011160:	4638      	mov	r0, r7
 8011162:	f7ff ffa5 	bl	80110b0 <_Bfree>
 8011166:	4644      	mov	r4, r8
 8011168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801116c:	3501      	adds	r5, #1
 801116e:	615e      	str	r6, [r3, #20]
 8011170:	6125      	str	r5, [r4, #16]
 8011172:	4620      	mov	r0, r4
 8011174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011178:	080178d4 	.word	0x080178d4
 801117c:	080178e5 	.word	0x080178e5

08011180 <__hi0bits>:
 8011180:	0c03      	lsrs	r3, r0, #16
 8011182:	041b      	lsls	r3, r3, #16
 8011184:	b9d3      	cbnz	r3, 80111bc <__hi0bits+0x3c>
 8011186:	0400      	lsls	r0, r0, #16
 8011188:	2310      	movs	r3, #16
 801118a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801118e:	bf04      	itt	eq
 8011190:	0200      	lsleq	r0, r0, #8
 8011192:	3308      	addeq	r3, #8
 8011194:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011198:	bf04      	itt	eq
 801119a:	0100      	lsleq	r0, r0, #4
 801119c:	3304      	addeq	r3, #4
 801119e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80111a2:	bf04      	itt	eq
 80111a4:	0080      	lsleq	r0, r0, #2
 80111a6:	3302      	addeq	r3, #2
 80111a8:	2800      	cmp	r0, #0
 80111aa:	db05      	blt.n	80111b8 <__hi0bits+0x38>
 80111ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80111b0:	f103 0301 	add.w	r3, r3, #1
 80111b4:	bf08      	it	eq
 80111b6:	2320      	moveq	r3, #32
 80111b8:	4618      	mov	r0, r3
 80111ba:	4770      	bx	lr
 80111bc:	2300      	movs	r3, #0
 80111be:	e7e4      	b.n	801118a <__hi0bits+0xa>

080111c0 <__lo0bits>:
 80111c0:	6803      	ldr	r3, [r0, #0]
 80111c2:	f013 0207 	ands.w	r2, r3, #7
 80111c6:	4601      	mov	r1, r0
 80111c8:	d00b      	beq.n	80111e2 <__lo0bits+0x22>
 80111ca:	07da      	lsls	r2, r3, #31
 80111cc:	d423      	bmi.n	8011216 <__lo0bits+0x56>
 80111ce:	0798      	lsls	r0, r3, #30
 80111d0:	bf49      	itett	mi
 80111d2:	085b      	lsrmi	r3, r3, #1
 80111d4:	089b      	lsrpl	r3, r3, #2
 80111d6:	2001      	movmi	r0, #1
 80111d8:	600b      	strmi	r3, [r1, #0]
 80111da:	bf5c      	itt	pl
 80111dc:	600b      	strpl	r3, [r1, #0]
 80111de:	2002      	movpl	r0, #2
 80111e0:	4770      	bx	lr
 80111e2:	b298      	uxth	r0, r3
 80111e4:	b9a8      	cbnz	r0, 8011212 <__lo0bits+0x52>
 80111e6:	0c1b      	lsrs	r3, r3, #16
 80111e8:	2010      	movs	r0, #16
 80111ea:	b2da      	uxtb	r2, r3
 80111ec:	b90a      	cbnz	r2, 80111f2 <__lo0bits+0x32>
 80111ee:	3008      	adds	r0, #8
 80111f0:	0a1b      	lsrs	r3, r3, #8
 80111f2:	071a      	lsls	r2, r3, #28
 80111f4:	bf04      	itt	eq
 80111f6:	091b      	lsreq	r3, r3, #4
 80111f8:	3004      	addeq	r0, #4
 80111fa:	079a      	lsls	r2, r3, #30
 80111fc:	bf04      	itt	eq
 80111fe:	089b      	lsreq	r3, r3, #2
 8011200:	3002      	addeq	r0, #2
 8011202:	07da      	lsls	r2, r3, #31
 8011204:	d403      	bmi.n	801120e <__lo0bits+0x4e>
 8011206:	085b      	lsrs	r3, r3, #1
 8011208:	f100 0001 	add.w	r0, r0, #1
 801120c:	d005      	beq.n	801121a <__lo0bits+0x5a>
 801120e:	600b      	str	r3, [r1, #0]
 8011210:	4770      	bx	lr
 8011212:	4610      	mov	r0, r2
 8011214:	e7e9      	b.n	80111ea <__lo0bits+0x2a>
 8011216:	2000      	movs	r0, #0
 8011218:	4770      	bx	lr
 801121a:	2020      	movs	r0, #32
 801121c:	4770      	bx	lr
	...

08011220 <__i2b>:
 8011220:	b510      	push	{r4, lr}
 8011222:	460c      	mov	r4, r1
 8011224:	2101      	movs	r1, #1
 8011226:	f7ff ff03 	bl	8011030 <_Balloc>
 801122a:	4602      	mov	r2, r0
 801122c:	b928      	cbnz	r0, 801123a <__i2b+0x1a>
 801122e:	4b05      	ldr	r3, [pc, #20]	; (8011244 <__i2b+0x24>)
 8011230:	4805      	ldr	r0, [pc, #20]	; (8011248 <__i2b+0x28>)
 8011232:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011236:	f7ff f819 	bl	801026c <__assert_func>
 801123a:	2301      	movs	r3, #1
 801123c:	6144      	str	r4, [r0, #20]
 801123e:	6103      	str	r3, [r0, #16]
 8011240:	bd10      	pop	{r4, pc}
 8011242:	bf00      	nop
 8011244:	080178d4 	.word	0x080178d4
 8011248:	080178e5 	.word	0x080178e5

0801124c <__multiply>:
 801124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011250:	4691      	mov	r9, r2
 8011252:	690a      	ldr	r2, [r1, #16]
 8011254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011258:	429a      	cmp	r2, r3
 801125a:	bfb8      	it	lt
 801125c:	460b      	movlt	r3, r1
 801125e:	460c      	mov	r4, r1
 8011260:	bfbc      	itt	lt
 8011262:	464c      	movlt	r4, r9
 8011264:	4699      	movlt	r9, r3
 8011266:	6927      	ldr	r7, [r4, #16]
 8011268:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801126c:	68a3      	ldr	r3, [r4, #8]
 801126e:	6861      	ldr	r1, [r4, #4]
 8011270:	eb07 060a 	add.w	r6, r7, sl
 8011274:	42b3      	cmp	r3, r6
 8011276:	b085      	sub	sp, #20
 8011278:	bfb8      	it	lt
 801127a:	3101      	addlt	r1, #1
 801127c:	f7ff fed8 	bl	8011030 <_Balloc>
 8011280:	b930      	cbnz	r0, 8011290 <__multiply+0x44>
 8011282:	4602      	mov	r2, r0
 8011284:	4b44      	ldr	r3, [pc, #272]	; (8011398 <__multiply+0x14c>)
 8011286:	4845      	ldr	r0, [pc, #276]	; (801139c <__multiply+0x150>)
 8011288:	f240 115d 	movw	r1, #349	; 0x15d
 801128c:	f7fe ffee 	bl	801026c <__assert_func>
 8011290:	f100 0514 	add.w	r5, r0, #20
 8011294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011298:	462b      	mov	r3, r5
 801129a:	2200      	movs	r2, #0
 801129c:	4543      	cmp	r3, r8
 801129e:	d321      	bcc.n	80112e4 <__multiply+0x98>
 80112a0:	f104 0314 	add.w	r3, r4, #20
 80112a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80112a8:	f109 0314 	add.w	r3, r9, #20
 80112ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80112b0:	9202      	str	r2, [sp, #8]
 80112b2:	1b3a      	subs	r2, r7, r4
 80112b4:	3a15      	subs	r2, #21
 80112b6:	f022 0203 	bic.w	r2, r2, #3
 80112ba:	3204      	adds	r2, #4
 80112bc:	f104 0115 	add.w	r1, r4, #21
 80112c0:	428f      	cmp	r7, r1
 80112c2:	bf38      	it	cc
 80112c4:	2204      	movcc	r2, #4
 80112c6:	9201      	str	r2, [sp, #4]
 80112c8:	9a02      	ldr	r2, [sp, #8]
 80112ca:	9303      	str	r3, [sp, #12]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d80c      	bhi.n	80112ea <__multiply+0x9e>
 80112d0:	2e00      	cmp	r6, #0
 80112d2:	dd03      	ble.n	80112dc <__multiply+0x90>
 80112d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d05a      	beq.n	8011392 <__multiply+0x146>
 80112dc:	6106      	str	r6, [r0, #16]
 80112de:	b005      	add	sp, #20
 80112e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e4:	f843 2b04 	str.w	r2, [r3], #4
 80112e8:	e7d8      	b.n	801129c <__multiply+0x50>
 80112ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80112ee:	f1ba 0f00 	cmp.w	sl, #0
 80112f2:	d024      	beq.n	801133e <__multiply+0xf2>
 80112f4:	f104 0e14 	add.w	lr, r4, #20
 80112f8:	46a9      	mov	r9, r5
 80112fa:	f04f 0c00 	mov.w	ip, #0
 80112fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011302:	f8d9 1000 	ldr.w	r1, [r9]
 8011306:	fa1f fb82 	uxth.w	fp, r2
 801130a:	b289      	uxth	r1, r1
 801130c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011310:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011314:	f8d9 2000 	ldr.w	r2, [r9]
 8011318:	4461      	add	r1, ip
 801131a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801131e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011326:	b289      	uxth	r1, r1
 8011328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801132c:	4577      	cmp	r7, lr
 801132e:	f849 1b04 	str.w	r1, [r9], #4
 8011332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011336:	d8e2      	bhi.n	80112fe <__multiply+0xb2>
 8011338:	9a01      	ldr	r2, [sp, #4]
 801133a:	f845 c002 	str.w	ip, [r5, r2]
 801133e:	9a03      	ldr	r2, [sp, #12]
 8011340:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011344:	3304      	adds	r3, #4
 8011346:	f1b9 0f00 	cmp.w	r9, #0
 801134a:	d020      	beq.n	801138e <__multiply+0x142>
 801134c:	6829      	ldr	r1, [r5, #0]
 801134e:	f104 0c14 	add.w	ip, r4, #20
 8011352:	46ae      	mov	lr, r5
 8011354:	f04f 0a00 	mov.w	sl, #0
 8011358:	f8bc b000 	ldrh.w	fp, [ip]
 801135c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011360:	fb09 220b 	mla	r2, r9, fp, r2
 8011364:	4492      	add	sl, r2
 8011366:	b289      	uxth	r1, r1
 8011368:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801136c:	f84e 1b04 	str.w	r1, [lr], #4
 8011370:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011374:	f8be 1000 	ldrh.w	r1, [lr]
 8011378:	0c12      	lsrs	r2, r2, #16
 801137a:	fb09 1102 	mla	r1, r9, r2, r1
 801137e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011382:	4567      	cmp	r7, ip
 8011384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011388:	d8e6      	bhi.n	8011358 <__multiply+0x10c>
 801138a:	9a01      	ldr	r2, [sp, #4]
 801138c:	50a9      	str	r1, [r5, r2]
 801138e:	3504      	adds	r5, #4
 8011390:	e79a      	b.n	80112c8 <__multiply+0x7c>
 8011392:	3e01      	subs	r6, #1
 8011394:	e79c      	b.n	80112d0 <__multiply+0x84>
 8011396:	bf00      	nop
 8011398:	080178d4 	.word	0x080178d4
 801139c:	080178e5 	.word	0x080178e5

080113a0 <__pow5mult>:
 80113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	4615      	mov	r5, r2
 80113a6:	f012 0203 	ands.w	r2, r2, #3
 80113aa:	4606      	mov	r6, r0
 80113ac:	460f      	mov	r7, r1
 80113ae:	d007      	beq.n	80113c0 <__pow5mult+0x20>
 80113b0:	4c25      	ldr	r4, [pc, #148]	; (8011448 <__pow5mult+0xa8>)
 80113b2:	3a01      	subs	r2, #1
 80113b4:	2300      	movs	r3, #0
 80113b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113ba:	f7ff fe9b 	bl	80110f4 <__multadd>
 80113be:	4607      	mov	r7, r0
 80113c0:	10ad      	asrs	r5, r5, #2
 80113c2:	d03d      	beq.n	8011440 <__pow5mult+0xa0>
 80113c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80113c6:	b97c      	cbnz	r4, 80113e8 <__pow5mult+0x48>
 80113c8:	2010      	movs	r0, #16
 80113ca:	f7fd ffdf 	bl	800f38c <malloc>
 80113ce:	4602      	mov	r2, r0
 80113d0:	6270      	str	r0, [r6, #36]	; 0x24
 80113d2:	b928      	cbnz	r0, 80113e0 <__pow5mult+0x40>
 80113d4:	4b1d      	ldr	r3, [pc, #116]	; (801144c <__pow5mult+0xac>)
 80113d6:	481e      	ldr	r0, [pc, #120]	; (8011450 <__pow5mult+0xb0>)
 80113d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80113dc:	f7fe ff46 	bl	801026c <__assert_func>
 80113e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113e4:	6004      	str	r4, [r0, #0]
 80113e6:	60c4      	str	r4, [r0, #12]
 80113e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113f0:	b94c      	cbnz	r4, 8011406 <__pow5mult+0x66>
 80113f2:	f240 2171 	movw	r1, #625	; 0x271
 80113f6:	4630      	mov	r0, r6
 80113f8:	f7ff ff12 	bl	8011220 <__i2b>
 80113fc:	2300      	movs	r3, #0
 80113fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011402:	4604      	mov	r4, r0
 8011404:	6003      	str	r3, [r0, #0]
 8011406:	f04f 0900 	mov.w	r9, #0
 801140a:	07eb      	lsls	r3, r5, #31
 801140c:	d50a      	bpl.n	8011424 <__pow5mult+0x84>
 801140e:	4639      	mov	r1, r7
 8011410:	4622      	mov	r2, r4
 8011412:	4630      	mov	r0, r6
 8011414:	f7ff ff1a 	bl	801124c <__multiply>
 8011418:	4639      	mov	r1, r7
 801141a:	4680      	mov	r8, r0
 801141c:	4630      	mov	r0, r6
 801141e:	f7ff fe47 	bl	80110b0 <_Bfree>
 8011422:	4647      	mov	r7, r8
 8011424:	106d      	asrs	r5, r5, #1
 8011426:	d00b      	beq.n	8011440 <__pow5mult+0xa0>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	b938      	cbnz	r0, 801143c <__pow5mult+0x9c>
 801142c:	4622      	mov	r2, r4
 801142e:	4621      	mov	r1, r4
 8011430:	4630      	mov	r0, r6
 8011432:	f7ff ff0b 	bl	801124c <__multiply>
 8011436:	6020      	str	r0, [r4, #0]
 8011438:	f8c0 9000 	str.w	r9, [r0]
 801143c:	4604      	mov	r4, r0
 801143e:	e7e4      	b.n	801140a <__pow5mult+0x6a>
 8011440:	4638      	mov	r0, r7
 8011442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011446:	bf00      	nop
 8011448:	08017a58 	.word	0x08017a58
 801144c:	08017776 	.word	0x08017776
 8011450:	080178e5 	.word	0x080178e5

08011454 <__lshift>:
 8011454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011458:	460c      	mov	r4, r1
 801145a:	6849      	ldr	r1, [r1, #4]
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011462:	68a3      	ldr	r3, [r4, #8]
 8011464:	4607      	mov	r7, r0
 8011466:	4691      	mov	r9, r2
 8011468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801146c:	f108 0601 	add.w	r6, r8, #1
 8011470:	42b3      	cmp	r3, r6
 8011472:	db0b      	blt.n	801148c <__lshift+0x38>
 8011474:	4638      	mov	r0, r7
 8011476:	f7ff fddb 	bl	8011030 <_Balloc>
 801147a:	4605      	mov	r5, r0
 801147c:	b948      	cbnz	r0, 8011492 <__lshift+0x3e>
 801147e:	4602      	mov	r2, r0
 8011480:	4b2a      	ldr	r3, [pc, #168]	; (801152c <__lshift+0xd8>)
 8011482:	482b      	ldr	r0, [pc, #172]	; (8011530 <__lshift+0xdc>)
 8011484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011488:	f7fe fef0 	bl	801026c <__assert_func>
 801148c:	3101      	adds	r1, #1
 801148e:	005b      	lsls	r3, r3, #1
 8011490:	e7ee      	b.n	8011470 <__lshift+0x1c>
 8011492:	2300      	movs	r3, #0
 8011494:	f100 0114 	add.w	r1, r0, #20
 8011498:	f100 0210 	add.w	r2, r0, #16
 801149c:	4618      	mov	r0, r3
 801149e:	4553      	cmp	r3, sl
 80114a0:	db37      	blt.n	8011512 <__lshift+0xbe>
 80114a2:	6920      	ldr	r0, [r4, #16]
 80114a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114a8:	f104 0314 	add.w	r3, r4, #20
 80114ac:	f019 091f 	ands.w	r9, r9, #31
 80114b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80114b8:	d02f      	beq.n	801151a <__lshift+0xc6>
 80114ba:	f1c9 0e20 	rsb	lr, r9, #32
 80114be:	468a      	mov	sl, r1
 80114c0:	f04f 0c00 	mov.w	ip, #0
 80114c4:	681a      	ldr	r2, [r3, #0]
 80114c6:	fa02 f209 	lsl.w	r2, r2, r9
 80114ca:	ea42 020c 	orr.w	r2, r2, ip
 80114ce:	f84a 2b04 	str.w	r2, [sl], #4
 80114d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114d6:	4298      	cmp	r0, r3
 80114d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80114dc:	d8f2      	bhi.n	80114c4 <__lshift+0x70>
 80114de:	1b03      	subs	r3, r0, r4
 80114e0:	3b15      	subs	r3, #21
 80114e2:	f023 0303 	bic.w	r3, r3, #3
 80114e6:	3304      	adds	r3, #4
 80114e8:	f104 0215 	add.w	r2, r4, #21
 80114ec:	4290      	cmp	r0, r2
 80114ee:	bf38      	it	cc
 80114f0:	2304      	movcc	r3, #4
 80114f2:	f841 c003 	str.w	ip, [r1, r3]
 80114f6:	f1bc 0f00 	cmp.w	ip, #0
 80114fa:	d001      	beq.n	8011500 <__lshift+0xac>
 80114fc:	f108 0602 	add.w	r6, r8, #2
 8011500:	3e01      	subs	r6, #1
 8011502:	4638      	mov	r0, r7
 8011504:	612e      	str	r6, [r5, #16]
 8011506:	4621      	mov	r1, r4
 8011508:	f7ff fdd2 	bl	80110b0 <_Bfree>
 801150c:	4628      	mov	r0, r5
 801150e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011512:	f842 0f04 	str.w	r0, [r2, #4]!
 8011516:	3301      	adds	r3, #1
 8011518:	e7c1      	b.n	801149e <__lshift+0x4a>
 801151a:	3904      	subs	r1, #4
 801151c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011520:	f841 2f04 	str.w	r2, [r1, #4]!
 8011524:	4298      	cmp	r0, r3
 8011526:	d8f9      	bhi.n	801151c <__lshift+0xc8>
 8011528:	e7ea      	b.n	8011500 <__lshift+0xac>
 801152a:	bf00      	nop
 801152c:	080178d4 	.word	0x080178d4
 8011530:	080178e5 	.word	0x080178e5

08011534 <__mcmp>:
 8011534:	b530      	push	{r4, r5, lr}
 8011536:	6902      	ldr	r2, [r0, #16]
 8011538:	690c      	ldr	r4, [r1, #16]
 801153a:	1b12      	subs	r2, r2, r4
 801153c:	d10e      	bne.n	801155c <__mcmp+0x28>
 801153e:	f100 0314 	add.w	r3, r0, #20
 8011542:	3114      	adds	r1, #20
 8011544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801154c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011554:	42a5      	cmp	r5, r4
 8011556:	d003      	beq.n	8011560 <__mcmp+0x2c>
 8011558:	d305      	bcc.n	8011566 <__mcmp+0x32>
 801155a:	2201      	movs	r2, #1
 801155c:	4610      	mov	r0, r2
 801155e:	bd30      	pop	{r4, r5, pc}
 8011560:	4283      	cmp	r3, r0
 8011562:	d3f3      	bcc.n	801154c <__mcmp+0x18>
 8011564:	e7fa      	b.n	801155c <__mcmp+0x28>
 8011566:	f04f 32ff 	mov.w	r2, #4294967295
 801156a:	e7f7      	b.n	801155c <__mcmp+0x28>

0801156c <__mdiff>:
 801156c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011570:	460c      	mov	r4, r1
 8011572:	4606      	mov	r6, r0
 8011574:	4611      	mov	r1, r2
 8011576:	4620      	mov	r0, r4
 8011578:	4690      	mov	r8, r2
 801157a:	f7ff ffdb 	bl	8011534 <__mcmp>
 801157e:	1e05      	subs	r5, r0, #0
 8011580:	d110      	bne.n	80115a4 <__mdiff+0x38>
 8011582:	4629      	mov	r1, r5
 8011584:	4630      	mov	r0, r6
 8011586:	f7ff fd53 	bl	8011030 <_Balloc>
 801158a:	b930      	cbnz	r0, 801159a <__mdiff+0x2e>
 801158c:	4b3a      	ldr	r3, [pc, #232]	; (8011678 <__mdiff+0x10c>)
 801158e:	4602      	mov	r2, r0
 8011590:	f240 2132 	movw	r1, #562	; 0x232
 8011594:	4839      	ldr	r0, [pc, #228]	; (801167c <__mdiff+0x110>)
 8011596:	f7fe fe69 	bl	801026c <__assert_func>
 801159a:	2301      	movs	r3, #1
 801159c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a4:	bfa4      	itt	ge
 80115a6:	4643      	movge	r3, r8
 80115a8:	46a0      	movge	r8, r4
 80115aa:	4630      	mov	r0, r6
 80115ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80115b0:	bfa6      	itte	ge
 80115b2:	461c      	movge	r4, r3
 80115b4:	2500      	movge	r5, #0
 80115b6:	2501      	movlt	r5, #1
 80115b8:	f7ff fd3a 	bl	8011030 <_Balloc>
 80115bc:	b920      	cbnz	r0, 80115c8 <__mdiff+0x5c>
 80115be:	4b2e      	ldr	r3, [pc, #184]	; (8011678 <__mdiff+0x10c>)
 80115c0:	4602      	mov	r2, r0
 80115c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80115c6:	e7e5      	b.n	8011594 <__mdiff+0x28>
 80115c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80115cc:	6926      	ldr	r6, [r4, #16]
 80115ce:	60c5      	str	r5, [r0, #12]
 80115d0:	f104 0914 	add.w	r9, r4, #20
 80115d4:	f108 0514 	add.w	r5, r8, #20
 80115d8:	f100 0e14 	add.w	lr, r0, #20
 80115dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80115e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80115e4:	f108 0210 	add.w	r2, r8, #16
 80115e8:	46f2      	mov	sl, lr
 80115ea:	2100      	movs	r1, #0
 80115ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80115f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80115f4:	fa1f f883 	uxth.w	r8, r3
 80115f8:	fa11 f18b 	uxtah	r1, r1, fp
 80115fc:	0c1b      	lsrs	r3, r3, #16
 80115fe:	eba1 0808 	sub.w	r8, r1, r8
 8011602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801160a:	fa1f f888 	uxth.w	r8, r8
 801160e:	1419      	asrs	r1, r3, #16
 8011610:	454e      	cmp	r6, r9
 8011612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011616:	f84a 3b04 	str.w	r3, [sl], #4
 801161a:	d8e7      	bhi.n	80115ec <__mdiff+0x80>
 801161c:	1b33      	subs	r3, r6, r4
 801161e:	3b15      	subs	r3, #21
 8011620:	f023 0303 	bic.w	r3, r3, #3
 8011624:	3304      	adds	r3, #4
 8011626:	3415      	adds	r4, #21
 8011628:	42a6      	cmp	r6, r4
 801162a:	bf38      	it	cc
 801162c:	2304      	movcc	r3, #4
 801162e:	441d      	add	r5, r3
 8011630:	4473      	add	r3, lr
 8011632:	469e      	mov	lr, r3
 8011634:	462e      	mov	r6, r5
 8011636:	4566      	cmp	r6, ip
 8011638:	d30e      	bcc.n	8011658 <__mdiff+0xec>
 801163a:	f10c 0203 	add.w	r2, ip, #3
 801163e:	1b52      	subs	r2, r2, r5
 8011640:	f022 0203 	bic.w	r2, r2, #3
 8011644:	3d03      	subs	r5, #3
 8011646:	45ac      	cmp	ip, r5
 8011648:	bf38      	it	cc
 801164a:	2200      	movcc	r2, #0
 801164c:	441a      	add	r2, r3
 801164e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011652:	b17b      	cbz	r3, 8011674 <__mdiff+0x108>
 8011654:	6107      	str	r7, [r0, #16]
 8011656:	e7a3      	b.n	80115a0 <__mdiff+0x34>
 8011658:	f856 8b04 	ldr.w	r8, [r6], #4
 801165c:	fa11 f288 	uxtah	r2, r1, r8
 8011660:	1414      	asrs	r4, r2, #16
 8011662:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011666:	b292      	uxth	r2, r2
 8011668:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801166c:	f84e 2b04 	str.w	r2, [lr], #4
 8011670:	1421      	asrs	r1, r4, #16
 8011672:	e7e0      	b.n	8011636 <__mdiff+0xca>
 8011674:	3f01      	subs	r7, #1
 8011676:	e7ea      	b.n	801164e <__mdiff+0xe2>
 8011678:	080178d4 	.word	0x080178d4
 801167c:	080178e5 	.word	0x080178e5

08011680 <__d2b>:
 8011680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011684:	4689      	mov	r9, r1
 8011686:	2101      	movs	r1, #1
 8011688:	ec57 6b10 	vmov	r6, r7, d0
 801168c:	4690      	mov	r8, r2
 801168e:	f7ff fccf 	bl	8011030 <_Balloc>
 8011692:	4604      	mov	r4, r0
 8011694:	b930      	cbnz	r0, 80116a4 <__d2b+0x24>
 8011696:	4602      	mov	r2, r0
 8011698:	4b25      	ldr	r3, [pc, #148]	; (8011730 <__d2b+0xb0>)
 801169a:	4826      	ldr	r0, [pc, #152]	; (8011734 <__d2b+0xb4>)
 801169c:	f240 310a 	movw	r1, #778	; 0x30a
 80116a0:	f7fe fde4 	bl	801026c <__assert_func>
 80116a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80116a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80116ac:	bb35      	cbnz	r5, 80116fc <__d2b+0x7c>
 80116ae:	2e00      	cmp	r6, #0
 80116b0:	9301      	str	r3, [sp, #4]
 80116b2:	d028      	beq.n	8011706 <__d2b+0x86>
 80116b4:	4668      	mov	r0, sp
 80116b6:	9600      	str	r6, [sp, #0]
 80116b8:	f7ff fd82 	bl	80111c0 <__lo0bits>
 80116bc:	9900      	ldr	r1, [sp, #0]
 80116be:	b300      	cbz	r0, 8011702 <__d2b+0x82>
 80116c0:	9a01      	ldr	r2, [sp, #4]
 80116c2:	f1c0 0320 	rsb	r3, r0, #32
 80116c6:	fa02 f303 	lsl.w	r3, r2, r3
 80116ca:	430b      	orrs	r3, r1
 80116cc:	40c2      	lsrs	r2, r0
 80116ce:	6163      	str	r3, [r4, #20]
 80116d0:	9201      	str	r2, [sp, #4]
 80116d2:	9b01      	ldr	r3, [sp, #4]
 80116d4:	61a3      	str	r3, [r4, #24]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	bf14      	ite	ne
 80116da:	2202      	movne	r2, #2
 80116dc:	2201      	moveq	r2, #1
 80116de:	6122      	str	r2, [r4, #16]
 80116e0:	b1d5      	cbz	r5, 8011718 <__d2b+0x98>
 80116e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80116e6:	4405      	add	r5, r0
 80116e8:	f8c9 5000 	str.w	r5, [r9]
 80116ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80116f0:	f8c8 0000 	str.w	r0, [r8]
 80116f4:	4620      	mov	r0, r4
 80116f6:	b003      	add	sp, #12
 80116f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011700:	e7d5      	b.n	80116ae <__d2b+0x2e>
 8011702:	6161      	str	r1, [r4, #20]
 8011704:	e7e5      	b.n	80116d2 <__d2b+0x52>
 8011706:	a801      	add	r0, sp, #4
 8011708:	f7ff fd5a 	bl	80111c0 <__lo0bits>
 801170c:	9b01      	ldr	r3, [sp, #4]
 801170e:	6163      	str	r3, [r4, #20]
 8011710:	2201      	movs	r2, #1
 8011712:	6122      	str	r2, [r4, #16]
 8011714:	3020      	adds	r0, #32
 8011716:	e7e3      	b.n	80116e0 <__d2b+0x60>
 8011718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801171c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011720:	f8c9 0000 	str.w	r0, [r9]
 8011724:	6918      	ldr	r0, [r3, #16]
 8011726:	f7ff fd2b 	bl	8011180 <__hi0bits>
 801172a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801172e:	e7df      	b.n	80116f0 <__d2b+0x70>
 8011730:	080178d4 	.word	0x080178d4
 8011734:	080178e5 	.word	0x080178e5

08011738 <_calloc_r>:
 8011738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801173a:	fba1 2402 	umull	r2, r4, r1, r2
 801173e:	b94c      	cbnz	r4, 8011754 <_calloc_r+0x1c>
 8011740:	4611      	mov	r1, r2
 8011742:	9201      	str	r2, [sp, #4]
 8011744:	f7fd fec4 	bl	800f4d0 <_malloc_r>
 8011748:	9a01      	ldr	r2, [sp, #4]
 801174a:	4605      	mov	r5, r0
 801174c:	b930      	cbnz	r0, 801175c <_calloc_r+0x24>
 801174e:	4628      	mov	r0, r5
 8011750:	b003      	add	sp, #12
 8011752:	bd30      	pop	{r4, r5, pc}
 8011754:	220c      	movs	r2, #12
 8011756:	6002      	str	r2, [r0, #0]
 8011758:	2500      	movs	r5, #0
 801175a:	e7f8      	b.n	801174e <_calloc_r+0x16>
 801175c:	4621      	mov	r1, r4
 801175e:	f7fd fe43 	bl	800f3e8 <memset>
 8011762:	e7f4      	b.n	801174e <_calloc_r+0x16>

08011764 <__ssputs_r>:
 8011764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011768:	688e      	ldr	r6, [r1, #8]
 801176a:	429e      	cmp	r6, r3
 801176c:	4682      	mov	sl, r0
 801176e:	460c      	mov	r4, r1
 8011770:	4690      	mov	r8, r2
 8011772:	461f      	mov	r7, r3
 8011774:	d838      	bhi.n	80117e8 <__ssputs_r+0x84>
 8011776:	898a      	ldrh	r2, [r1, #12]
 8011778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801177c:	d032      	beq.n	80117e4 <__ssputs_r+0x80>
 801177e:	6825      	ldr	r5, [r4, #0]
 8011780:	6909      	ldr	r1, [r1, #16]
 8011782:	eba5 0901 	sub.w	r9, r5, r1
 8011786:	6965      	ldr	r5, [r4, #20]
 8011788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801178c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011790:	3301      	adds	r3, #1
 8011792:	444b      	add	r3, r9
 8011794:	106d      	asrs	r5, r5, #1
 8011796:	429d      	cmp	r5, r3
 8011798:	bf38      	it	cc
 801179a:	461d      	movcc	r5, r3
 801179c:	0553      	lsls	r3, r2, #21
 801179e:	d531      	bpl.n	8011804 <__ssputs_r+0xa0>
 80117a0:	4629      	mov	r1, r5
 80117a2:	f7fd fe95 	bl	800f4d0 <_malloc_r>
 80117a6:	4606      	mov	r6, r0
 80117a8:	b950      	cbnz	r0, 80117c0 <__ssputs_r+0x5c>
 80117aa:	230c      	movs	r3, #12
 80117ac:	f8ca 3000 	str.w	r3, [sl]
 80117b0:	89a3      	ldrh	r3, [r4, #12]
 80117b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b6:	81a3      	strh	r3, [r4, #12]
 80117b8:	f04f 30ff 	mov.w	r0, #4294967295
 80117bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c0:	6921      	ldr	r1, [r4, #16]
 80117c2:	464a      	mov	r2, r9
 80117c4:	f7fd fe02 	bl	800f3cc <memcpy>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80117ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117d2:	81a3      	strh	r3, [r4, #12]
 80117d4:	6126      	str	r6, [r4, #16]
 80117d6:	6165      	str	r5, [r4, #20]
 80117d8:	444e      	add	r6, r9
 80117da:	eba5 0509 	sub.w	r5, r5, r9
 80117de:	6026      	str	r6, [r4, #0]
 80117e0:	60a5      	str	r5, [r4, #8]
 80117e2:	463e      	mov	r6, r7
 80117e4:	42be      	cmp	r6, r7
 80117e6:	d900      	bls.n	80117ea <__ssputs_r+0x86>
 80117e8:	463e      	mov	r6, r7
 80117ea:	6820      	ldr	r0, [r4, #0]
 80117ec:	4632      	mov	r2, r6
 80117ee:	4641      	mov	r1, r8
 80117f0:	f001 fa16 	bl	8012c20 <memmove>
 80117f4:	68a3      	ldr	r3, [r4, #8]
 80117f6:	1b9b      	subs	r3, r3, r6
 80117f8:	60a3      	str	r3, [r4, #8]
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	4433      	add	r3, r6
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	2000      	movs	r0, #0
 8011802:	e7db      	b.n	80117bc <__ssputs_r+0x58>
 8011804:	462a      	mov	r2, r5
 8011806:	f001 fa25 	bl	8012c54 <_realloc_r>
 801180a:	4606      	mov	r6, r0
 801180c:	2800      	cmp	r0, #0
 801180e:	d1e1      	bne.n	80117d4 <__ssputs_r+0x70>
 8011810:	6921      	ldr	r1, [r4, #16]
 8011812:	4650      	mov	r0, sl
 8011814:	f7fd fdf0 	bl	800f3f8 <_free_r>
 8011818:	e7c7      	b.n	80117aa <__ssputs_r+0x46>
	...

0801181c <_svfiprintf_r>:
 801181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011820:	4698      	mov	r8, r3
 8011822:	898b      	ldrh	r3, [r1, #12]
 8011824:	061b      	lsls	r3, r3, #24
 8011826:	b09d      	sub	sp, #116	; 0x74
 8011828:	4607      	mov	r7, r0
 801182a:	460d      	mov	r5, r1
 801182c:	4614      	mov	r4, r2
 801182e:	d50e      	bpl.n	801184e <_svfiprintf_r+0x32>
 8011830:	690b      	ldr	r3, [r1, #16]
 8011832:	b963      	cbnz	r3, 801184e <_svfiprintf_r+0x32>
 8011834:	2140      	movs	r1, #64	; 0x40
 8011836:	f7fd fe4b 	bl	800f4d0 <_malloc_r>
 801183a:	6028      	str	r0, [r5, #0]
 801183c:	6128      	str	r0, [r5, #16]
 801183e:	b920      	cbnz	r0, 801184a <_svfiprintf_r+0x2e>
 8011840:	230c      	movs	r3, #12
 8011842:	603b      	str	r3, [r7, #0]
 8011844:	f04f 30ff 	mov.w	r0, #4294967295
 8011848:	e0d1      	b.n	80119ee <_svfiprintf_r+0x1d2>
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	616b      	str	r3, [r5, #20]
 801184e:	2300      	movs	r3, #0
 8011850:	9309      	str	r3, [sp, #36]	; 0x24
 8011852:	2320      	movs	r3, #32
 8011854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011858:	f8cd 800c 	str.w	r8, [sp, #12]
 801185c:	2330      	movs	r3, #48	; 0x30
 801185e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011a08 <_svfiprintf_r+0x1ec>
 8011862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011866:	f04f 0901 	mov.w	r9, #1
 801186a:	4623      	mov	r3, r4
 801186c:	469a      	mov	sl, r3
 801186e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011872:	b10a      	cbz	r2, 8011878 <_svfiprintf_r+0x5c>
 8011874:	2a25      	cmp	r2, #37	; 0x25
 8011876:	d1f9      	bne.n	801186c <_svfiprintf_r+0x50>
 8011878:	ebba 0b04 	subs.w	fp, sl, r4
 801187c:	d00b      	beq.n	8011896 <_svfiprintf_r+0x7a>
 801187e:	465b      	mov	r3, fp
 8011880:	4622      	mov	r2, r4
 8011882:	4629      	mov	r1, r5
 8011884:	4638      	mov	r0, r7
 8011886:	f7ff ff6d 	bl	8011764 <__ssputs_r>
 801188a:	3001      	adds	r0, #1
 801188c:	f000 80aa 	beq.w	80119e4 <_svfiprintf_r+0x1c8>
 8011890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011892:	445a      	add	r2, fp
 8011894:	9209      	str	r2, [sp, #36]	; 0x24
 8011896:	f89a 3000 	ldrb.w	r3, [sl]
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 80a2 	beq.w	80119e4 <_svfiprintf_r+0x1c8>
 80118a0:	2300      	movs	r3, #0
 80118a2:	f04f 32ff 	mov.w	r2, #4294967295
 80118a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118aa:	f10a 0a01 	add.w	sl, sl, #1
 80118ae:	9304      	str	r3, [sp, #16]
 80118b0:	9307      	str	r3, [sp, #28]
 80118b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118b6:	931a      	str	r3, [sp, #104]	; 0x68
 80118b8:	4654      	mov	r4, sl
 80118ba:	2205      	movs	r2, #5
 80118bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118c0:	4851      	ldr	r0, [pc, #324]	; (8011a08 <_svfiprintf_r+0x1ec>)
 80118c2:	f7f0 f9fd 	bl	8001cc0 <memchr>
 80118c6:	9a04      	ldr	r2, [sp, #16]
 80118c8:	b9d8      	cbnz	r0, 8011902 <_svfiprintf_r+0xe6>
 80118ca:	06d0      	lsls	r0, r2, #27
 80118cc:	bf44      	itt	mi
 80118ce:	2320      	movmi	r3, #32
 80118d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118d4:	0711      	lsls	r1, r2, #28
 80118d6:	bf44      	itt	mi
 80118d8:	232b      	movmi	r3, #43	; 0x2b
 80118da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118de:	f89a 3000 	ldrb.w	r3, [sl]
 80118e2:	2b2a      	cmp	r3, #42	; 0x2a
 80118e4:	d015      	beq.n	8011912 <_svfiprintf_r+0xf6>
 80118e6:	9a07      	ldr	r2, [sp, #28]
 80118e8:	4654      	mov	r4, sl
 80118ea:	2000      	movs	r0, #0
 80118ec:	f04f 0c0a 	mov.w	ip, #10
 80118f0:	4621      	mov	r1, r4
 80118f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118f6:	3b30      	subs	r3, #48	; 0x30
 80118f8:	2b09      	cmp	r3, #9
 80118fa:	d94e      	bls.n	801199a <_svfiprintf_r+0x17e>
 80118fc:	b1b0      	cbz	r0, 801192c <_svfiprintf_r+0x110>
 80118fe:	9207      	str	r2, [sp, #28]
 8011900:	e014      	b.n	801192c <_svfiprintf_r+0x110>
 8011902:	eba0 0308 	sub.w	r3, r0, r8
 8011906:	fa09 f303 	lsl.w	r3, r9, r3
 801190a:	4313      	orrs	r3, r2
 801190c:	9304      	str	r3, [sp, #16]
 801190e:	46a2      	mov	sl, r4
 8011910:	e7d2      	b.n	80118b8 <_svfiprintf_r+0x9c>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	1d19      	adds	r1, r3, #4
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	9103      	str	r1, [sp, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	bfbb      	ittet	lt
 801191e:	425b      	neglt	r3, r3
 8011920:	f042 0202 	orrlt.w	r2, r2, #2
 8011924:	9307      	strge	r3, [sp, #28]
 8011926:	9307      	strlt	r3, [sp, #28]
 8011928:	bfb8      	it	lt
 801192a:	9204      	strlt	r2, [sp, #16]
 801192c:	7823      	ldrb	r3, [r4, #0]
 801192e:	2b2e      	cmp	r3, #46	; 0x2e
 8011930:	d10c      	bne.n	801194c <_svfiprintf_r+0x130>
 8011932:	7863      	ldrb	r3, [r4, #1]
 8011934:	2b2a      	cmp	r3, #42	; 0x2a
 8011936:	d135      	bne.n	80119a4 <_svfiprintf_r+0x188>
 8011938:	9b03      	ldr	r3, [sp, #12]
 801193a:	1d1a      	adds	r2, r3, #4
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	9203      	str	r2, [sp, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	bfb8      	it	lt
 8011944:	f04f 33ff 	movlt.w	r3, #4294967295
 8011948:	3402      	adds	r4, #2
 801194a:	9305      	str	r3, [sp, #20]
 801194c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011a18 <_svfiprintf_r+0x1fc>
 8011950:	7821      	ldrb	r1, [r4, #0]
 8011952:	2203      	movs	r2, #3
 8011954:	4650      	mov	r0, sl
 8011956:	f7f0 f9b3 	bl	8001cc0 <memchr>
 801195a:	b140      	cbz	r0, 801196e <_svfiprintf_r+0x152>
 801195c:	2340      	movs	r3, #64	; 0x40
 801195e:	eba0 000a 	sub.w	r0, r0, sl
 8011962:	fa03 f000 	lsl.w	r0, r3, r0
 8011966:	9b04      	ldr	r3, [sp, #16]
 8011968:	4303      	orrs	r3, r0
 801196a:	3401      	adds	r4, #1
 801196c:	9304      	str	r3, [sp, #16]
 801196e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011972:	4826      	ldr	r0, [pc, #152]	; (8011a0c <_svfiprintf_r+0x1f0>)
 8011974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011978:	2206      	movs	r2, #6
 801197a:	f7f0 f9a1 	bl	8001cc0 <memchr>
 801197e:	2800      	cmp	r0, #0
 8011980:	d038      	beq.n	80119f4 <_svfiprintf_r+0x1d8>
 8011982:	4b23      	ldr	r3, [pc, #140]	; (8011a10 <_svfiprintf_r+0x1f4>)
 8011984:	bb1b      	cbnz	r3, 80119ce <_svfiprintf_r+0x1b2>
 8011986:	9b03      	ldr	r3, [sp, #12]
 8011988:	3307      	adds	r3, #7
 801198a:	f023 0307 	bic.w	r3, r3, #7
 801198e:	3308      	adds	r3, #8
 8011990:	9303      	str	r3, [sp, #12]
 8011992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011994:	4433      	add	r3, r6
 8011996:	9309      	str	r3, [sp, #36]	; 0x24
 8011998:	e767      	b.n	801186a <_svfiprintf_r+0x4e>
 801199a:	fb0c 3202 	mla	r2, ip, r2, r3
 801199e:	460c      	mov	r4, r1
 80119a0:	2001      	movs	r0, #1
 80119a2:	e7a5      	b.n	80118f0 <_svfiprintf_r+0xd4>
 80119a4:	2300      	movs	r3, #0
 80119a6:	3401      	adds	r4, #1
 80119a8:	9305      	str	r3, [sp, #20]
 80119aa:	4619      	mov	r1, r3
 80119ac:	f04f 0c0a 	mov.w	ip, #10
 80119b0:	4620      	mov	r0, r4
 80119b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119b6:	3a30      	subs	r2, #48	; 0x30
 80119b8:	2a09      	cmp	r2, #9
 80119ba:	d903      	bls.n	80119c4 <_svfiprintf_r+0x1a8>
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d0c5      	beq.n	801194c <_svfiprintf_r+0x130>
 80119c0:	9105      	str	r1, [sp, #20]
 80119c2:	e7c3      	b.n	801194c <_svfiprintf_r+0x130>
 80119c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80119c8:	4604      	mov	r4, r0
 80119ca:	2301      	movs	r3, #1
 80119cc:	e7f0      	b.n	80119b0 <_svfiprintf_r+0x194>
 80119ce:	ab03      	add	r3, sp, #12
 80119d0:	9300      	str	r3, [sp, #0]
 80119d2:	462a      	mov	r2, r5
 80119d4:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <_svfiprintf_r+0x1f8>)
 80119d6:	a904      	add	r1, sp, #16
 80119d8:	4638      	mov	r0, r7
 80119da:	f7fd fe8d 	bl	800f6f8 <_printf_float>
 80119de:	1c42      	adds	r2, r0, #1
 80119e0:	4606      	mov	r6, r0
 80119e2:	d1d6      	bne.n	8011992 <_svfiprintf_r+0x176>
 80119e4:	89ab      	ldrh	r3, [r5, #12]
 80119e6:	065b      	lsls	r3, r3, #25
 80119e8:	f53f af2c 	bmi.w	8011844 <_svfiprintf_r+0x28>
 80119ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119ee:	b01d      	add	sp, #116	; 0x74
 80119f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f4:	ab03      	add	r3, sp, #12
 80119f6:	9300      	str	r3, [sp, #0]
 80119f8:	462a      	mov	r2, r5
 80119fa:	4b06      	ldr	r3, [pc, #24]	; (8011a14 <_svfiprintf_r+0x1f8>)
 80119fc:	a904      	add	r1, sp, #16
 80119fe:	4638      	mov	r0, r7
 8011a00:	f7fe f91e 	bl	800fc40 <_printf_i>
 8011a04:	e7eb      	b.n	80119de <_svfiprintf_r+0x1c2>
 8011a06:	bf00      	nop
 8011a08:	08017a64 	.word	0x08017a64
 8011a0c:	08017a6e 	.word	0x08017a6e
 8011a10:	0800f6f9 	.word	0x0800f6f9
 8011a14:	08011765 	.word	0x08011765
 8011a18:	08017a6a 	.word	0x08017a6a

08011a1c <_sungetc_r>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	1c4b      	adds	r3, r1, #1
 8011a20:	4614      	mov	r4, r2
 8011a22:	d103      	bne.n	8011a2c <_sungetc_r+0x10>
 8011a24:	f04f 35ff 	mov.w	r5, #4294967295
 8011a28:	4628      	mov	r0, r5
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	8993      	ldrh	r3, [r2, #12]
 8011a2e:	f023 0320 	bic.w	r3, r3, #32
 8011a32:	8193      	strh	r3, [r2, #12]
 8011a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a36:	6852      	ldr	r2, [r2, #4]
 8011a38:	b2cd      	uxtb	r5, r1
 8011a3a:	b18b      	cbz	r3, 8011a60 <_sungetc_r+0x44>
 8011a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	dd08      	ble.n	8011a54 <_sungetc_r+0x38>
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	1e5a      	subs	r2, r3, #1
 8011a46:	6022      	str	r2, [r4, #0]
 8011a48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a4c:	6863      	ldr	r3, [r4, #4]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	e7e9      	b.n	8011a28 <_sungetc_r+0xc>
 8011a54:	4621      	mov	r1, r4
 8011a56:	f000 fdaf 	bl	80125b8 <__submore>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d0f1      	beq.n	8011a42 <_sungetc_r+0x26>
 8011a5e:	e7e1      	b.n	8011a24 <_sungetc_r+0x8>
 8011a60:	6921      	ldr	r1, [r4, #16]
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	b151      	cbz	r1, 8011a7c <_sungetc_r+0x60>
 8011a66:	4299      	cmp	r1, r3
 8011a68:	d208      	bcs.n	8011a7c <_sungetc_r+0x60>
 8011a6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a6e:	42a9      	cmp	r1, r5
 8011a70:	d104      	bne.n	8011a7c <_sungetc_r+0x60>
 8011a72:	3b01      	subs	r3, #1
 8011a74:	3201      	adds	r2, #1
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	6062      	str	r2, [r4, #4]
 8011a7a:	e7d5      	b.n	8011a28 <_sungetc_r+0xc>
 8011a7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a84:	6363      	str	r3, [r4, #52]	; 0x34
 8011a86:	2303      	movs	r3, #3
 8011a88:	63a3      	str	r3, [r4, #56]	; 0x38
 8011a8a:	4623      	mov	r3, r4
 8011a8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	2301      	movs	r3, #1
 8011a94:	e7dc      	b.n	8011a50 <_sungetc_r+0x34>

08011a96 <__ssrefill_r>:
 8011a96:	b510      	push	{r4, lr}
 8011a98:	460c      	mov	r4, r1
 8011a9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011a9c:	b169      	cbz	r1, 8011aba <__ssrefill_r+0x24>
 8011a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011aa2:	4299      	cmp	r1, r3
 8011aa4:	d001      	beq.n	8011aaa <__ssrefill_r+0x14>
 8011aa6:	f7fd fca7 	bl	800f3f8 <_free_r>
 8011aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011aac:	6063      	str	r3, [r4, #4]
 8011aae:	2000      	movs	r0, #0
 8011ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ab2:	b113      	cbz	r3, 8011aba <__ssrefill_r+0x24>
 8011ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ab6:	6023      	str	r3, [r4, #0]
 8011ab8:	bd10      	pop	{r4, pc}
 8011aba:	6923      	ldr	r3, [r4, #16]
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	6063      	str	r3, [r4, #4]
 8011ac2:	89a3      	ldrh	r3, [r4, #12]
 8011ac4:	f043 0320 	orr.w	r3, r3, #32
 8011ac8:	81a3      	strh	r3, [r4, #12]
 8011aca:	f04f 30ff 	mov.w	r0, #4294967295
 8011ace:	e7f3      	b.n	8011ab8 <__ssrefill_r+0x22>

08011ad0 <__ssvfiscanf_r>:
 8011ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011ada:	2100      	movs	r1, #0
 8011adc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011ae0:	49a6      	ldr	r1, [pc, #664]	; (8011d7c <__ssvfiscanf_r+0x2ac>)
 8011ae2:	91a0      	str	r1, [sp, #640]	; 0x280
 8011ae4:	f10d 0804 	add.w	r8, sp, #4
 8011ae8:	49a5      	ldr	r1, [pc, #660]	; (8011d80 <__ssvfiscanf_r+0x2b0>)
 8011aea:	4fa6      	ldr	r7, [pc, #664]	; (8011d84 <__ssvfiscanf_r+0x2b4>)
 8011aec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011d88 <__ssvfiscanf_r+0x2b8>
 8011af0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011af4:	4606      	mov	r6, r0
 8011af6:	91a1      	str	r1, [sp, #644]	; 0x284
 8011af8:	9300      	str	r3, [sp, #0]
 8011afa:	7813      	ldrb	r3, [r2, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	f000 815a 	beq.w	8011db6 <__ssvfiscanf_r+0x2e6>
 8011b02:	5dd9      	ldrb	r1, [r3, r7]
 8011b04:	f011 0108 	ands.w	r1, r1, #8
 8011b08:	f102 0501 	add.w	r5, r2, #1
 8011b0c:	d019      	beq.n	8011b42 <__ssvfiscanf_r+0x72>
 8011b0e:	6863      	ldr	r3, [r4, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	dd0f      	ble.n	8011b34 <__ssvfiscanf_r+0x64>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	781a      	ldrb	r2, [r3, #0]
 8011b18:	5cba      	ldrb	r2, [r7, r2]
 8011b1a:	0712      	lsls	r2, r2, #28
 8011b1c:	d401      	bmi.n	8011b22 <__ssvfiscanf_r+0x52>
 8011b1e:	462a      	mov	r2, r5
 8011b20:	e7eb      	b.n	8011afa <__ssvfiscanf_r+0x2a>
 8011b22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011b24:	3201      	adds	r2, #1
 8011b26:	9245      	str	r2, [sp, #276]	; 0x114
 8011b28:	6862      	ldr	r2, [r4, #4]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	3a01      	subs	r2, #1
 8011b2e:	6062      	str	r2, [r4, #4]
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	e7ec      	b.n	8011b0e <__ssvfiscanf_r+0x3e>
 8011b34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011b36:	4621      	mov	r1, r4
 8011b38:	4630      	mov	r0, r6
 8011b3a:	4798      	blx	r3
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d0e9      	beq.n	8011b14 <__ssvfiscanf_r+0x44>
 8011b40:	e7ed      	b.n	8011b1e <__ssvfiscanf_r+0x4e>
 8011b42:	2b25      	cmp	r3, #37	; 0x25
 8011b44:	d012      	beq.n	8011b6c <__ssvfiscanf_r+0x9c>
 8011b46:	469a      	mov	sl, r3
 8011b48:	6863      	ldr	r3, [r4, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f340 8091 	ble.w	8011c72 <__ssvfiscanf_r+0x1a2>
 8011b50:	6822      	ldr	r2, [r4, #0]
 8011b52:	7813      	ldrb	r3, [r2, #0]
 8011b54:	4553      	cmp	r3, sl
 8011b56:	f040 812e 	bne.w	8011db6 <__ssvfiscanf_r+0x2e6>
 8011b5a:	6863      	ldr	r3, [r4, #4]
 8011b5c:	3b01      	subs	r3, #1
 8011b5e:	6063      	str	r3, [r4, #4]
 8011b60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011b62:	3201      	adds	r2, #1
 8011b64:	3301      	adds	r3, #1
 8011b66:	6022      	str	r2, [r4, #0]
 8011b68:	9345      	str	r3, [sp, #276]	; 0x114
 8011b6a:	e7d8      	b.n	8011b1e <__ssvfiscanf_r+0x4e>
 8011b6c:	9141      	str	r1, [sp, #260]	; 0x104
 8011b6e:	9143      	str	r1, [sp, #268]	; 0x10c
 8011b70:	7853      	ldrb	r3, [r2, #1]
 8011b72:	2b2a      	cmp	r3, #42	; 0x2a
 8011b74:	bf02      	ittt	eq
 8011b76:	2310      	moveq	r3, #16
 8011b78:	1c95      	addeq	r5, r2, #2
 8011b7a:	9341      	streq	r3, [sp, #260]	; 0x104
 8011b7c:	220a      	movs	r2, #10
 8011b7e:	46aa      	mov	sl, r5
 8011b80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011b88:	2b09      	cmp	r3, #9
 8011b8a:	d91d      	bls.n	8011bc8 <__ssvfiscanf_r+0xf8>
 8011b8c:	487e      	ldr	r0, [pc, #504]	; (8011d88 <__ssvfiscanf_r+0x2b8>)
 8011b8e:	2203      	movs	r2, #3
 8011b90:	f7f0 f896 	bl	8001cc0 <memchr>
 8011b94:	b140      	cbz	r0, 8011ba8 <__ssvfiscanf_r+0xd8>
 8011b96:	2301      	movs	r3, #1
 8011b98:	eba0 0009 	sub.w	r0, r0, r9
 8011b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8011ba0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ba2:	4318      	orrs	r0, r3
 8011ba4:	9041      	str	r0, [sp, #260]	; 0x104
 8011ba6:	4655      	mov	r5, sl
 8011ba8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bac:	2b78      	cmp	r3, #120	; 0x78
 8011bae:	d806      	bhi.n	8011bbe <__ssvfiscanf_r+0xee>
 8011bb0:	2b57      	cmp	r3, #87	; 0x57
 8011bb2:	d810      	bhi.n	8011bd6 <__ssvfiscanf_r+0x106>
 8011bb4:	2b25      	cmp	r3, #37	; 0x25
 8011bb6:	d0c6      	beq.n	8011b46 <__ssvfiscanf_r+0x76>
 8011bb8:	d856      	bhi.n	8011c68 <__ssvfiscanf_r+0x198>
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d064      	beq.n	8011c88 <__ssvfiscanf_r+0x1b8>
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	9347      	str	r3, [sp, #284]	; 0x11c
 8011bc2:	230a      	movs	r3, #10
 8011bc4:	9342      	str	r3, [sp, #264]	; 0x108
 8011bc6:	e071      	b.n	8011cac <__ssvfiscanf_r+0x1dc>
 8011bc8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011bca:	fb02 1103 	mla	r1, r2, r3, r1
 8011bce:	3930      	subs	r1, #48	; 0x30
 8011bd0:	9143      	str	r1, [sp, #268]	; 0x10c
 8011bd2:	4655      	mov	r5, sl
 8011bd4:	e7d3      	b.n	8011b7e <__ssvfiscanf_r+0xae>
 8011bd6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011bda:	2a20      	cmp	r2, #32
 8011bdc:	d8ef      	bhi.n	8011bbe <__ssvfiscanf_r+0xee>
 8011bde:	a101      	add	r1, pc, #4	; (adr r1, 8011be4 <__ssvfiscanf_r+0x114>)
 8011be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011be4:	08011c97 	.word	0x08011c97
 8011be8:	08011bbf 	.word	0x08011bbf
 8011bec:	08011bbf 	.word	0x08011bbf
 8011bf0:	08011cf5 	.word	0x08011cf5
 8011bf4:	08011bbf 	.word	0x08011bbf
 8011bf8:	08011bbf 	.word	0x08011bbf
 8011bfc:	08011bbf 	.word	0x08011bbf
 8011c00:	08011bbf 	.word	0x08011bbf
 8011c04:	08011bbf 	.word	0x08011bbf
 8011c08:	08011bbf 	.word	0x08011bbf
 8011c0c:	08011bbf 	.word	0x08011bbf
 8011c10:	08011d0b 	.word	0x08011d0b
 8011c14:	08011ce1 	.word	0x08011ce1
 8011c18:	08011c6f 	.word	0x08011c6f
 8011c1c:	08011c6f 	.word	0x08011c6f
 8011c20:	08011c6f 	.word	0x08011c6f
 8011c24:	08011bbf 	.word	0x08011bbf
 8011c28:	08011ce5 	.word	0x08011ce5
 8011c2c:	08011bbf 	.word	0x08011bbf
 8011c30:	08011bbf 	.word	0x08011bbf
 8011c34:	08011bbf 	.word	0x08011bbf
 8011c38:	08011bbf 	.word	0x08011bbf
 8011c3c:	08011d1b 	.word	0x08011d1b
 8011c40:	08011ced 	.word	0x08011ced
 8011c44:	08011c8f 	.word	0x08011c8f
 8011c48:	08011bbf 	.word	0x08011bbf
 8011c4c:	08011bbf 	.word	0x08011bbf
 8011c50:	08011d17 	.word	0x08011d17
 8011c54:	08011bbf 	.word	0x08011bbf
 8011c58:	08011ce1 	.word	0x08011ce1
 8011c5c:	08011bbf 	.word	0x08011bbf
 8011c60:	08011bbf 	.word	0x08011bbf
 8011c64:	08011c97 	.word	0x08011c97
 8011c68:	3b45      	subs	r3, #69	; 0x45
 8011c6a:	2b02      	cmp	r3, #2
 8011c6c:	d8a7      	bhi.n	8011bbe <__ssvfiscanf_r+0xee>
 8011c6e:	2305      	movs	r3, #5
 8011c70:	e01b      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011c72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011c74:	4621      	mov	r1, r4
 8011c76:	4630      	mov	r0, r6
 8011c78:	4798      	blx	r3
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	f43f af68 	beq.w	8011b50 <__ssvfiscanf_r+0x80>
 8011c80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011c82:	2800      	cmp	r0, #0
 8011c84:	f040 808d 	bne.w	8011da2 <__ssvfiscanf_r+0x2d2>
 8011c88:	f04f 30ff 	mov.w	r0, #4294967295
 8011c8c:	e08f      	b.n	8011dae <__ssvfiscanf_r+0x2de>
 8011c8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011c90:	f042 0220 	orr.w	r2, r2, #32
 8011c94:	9241      	str	r2, [sp, #260]	; 0x104
 8011c96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c9c:	9241      	str	r2, [sp, #260]	; 0x104
 8011c9e:	2210      	movs	r2, #16
 8011ca0:	2b6f      	cmp	r3, #111	; 0x6f
 8011ca2:	9242      	str	r2, [sp, #264]	; 0x108
 8011ca4:	bf34      	ite	cc
 8011ca6:	2303      	movcc	r3, #3
 8011ca8:	2304      	movcs	r3, #4
 8011caa:	9347      	str	r3, [sp, #284]	; 0x11c
 8011cac:	6863      	ldr	r3, [r4, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dd42      	ble.n	8011d38 <__ssvfiscanf_r+0x268>
 8011cb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011cb4:	0659      	lsls	r1, r3, #25
 8011cb6:	d404      	bmi.n	8011cc2 <__ssvfiscanf_r+0x1f2>
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	781a      	ldrb	r2, [r3, #0]
 8011cbc:	5cba      	ldrb	r2, [r7, r2]
 8011cbe:	0712      	lsls	r2, r2, #28
 8011cc0:	d441      	bmi.n	8011d46 <__ssvfiscanf_r+0x276>
 8011cc2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011cc4:	2b02      	cmp	r3, #2
 8011cc6:	dc50      	bgt.n	8011d6a <__ssvfiscanf_r+0x29a>
 8011cc8:	466b      	mov	r3, sp
 8011cca:	4622      	mov	r2, r4
 8011ccc:	a941      	add	r1, sp, #260	; 0x104
 8011cce:	4630      	mov	r0, r6
 8011cd0:	f000 f9d0 	bl	8012074 <_scanf_chars>
 8011cd4:	2801      	cmp	r0, #1
 8011cd6:	d06e      	beq.n	8011db6 <__ssvfiscanf_r+0x2e6>
 8011cd8:	2802      	cmp	r0, #2
 8011cda:	f47f af20 	bne.w	8011b1e <__ssvfiscanf_r+0x4e>
 8011cde:	e7cf      	b.n	8011c80 <__ssvfiscanf_r+0x1b0>
 8011ce0:	220a      	movs	r2, #10
 8011ce2:	e7dd      	b.n	8011ca0 <__ssvfiscanf_r+0x1d0>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	9342      	str	r3, [sp, #264]	; 0x108
 8011ce8:	2303      	movs	r3, #3
 8011cea:	e7de      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011cec:	2308      	movs	r3, #8
 8011cee:	9342      	str	r3, [sp, #264]	; 0x108
 8011cf0:	2304      	movs	r3, #4
 8011cf2:	e7da      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011cf4:	4629      	mov	r1, r5
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	f000 fb20 	bl	801233c <__sccl>
 8011cfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d02:	9341      	str	r3, [sp, #260]	; 0x104
 8011d04:	4605      	mov	r5, r0
 8011d06:	2301      	movs	r3, #1
 8011d08:	e7cf      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011d0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d10:	9341      	str	r3, [sp, #260]	; 0x104
 8011d12:	2300      	movs	r3, #0
 8011d14:	e7c9      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011d16:	2302      	movs	r3, #2
 8011d18:	e7c7      	b.n	8011caa <__ssvfiscanf_r+0x1da>
 8011d1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011d1c:	06c3      	lsls	r3, r0, #27
 8011d1e:	f53f aefe 	bmi.w	8011b1e <__ssvfiscanf_r+0x4e>
 8011d22:	9b00      	ldr	r3, [sp, #0]
 8011d24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011d26:	1d19      	adds	r1, r3, #4
 8011d28:	9100      	str	r1, [sp, #0]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f010 0f01 	tst.w	r0, #1
 8011d30:	bf14      	ite	ne
 8011d32:	801a      	strhne	r2, [r3, #0]
 8011d34:	601a      	streq	r2, [r3, #0]
 8011d36:	e6f2      	b.n	8011b1e <__ssvfiscanf_r+0x4e>
 8011d38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	4798      	blx	r3
 8011d40:	2800      	cmp	r0, #0
 8011d42:	d0b6      	beq.n	8011cb2 <__ssvfiscanf_r+0x1e2>
 8011d44:	e79c      	b.n	8011c80 <__ssvfiscanf_r+0x1b0>
 8011d46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011d48:	3201      	adds	r2, #1
 8011d4a:	9245      	str	r2, [sp, #276]	; 0x114
 8011d4c:	6862      	ldr	r2, [r4, #4]
 8011d4e:	3a01      	subs	r2, #1
 8011d50:	2a00      	cmp	r2, #0
 8011d52:	6062      	str	r2, [r4, #4]
 8011d54:	dd02      	ble.n	8011d5c <__ssvfiscanf_r+0x28c>
 8011d56:	3301      	adds	r3, #1
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	e7ad      	b.n	8011cb8 <__ssvfiscanf_r+0x1e8>
 8011d5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011d5e:	4621      	mov	r1, r4
 8011d60:	4630      	mov	r0, r6
 8011d62:	4798      	blx	r3
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d0a7      	beq.n	8011cb8 <__ssvfiscanf_r+0x1e8>
 8011d68:	e78a      	b.n	8011c80 <__ssvfiscanf_r+0x1b0>
 8011d6a:	2b04      	cmp	r3, #4
 8011d6c:	dc0e      	bgt.n	8011d8c <__ssvfiscanf_r+0x2bc>
 8011d6e:	466b      	mov	r3, sp
 8011d70:	4622      	mov	r2, r4
 8011d72:	a941      	add	r1, sp, #260	; 0x104
 8011d74:	4630      	mov	r0, r6
 8011d76:	f000 f9d7 	bl	8012128 <_scanf_i>
 8011d7a:	e7ab      	b.n	8011cd4 <__ssvfiscanf_r+0x204>
 8011d7c:	08011a1d 	.word	0x08011a1d
 8011d80:	08011a97 	.word	0x08011a97
 8011d84:	08017a91 	.word	0x08017a91
 8011d88:	08017a6a 	.word	0x08017a6a
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <__ssvfiscanf_r+0x2ec>)
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f43f aec5 	beq.w	8011b1e <__ssvfiscanf_r+0x4e>
 8011d94:	466b      	mov	r3, sp
 8011d96:	4622      	mov	r2, r4
 8011d98:	a941      	add	r1, sp, #260	; 0x104
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f3af 8000 	nop.w
 8011da0:	e798      	b.n	8011cd4 <__ssvfiscanf_r+0x204>
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011da8:	bf18      	it	ne
 8011daa:	f04f 30ff 	movne.w	r0, #4294967295
 8011dae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011db8:	e7f9      	b.n	8011dae <__ssvfiscanf_r+0x2de>
 8011dba:	bf00      	nop
 8011dbc:	00000000 	.word	0x00000000

08011dc0 <__sfputc_r>:
 8011dc0:	6893      	ldr	r3, [r2, #8]
 8011dc2:	3b01      	subs	r3, #1
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	b410      	push	{r4}
 8011dc8:	6093      	str	r3, [r2, #8]
 8011dca:	da08      	bge.n	8011dde <__sfputc_r+0x1e>
 8011dcc:	6994      	ldr	r4, [r2, #24]
 8011dce:	42a3      	cmp	r3, r4
 8011dd0:	db01      	blt.n	8011dd6 <__sfputc_r+0x16>
 8011dd2:	290a      	cmp	r1, #10
 8011dd4:	d103      	bne.n	8011dde <__sfputc_r+0x1e>
 8011dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dda:	f000 bc27 	b.w	801262c <__swbuf_r>
 8011dde:	6813      	ldr	r3, [r2, #0]
 8011de0:	1c58      	adds	r0, r3, #1
 8011de2:	6010      	str	r0, [r2, #0]
 8011de4:	7019      	strb	r1, [r3, #0]
 8011de6:	4608      	mov	r0, r1
 8011de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <__sfputs_r>:
 8011dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df0:	4606      	mov	r6, r0
 8011df2:	460f      	mov	r7, r1
 8011df4:	4614      	mov	r4, r2
 8011df6:	18d5      	adds	r5, r2, r3
 8011df8:	42ac      	cmp	r4, r5
 8011dfa:	d101      	bne.n	8011e00 <__sfputs_r+0x12>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	e007      	b.n	8011e10 <__sfputs_r+0x22>
 8011e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e04:	463a      	mov	r2, r7
 8011e06:	4630      	mov	r0, r6
 8011e08:	f7ff ffda 	bl	8011dc0 <__sfputc_r>
 8011e0c:	1c43      	adds	r3, r0, #1
 8011e0e:	d1f3      	bne.n	8011df8 <__sfputs_r+0xa>
 8011e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e14 <_vfiprintf_r>:
 8011e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e18:	460d      	mov	r5, r1
 8011e1a:	b09d      	sub	sp, #116	; 0x74
 8011e1c:	4614      	mov	r4, r2
 8011e1e:	4698      	mov	r8, r3
 8011e20:	4606      	mov	r6, r0
 8011e22:	b118      	cbz	r0, 8011e2c <_vfiprintf_r+0x18>
 8011e24:	6983      	ldr	r3, [r0, #24]
 8011e26:	b90b      	cbnz	r3, 8011e2c <_vfiprintf_r+0x18>
 8011e28:	f000 fde2 	bl	80129f0 <__sinit>
 8011e2c:	4b89      	ldr	r3, [pc, #548]	; (8012054 <_vfiprintf_r+0x240>)
 8011e2e:	429d      	cmp	r5, r3
 8011e30:	d11b      	bne.n	8011e6a <_vfiprintf_r+0x56>
 8011e32:	6875      	ldr	r5, [r6, #4]
 8011e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e36:	07d9      	lsls	r1, r3, #31
 8011e38:	d405      	bmi.n	8011e46 <_vfiprintf_r+0x32>
 8011e3a:	89ab      	ldrh	r3, [r5, #12]
 8011e3c:	059a      	lsls	r2, r3, #22
 8011e3e:	d402      	bmi.n	8011e46 <_vfiprintf_r+0x32>
 8011e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e42:	f000 fe73 	bl	8012b2c <__retarget_lock_acquire_recursive>
 8011e46:	89ab      	ldrh	r3, [r5, #12]
 8011e48:	071b      	lsls	r3, r3, #28
 8011e4a:	d501      	bpl.n	8011e50 <_vfiprintf_r+0x3c>
 8011e4c:	692b      	ldr	r3, [r5, #16]
 8011e4e:	b9eb      	cbnz	r3, 8011e8c <_vfiprintf_r+0x78>
 8011e50:	4629      	mov	r1, r5
 8011e52:	4630      	mov	r0, r6
 8011e54:	f000 fc3c 	bl	80126d0 <__swsetup_r>
 8011e58:	b1c0      	cbz	r0, 8011e8c <_vfiprintf_r+0x78>
 8011e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e5c:	07dc      	lsls	r4, r3, #31
 8011e5e:	d50e      	bpl.n	8011e7e <_vfiprintf_r+0x6a>
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	b01d      	add	sp, #116	; 0x74
 8011e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6a:	4b7b      	ldr	r3, [pc, #492]	; (8012058 <_vfiprintf_r+0x244>)
 8011e6c:	429d      	cmp	r5, r3
 8011e6e:	d101      	bne.n	8011e74 <_vfiprintf_r+0x60>
 8011e70:	68b5      	ldr	r5, [r6, #8]
 8011e72:	e7df      	b.n	8011e34 <_vfiprintf_r+0x20>
 8011e74:	4b79      	ldr	r3, [pc, #484]	; (801205c <_vfiprintf_r+0x248>)
 8011e76:	429d      	cmp	r5, r3
 8011e78:	bf08      	it	eq
 8011e7a:	68f5      	ldreq	r5, [r6, #12]
 8011e7c:	e7da      	b.n	8011e34 <_vfiprintf_r+0x20>
 8011e7e:	89ab      	ldrh	r3, [r5, #12]
 8011e80:	0598      	lsls	r0, r3, #22
 8011e82:	d4ed      	bmi.n	8011e60 <_vfiprintf_r+0x4c>
 8011e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e86:	f000 fe52 	bl	8012b2e <__retarget_lock_release_recursive>
 8011e8a:	e7e9      	b.n	8011e60 <_vfiprintf_r+0x4c>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e90:	2320      	movs	r3, #32
 8011e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e9a:	2330      	movs	r3, #48	; 0x30
 8011e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012060 <_vfiprintf_r+0x24c>
 8011ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ea4:	f04f 0901 	mov.w	r9, #1
 8011ea8:	4623      	mov	r3, r4
 8011eaa:	469a      	mov	sl, r3
 8011eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eb0:	b10a      	cbz	r2, 8011eb6 <_vfiprintf_r+0xa2>
 8011eb2:	2a25      	cmp	r2, #37	; 0x25
 8011eb4:	d1f9      	bne.n	8011eaa <_vfiprintf_r+0x96>
 8011eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8011eba:	d00b      	beq.n	8011ed4 <_vfiprintf_r+0xc0>
 8011ebc:	465b      	mov	r3, fp
 8011ebe:	4622      	mov	r2, r4
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f7ff ff93 	bl	8011dee <__sfputs_r>
 8011ec8:	3001      	adds	r0, #1
 8011eca:	f000 80aa 	beq.w	8012022 <_vfiprintf_r+0x20e>
 8011ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ed0:	445a      	add	r2, fp
 8011ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f000 80a2 	beq.w	8012022 <_vfiprintf_r+0x20e>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ee8:	f10a 0a01 	add.w	sl, sl, #1
 8011eec:	9304      	str	r3, [sp, #16]
 8011eee:	9307      	str	r3, [sp, #28]
 8011ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8011ef6:	4654      	mov	r4, sl
 8011ef8:	2205      	movs	r2, #5
 8011efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011efe:	4858      	ldr	r0, [pc, #352]	; (8012060 <_vfiprintf_r+0x24c>)
 8011f00:	f7ef fede 	bl	8001cc0 <memchr>
 8011f04:	9a04      	ldr	r2, [sp, #16]
 8011f06:	b9d8      	cbnz	r0, 8011f40 <_vfiprintf_r+0x12c>
 8011f08:	06d1      	lsls	r1, r2, #27
 8011f0a:	bf44      	itt	mi
 8011f0c:	2320      	movmi	r3, #32
 8011f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f12:	0713      	lsls	r3, r2, #28
 8011f14:	bf44      	itt	mi
 8011f16:	232b      	movmi	r3, #43	; 0x2b
 8011f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f20:	2b2a      	cmp	r3, #42	; 0x2a
 8011f22:	d015      	beq.n	8011f50 <_vfiprintf_r+0x13c>
 8011f24:	9a07      	ldr	r2, [sp, #28]
 8011f26:	4654      	mov	r4, sl
 8011f28:	2000      	movs	r0, #0
 8011f2a:	f04f 0c0a 	mov.w	ip, #10
 8011f2e:	4621      	mov	r1, r4
 8011f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f34:	3b30      	subs	r3, #48	; 0x30
 8011f36:	2b09      	cmp	r3, #9
 8011f38:	d94e      	bls.n	8011fd8 <_vfiprintf_r+0x1c4>
 8011f3a:	b1b0      	cbz	r0, 8011f6a <_vfiprintf_r+0x156>
 8011f3c:	9207      	str	r2, [sp, #28]
 8011f3e:	e014      	b.n	8011f6a <_vfiprintf_r+0x156>
 8011f40:	eba0 0308 	sub.w	r3, r0, r8
 8011f44:	fa09 f303 	lsl.w	r3, r9, r3
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	9304      	str	r3, [sp, #16]
 8011f4c:	46a2      	mov	sl, r4
 8011f4e:	e7d2      	b.n	8011ef6 <_vfiprintf_r+0xe2>
 8011f50:	9b03      	ldr	r3, [sp, #12]
 8011f52:	1d19      	adds	r1, r3, #4
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	9103      	str	r1, [sp, #12]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	bfbb      	ittet	lt
 8011f5c:	425b      	neglt	r3, r3
 8011f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8011f62:	9307      	strge	r3, [sp, #28]
 8011f64:	9307      	strlt	r3, [sp, #28]
 8011f66:	bfb8      	it	lt
 8011f68:	9204      	strlt	r2, [sp, #16]
 8011f6a:	7823      	ldrb	r3, [r4, #0]
 8011f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f6e:	d10c      	bne.n	8011f8a <_vfiprintf_r+0x176>
 8011f70:	7863      	ldrb	r3, [r4, #1]
 8011f72:	2b2a      	cmp	r3, #42	; 0x2a
 8011f74:	d135      	bne.n	8011fe2 <_vfiprintf_r+0x1ce>
 8011f76:	9b03      	ldr	r3, [sp, #12]
 8011f78:	1d1a      	adds	r2, r3, #4
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	9203      	str	r2, [sp, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	bfb8      	it	lt
 8011f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f86:	3402      	adds	r4, #2
 8011f88:	9305      	str	r3, [sp, #20]
 8011f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012070 <_vfiprintf_r+0x25c>
 8011f8e:	7821      	ldrb	r1, [r4, #0]
 8011f90:	2203      	movs	r2, #3
 8011f92:	4650      	mov	r0, sl
 8011f94:	f7ef fe94 	bl	8001cc0 <memchr>
 8011f98:	b140      	cbz	r0, 8011fac <_vfiprintf_r+0x198>
 8011f9a:	2340      	movs	r3, #64	; 0x40
 8011f9c:	eba0 000a 	sub.w	r0, r0, sl
 8011fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8011fa4:	9b04      	ldr	r3, [sp, #16]
 8011fa6:	4303      	orrs	r3, r0
 8011fa8:	3401      	adds	r4, #1
 8011faa:	9304      	str	r3, [sp, #16]
 8011fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb0:	482c      	ldr	r0, [pc, #176]	; (8012064 <_vfiprintf_r+0x250>)
 8011fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fb6:	2206      	movs	r2, #6
 8011fb8:	f7ef fe82 	bl	8001cc0 <memchr>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	d03f      	beq.n	8012040 <_vfiprintf_r+0x22c>
 8011fc0:	4b29      	ldr	r3, [pc, #164]	; (8012068 <_vfiprintf_r+0x254>)
 8011fc2:	bb1b      	cbnz	r3, 801200c <_vfiprintf_r+0x1f8>
 8011fc4:	9b03      	ldr	r3, [sp, #12]
 8011fc6:	3307      	adds	r3, #7
 8011fc8:	f023 0307 	bic.w	r3, r3, #7
 8011fcc:	3308      	adds	r3, #8
 8011fce:	9303      	str	r3, [sp, #12]
 8011fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fd2:	443b      	add	r3, r7
 8011fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011fd6:	e767      	b.n	8011ea8 <_vfiprintf_r+0x94>
 8011fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fdc:	460c      	mov	r4, r1
 8011fde:	2001      	movs	r0, #1
 8011fe0:	e7a5      	b.n	8011f2e <_vfiprintf_r+0x11a>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	3401      	adds	r4, #1
 8011fe6:	9305      	str	r3, [sp, #20]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	f04f 0c0a 	mov.w	ip, #10
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ff4:	3a30      	subs	r2, #48	; 0x30
 8011ff6:	2a09      	cmp	r2, #9
 8011ff8:	d903      	bls.n	8012002 <_vfiprintf_r+0x1ee>
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d0c5      	beq.n	8011f8a <_vfiprintf_r+0x176>
 8011ffe:	9105      	str	r1, [sp, #20]
 8012000:	e7c3      	b.n	8011f8a <_vfiprintf_r+0x176>
 8012002:	fb0c 2101 	mla	r1, ip, r1, r2
 8012006:	4604      	mov	r4, r0
 8012008:	2301      	movs	r3, #1
 801200a:	e7f0      	b.n	8011fee <_vfiprintf_r+0x1da>
 801200c:	ab03      	add	r3, sp, #12
 801200e:	9300      	str	r3, [sp, #0]
 8012010:	462a      	mov	r2, r5
 8012012:	4b16      	ldr	r3, [pc, #88]	; (801206c <_vfiprintf_r+0x258>)
 8012014:	a904      	add	r1, sp, #16
 8012016:	4630      	mov	r0, r6
 8012018:	f7fd fb6e 	bl	800f6f8 <_printf_float>
 801201c:	4607      	mov	r7, r0
 801201e:	1c78      	adds	r0, r7, #1
 8012020:	d1d6      	bne.n	8011fd0 <_vfiprintf_r+0x1bc>
 8012022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012024:	07d9      	lsls	r1, r3, #31
 8012026:	d405      	bmi.n	8012034 <_vfiprintf_r+0x220>
 8012028:	89ab      	ldrh	r3, [r5, #12]
 801202a:	059a      	lsls	r2, r3, #22
 801202c:	d402      	bmi.n	8012034 <_vfiprintf_r+0x220>
 801202e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012030:	f000 fd7d 	bl	8012b2e <__retarget_lock_release_recursive>
 8012034:	89ab      	ldrh	r3, [r5, #12]
 8012036:	065b      	lsls	r3, r3, #25
 8012038:	f53f af12 	bmi.w	8011e60 <_vfiprintf_r+0x4c>
 801203c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801203e:	e711      	b.n	8011e64 <_vfiprintf_r+0x50>
 8012040:	ab03      	add	r3, sp, #12
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	462a      	mov	r2, r5
 8012046:	4b09      	ldr	r3, [pc, #36]	; (801206c <_vfiprintf_r+0x258>)
 8012048:	a904      	add	r1, sp, #16
 801204a:	4630      	mov	r0, r6
 801204c:	f7fd fdf8 	bl	800fc40 <_printf_i>
 8012050:	e7e4      	b.n	801201c <_vfiprintf_r+0x208>
 8012052:	bf00      	nop
 8012054:	08017bb4 	.word	0x08017bb4
 8012058:	08017bd4 	.word	0x08017bd4
 801205c:	08017b94 	.word	0x08017b94
 8012060:	08017a64 	.word	0x08017a64
 8012064:	08017a6e 	.word	0x08017a6e
 8012068:	0800f6f9 	.word	0x0800f6f9
 801206c:	08011def 	.word	0x08011def
 8012070:	08017a6a 	.word	0x08017a6a

08012074 <_scanf_chars>:
 8012074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012078:	4615      	mov	r5, r2
 801207a:	688a      	ldr	r2, [r1, #8]
 801207c:	4680      	mov	r8, r0
 801207e:	460c      	mov	r4, r1
 8012080:	b932      	cbnz	r2, 8012090 <_scanf_chars+0x1c>
 8012082:	698a      	ldr	r2, [r1, #24]
 8012084:	2a00      	cmp	r2, #0
 8012086:	bf0c      	ite	eq
 8012088:	2201      	moveq	r2, #1
 801208a:	f04f 32ff 	movne.w	r2, #4294967295
 801208e:	608a      	str	r2, [r1, #8]
 8012090:	6822      	ldr	r2, [r4, #0]
 8012092:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012124 <_scanf_chars+0xb0>
 8012096:	06d1      	lsls	r1, r2, #27
 8012098:	bf5f      	itttt	pl
 801209a:	681a      	ldrpl	r2, [r3, #0]
 801209c:	1d11      	addpl	r1, r2, #4
 801209e:	6019      	strpl	r1, [r3, #0]
 80120a0:	6816      	ldrpl	r6, [r2, #0]
 80120a2:	2700      	movs	r7, #0
 80120a4:	69a0      	ldr	r0, [r4, #24]
 80120a6:	b188      	cbz	r0, 80120cc <_scanf_chars+0x58>
 80120a8:	2801      	cmp	r0, #1
 80120aa:	d107      	bne.n	80120bc <_scanf_chars+0x48>
 80120ac:	682a      	ldr	r2, [r5, #0]
 80120ae:	7811      	ldrb	r1, [r2, #0]
 80120b0:	6962      	ldr	r2, [r4, #20]
 80120b2:	5c52      	ldrb	r2, [r2, r1]
 80120b4:	b952      	cbnz	r2, 80120cc <_scanf_chars+0x58>
 80120b6:	2f00      	cmp	r7, #0
 80120b8:	d031      	beq.n	801211e <_scanf_chars+0xaa>
 80120ba:	e022      	b.n	8012102 <_scanf_chars+0x8e>
 80120bc:	2802      	cmp	r0, #2
 80120be:	d120      	bne.n	8012102 <_scanf_chars+0x8e>
 80120c0:	682b      	ldr	r3, [r5, #0]
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80120c8:	071b      	lsls	r3, r3, #28
 80120ca:	d41a      	bmi.n	8012102 <_scanf_chars+0x8e>
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	06da      	lsls	r2, r3, #27
 80120d0:	bf5e      	ittt	pl
 80120d2:	682b      	ldrpl	r3, [r5, #0]
 80120d4:	781b      	ldrbpl	r3, [r3, #0]
 80120d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80120da:	682a      	ldr	r2, [r5, #0]
 80120dc:	686b      	ldr	r3, [r5, #4]
 80120de:	3201      	adds	r2, #1
 80120e0:	602a      	str	r2, [r5, #0]
 80120e2:	68a2      	ldr	r2, [r4, #8]
 80120e4:	3b01      	subs	r3, #1
 80120e6:	3a01      	subs	r2, #1
 80120e8:	606b      	str	r3, [r5, #4]
 80120ea:	3701      	adds	r7, #1
 80120ec:	60a2      	str	r2, [r4, #8]
 80120ee:	b142      	cbz	r2, 8012102 <_scanf_chars+0x8e>
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	dcd7      	bgt.n	80120a4 <_scanf_chars+0x30>
 80120f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80120f8:	4629      	mov	r1, r5
 80120fa:	4640      	mov	r0, r8
 80120fc:	4798      	blx	r3
 80120fe:	2800      	cmp	r0, #0
 8012100:	d0d0      	beq.n	80120a4 <_scanf_chars+0x30>
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	f013 0310 	ands.w	r3, r3, #16
 8012108:	d105      	bne.n	8012116 <_scanf_chars+0xa2>
 801210a:	68e2      	ldr	r2, [r4, #12]
 801210c:	3201      	adds	r2, #1
 801210e:	60e2      	str	r2, [r4, #12]
 8012110:	69a2      	ldr	r2, [r4, #24]
 8012112:	b102      	cbz	r2, 8012116 <_scanf_chars+0xa2>
 8012114:	7033      	strb	r3, [r6, #0]
 8012116:	6923      	ldr	r3, [r4, #16]
 8012118:	443b      	add	r3, r7
 801211a:	6123      	str	r3, [r4, #16]
 801211c:	2000      	movs	r0, #0
 801211e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012122:	bf00      	nop
 8012124:	08017a91 	.word	0x08017a91

08012128 <_scanf_i>:
 8012128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	4698      	mov	r8, r3
 801212e:	4b76      	ldr	r3, [pc, #472]	; (8012308 <_scanf_i+0x1e0>)
 8012130:	460c      	mov	r4, r1
 8012132:	4682      	mov	sl, r0
 8012134:	4616      	mov	r6, r2
 8012136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801213a:	b087      	sub	sp, #28
 801213c:	ab03      	add	r3, sp, #12
 801213e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012142:	4b72      	ldr	r3, [pc, #456]	; (801230c <_scanf_i+0x1e4>)
 8012144:	69a1      	ldr	r1, [r4, #24]
 8012146:	4a72      	ldr	r2, [pc, #456]	; (8012310 <_scanf_i+0x1e8>)
 8012148:	2903      	cmp	r1, #3
 801214a:	bf18      	it	ne
 801214c:	461a      	movne	r2, r3
 801214e:	68a3      	ldr	r3, [r4, #8]
 8012150:	9201      	str	r2, [sp, #4]
 8012152:	1e5a      	subs	r2, r3, #1
 8012154:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012158:	bf88      	it	hi
 801215a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801215e:	4627      	mov	r7, r4
 8012160:	bf82      	ittt	hi
 8012162:	eb03 0905 	addhi.w	r9, r3, r5
 8012166:	f240 135d 	movwhi	r3, #349	; 0x15d
 801216a:	60a3      	strhi	r3, [r4, #8]
 801216c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012170:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012174:	bf98      	it	ls
 8012176:	f04f 0900 	movls.w	r9, #0
 801217a:	6023      	str	r3, [r4, #0]
 801217c:	463d      	mov	r5, r7
 801217e:	f04f 0b00 	mov.w	fp, #0
 8012182:	6831      	ldr	r1, [r6, #0]
 8012184:	ab03      	add	r3, sp, #12
 8012186:	7809      	ldrb	r1, [r1, #0]
 8012188:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801218c:	2202      	movs	r2, #2
 801218e:	f7ef fd97 	bl	8001cc0 <memchr>
 8012192:	b328      	cbz	r0, 80121e0 <_scanf_i+0xb8>
 8012194:	f1bb 0f01 	cmp.w	fp, #1
 8012198:	d159      	bne.n	801224e <_scanf_i+0x126>
 801219a:	6862      	ldr	r2, [r4, #4]
 801219c:	b92a      	cbnz	r2, 80121aa <_scanf_i+0x82>
 801219e:	6822      	ldr	r2, [r4, #0]
 80121a0:	2308      	movs	r3, #8
 80121a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80121a6:	6063      	str	r3, [r4, #4]
 80121a8:	6022      	str	r2, [r4, #0]
 80121aa:	6822      	ldr	r2, [r4, #0]
 80121ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80121b0:	6022      	str	r2, [r4, #0]
 80121b2:	68a2      	ldr	r2, [r4, #8]
 80121b4:	1e51      	subs	r1, r2, #1
 80121b6:	60a1      	str	r1, [r4, #8]
 80121b8:	b192      	cbz	r2, 80121e0 <_scanf_i+0xb8>
 80121ba:	6832      	ldr	r2, [r6, #0]
 80121bc:	1c51      	adds	r1, r2, #1
 80121be:	6031      	str	r1, [r6, #0]
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	f805 2b01 	strb.w	r2, [r5], #1
 80121c6:	6872      	ldr	r2, [r6, #4]
 80121c8:	3a01      	subs	r2, #1
 80121ca:	2a00      	cmp	r2, #0
 80121cc:	6072      	str	r2, [r6, #4]
 80121ce:	dc07      	bgt.n	80121e0 <_scanf_i+0xb8>
 80121d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80121d4:	4631      	mov	r1, r6
 80121d6:	4650      	mov	r0, sl
 80121d8:	4790      	blx	r2
 80121da:	2800      	cmp	r0, #0
 80121dc:	f040 8085 	bne.w	80122ea <_scanf_i+0x1c2>
 80121e0:	f10b 0b01 	add.w	fp, fp, #1
 80121e4:	f1bb 0f03 	cmp.w	fp, #3
 80121e8:	d1cb      	bne.n	8012182 <_scanf_i+0x5a>
 80121ea:	6863      	ldr	r3, [r4, #4]
 80121ec:	b90b      	cbnz	r3, 80121f2 <_scanf_i+0xca>
 80121ee:	230a      	movs	r3, #10
 80121f0:	6063      	str	r3, [r4, #4]
 80121f2:	6863      	ldr	r3, [r4, #4]
 80121f4:	4947      	ldr	r1, [pc, #284]	; (8012314 <_scanf_i+0x1ec>)
 80121f6:	6960      	ldr	r0, [r4, #20]
 80121f8:	1ac9      	subs	r1, r1, r3
 80121fa:	f000 f89f 	bl	801233c <__sccl>
 80121fe:	f04f 0b00 	mov.w	fp, #0
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	6822      	ldr	r2, [r4, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d03d      	beq.n	8012286 <_scanf_i+0x15e>
 801220a:	6831      	ldr	r1, [r6, #0]
 801220c:	6960      	ldr	r0, [r4, #20]
 801220e:	f891 c000 	ldrb.w	ip, [r1]
 8012212:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012216:	2800      	cmp	r0, #0
 8012218:	d035      	beq.n	8012286 <_scanf_i+0x15e>
 801221a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801221e:	d124      	bne.n	801226a <_scanf_i+0x142>
 8012220:	0510      	lsls	r0, r2, #20
 8012222:	d522      	bpl.n	801226a <_scanf_i+0x142>
 8012224:	f10b 0b01 	add.w	fp, fp, #1
 8012228:	f1b9 0f00 	cmp.w	r9, #0
 801222c:	d003      	beq.n	8012236 <_scanf_i+0x10e>
 801222e:	3301      	adds	r3, #1
 8012230:	f109 39ff 	add.w	r9, r9, #4294967295
 8012234:	60a3      	str	r3, [r4, #8]
 8012236:	6873      	ldr	r3, [r6, #4]
 8012238:	3b01      	subs	r3, #1
 801223a:	2b00      	cmp	r3, #0
 801223c:	6073      	str	r3, [r6, #4]
 801223e:	dd1b      	ble.n	8012278 <_scanf_i+0x150>
 8012240:	6833      	ldr	r3, [r6, #0]
 8012242:	3301      	adds	r3, #1
 8012244:	6033      	str	r3, [r6, #0]
 8012246:	68a3      	ldr	r3, [r4, #8]
 8012248:	3b01      	subs	r3, #1
 801224a:	60a3      	str	r3, [r4, #8]
 801224c:	e7d9      	b.n	8012202 <_scanf_i+0xda>
 801224e:	f1bb 0f02 	cmp.w	fp, #2
 8012252:	d1ae      	bne.n	80121b2 <_scanf_i+0x8a>
 8012254:	6822      	ldr	r2, [r4, #0]
 8012256:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801225a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801225e:	d1bf      	bne.n	80121e0 <_scanf_i+0xb8>
 8012260:	2310      	movs	r3, #16
 8012262:	6063      	str	r3, [r4, #4]
 8012264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012268:	e7a2      	b.n	80121b0 <_scanf_i+0x88>
 801226a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801226e:	6022      	str	r2, [r4, #0]
 8012270:	780b      	ldrb	r3, [r1, #0]
 8012272:	f805 3b01 	strb.w	r3, [r5], #1
 8012276:	e7de      	b.n	8012236 <_scanf_i+0x10e>
 8012278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801227c:	4631      	mov	r1, r6
 801227e:	4650      	mov	r0, sl
 8012280:	4798      	blx	r3
 8012282:	2800      	cmp	r0, #0
 8012284:	d0df      	beq.n	8012246 <_scanf_i+0x11e>
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	05db      	lsls	r3, r3, #23
 801228a:	d50d      	bpl.n	80122a8 <_scanf_i+0x180>
 801228c:	42bd      	cmp	r5, r7
 801228e:	d909      	bls.n	80122a4 <_scanf_i+0x17c>
 8012290:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012298:	4632      	mov	r2, r6
 801229a:	4650      	mov	r0, sl
 801229c:	4798      	blx	r3
 801229e:	f105 39ff 	add.w	r9, r5, #4294967295
 80122a2:	464d      	mov	r5, r9
 80122a4:	42bd      	cmp	r5, r7
 80122a6:	d02d      	beq.n	8012304 <_scanf_i+0x1dc>
 80122a8:	6822      	ldr	r2, [r4, #0]
 80122aa:	f012 0210 	ands.w	r2, r2, #16
 80122ae:	d113      	bne.n	80122d8 <_scanf_i+0x1b0>
 80122b0:	702a      	strb	r2, [r5, #0]
 80122b2:	6863      	ldr	r3, [r4, #4]
 80122b4:	9e01      	ldr	r6, [sp, #4]
 80122b6:	4639      	mov	r1, r7
 80122b8:	4650      	mov	r0, sl
 80122ba:	47b0      	blx	r6
 80122bc:	6821      	ldr	r1, [r4, #0]
 80122be:	f8d8 3000 	ldr.w	r3, [r8]
 80122c2:	f011 0f20 	tst.w	r1, #32
 80122c6:	d013      	beq.n	80122f0 <_scanf_i+0x1c8>
 80122c8:	1d1a      	adds	r2, r3, #4
 80122ca:	f8c8 2000 	str.w	r2, [r8]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	6018      	str	r0, [r3, #0]
 80122d2:	68e3      	ldr	r3, [r4, #12]
 80122d4:	3301      	adds	r3, #1
 80122d6:	60e3      	str	r3, [r4, #12]
 80122d8:	1bed      	subs	r5, r5, r7
 80122da:	44ab      	add	fp, r5
 80122dc:	6925      	ldr	r5, [r4, #16]
 80122de:	445d      	add	r5, fp
 80122e0:	6125      	str	r5, [r4, #16]
 80122e2:	2000      	movs	r0, #0
 80122e4:	b007      	add	sp, #28
 80122e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ea:	f04f 0b00 	mov.w	fp, #0
 80122ee:	e7ca      	b.n	8012286 <_scanf_i+0x15e>
 80122f0:	1d1a      	adds	r2, r3, #4
 80122f2:	f8c8 2000 	str.w	r2, [r8]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f011 0f01 	tst.w	r1, #1
 80122fc:	bf14      	ite	ne
 80122fe:	8018      	strhne	r0, [r3, #0]
 8012300:	6018      	streq	r0, [r3, #0]
 8012302:	e7e6      	b.n	80122d2 <_scanf_i+0x1aa>
 8012304:	2001      	movs	r0, #1
 8012306:	e7ed      	b.n	80122e4 <_scanf_i+0x1bc>
 8012308:	080133d8 	.word	0x080133d8
 801230c:	080125b5 	.word	0x080125b5
 8012310:	080124cd 	.word	0x080124cd
 8012314:	08017a8e 	.word	0x08017a8e

08012318 <_read_r>:
 8012318:	b538      	push	{r3, r4, r5, lr}
 801231a:	4d07      	ldr	r5, [pc, #28]	; (8012338 <_read_r+0x20>)
 801231c:	4604      	mov	r4, r0
 801231e:	4608      	mov	r0, r1
 8012320:	4611      	mov	r1, r2
 8012322:	2200      	movs	r2, #0
 8012324:	602a      	str	r2, [r5, #0]
 8012326:	461a      	mov	r2, r3
 8012328:	f000 fd70 	bl	8012e0c <_read>
 801232c:	1c43      	adds	r3, r0, #1
 801232e:	d102      	bne.n	8012336 <_read_r+0x1e>
 8012330:	682b      	ldr	r3, [r5, #0]
 8012332:	b103      	cbz	r3, 8012336 <_read_r+0x1e>
 8012334:	6023      	str	r3, [r4, #0]
 8012336:	bd38      	pop	{r3, r4, r5, pc}
 8012338:	20006cd0 	.word	0x20006cd0

0801233c <__sccl>:
 801233c:	b570      	push	{r4, r5, r6, lr}
 801233e:	780b      	ldrb	r3, [r1, #0]
 8012340:	4604      	mov	r4, r0
 8012342:	2b5e      	cmp	r3, #94	; 0x5e
 8012344:	bf0b      	itete	eq
 8012346:	784b      	ldrbeq	r3, [r1, #1]
 8012348:	1c48      	addne	r0, r1, #1
 801234a:	1c88      	addeq	r0, r1, #2
 801234c:	2200      	movne	r2, #0
 801234e:	bf08      	it	eq
 8012350:	2201      	moveq	r2, #1
 8012352:	1e61      	subs	r1, r4, #1
 8012354:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012358:	f801 2f01 	strb.w	r2, [r1, #1]!
 801235c:	42a9      	cmp	r1, r5
 801235e:	d1fb      	bne.n	8012358 <__sccl+0x1c>
 8012360:	b90b      	cbnz	r3, 8012366 <__sccl+0x2a>
 8012362:	3801      	subs	r0, #1
 8012364:	bd70      	pop	{r4, r5, r6, pc}
 8012366:	f082 0201 	eor.w	r2, r2, #1
 801236a:	54e2      	strb	r2, [r4, r3]
 801236c:	4605      	mov	r5, r0
 801236e:	4628      	mov	r0, r5
 8012370:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012374:	292d      	cmp	r1, #45	; 0x2d
 8012376:	d006      	beq.n	8012386 <__sccl+0x4a>
 8012378:	295d      	cmp	r1, #93	; 0x5d
 801237a:	d0f3      	beq.n	8012364 <__sccl+0x28>
 801237c:	b909      	cbnz	r1, 8012382 <__sccl+0x46>
 801237e:	4628      	mov	r0, r5
 8012380:	e7f0      	b.n	8012364 <__sccl+0x28>
 8012382:	460b      	mov	r3, r1
 8012384:	e7f1      	b.n	801236a <__sccl+0x2e>
 8012386:	786e      	ldrb	r6, [r5, #1]
 8012388:	2e5d      	cmp	r6, #93	; 0x5d
 801238a:	d0fa      	beq.n	8012382 <__sccl+0x46>
 801238c:	42b3      	cmp	r3, r6
 801238e:	dcf8      	bgt.n	8012382 <__sccl+0x46>
 8012390:	3502      	adds	r5, #2
 8012392:	4619      	mov	r1, r3
 8012394:	3101      	adds	r1, #1
 8012396:	428e      	cmp	r6, r1
 8012398:	5462      	strb	r2, [r4, r1]
 801239a:	dcfb      	bgt.n	8012394 <__sccl+0x58>
 801239c:	1af1      	subs	r1, r6, r3
 801239e:	3901      	subs	r1, #1
 80123a0:	1c58      	adds	r0, r3, #1
 80123a2:	42b3      	cmp	r3, r6
 80123a4:	bfa8      	it	ge
 80123a6:	2100      	movge	r1, #0
 80123a8:	1843      	adds	r3, r0, r1
 80123aa:	e7e0      	b.n	801236e <__sccl+0x32>

080123ac <finitef>:
 80123ac:	b082      	sub	sp, #8
 80123ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80123b2:	9801      	ldr	r0, [sp, #4]
 80123b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80123b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80123bc:	bfac      	ite	ge
 80123be:	2000      	movge	r0, #0
 80123c0:	2001      	movlt	r0, #1
 80123c2:	b002      	add	sp, #8
 80123c4:	4770      	bx	lr
	...

080123c8 <_strtol_l.constprop.0>:
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123ce:	d001      	beq.n	80123d4 <_strtol_l.constprop.0+0xc>
 80123d0:	2b24      	cmp	r3, #36	; 0x24
 80123d2:	d906      	bls.n	80123e2 <_strtol_l.constprop.0+0x1a>
 80123d4:	f7fe fdf2 	bl	8010fbc <__errno>
 80123d8:	2316      	movs	r3, #22
 80123da:	6003      	str	r3, [r0, #0]
 80123dc:	2000      	movs	r0, #0
 80123de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80124c8 <_strtol_l.constprop.0+0x100>
 80123e6:	460d      	mov	r5, r1
 80123e8:	462e      	mov	r6, r5
 80123ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80123f2:	f017 0708 	ands.w	r7, r7, #8
 80123f6:	d1f7      	bne.n	80123e8 <_strtol_l.constprop.0+0x20>
 80123f8:	2c2d      	cmp	r4, #45	; 0x2d
 80123fa:	d132      	bne.n	8012462 <_strtol_l.constprop.0+0x9a>
 80123fc:	782c      	ldrb	r4, [r5, #0]
 80123fe:	2701      	movs	r7, #1
 8012400:	1cb5      	adds	r5, r6, #2
 8012402:	2b00      	cmp	r3, #0
 8012404:	d05b      	beq.n	80124be <_strtol_l.constprop.0+0xf6>
 8012406:	2b10      	cmp	r3, #16
 8012408:	d109      	bne.n	801241e <_strtol_l.constprop.0+0x56>
 801240a:	2c30      	cmp	r4, #48	; 0x30
 801240c:	d107      	bne.n	801241e <_strtol_l.constprop.0+0x56>
 801240e:	782c      	ldrb	r4, [r5, #0]
 8012410:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012414:	2c58      	cmp	r4, #88	; 0x58
 8012416:	d14d      	bne.n	80124b4 <_strtol_l.constprop.0+0xec>
 8012418:	786c      	ldrb	r4, [r5, #1]
 801241a:	2310      	movs	r3, #16
 801241c:	3502      	adds	r5, #2
 801241e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012422:	f108 38ff 	add.w	r8, r8, #4294967295
 8012426:	f04f 0c00 	mov.w	ip, #0
 801242a:	fbb8 f9f3 	udiv	r9, r8, r3
 801242e:	4666      	mov	r6, ip
 8012430:	fb03 8a19 	mls	sl, r3, r9, r8
 8012434:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012438:	f1be 0f09 	cmp.w	lr, #9
 801243c:	d816      	bhi.n	801246c <_strtol_l.constprop.0+0xa4>
 801243e:	4674      	mov	r4, lr
 8012440:	42a3      	cmp	r3, r4
 8012442:	dd24      	ble.n	801248e <_strtol_l.constprop.0+0xc6>
 8012444:	f1bc 0f00 	cmp.w	ip, #0
 8012448:	db1e      	blt.n	8012488 <_strtol_l.constprop.0+0xc0>
 801244a:	45b1      	cmp	r9, r6
 801244c:	d31c      	bcc.n	8012488 <_strtol_l.constprop.0+0xc0>
 801244e:	d101      	bne.n	8012454 <_strtol_l.constprop.0+0x8c>
 8012450:	45a2      	cmp	sl, r4
 8012452:	db19      	blt.n	8012488 <_strtol_l.constprop.0+0xc0>
 8012454:	fb06 4603 	mla	r6, r6, r3, r4
 8012458:	f04f 0c01 	mov.w	ip, #1
 801245c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012460:	e7e8      	b.n	8012434 <_strtol_l.constprop.0+0x6c>
 8012462:	2c2b      	cmp	r4, #43	; 0x2b
 8012464:	bf04      	itt	eq
 8012466:	782c      	ldrbeq	r4, [r5, #0]
 8012468:	1cb5      	addeq	r5, r6, #2
 801246a:	e7ca      	b.n	8012402 <_strtol_l.constprop.0+0x3a>
 801246c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012470:	f1be 0f19 	cmp.w	lr, #25
 8012474:	d801      	bhi.n	801247a <_strtol_l.constprop.0+0xb2>
 8012476:	3c37      	subs	r4, #55	; 0x37
 8012478:	e7e2      	b.n	8012440 <_strtol_l.constprop.0+0x78>
 801247a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801247e:	f1be 0f19 	cmp.w	lr, #25
 8012482:	d804      	bhi.n	801248e <_strtol_l.constprop.0+0xc6>
 8012484:	3c57      	subs	r4, #87	; 0x57
 8012486:	e7db      	b.n	8012440 <_strtol_l.constprop.0+0x78>
 8012488:	f04f 3cff 	mov.w	ip, #4294967295
 801248c:	e7e6      	b.n	801245c <_strtol_l.constprop.0+0x94>
 801248e:	f1bc 0f00 	cmp.w	ip, #0
 8012492:	da05      	bge.n	80124a0 <_strtol_l.constprop.0+0xd8>
 8012494:	2322      	movs	r3, #34	; 0x22
 8012496:	6003      	str	r3, [r0, #0]
 8012498:	4646      	mov	r6, r8
 801249a:	b942      	cbnz	r2, 80124ae <_strtol_l.constprop.0+0xe6>
 801249c:	4630      	mov	r0, r6
 801249e:	e79e      	b.n	80123de <_strtol_l.constprop.0+0x16>
 80124a0:	b107      	cbz	r7, 80124a4 <_strtol_l.constprop.0+0xdc>
 80124a2:	4276      	negs	r6, r6
 80124a4:	2a00      	cmp	r2, #0
 80124a6:	d0f9      	beq.n	801249c <_strtol_l.constprop.0+0xd4>
 80124a8:	f1bc 0f00 	cmp.w	ip, #0
 80124ac:	d000      	beq.n	80124b0 <_strtol_l.constprop.0+0xe8>
 80124ae:	1e69      	subs	r1, r5, #1
 80124b0:	6011      	str	r1, [r2, #0]
 80124b2:	e7f3      	b.n	801249c <_strtol_l.constprop.0+0xd4>
 80124b4:	2430      	movs	r4, #48	; 0x30
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1b1      	bne.n	801241e <_strtol_l.constprop.0+0x56>
 80124ba:	2308      	movs	r3, #8
 80124bc:	e7af      	b.n	801241e <_strtol_l.constprop.0+0x56>
 80124be:	2c30      	cmp	r4, #48	; 0x30
 80124c0:	d0a5      	beq.n	801240e <_strtol_l.constprop.0+0x46>
 80124c2:	230a      	movs	r3, #10
 80124c4:	e7ab      	b.n	801241e <_strtol_l.constprop.0+0x56>
 80124c6:	bf00      	nop
 80124c8:	08017a91 	.word	0x08017a91

080124cc <_strtol_r>:
 80124cc:	f7ff bf7c 	b.w	80123c8 <_strtol_l.constprop.0>

080124d0 <_strtoul_l.constprop.0>:
 80124d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124d4:	4f36      	ldr	r7, [pc, #216]	; (80125b0 <_strtoul_l.constprop.0+0xe0>)
 80124d6:	4686      	mov	lr, r0
 80124d8:	460d      	mov	r5, r1
 80124da:	4628      	mov	r0, r5
 80124dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124e0:	5de6      	ldrb	r6, [r4, r7]
 80124e2:	f016 0608 	ands.w	r6, r6, #8
 80124e6:	d1f8      	bne.n	80124da <_strtoul_l.constprop.0+0xa>
 80124e8:	2c2d      	cmp	r4, #45	; 0x2d
 80124ea:	d12f      	bne.n	801254c <_strtoul_l.constprop.0+0x7c>
 80124ec:	782c      	ldrb	r4, [r5, #0]
 80124ee:	2601      	movs	r6, #1
 80124f0:	1c85      	adds	r5, r0, #2
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d057      	beq.n	80125a6 <_strtoul_l.constprop.0+0xd6>
 80124f6:	2b10      	cmp	r3, #16
 80124f8:	d109      	bne.n	801250e <_strtoul_l.constprop.0+0x3e>
 80124fa:	2c30      	cmp	r4, #48	; 0x30
 80124fc:	d107      	bne.n	801250e <_strtoul_l.constprop.0+0x3e>
 80124fe:	7828      	ldrb	r0, [r5, #0]
 8012500:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012504:	2858      	cmp	r0, #88	; 0x58
 8012506:	d149      	bne.n	801259c <_strtoul_l.constprop.0+0xcc>
 8012508:	786c      	ldrb	r4, [r5, #1]
 801250a:	2310      	movs	r3, #16
 801250c:	3502      	adds	r5, #2
 801250e:	f04f 38ff 	mov.w	r8, #4294967295
 8012512:	2700      	movs	r7, #0
 8012514:	fbb8 f8f3 	udiv	r8, r8, r3
 8012518:	fb03 f908 	mul.w	r9, r3, r8
 801251c:	ea6f 0909 	mvn.w	r9, r9
 8012520:	4638      	mov	r0, r7
 8012522:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012526:	f1bc 0f09 	cmp.w	ip, #9
 801252a:	d814      	bhi.n	8012556 <_strtoul_l.constprop.0+0x86>
 801252c:	4664      	mov	r4, ip
 801252e:	42a3      	cmp	r3, r4
 8012530:	dd22      	ble.n	8012578 <_strtoul_l.constprop.0+0xa8>
 8012532:	2f00      	cmp	r7, #0
 8012534:	db1d      	blt.n	8012572 <_strtoul_l.constprop.0+0xa2>
 8012536:	4580      	cmp	r8, r0
 8012538:	d31b      	bcc.n	8012572 <_strtoul_l.constprop.0+0xa2>
 801253a:	d101      	bne.n	8012540 <_strtoul_l.constprop.0+0x70>
 801253c:	45a1      	cmp	r9, r4
 801253e:	db18      	blt.n	8012572 <_strtoul_l.constprop.0+0xa2>
 8012540:	fb00 4003 	mla	r0, r0, r3, r4
 8012544:	2701      	movs	r7, #1
 8012546:	f815 4b01 	ldrb.w	r4, [r5], #1
 801254a:	e7ea      	b.n	8012522 <_strtoul_l.constprop.0+0x52>
 801254c:	2c2b      	cmp	r4, #43	; 0x2b
 801254e:	bf04      	itt	eq
 8012550:	782c      	ldrbeq	r4, [r5, #0]
 8012552:	1c85      	addeq	r5, r0, #2
 8012554:	e7cd      	b.n	80124f2 <_strtoul_l.constprop.0+0x22>
 8012556:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801255a:	f1bc 0f19 	cmp.w	ip, #25
 801255e:	d801      	bhi.n	8012564 <_strtoul_l.constprop.0+0x94>
 8012560:	3c37      	subs	r4, #55	; 0x37
 8012562:	e7e4      	b.n	801252e <_strtoul_l.constprop.0+0x5e>
 8012564:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012568:	f1bc 0f19 	cmp.w	ip, #25
 801256c:	d804      	bhi.n	8012578 <_strtoul_l.constprop.0+0xa8>
 801256e:	3c57      	subs	r4, #87	; 0x57
 8012570:	e7dd      	b.n	801252e <_strtoul_l.constprop.0+0x5e>
 8012572:	f04f 37ff 	mov.w	r7, #4294967295
 8012576:	e7e6      	b.n	8012546 <_strtoul_l.constprop.0+0x76>
 8012578:	2f00      	cmp	r7, #0
 801257a:	da07      	bge.n	801258c <_strtoul_l.constprop.0+0xbc>
 801257c:	2322      	movs	r3, #34	; 0x22
 801257e:	f8ce 3000 	str.w	r3, [lr]
 8012582:	f04f 30ff 	mov.w	r0, #4294967295
 8012586:	b932      	cbnz	r2, 8012596 <_strtoul_l.constprop.0+0xc6>
 8012588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801258c:	b106      	cbz	r6, 8012590 <_strtoul_l.constprop.0+0xc0>
 801258e:	4240      	negs	r0, r0
 8012590:	2a00      	cmp	r2, #0
 8012592:	d0f9      	beq.n	8012588 <_strtoul_l.constprop.0+0xb8>
 8012594:	b107      	cbz	r7, 8012598 <_strtoul_l.constprop.0+0xc8>
 8012596:	1e69      	subs	r1, r5, #1
 8012598:	6011      	str	r1, [r2, #0]
 801259a:	e7f5      	b.n	8012588 <_strtoul_l.constprop.0+0xb8>
 801259c:	2430      	movs	r4, #48	; 0x30
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1b5      	bne.n	801250e <_strtoul_l.constprop.0+0x3e>
 80125a2:	2308      	movs	r3, #8
 80125a4:	e7b3      	b.n	801250e <_strtoul_l.constprop.0+0x3e>
 80125a6:	2c30      	cmp	r4, #48	; 0x30
 80125a8:	d0a9      	beq.n	80124fe <_strtoul_l.constprop.0+0x2e>
 80125aa:	230a      	movs	r3, #10
 80125ac:	e7af      	b.n	801250e <_strtoul_l.constprop.0+0x3e>
 80125ae:	bf00      	nop
 80125b0:	08017a91 	.word	0x08017a91

080125b4 <_strtoul_r>:
 80125b4:	f7ff bf8c 	b.w	80124d0 <_strtoul_l.constprop.0>

080125b8 <__submore>:
 80125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	460c      	mov	r4, r1
 80125be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80125c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125c4:	4299      	cmp	r1, r3
 80125c6:	d11d      	bne.n	8012604 <__submore+0x4c>
 80125c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80125cc:	f7fc ff80 	bl	800f4d0 <_malloc_r>
 80125d0:	b918      	cbnz	r0, 80125da <__submore+0x22>
 80125d2:	f04f 30ff 	mov.w	r0, #4294967295
 80125d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125de:	63a3      	str	r3, [r4, #56]	; 0x38
 80125e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80125e4:	6360      	str	r0, [r4, #52]	; 0x34
 80125e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80125ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80125ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80125f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80125f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80125fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80125fe:	6020      	str	r0, [r4, #0]
 8012600:	2000      	movs	r0, #0
 8012602:	e7e8      	b.n	80125d6 <__submore+0x1e>
 8012604:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012606:	0077      	lsls	r7, r6, #1
 8012608:	463a      	mov	r2, r7
 801260a:	f000 fb23 	bl	8012c54 <_realloc_r>
 801260e:	4605      	mov	r5, r0
 8012610:	2800      	cmp	r0, #0
 8012612:	d0de      	beq.n	80125d2 <__submore+0x1a>
 8012614:	eb00 0806 	add.w	r8, r0, r6
 8012618:	4601      	mov	r1, r0
 801261a:	4632      	mov	r2, r6
 801261c:	4640      	mov	r0, r8
 801261e:	f7fc fed5 	bl	800f3cc <memcpy>
 8012622:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012626:	f8c4 8000 	str.w	r8, [r4]
 801262a:	e7e9      	b.n	8012600 <__submore+0x48>

0801262c <__swbuf_r>:
 801262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262e:	460e      	mov	r6, r1
 8012630:	4614      	mov	r4, r2
 8012632:	4605      	mov	r5, r0
 8012634:	b118      	cbz	r0, 801263e <__swbuf_r+0x12>
 8012636:	6983      	ldr	r3, [r0, #24]
 8012638:	b90b      	cbnz	r3, 801263e <__swbuf_r+0x12>
 801263a:	f000 f9d9 	bl	80129f0 <__sinit>
 801263e:	4b21      	ldr	r3, [pc, #132]	; (80126c4 <__swbuf_r+0x98>)
 8012640:	429c      	cmp	r4, r3
 8012642:	d12b      	bne.n	801269c <__swbuf_r+0x70>
 8012644:	686c      	ldr	r4, [r5, #4]
 8012646:	69a3      	ldr	r3, [r4, #24]
 8012648:	60a3      	str	r3, [r4, #8]
 801264a:	89a3      	ldrh	r3, [r4, #12]
 801264c:	071a      	lsls	r2, r3, #28
 801264e:	d52f      	bpl.n	80126b0 <__swbuf_r+0x84>
 8012650:	6923      	ldr	r3, [r4, #16]
 8012652:	b36b      	cbz	r3, 80126b0 <__swbuf_r+0x84>
 8012654:	6923      	ldr	r3, [r4, #16]
 8012656:	6820      	ldr	r0, [r4, #0]
 8012658:	1ac0      	subs	r0, r0, r3
 801265a:	6963      	ldr	r3, [r4, #20]
 801265c:	b2f6      	uxtb	r6, r6
 801265e:	4283      	cmp	r3, r0
 8012660:	4637      	mov	r7, r6
 8012662:	dc04      	bgt.n	801266e <__swbuf_r+0x42>
 8012664:	4621      	mov	r1, r4
 8012666:	4628      	mov	r0, r5
 8012668:	f000 f92e 	bl	80128c8 <_fflush_r>
 801266c:	bb30      	cbnz	r0, 80126bc <__swbuf_r+0x90>
 801266e:	68a3      	ldr	r3, [r4, #8]
 8012670:	3b01      	subs	r3, #1
 8012672:	60a3      	str	r3, [r4, #8]
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	1c5a      	adds	r2, r3, #1
 8012678:	6022      	str	r2, [r4, #0]
 801267a:	701e      	strb	r6, [r3, #0]
 801267c:	6963      	ldr	r3, [r4, #20]
 801267e:	3001      	adds	r0, #1
 8012680:	4283      	cmp	r3, r0
 8012682:	d004      	beq.n	801268e <__swbuf_r+0x62>
 8012684:	89a3      	ldrh	r3, [r4, #12]
 8012686:	07db      	lsls	r3, r3, #31
 8012688:	d506      	bpl.n	8012698 <__swbuf_r+0x6c>
 801268a:	2e0a      	cmp	r6, #10
 801268c:	d104      	bne.n	8012698 <__swbuf_r+0x6c>
 801268e:	4621      	mov	r1, r4
 8012690:	4628      	mov	r0, r5
 8012692:	f000 f919 	bl	80128c8 <_fflush_r>
 8012696:	b988      	cbnz	r0, 80126bc <__swbuf_r+0x90>
 8012698:	4638      	mov	r0, r7
 801269a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801269c:	4b0a      	ldr	r3, [pc, #40]	; (80126c8 <__swbuf_r+0x9c>)
 801269e:	429c      	cmp	r4, r3
 80126a0:	d101      	bne.n	80126a6 <__swbuf_r+0x7a>
 80126a2:	68ac      	ldr	r4, [r5, #8]
 80126a4:	e7cf      	b.n	8012646 <__swbuf_r+0x1a>
 80126a6:	4b09      	ldr	r3, [pc, #36]	; (80126cc <__swbuf_r+0xa0>)
 80126a8:	429c      	cmp	r4, r3
 80126aa:	bf08      	it	eq
 80126ac:	68ec      	ldreq	r4, [r5, #12]
 80126ae:	e7ca      	b.n	8012646 <__swbuf_r+0x1a>
 80126b0:	4621      	mov	r1, r4
 80126b2:	4628      	mov	r0, r5
 80126b4:	f000 f80c 	bl	80126d0 <__swsetup_r>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d0cb      	beq.n	8012654 <__swbuf_r+0x28>
 80126bc:	f04f 37ff 	mov.w	r7, #4294967295
 80126c0:	e7ea      	b.n	8012698 <__swbuf_r+0x6c>
 80126c2:	bf00      	nop
 80126c4:	08017bb4 	.word	0x08017bb4
 80126c8:	08017bd4 	.word	0x08017bd4
 80126cc:	08017b94 	.word	0x08017b94

080126d0 <__swsetup_r>:
 80126d0:	4b32      	ldr	r3, [pc, #200]	; (801279c <__swsetup_r+0xcc>)
 80126d2:	b570      	push	{r4, r5, r6, lr}
 80126d4:	681d      	ldr	r5, [r3, #0]
 80126d6:	4606      	mov	r6, r0
 80126d8:	460c      	mov	r4, r1
 80126da:	b125      	cbz	r5, 80126e6 <__swsetup_r+0x16>
 80126dc:	69ab      	ldr	r3, [r5, #24]
 80126de:	b913      	cbnz	r3, 80126e6 <__swsetup_r+0x16>
 80126e0:	4628      	mov	r0, r5
 80126e2:	f000 f985 	bl	80129f0 <__sinit>
 80126e6:	4b2e      	ldr	r3, [pc, #184]	; (80127a0 <__swsetup_r+0xd0>)
 80126e8:	429c      	cmp	r4, r3
 80126ea:	d10f      	bne.n	801270c <__swsetup_r+0x3c>
 80126ec:	686c      	ldr	r4, [r5, #4]
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126f4:	0719      	lsls	r1, r3, #28
 80126f6:	d42c      	bmi.n	8012752 <__swsetup_r+0x82>
 80126f8:	06dd      	lsls	r5, r3, #27
 80126fa:	d411      	bmi.n	8012720 <__swsetup_r+0x50>
 80126fc:	2309      	movs	r3, #9
 80126fe:	6033      	str	r3, [r6, #0]
 8012700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012704:	81a3      	strh	r3, [r4, #12]
 8012706:	f04f 30ff 	mov.w	r0, #4294967295
 801270a:	e03e      	b.n	801278a <__swsetup_r+0xba>
 801270c:	4b25      	ldr	r3, [pc, #148]	; (80127a4 <__swsetup_r+0xd4>)
 801270e:	429c      	cmp	r4, r3
 8012710:	d101      	bne.n	8012716 <__swsetup_r+0x46>
 8012712:	68ac      	ldr	r4, [r5, #8]
 8012714:	e7eb      	b.n	80126ee <__swsetup_r+0x1e>
 8012716:	4b24      	ldr	r3, [pc, #144]	; (80127a8 <__swsetup_r+0xd8>)
 8012718:	429c      	cmp	r4, r3
 801271a:	bf08      	it	eq
 801271c:	68ec      	ldreq	r4, [r5, #12]
 801271e:	e7e6      	b.n	80126ee <__swsetup_r+0x1e>
 8012720:	0758      	lsls	r0, r3, #29
 8012722:	d512      	bpl.n	801274a <__swsetup_r+0x7a>
 8012724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012726:	b141      	cbz	r1, 801273a <__swsetup_r+0x6a>
 8012728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801272c:	4299      	cmp	r1, r3
 801272e:	d002      	beq.n	8012736 <__swsetup_r+0x66>
 8012730:	4630      	mov	r0, r6
 8012732:	f7fc fe61 	bl	800f3f8 <_free_r>
 8012736:	2300      	movs	r3, #0
 8012738:	6363      	str	r3, [r4, #52]	; 0x34
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012740:	81a3      	strh	r3, [r4, #12]
 8012742:	2300      	movs	r3, #0
 8012744:	6063      	str	r3, [r4, #4]
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	89a3      	ldrh	r3, [r4, #12]
 801274c:	f043 0308 	orr.w	r3, r3, #8
 8012750:	81a3      	strh	r3, [r4, #12]
 8012752:	6923      	ldr	r3, [r4, #16]
 8012754:	b94b      	cbnz	r3, 801276a <__swsetup_r+0x9a>
 8012756:	89a3      	ldrh	r3, [r4, #12]
 8012758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012760:	d003      	beq.n	801276a <__swsetup_r+0x9a>
 8012762:	4621      	mov	r1, r4
 8012764:	4630      	mov	r0, r6
 8012766:	f000 fa09 	bl	8012b7c <__smakebuf_r>
 801276a:	89a0      	ldrh	r0, [r4, #12]
 801276c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012770:	f010 0301 	ands.w	r3, r0, #1
 8012774:	d00a      	beq.n	801278c <__swsetup_r+0xbc>
 8012776:	2300      	movs	r3, #0
 8012778:	60a3      	str	r3, [r4, #8]
 801277a:	6963      	ldr	r3, [r4, #20]
 801277c:	425b      	negs	r3, r3
 801277e:	61a3      	str	r3, [r4, #24]
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	b943      	cbnz	r3, 8012796 <__swsetup_r+0xc6>
 8012784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012788:	d1ba      	bne.n	8012700 <__swsetup_r+0x30>
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	0781      	lsls	r1, r0, #30
 801278e:	bf58      	it	pl
 8012790:	6963      	ldrpl	r3, [r4, #20]
 8012792:	60a3      	str	r3, [r4, #8]
 8012794:	e7f4      	b.n	8012780 <__swsetup_r+0xb0>
 8012796:	2000      	movs	r0, #0
 8012798:	e7f7      	b.n	801278a <__swsetup_r+0xba>
 801279a:	bf00      	nop
 801279c:	20000030 	.word	0x20000030
 80127a0:	08017bb4 	.word	0x08017bb4
 80127a4:	08017bd4 	.word	0x08017bd4
 80127a8:	08017b94 	.word	0x08017b94

080127ac <abort>:
 80127ac:	b508      	push	{r3, lr}
 80127ae:	2006      	movs	r0, #6
 80127b0:	f000 faa8 	bl	8012d04 <raise>
 80127b4:	2001      	movs	r0, #1
 80127b6:	f000 fb47 	bl	8012e48 <_exit>
	...

080127bc <__sflush_r>:
 80127bc:	898a      	ldrh	r2, [r1, #12]
 80127be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c2:	4605      	mov	r5, r0
 80127c4:	0710      	lsls	r0, r2, #28
 80127c6:	460c      	mov	r4, r1
 80127c8:	d458      	bmi.n	801287c <__sflush_r+0xc0>
 80127ca:	684b      	ldr	r3, [r1, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dc05      	bgt.n	80127dc <__sflush_r+0x20>
 80127d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	dc02      	bgt.n	80127dc <__sflush_r+0x20>
 80127d6:	2000      	movs	r0, #0
 80127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127de:	2e00      	cmp	r6, #0
 80127e0:	d0f9      	beq.n	80127d6 <__sflush_r+0x1a>
 80127e2:	2300      	movs	r3, #0
 80127e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127e8:	682f      	ldr	r7, [r5, #0]
 80127ea:	602b      	str	r3, [r5, #0]
 80127ec:	d032      	beq.n	8012854 <__sflush_r+0x98>
 80127ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	075a      	lsls	r2, r3, #29
 80127f4:	d505      	bpl.n	8012802 <__sflush_r+0x46>
 80127f6:	6863      	ldr	r3, [r4, #4]
 80127f8:	1ac0      	subs	r0, r0, r3
 80127fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127fc:	b10b      	cbz	r3, 8012802 <__sflush_r+0x46>
 80127fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012800:	1ac0      	subs	r0, r0, r3
 8012802:	2300      	movs	r3, #0
 8012804:	4602      	mov	r2, r0
 8012806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012808:	6a21      	ldr	r1, [r4, #32]
 801280a:	4628      	mov	r0, r5
 801280c:	47b0      	blx	r6
 801280e:	1c43      	adds	r3, r0, #1
 8012810:	89a3      	ldrh	r3, [r4, #12]
 8012812:	d106      	bne.n	8012822 <__sflush_r+0x66>
 8012814:	6829      	ldr	r1, [r5, #0]
 8012816:	291d      	cmp	r1, #29
 8012818:	d82c      	bhi.n	8012874 <__sflush_r+0xb8>
 801281a:	4a2a      	ldr	r2, [pc, #168]	; (80128c4 <__sflush_r+0x108>)
 801281c:	40ca      	lsrs	r2, r1
 801281e:	07d6      	lsls	r6, r2, #31
 8012820:	d528      	bpl.n	8012874 <__sflush_r+0xb8>
 8012822:	2200      	movs	r2, #0
 8012824:	6062      	str	r2, [r4, #4]
 8012826:	04d9      	lsls	r1, r3, #19
 8012828:	6922      	ldr	r2, [r4, #16]
 801282a:	6022      	str	r2, [r4, #0]
 801282c:	d504      	bpl.n	8012838 <__sflush_r+0x7c>
 801282e:	1c42      	adds	r2, r0, #1
 8012830:	d101      	bne.n	8012836 <__sflush_r+0x7a>
 8012832:	682b      	ldr	r3, [r5, #0]
 8012834:	b903      	cbnz	r3, 8012838 <__sflush_r+0x7c>
 8012836:	6560      	str	r0, [r4, #84]	; 0x54
 8012838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283a:	602f      	str	r7, [r5, #0]
 801283c:	2900      	cmp	r1, #0
 801283e:	d0ca      	beq.n	80127d6 <__sflush_r+0x1a>
 8012840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012844:	4299      	cmp	r1, r3
 8012846:	d002      	beq.n	801284e <__sflush_r+0x92>
 8012848:	4628      	mov	r0, r5
 801284a:	f7fc fdd5 	bl	800f3f8 <_free_r>
 801284e:	2000      	movs	r0, #0
 8012850:	6360      	str	r0, [r4, #52]	; 0x34
 8012852:	e7c1      	b.n	80127d8 <__sflush_r+0x1c>
 8012854:	6a21      	ldr	r1, [r4, #32]
 8012856:	2301      	movs	r3, #1
 8012858:	4628      	mov	r0, r5
 801285a:	47b0      	blx	r6
 801285c:	1c41      	adds	r1, r0, #1
 801285e:	d1c7      	bne.n	80127f0 <__sflush_r+0x34>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d0c4      	beq.n	80127f0 <__sflush_r+0x34>
 8012866:	2b1d      	cmp	r3, #29
 8012868:	d001      	beq.n	801286e <__sflush_r+0xb2>
 801286a:	2b16      	cmp	r3, #22
 801286c:	d101      	bne.n	8012872 <__sflush_r+0xb6>
 801286e:	602f      	str	r7, [r5, #0]
 8012870:	e7b1      	b.n	80127d6 <__sflush_r+0x1a>
 8012872:	89a3      	ldrh	r3, [r4, #12]
 8012874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012878:	81a3      	strh	r3, [r4, #12]
 801287a:	e7ad      	b.n	80127d8 <__sflush_r+0x1c>
 801287c:	690f      	ldr	r7, [r1, #16]
 801287e:	2f00      	cmp	r7, #0
 8012880:	d0a9      	beq.n	80127d6 <__sflush_r+0x1a>
 8012882:	0793      	lsls	r3, r2, #30
 8012884:	680e      	ldr	r6, [r1, #0]
 8012886:	bf08      	it	eq
 8012888:	694b      	ldreq	r3, [r1, #20]
 801288a:	600f      	str	r7, [r1, #0]
 801288c:	bf18      	it	ne
 801288e:	2300      	movne	r3, #0
 8012890:	eba6 0807 	sub.w	r8, r6, r7
 8012894:	608b      	str	r3, [r1, #8]
 8012896:	f1b8 0f00 	cmp.w	r8, #0
 801289a:	dd9c      	ble.n	80127d6 <__sflush_r+0x1a>
 801289c:	6a21      	ldr	r1, [r4, #32]
 801289e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128a0:	4643      	mov	r3, r8
 80128a2:	463a      	mov	r2, r7
 80128a4:	4628      	mov	r0, r5
 80128a6:	47b0      	blx	r6
 80128a8:	2800      	cmp	r0, #0
 80128aa:	dc06      	bgt.n	80128ba <__sflush_r+0xfe>
 80128ac:	89a3      	ldrh	r3, [r4, #12]
 80128ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128b2:	81a3      	strh	r3, [r4, #12]
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295
 80128b8:	e78e      	b.n	80127d8 <__sflush_r+0x1c>
 80128ba:	4407      	add	r7, r0
 80128bc:	eba8 0800 	sub.w	r8, r8, r0
 80128c0:	e7e9      	b.n	8012896 <__sflush_r+0xda>
 80128c2:	bf00      	nop
 80128c4:	20400001 	.word	0x20400001

080128c8 <_fflush_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	690b      	ldr	r3, [r1, #16]
 80128cc:	4605      	mov	r5, r0
 80128ce:	460c      	mov	r4, r1
 80128d0:	b913      	cbnz	r3, 80128d8 <_fflush_r+0x10>
 80128d2:	2500      	movs	r5, #0
 80128d4:	4628      	mov	r0, r5
 80128d6:	bd38      	pop	{r3, r4, r5, pc}
 80128d8:	b118      	cbz	r0, 80128e2 <_fflush_r+0x1a>
 80128da:	6983      	ldr	r3, [r0, #24]
 80128dc:	b90b      	cbnz	r3, 80128e2 <_fflush_r+0x1a>
 80128de:	f000 f887 	bl	80129f0 <__sinit>
 80128e2:	4b14      	ldr	r3, [pc, #80]	; (8012934 <_fflush_r+0x6c>)
 80128e4:	429c      	cmp	r4, r3
 80128e6:	d11b      	bne.n	8012920 <_fflush_r+0x58>
 80128e8:	686c      	ldr	r4, [r5, #4]
 80128ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0ef      	beq.n	80128d2 <_fflush_r+0xa>
 80128f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128f4:	07d0      	lsls	r0, r2, #31
 80128f6:	d404      	bmi.n	8012902 <_fflush_r+0x3a>
 80128f8:	0599      	lsls	r1, r3, #22
 80128fa:	d402      	bmi.n	8012902 <_fflush_r+0x3a>
 80128fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128fe:	f000 f915 	bl	8012b2c <__retarget_lock_acquire_recursive>
 8012902:	4628      	mov	r0, r5
 8012904:	4621      	mov	r1, r4
 8012906:	f7ff ff59 	bl	80127bc <__sflush_r>
 801290a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801290c:	07da      	lsls	r2, r3, #31
 801290e:	4605      	mov	r5, r0
 8012910:	d4e0      	bmi.n	80128d4 <_fflush_r+0xc>
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	059b      	lsls	r3, r3, #22
 8012916:	d4dd      	bmi.n	80128d4 <_fflush_r+0xc>
 8012918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801291a:	f000 f908 	bl	8012b2e <__retarget_lock_release_recursive>
 801291e:	e7d9      	b.n	80128d4 <_fflush_r+0xc>
 8012920:	4b05      	ldr	r3, [pc, #20]	; (8012938 <_fflush_r+0x70>)
 8012922:	429c      	cmp	r4, r3
 8012924:	d101      	bne.n	801292a <_fflush_r+0x62>
 8012926:	68ac      	ldr	r4, [r5, #8]
 8012928:	e7df      	b.n	80128ea <_fflush_r+0x22>
 801292a:	4b04      	ldr	r3, [pc, #16]	; (801293c <_fflush_r+0x74>)
 801292c:	429c      	cmp	r4, r3
 801292e:	bf08      	it	eq
 8012930:	68ec      	ldreq	r4, [r5, #12]
 8012932:	e7da      	b.n	80128ea <_fflush_r+0x22>
 8012934:	08017bb4 	.word	0x08017bb4
 8012938:	08017bd4 	.word	0x08017bd4
 801293c:	08017b94 	.word	0x08017b94

08012940 <std>:
 8012940:	2300      	movs	r3, #0
 8012942:	b510      	push	{r4, lr}
 8012944:	4604      	mov	r4, r0
 8012946:	e9c0 3300 	strd	r3, r3, [r0]
 801294a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801294e:	6083      	str	r3, [r0, #8]
 8012950:	8181      	strh	r1, [r0, #12]
 8012952:	6643      	str	r3, [r0, #100]	; 0x64
 8012954:	81c2      	strh	r2, [r0, #14]
 8012956:	6183      	str	r3, [r0, #24]
 8012958:	4619      	mov	r1, r3
 801295a:	2208      	movs	r2, #8
 801295c:	305c      	adds	r0, #92	; 0x5c
 801295e:	f7fc fd43 	bl	800f3e8 <memset>
 8012962:	4b05      	ldr	r3, [pc, #20]	; (8012978 <std+0x38>)
 8012964:	6263      	str	r3, [r4, #36]	; 0x24
 8012966:	4b05      	ldr	r3, [pc, #20]	; (801297c <std+0x3c>)
 8012968:	62a3      	str	r3, [r4, #40]	; 0x28
 801296a:	4b05      	ldr	r3, [pc, #20]	; (8012980 <std+0x40>)
 801296c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801296e:	4b05      	ldr	r3, [pc, #20]	; (8012984 <std+0x44>)
 8012970:	6224      	str	r4, [r4, #32]
 8012972:	6323      	str	r3, [r4, #48]	; 0x30
 8012974:	bd10      	pop	{r4, pc}
 8012976:	bf00      	nop
 8012978:	08010081 	.word	0x08010081
 801297c:	080100a7 	.word	0x080100a7
 8012980:	080100df 	.word	0x080100df
 8012984:	08010103 	.word	0x08010103

08012988 <_cleanup_r>:
 8012988:	4901      	ldr	r1, [pc, #4]	; (8012990 <_cleanup_r+0x8>)
 801298a:	f000 b8af 	b.w	8012aec <_fwalk_reent>
 801298e:	bf00      	nop
 8012990:	080128c9 	.word	0x080128c9

08012994 <__sfmoreglue>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	2268      	movs	r2, #104	; 0x68
 8012998:	1e4d      	subs	r5, r1, #1
 801299a:	4355      	muls	r5, r2
 801299c:	460e      	mov	r6, r1
 801299e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80129a2:	f7fc fd95 	bl	800f4d0 <_malloc_r>
 80129a6:	4604      	mov	r4, r0
 80129a8:	b140      	cbz	r0, 80129bc <__sfmoreglue+0x28>
 80129aa:	2100      	movs	r1, #0
 80129ac:	e9c0 1600 	strd	r1, r6, [r0]
 80129b0:	300c      	adds	r0, #12
 80129b2:	60a0      	str	r0, [r4, #8]
 80129b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80129b8:	f7fc fd16 	bl	800f3e8 <memset>
 80129bc:	4620      	mov	r0, r4
 80129be:	bd70      	pop	{r4, r5, r6, pc}

080129c0 <__sfp_lock_acquire>:
 80129c0:	4801      	ldr	r0, [pc, #4]	; (80129c8 <__sfp_lock_acquire+0x8>)
 80129c2:	f000 b8b3 	b.w	8012b2c <__retarget_lock_acquire_recursive>
 80129c6:	bf00      	nop
 80129c8:	20006cd5 	.word	0x20006cd5

080129cc <__sfp_lock_release>:
 80129cc:	4801      	ldr	r0, [pc, #4]	; (80129d4 <__sfp_lock_release+0x8>)
 80129ce:	f000 b8ae 	b.w	8012b2e <__retarget_lock_release_recursive>
 80129d2:	bf00      	nop
 80129d4:	20006cd5 	.word	0x20006cd5

080129d8 <__sinit_lock_acquire>:
 80129d8:	4801      	ldr	r0, [pc, #4]	; (80129e0 <__sinit_lock_acquire+0x8>)
 80129da:	f000 b8a7 	b.w	8012b2c <__retarget_lock_acquire_recursive>
 80129de:	bf00      	nop
 80129e0:	20006cd6 	.word	0x20006cd6

080129e4 <__sinit_lock_release>:
 80129e4:	4801      	ldr	r0, [pc, #4]	; (80129ec <__sinit_lock_release+0x8>)
 80129e6:	f000 b8a2 	b.w	8012b2e <__retarget_lock_release_recursive>
 80129ea:	bf00      	nop
 80129ec:	20006cd6 	.word	0x20006cd6

080129f0 <__sinit>:
 80129f0:	b510      	push	{r4, lr}
 80129f2:	4604      	mov	r4, r0
 80129f4:	f7ff fff0 	bl	80129d8 <__sinit_lock_acquire>
 80129f8:	69a3      	ldr	r3, [r4, #24]
 80129fa:	b11b      	cbz	r3, 8012a04 <__sinit+0x14>
 80129fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a00:	f7ff bff0 	b.w	80129e4 <__sinit_lock_release>
 8012a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012a08:	6523      	str	r3, [r4, #80]	; 0x50
 8012a0a:	4b13      	ldr	r3, [pc, #76]	; (8012a58 <__sinit+0x68>)
 8012a0c:	4a13      	ldr	r2, [pc, #76]	; (8012a5c <__sinit+0x6c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8012a12:	42a3      	cmp	r3, r4
 8012a14:	bf04      	itt	eq
 8012a16:	2301      	moveq	r3, #1
 8012a18:	61a3      	streq	r3, [r4, #24]
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 f820 	bl	8012a60 <__sfp>
 8012a20:	6060      	str	r0, [r4, #4]
 8012a22:	4620      	mov	r0, r4
 8012a24:	f000 f81c 	bl	8012a60 <__sfp>
 8012a28:	60a0      	str	r0, [r4, #8]
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f000 f818 	bl	8012a60 <__sfp>
 8012a30:	2200      	movs	r2, #0
 8012a32:	60e0      	str	r0, [r4, #12]
 8012a34:	2104      	movs	r1, #4
 8012a36:	6860      	ldr	r0, [r4, #4]
 8012a38:	f7ff ff82 	bl	8012940 <std>
 8012a3c:	68a0      	ldr	r0, [r4, #8]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	2109      	movs	r1, #9
 8012a42:	f7ff ff7d 	bl	8012940 <std>
 8012a46:	68e0      	ldr	r0, [r4, #12]
 8012a48:	2202      	movs	r2, #2
 8012a4a:	2112      	movs	r1, #18
 8012a4c:	f7ff ff78 	bl	8012940 <std>
 8012a50:	2301      	movs	r3, #1
 8012a52:	61a3      	str	r3, [r4, #24]
 8012a54:	e7d2      	b.n	80129fc <__sinit+0xc>
 8012a56:	bf00      	nop
 8012a58:	08017740 	.word	0x08017740
 8012a5c:	08012989 	.word	0x08012989

08012a60 <__sfp>:
 8012a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a62:	4607      	mov	r7, r0
 8012a64:	f7ff ffac 	bl	80129c0 <__sfp_lock_acquire>
 8012a68:	4b1e      	ldr	r3, [pc, #120]	; (8012ae4 <__sfp+0x84>)
 8012a6a:	681e      	ldr	r6, [r3, #0]
 8012a6c:	69b3      	ldr	r3, [r6, #24]
 8012a6e:	b913      	cbnz	r3, 8012a76 <__sfp+0x16>
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7ff ffbd 	bl	80129f0 <__sinit>
 8012a76:	3648      	adds	r6, #72	; 0x48
 8012a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a7c:	3b01      	subs	r3, #1
 8012a7e:	d503      	bpl.n	8012a88 <__sfp+0x28>
 8012a80:	6833      	ldr	r3, [r6, #0]
 8012a82:	b30b      	cbz	r3, 8012ac8 <__sfp+0x68>
 8012a84:	6836      	ldr	r6, [r6, #0]
 8012a86:	e7f7      	b.n	8012a78 <__sfp+0x18>
 8012a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a8c:	b9d5      	cbnz	r5, 8012ac4 <__sfp+0x64>
 8012a8e:	4b16      	ldr	r3, [pc, #88]	; (8012ae8 <__sfp+0x88>)
 8012a90:	60e3      	str	r3, [r4, #12]
 8012a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012a96:	6665      	str	r5, [r4, #100]	; 0x64
 8012a98:	f000 f847 	bl	8012b2a <__retarget_lock_init_recursive>
 8012a9c:	f7ff ff96 	bl	80129cc <__sfp_lock_release>
 8012aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012aa8:	6025      	str	r5, [r4, #0]
 8012aaa:	61a5      	str	r5, [r4, #24]
 8012aac:	2208      	movs	r2, #8
 8012aae:	4629      	mov	r1, r5
 8012ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ab4:	f7fc fc98 	bl	800f3e8 <memset>
 8012ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ac4:	3468      	adds	r4, #104	; 0x68
 8012ac6:	e7d9      	b.n	8012a7c <__sfp+0x1c>
 8012ac8:	2104      	movs	r1, #4
 8012aca:	4638      	mov	r0, r7
 8012acc:	f7ff ff62 	bl	8012994 <__sfmoreglue>
 8012ad0:	4604      	mov	r4, r0
 8012ad2:	6030      	str	r0, [r6, #0]
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	d1d5      	bne.n	8012a84 <__sfp+0x24>
 8012ad8:	f7ff ff78 	bl	80129cc <__sfp_lock_release>
 8012adc:	230c      	movs	r3, #12
 8012ade:	603b      	str	r3, [r7, #0]
 8012ae0:	e7ee      	b.n	8012ac0 <__sfp+0x60>
 8012ae2:	bf00      	nop
 8012ae4:	08017740 	.word	0x08017740
 8012ae8:	ffff0001 	.word	0xffff0001

08012aec <_fwalk_reent>:
 8012aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012af0:	4606      	mov	r6, r0
 8012af2:	4688      	mov	r8, r1
 8012af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012af8:	2700      	movs	r7, #0
 8012afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012afe:	f1b9 0901 	subs.w	r9, r9, #1
 8012b02:	d505      	bpl.n	8012b10 <_fwalk_reent+0x24>
 8012b04:	6824      	ldr	r4, [r4, #0]
 8012b06:	2c00      	cmp	r4, #0
 8012b08:	d1f7      	bne.n	8012afa <_fwalk_reent+0xe>
 8012b0a:	4638      	mov	r0, r7
 8012b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b10:	89ab      	ldrh	r3, [r5, #12]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d907      	bls.n	8012b26 <_fwalk_reent+0x3a>
 8012b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	d003      	beq.n	8012b26 <_fwalk_reent+0x3a>
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4630      	mov	r0, r6
 8012b22:	47c0      	blx	r8
 8012b24:	4307      	orrs	r7, r0
 8012b26:	3568      	adds	r5, #104	; 0x68
 8012b28:	e7e9      	b.n	8012afe <_fwalk_reent+0x12>

08012b2a <__retarget_lock_init_recursive>:
 8012b2a:	4770      	bx	lr

08012b2c <__retarget_lock_acquire_recursive>:
 8012b2c:	4770      	bx	lr

08012b2e <__retarget_lock_release_recursive>:
 8012b2e:	4770      	bx	lr

08012b30 <__swhatbuf_r>:
 8012b30:	b570      	push	{r4, r5, r6, lr}
 8012b32:	460e      	mov	r6, r1
 8012b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b38:	2900      	cmp	r1, #0
 8012b3a:	b096      	sub	sp, #88	; 0x58
 8012b3c:	4614      	mov	r4, r2
 8012b3e:	461d      	mov	r5, r3
 8012b40:	da08      	bge.n	8012b54 <__swhatbuf_r+0x24>
 8012b42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012b46:	2200      	movs	r2, #0
 8012b48:	602a      	str	r2, [r5, #0]
 8012b4a:	061a      	lsls	r2, r3, #24
 8012b4c:	d410      	bmi.n	8012b70 <__swhatbuf_r+0x40>
 8012b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b52:	e00e      	b.n	8012b72 <__swhatbuf_r+0x42>
 8012b54:	466a      	mov	r2, sp
 8012b56:	f000 f8ff 	bl	8012d58 <_fstat_r>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	dbf1      	blt.n	8012b42 <__swhatbuf_r+0x12>
 8012b5e:	9a01      	ldr	r2, [sp, #4]
 8012b60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b68:	425a      	negs	r2, r3
 8012b6a:	415a      	adcs	r2, r3
 8012b6c:	602a      	str	r2, [r5, #0]
 8012b6e:	e7ee      	b.n	8012b4e <__swhatbuf_r+0x1e>
 8012b70:	2340      	movs	r3, #64	; 0x40
 8012b72:	2000      	movs	r0, #0
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	b016      	add	sp, #88	; 0x58
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08012b7c <__smakebuf_r>:
 8012b7c:	898b      	ldrh	r3, [r1, #12]
 8012b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b80:	079d      	lsls	r5, r3, #30
 8012b82:	4606      	mov	r6, r0
 8012b84:	460c      	mov	r4, r1
 8012b86:	d507      	bpl.n	8012b98 <__smakebuf_r+0x1c>
 8012b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b8c:	6023      	str	r3, [r4, #0]
 8012b8e:	6123      	str	r3, [r4, #16]
 8012b90:	2301      	movs	r3, #1
 8012b92:	6163      	str	r3, [r4, #20]
 8012b94:	b002      	add	sp, #8
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	ab01      	add	r3, sp, #4
 8012b9a:	466a      	mov	r2, sp
 8012b9c:	f7ff ffc8 	bl	8012b30 <__swhatbuf_r>
 8012ba0:	9900      	ldr	r1, [sp, #0]
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	f7fc fc93 	bl	800f4d0 <_malloc_r>
 8012baa:	b948      	cbnz	r0, 8012bc0 <__smakebuf_r+0x44>
 8012bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bb0:	059a      	lsls	r2, r3, #22
 8012bb2:	d4ef      	bmi.n	8012b94 <__smakebuf_r+0x18>
 8012bb4:	f023 0303 	bic.w	r3, r3, #3
 8012bb8:	f043 0302 	orr.w	r3, r3, #2
 8012bbc:	81a3      	strh	r3, [r4, #12]
 8012bbe:	e7e3      	b.n	8012b88 <__smakebuf_r+0xc>
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <__smakebuf_r+0x7c>)
 8012bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bc4:	89a3      	ldrh	r3, [r4, #12]
 8012bc6:	6020      	str	r0, [r4, #0]
 8012bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bcc:	81a3      	strh	r3, [r4, #12]
 8012bce:	9b00      	ldr	r3, [sp, #0]
 8012bd0:	6163      	str	r3, [r4, #20]
 8012bd2:	9b01      	ldr	r3, [sp, #4]
 8012bd4:	6120      	str	r0, [r4, #16]
 8012bd6:	b15b      	cbz	r3, 8012bf0 <__smakebuf_r+0x74>
 8012bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f000 f8cd 	bl	8012d7c <_isatty_r>
 8012be2:	b128      	cbz	r0, 8012bf0 <__smakebuf_r+0x74>
 8012be4:	89a3      	ldrh	r3, [r4, #12]
 8012be6:	f023 0303 	bic.w	r3, r3, #3
 8012bea:	f043 0301 	orr.w	r3, r3, #1
 8012bee:	81a3      	strh	r3, [r4, #12]
 8012bf0:	89a0      	ldrh	r0, [r4, #12]
 8012bf2:	4305      	orrs	r5, r0
 8012bf4:	81a5      	strh	r5, [r4, #12]
 8012bf6:	e7cd      	b.n	8012b94 <__smakebuf_r+0x18>
 8012bf8:	08012989 	.word	0x08012989

08012bfc <__ascii_mbtowc>:
 8012bfc:	b082      	sub	sp, #8
 8012bfe:	b901      	cbnz	r1, 8012c02 <__ascii_mbtowc+0x6>
 8012c00:	a901      	add	r1, sp, #4
 8012c02:	b142      	cbz	r2, 8012c16 <__ascii_mbtowc+0x1a>
 8012c04:	b14b      	cbz	r3, 8012c1a <__ascii_mbtowc+0x1e>
 8012c06:	7813      	ldrb	r3, [r2, #0]
 8012c08:	600b      	str	r3, [r1, #0]
 8012c0a:	7812      	ldrb	r2, [r2, #0]
 8012c0c:	1e10      	subs	r0, r2, #0
 8012c0e:	bf18      	it	ne
 8012c10:	2001      	movne	r0, #1
 8012c12:	b002      	add	sp, #8
 8012c14:	4770      	bx	lr
 8012c16:	4610      	mov	r0, r2
 8012c18:	e7fb      	b.n	8012c12 <__ascii_mbtowc+0x16>
 8012c1a:	f06f 0001 	mvn.w	r0, #1
 8012c1e:	e7f8      	b.n	8012c12 <__ascii_mbtowc+0x16>

08012c20 <memmove>:
 8012c20:	4288      	cmp	r0, r1
 8012c22:	b510      	push	{r4, lr}
 8012c24:	eb01 0402 	add.w	r4, r1, r2
 8012c28:	d902      	bls.n	8012c30 <memmove+0x10>
 8012c2a:	4284      	cmp	r4, r0
 8012c2c:	4623      	mov	r3, r4
 8012c2e:	d807      	bhi.n	8012c40 <memmove+0x20>
 8012c30:	1e43      	subs	r3, r0, #1
 8012c32:	42a1      	cmp	r1, r4
 8012c34:	d008      	beq.n	8012c48 <memmove+0x28>
 8012c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c3e:	e7f8      	b.n	8012c32 <memmove+0x12>
 8012c40:	4402      	add	r2, r0
 8012c42:	4601      	mov	r1, r0
 8012c44:	428a      	cmp	r2, r1
 8012c46:	d100      	bne.n	8012c4a <memmove+0x2a>
 8012c48:	bd10      	pop	{r4, pc}
 8012c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c52:	e7f7      	b.n	8012c44 <memmove+0x24>

08012c54 <_realloc_r>:
 8012c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c58:	4680      	mov	r8, r0
 8012c5a:	4614      	mov	r4, r2
 8012c5c:	460e      	mov	r6, r1
 8012c5e:	b921      	cbnz	r1, 8012c6a <_realloc_r+0x16>
 8012c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c64:	4611      	mov	r1, r2
 8012c66:	f7fc bc33 	b.w	800f4d0 <_malloc_r>
 8012c6a:	b92a      	cbnz	r2, 8012c78 <_realloc_r+0x24>
 8012c6c:	f7fc fbc4 	bl	800f3f8 <_free_r>
 8012c70:	4625      	mov	r5, r4
 8012c72:	4628      	mov	r0, r5
 8012c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c78:	f000 f890 	bl	8012d9c <_malloc_usable_size_r>
 8012c7c:	4284      	cmp	r4, r0
 8012c7e:	4607      	mov	r7, r0
 8012c80:	d802      	bhi.n	8012c88 <_realloc_r+0x34>
 8012c82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c86:	d812      	bhi.n	8012cae <_realloc_r+0x5a>
 8012c88:	4621      	mov	r1, r4
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	f7fc fc20 	bl	800f4d0 <_malloc_r>
 8012c90:	4605      	mov	r5, r0
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d0ed      	beq.n	8012c72 <_realloc_r+0x1e>
 8012c96:	42bc      	cmp	r4, r7
 8012c98:	4622      	mov	r2, r4
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	bf28      	it	cs
 8012c9e:	463a      	movcs	r2, r7
 8012ca0:	f7fc fb94 	bl	800f3cc <memcpy>
 8012ca4:	4631      	mov	r1, r6
 8012ca6:	4640      	mov	r0, r8
 8012ca8:	f7fc fba6 	bl	800f3f8 <_free_r>
 8012cac:	e7e1      	b.n	8012c72 <_realloc_r+0x1e>
 8012cae:	4635      	mov	r5, r6
 8012cb0:	e7df      	b.n	8012c72 <_realloc_r+0x1e>

08012cb2 <_raise_r>:
 8012cb2:	291f      	cmp	r1, #31
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	460d      	mov	r5, r1
 8012cba:	d904      	bls.n	8012cc6 <_raise_r+0x14>
 8012cbc:	2316      	movs	r3, #22
 8012cbe:	6003      	str	r3, [r0, #0]
 8012cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012cc8:	b112      	cbz	r2, 8012cd0 <_raise_r+0x1e>
 8012cca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cce:	b94b      	cbnz	r3, 8012ce4 <_raise_r+0x32>
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 f831 	bl	8012d38 <_getpid_r>
 8012cd6:	462a      	mov	r2, r5
 8012cd8:	4601      	mov	r1, r0
 8012cda:	4620      	mov	r0, r4
 8012cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ce0:	f000 b818 	b.w	8012d14 <_kill_r>
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d00a      	beq.n	8012cfe <_raise_r+0x4c>
 8012ce8:	1c59      	adds	r1, r3, #1
 8012cea:	d103      	bne.n	8012cf4 <_raise_r+0x42>
 8012cec:	2316      	movs	r3, #22
 8012cee:	6003      	str	r3, [r0, #0]
 8012cf0:	2001      	movs	r0, #1
 8012cf2:	e7e7      	b.n	8012cc4 <_raise_r+0x12>
 8012cf4:	2400      	movs	r4, #0
 8012cf6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	4798      	blx	r3
 8012cfe:	2000      	movs	r0, #0
 8012d00:	e7e0      	b.n	8012cc4 <_raise_r+0x12>
	...

08012d04 <raise>:
 8012d04:	4b02      	ldr	r3, [pc, #8]	; (8012d10 <raise+0xc>)
 8012d06:	4601      	mov	r1, r0
 8012d08:	6818      	ldr	r0, [r3, #0]
 8012d0a:	f7ff bfd2 	b.w	8012cb2 <_raise_r>
 8012d0e:	bf00      	nop
 8012d10:	20000030 	.word	0x20000030

08012d14 <_kill_r>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	4d07      	ldr	r5, [pc, #28]	; (8012d34 <_kill_r+0x20>)
 8012d18:	2300      	movs	r3, #0
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	4608      	mov	r0, r1
 8012d1e:	4611      	mov	r1, r2
 8012d20:	602b      	str	r3, [r5, #0]
 8012d22:	f000 f863 	bl	8012dec <_kill>
 8012d26:	1c43      	adds	r3, r0, #1
 8012d28:	d102      	bne.n	8012d30 <_kill_r+0x1c>
 8012d2a:	682b      	ldr	r3, [r5, #0]
 8012d2c:	b103      	cbz	r3, 8012d30 <_kill_r+0x1c>
 8012d2e:	6023      	str	r3, [r4, #0]
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	bf00      	nop
 8012d34:	20006cd0 	.word	0x20006cd0

08012d38 <_getpid_r>:
 8012d38:	f000 b848 	b.w	8012dcc <_getpid>

08012d3c <__ascii_wctomb>:
 8012d3c:	b149      	cbz	r1, 8012d52 <__ascii_wctomb+0x16>
 8012d3e:	2aff      	cmp	r2, #255	; 0xff
 8012d40:	bf85      	ittet	hi
 8012d42:	238a      	movhi	r3, #138	; 0x8a
 8012d44:	6003      	strhi	r3, [r0, #0]
 8012d46:	700a      	strbls	r2, [r1, #0]
 8012d48:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d4c:	bf98      	it	ls
 8012d4e:	2001      	movls	r0, #1
 8012d50:	4770      	bx	lr
 8012d52:	4608      	mov	r0, r1
 8012d54:	4770      	bx	lr
	...

08012d58 <_fstat_r>:
 8012d58:	b538      	push	{r3, r4, r5, lr}
 8012d5a:	4d07      	ldr	r5, [pc, #28]	; (8012d78 <_fstat_r+0x20>)
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	4604      	mov	r4, r0
 8012d60:	4608      	mov	r0, r1
 8012d62:	4611      	mov	r1, r2
 8012d64:	602b      	str	r3, [r5, #0]
 8012d66:	f000 f829 	bl	8012dbc <_fstat>
 8012d6a:	1c43      	adds	r3, r0, #1
 8012d6c:	d102      	bne.n	8012d74 <_fstat_r+0x1c>
 8012d6e:	682b      	ldr	r3, [r5, #0]
 8012d70:	b103      	cbz	r3, 8012d74 <_fstat_r+0x1c>
 8012d72:	6023      	str	r3, [r4, #0]
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	bf00      	nop
 8012d78:	20006cd0 	.word	0x20006cd0

08012d7c <_isatty_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4d06      	ldr	r5, [pc, #24]	; (8012d98 <_isatty_r+0x1c>)
 8012d80:	2300      	movs	r3, #0
 8012d82:	4604      	mov	r4, r0
 8012d84:	4608      	mov	r0, r1
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	f000 f828 	bl	8012ddc <_isatty>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d102      	bne.n	8012d96 <_isatty_r+0x1a>
 8012d90:	682b      	ldr	r3, [r5, #0]
 8012d92:	b103      	cbz	r3, 8012d96 <_isatty_r+0x1a>
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	20006cd0 	.word	0x20006cd0

08012d9c <_malloc_usable_size_r>:
 8012d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012da0:	1f18      	subs	r0, r3, #4
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	bfbc      	itt	lt
 8012da6:	580b      	ldrlt	r3, [r1, r0]
 8012da8:	18c0      	addlt	r0, r0, r3
 8012daa:	4770      	bx	lr

08012dac <_close>:
 8012dac:	4b02      	ldr	r3, [pc, #8]	; (8012db8 <_close+0xc>)
 8012dae:	2258      	movs	r2, #88	; 0x58
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	f04f 30ff 	mov.w	r0, #4294967295
 8012db6:	4770      	bx	lr
 8012db8:	20006cd0 	.word	0x20006cd0

08012dbc <_fstat>:
 8012dbc:	4b02      	ldr	r3, [pc, #8]	; (8012dc8 <_fstat+0xc>)
 8012dbe:	2258      	movs	r2, #88	; 0x58
 8012dc0:	601a      	str	r2, [r3, #0]
 8012dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc6:	4770      	bx	lr
 8012dc8:	20006cd0 	.word	0x20006cd0

08012dcc <_getpid>:
 8012dcc:	4b02      	ldr	r3, [pc, #8]	; (8012dd8 <_getpid+0xc>)
 8012dce:	2258      	movs	r2, #88	; 0x58
 8012dd0:	601a      	str	r2, [r3, #0]
 8012dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd6:	4770      	bx	lr
 8012dd8:	20006cd0 	.word	0x20006cd0

08012ddc <_isatty>:
 8012ddc:	4b02      	ldr	r3, [pc, #8]	; (8012de8 <_isatty+0xc>)
 8012dde:	2258      	movs	r2, #88	; 0x58
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	2000      	movs	r0, #0
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop
 8012de8:	20006cd0 	.word	0x20006cd0

08012dec <_kill>:
 8012dec:	4b02      	ldr	r3, [pc, #8]	; (8012df8 <_kill+0xc>)
 8012dee:	2258      	movs	r2, #88	; 0x58
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	f04f 30ff 	mov.w	r0, #4294967295
 8012df6:	4770      	bx	lr
 8012df8:	20006cd0 	.word	0x20006cd0

08012dfc <_lseek>:
 8012dfc:	4b02      	ldr	r3, [pc, #8]	; (8012e08 <_lseek+0xc>)
 8012dfe:	2258      	movs	r2, #88	; 0x58
 8012e00:	601a      	str	r2, [r3, #0]
 8012e02:	f04f 30ff 	mov.w	r0, #4294967295
 8012e06:	4770      	bx	lr
 8012e08:	20006cd0 	.word	0x20006cd0

08012e0c <_read>:
 8012e0c:	4b02      	ldr	r3, [pc, #8]	; (8012e18 <_read+0xc>)
 8012e0e:	2258      	movs	r2, #88	; 0x58
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	f04f 30ff 	mov.w	r0, #4294967295
 8012e16:	4770      	bx	lr
 8012e18:	20006cd0 	.word	0x20006cd0

08012e1c <_sbrk>:
 8012e1c:	4a04      	ldr	r2, [pc, #16]	; (8012e30 <_sbrk+0x14>)
 8012e1e:	4905      	ldr	r1, [pc, #20]	; (8012e34 <_sbrk+0x18>)
 8012e20:	6813      	ldr	r3, [r2, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	bf08      	it	eq
 8012e26:	460b      	moveq	r3, r1
 8012e28:	4418      	add	r0, r3
 8012e2a:	6010      	str	r0, [r2, #0]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	4770      	bx	lr
 8012e30:	20006cd8 	.word	0x20006cd8
 8012e34:	20006cdc 	.word	0x20006cdc

08012e38 <_write>:
 8012e38:	4b02      	ldr	r3, [pc, #8]	; (8012e44 <_write+0xc>)
 8012e3a:	2258      	movs	r2, #88	; 0x58
 8012e3c:	601a      	str	r2, [r3, #0]
 8012e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e42:	4770      	bx	lr
 8012e44:	20006cd0 	.word	0x20006cd0

08012e48 <_exit>:
 8012e48:	e7fe      	b.n	8012e48 <_exit>
 8012e4a:	bf00      	nop

08012e4c <round>:
 8012e4c:	ec53 2b10 	vmov	r2, r3, d0
 8012e50:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 8012e54:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 8012e58:	2913      	cmp	r1, #19
 8012e5a:	b510      	push	{r4, lr}
 8012e5c:	ee10 0a10 	vmov	r0, s0
 8012e60:	469e      	mov	lr, r3
 8012e62:	dc22      	bgt.n	8012eaa <round+0x5e>
 8012e64:	2900      	cmp	r1, #0
 8012e66:	db09      	blt.n	8012e7c <round+0x30>
 8012e68:	4c1f      	ldr	r4, [pc, #124]	; (8012ee8 <round+0x9c>)
 8012e6a:	fa44 fc01 	asr.w	ip, r4, r1
 8012e6e:	ea03 040c 	and.w	r4, r3, ip
 8012e72:	4320      	orrs	r0, r4
 8012e74:	d110      	bne.n	8012e98 <round+0x4c>
 8012e76:	ec43 2b10 	vmov	d0, r2, r3
 8012e7a:	bd10      	pop	{r4, pc}
 8012e7c:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
 8012e80:	3101      	adds	r1, #1
 8012e82:	bf04      	itt	eq
 8012e84:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 8012e88:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	4673      	mov	r3, lr
 8012e90:	4602      	mov	r2, r0
 8012e92:	ec43 2b10 	vmov	d0, r2, r3
 8012e96:	bd10      	pop	{r4, pc}
 8012e98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012e9c:	fa43 f101 	asr.w	r1, r3, r1
 8012ea0:	448e      	add	lr, r1
 8012ea2:	ea2e 0e0c 	bic.w	lr, lr, ip
 8012ea6:	2000      	movs	r0, #0
 8012ea8:	e7f1      	b.n	8012e8e <round+0x42>
 8012eaa:	2933      	cmp	r1, #51	; 0x33
 8012eac:	dd08      	ble.n	8012ec0 <round+0x74>
 8012eae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012eb2:	d1e0      	bne.n	8012e76 <round+0x2a>
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	f7ee fcc9 	bl	800184c <__adddf3>
 8012eba:	ec41 0b10 	vmov	d0, r0, r1
 8012ebe:	bd10      	pop	{r4, pc}
 8012ec0:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8012ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8012ec8:	fa24 fc0c 	lsr.w	ip, r4, ip
 8012ecc:	ea12 0f0c 	tst.w	r2, ip
 8012ed0:	d0d1      	beq.n	8012e76 <round+0x2a>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 8012ed8:	fa03 f101 	lsl.w	r1, r3, r1
 8012edc:	1840      	adds	r0, r0, r1
 8012ede:	bf28      	it	cs
 8012ee0:	449e      	addcs	lr, r3
 8012ee2:	ea20 000c 	bic.w	r0, r0, ip
 8012ee6:	e7d2      	b.n	8012e8e <round+0x42>
 8012ee8:	000fffff 	.word	0x000fffff
 8012eec:	00000000 	.word	0x00000000

08012ef0 <log>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	ed2d 8b02 	vpush	{d8}
 8012ef6:	ec55 4b10 	vmov	r4, r5, d0
 8012efa:	f000 f83d 	bl	8012f78 <__ieee754_log>
 8012efe:	4622      	mov	r2, r4
 8012f00:	462b      	mov	r3, r5
 8012f02:	4620      	mov	r0, r4
 8012f04:	4629      	mov	r1, r5
 8012f06:	eeb0 8a40 	vmov.f32	s16, s0
 8012f0a:	eef0 8a60 	vmov.f32	s17, s1
 8012f0e:	f7ef f9c1 	bl	8002294 <__aeabi_dcmpun>
 8012f12:	b998      	cbnz	r0, 8012f3c <log+0x4c>
 8012f14:	2200      	movs	r2, #0
 8012f16:	2300      	movs	r3, #0
 8012f18:	4620      	mov	r0, r4
 8012f1a:	4629      	mov	r1, r5
 8012f1c:	f7ef f9b0 	bl	8002280 <__aeabi_dcmpgt>
 8012f20:	b960      	cbnz	r0, 8012f3c <log+0x4c>
 8012f22:	2200      	movs	r2, #0
 8012f24:	2300      	movs	r3, #0
 8012f26:	4620      	mov	r0, r4
 8012f28:	4629      	mov	r1, r5
 8012f2a:	f7ef f981 	bl	8002230 <__aeabi_dcmpeq>
 8012f2e:	b160      	cbz	r0, 8012f4a <log+0x5a>
 8012f30:	f7fe f844 	bl	8010fbc <__errno>
 8012f34:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8012f68 <log+0x78>
 8012f38:	2322      	movs	r3, #34	; 0x22
 8012f3a:	6003      	str	r3, [r0, #0]
 8012f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f40:	eef0 0a68 	vmov.f32	s1, s17
 8012f44:	ecbd 8b02 	vpop	{d8}
 8012f48:	bd38      	pop	{r3, r4, r5, pc}
 8012f4a:	f7fe f837 	bl	8010fbc <__errno>
 8012f4e:	ecbd 8b02 	vpop	{d8}
 8012f52:	4603      	mov	r3, r0
 8012f54:	2221      	movs	r2, #33	; 0x21
 8012f56:	601a      	str	r2, [r3, #0]
 8012f58:	4805      	ldr	r0, [pc, #20]	; (8012f70 <log+0x80>)
 8012f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f5e:	f000 ba27 	b.w	80133b0 <nan>
 8012f62:	bf00      	nop
 8012f64:	f3af 8000 	nop.w
 8012f68:	00000000 	.word	0x00000000
 8012f6c:	fff00000 	.word	0xfff00000
 8012f70:	08017bfc 	.word	0x08017bfc
 8012f74:	00000000 	.word	0x00000000

08012f78 <__ieee754_log>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	ec51 0b10 	vmov	r0, r1, d0
 8012f80:	ed2d 8b02 	vpush	{d8}
 8012f84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012f88:	b085      	sub	sp, #20
 8012f8a:	460f      	mov	r7, r1
 8012f8c:	da58      	bge.n	8013040 <__ieee754_log+0xc8>
 8012f8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f92:	4303      	orrs	r3, r0
 8012f94:	ee10 2a10 	vmov	r2, s0
 8012f98:	f000 80fc 	beq.w	8013194 <__ieee754_log+0x21c>
 8012f9c:	2900      	cmp	r1, #0
 8012f9e:	f2c0 813c 	blt.w	801321a <__ieee754_log+0x2a2>
 8012fa2:	4be1      	ldr	r3, [pc, #900]	; (8013328 <__ieee754_log+0x3b0>)
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f7ee fedb 	bl	8001d60 <__aeabi_dmul>
 8012faa:	4be0      	ldr	r3, [pc, #896]	; (801332c <__ieee754_log+0x3b4>)
 8012fac:	460f      	mov	r7, r1
 8012fae:	429f      	cmp	r7, r3
 8012fb0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012fb4:	dc49      	bgt.n	801304a <__ieee754_log+0xd2>
 8012fb6:	153e      	asrs	r6, r7, #20
 8012fb8:	f3c7 0713 	ubfx	r7, r7, #0, #20
 8012fbc:	f507 2315 	add.w	r3, r7, #610304	; 0x95000
 8012fc0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8012fc4:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012fc8:	4416      	add	r6, r2
 8012fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fce:	eb06 5613 	add.w	r6, r6, r3, lsr #20
 8012fd2:	f083 537f 	eor.w	r3, r3, #1069547520	; 0x3fc00000
 8012fd6:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 8012fda:	ea43 0107 	orr.w	r1, r3, r7
 8012fde:	2200      	movs	r2, #0
 8012fe0:	4bd3      	ldr	r3, [pc, #844]	; (8013330 <__ieee754_log+0x3b8>)
 8012fe2:	f7ee fc31 	bl	8001848 <__aeabi_dsub>
 8012fe6:	1cbb      	adds	r3, r7, #2
 8012fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fec:	2b02      	cmp	r3, #2
 8012fee:	4682      	mov	sl, r0
 8012ff0:	468b      	mov	fp, r1
 8012ff2:	dc35      	bgt.n	8013060 <__ieee754_log+0xe8>
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	f7ef f91a 	bl	8002230 <__aeabi_dcmpeq>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	f000 80d6 	beq.w	80131ae <__ieee754_log+0x236>
 8013002:	2e00      	cmp	r6, #0
 8013004:	f000 8160 	beq.w	80132c8 <__ieee754_log+0x350>
 8013008:	4630      	mov	r0, r6
 801300a:	f7ee fd6b 	bl	8001ae4 <__aeabi_i2d>
 801300e:	a3b0      	add	r3, pc, #704	; (adr r3, 80132d0 <__ieee754_log+0x358>)
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	4606      	mov	r6, r0
 8013016:	460f      	mov	r7, r1
 8013018:	f7ee fea2 	bl	8001d60 <__aeabi_dmul>
 801301c:	a3ae      	add	r3, pc, #696	; (adr r3, 80132d8 <__ieee754_log+0x360>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	4604      	mov	r4, r0
 8013024:	460d      	mov	r5, r1
 8013026:	4630      	mov	r0, r6
 8013028:	4639      	mov	r1, r7
 801302a:	f7ee fe99 	bl	8001d60 <__aeabi_dmul>
 801302e:	4602      	mov	r2, r0
 8013030:	460b      	mov	r3, r1
 8013032:	4620      	mov	r0, r4
 8013034:	4629      	mov	r1, r5
 8013036:	f7ee fc09 	bl	800184c <__adddf3>
 801303a:	ec41 0b10 	vmov	d0, r0, r1
 801303e:	e00a      	b.n	8013056 <__ieee754_log+0xde>
 8013040:	4bba      	ldr	r3, [pc, #744]	; (801332c <__ieee754_log+0x3b4>)
 8013042:	429f      	cmp	r7, r3
 8013044:	f04f 0200 	mov.w	r2, #0
 8013048:	ddb5      	ble.n	8012fb6 <__ieee754_log+0x3e>
 801304a:	4602      	mov	r2, r0
 801304c:	460b      	mov	r3, r1
 801304e:	f7ee fbfd 	bl	800184c <__adddf3>
 8013052:	ec41 0b10 	vmov	d0, r0, r1
 8013056:	b005      	add	sp, #20
 8013058:	ecbd 8b02 	vpop	{d8}
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
 8013064:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013070:	f7ee fbec 	bl	800184c <__adddf3>
 8013074:	4602      	mov	r2, r0
 8013076:	460b      	mov	r3, r1
 8013078:	4650      	mov	r0, sl
 801307a:	4659      	mov	r1, fp
 801307c:	f7ee ff9a 	bl	8001fb4 <__aeabi_ddiv>
 8013080:	ec41 0b18 	vmov	d8, r0, r1
 8013084:	4630      	mov	r0, r6
 8013086:	f7ee fd2d 	bl	8001ae4 <__aeabi_i2d>
 801308a:	ec53 2b18 	vmov	r2, r3, d8
 801308e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013092:	ec51 0b18 	vmov	r0, r1, d8
 8013096:	f7ee fe63 	bl	8001d60 <__aeabi_dmul>
 801309a:	4602      	mov	r2, r0
 801309c:	460b      	mov	r3, r1
 801309e:	4680      	mov	r8, r0
 80130a0:	4689      	mov	r9, r1
 80130a2:	f7ee fe5d 	bl	8001d60 <__aeabi_dmul>
 80130a6:	a38e      	add	r3, pc, #568	; (adr r3, 80132e0 <__ieee754_log+0x368>)
 80130a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ac:	4604      	mov	r4, r0
 80130ae:	460d      	mov	r5, r1
 80130b0:	f7ee fe56 	bl	8001d60 <__aeabi_dmul>
 80130b4:	a38c      	add	r3, pc, #560	; (adr r3, 80132e8 <__ieee754_log+0x370>)
 80130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ba:	f7ee fbc7 	bl	800184c <__adddf3>
 80130be:	4622      	mov	r2, r4
 80130c0:	462b      	mov	r3, r5
 80130c2:	f7ee fe4d 	bl	8001d60 <__aeabi_dmul>
 80130c6:	a38a      	add	r3, pc, #552	; (adr r3, 80132f0 <__ieee754_log+0x378>)
 80130c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130cc:	f7ee fbbe 	bl	800184c <__adddf3>
 80130d0:	4622      	mov	r2, r4
 80130d2:	462b      	mov	r3, r5
 80130d4:	f7ee fe44 	bl	8001d60 <__aeabi_dmul>
 80130d8:	a387      	add	r3, pc, #540	; (adr r3, 80132f8 <__ieee754_log+0x380>)
 80130da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130de:	f7ee fbb5 	bl	800184c <__adddf3>
 80130e2:	4642      	mov	r2, r8
 80130e4:	464b      	mov	r3, r9
 80130e6:	f7ee fe3b 	bl	8001d60 <__aeabi_dmul>
 80130ea:	a385      	add	r3, pc, #532	; (adr r3, 8013300 <__ieee754_log+0x388>)
 80130ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f0:	4680      	mov	r8, r0
 80130f2:	4689      	mov	r9, r1
 80130f4:	4620      	mov	r0, r4
 80130f6:	4629      	mov	r1, r5
 80130f8:	f7ee fe32 	bl	8001d60 <__aeabi_dmul>
 80130fc:	a382      	add	r3, pc, #520	; (adr r3, 8013308 <__ieee754_log+0x390>)
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	f7ee fba3 	bl	800184c <__adddf3>
 8013106:	4622      	mov	r2, r4
 8013108:	462b      	mov	r3, r5
 801310a:	f7ee fe29 	bl	8001d60 <__aeabi_dmul>
 801310e:	a380      	add	r3, pc, #512	; (adr r3, 8013310 <__ieee754_log+0x398>)
 8013110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013114:	f7ee fb9a 	bl	800184c <__adddf3>
 8013118:	4622      	mov	r2, r4
 801311a:	462b      	mov	r3, r5
 801311c:	f7ee fe20 	bl	8001d60 <__aeabi_dmul>
 8013120:	460b      	mov	r3, r1
 8013122:	4602      	mov	r2, r0
 8013124:	4649      	mov	r1, r9
 8013126:	4640      	mov	r0, r8
 8013128:	f7ee fb90 	bl	800184c <__adddf3>
 801312c:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
 8013130:	9b01      	ldr	r3, [sp, #4]
 8013132:	3751      	adds	r7, #81	; 0x51
 8013134:	431f      	orrs	r7, r3
 8013136:	2f00      	cmp	r7, #0
 8013138:	4680      	mov	r8, r0
 801313a:	4689      	mov	r9, r1
 801313c:	dd5f      	ble.n	80131fe <__ieee754_log+0x286>
 801313e:	4b7d      	ldr	r3, [pc, #500]	; (8013334 <__ieee754_log+0x3bc>)
 8013140:	2200      	movs	r2, #0
 8013142:	4650      	mov	r0, sl
 8013144:	4659      	mov	r1, fp
 8013146:	f7ee fe0b 	bl	8001d60 <__aeabi_dmul>
 801314a:	4652      	mov	r2, sl
 801314c:	465b      	mov	r3, fp
 801314e:	f7ee fe07 	bl	8001d60 <__aeabi_dmul>
 8013152:	4604      	mov	r4, r0
 8013154:	460d      	mov	r5, r1
 8013156:	2e00      	cmp	r6, #0
 8013158:	d169      	bne.n	801322e <__ieee754_log+0x2b6>
 801315a:	4622      	mov	r2, r4
 801315c:	462b      	mov	r3, r5
 801315e:	4640      	mov	r0, r8
 8013160:	4649      	mov	r1, r9
 8013162:	f7ee fb73 	bl	800184c <__adddf3>
 8013166:	ec53 2b18 	vmov	r2, r3, d8
 801316a:	f7ee fdf9 	bl	8001d60 <__aeabi_dmul>
 801316e:	4602      	mov	r2, r0
 8013170:	460b      	mov	r3, r1
 8013172:	4620      	mov	r0, r4
 8013174:	4629      	mov	r1, r5
 8013176:	f7ee fb67 	bl	8001848 <__aeabi_dsub>
 801317a:	4602      	mov	r2, r0
 801317c:	460b      	mov	r3, r1
 801317e:	4650      	mov	r0, sl
 8013180:	4659      	mov	r1, fp
 8013182:	f7ee fb61 	bl	8001848 <__aeabi_dsub>
 8013186:	ec41 0b10 	vmov	d0, r0, r1
 801318a:	b005      	add	sp, #20
 801318c:	ecbd 8b02 	vpop	{d8}
 8013190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013194:	2200      	movs	r2, #0
 8013196:	2300      	movs	r3, #0
 8013198:	4967      	ldr	r1, [pc, #412]	; (8013338 <__ieee754_log+0x3c0>)
 801319a:	2000      	movs	r0, #0
 801319c:	f7ee ff0a 	bl	8001fb4 <__aeabi_ddiv>
 80131a0:	ec41 0b10 	vmov	d0, r0, r1
 80131a4:	b005      	add	sp, #20
 80131a6:	ecbd 8b02 	vpop	{d8}
 80131aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ae:	a35a      	add	r3, pc, #360	; (adr r3, 8013318 <__ieee754_log+0x3a0>)
 80131b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b4:	4650      	mov	r0, sl
 80131b6:	4659      	mov	r1, fp
 80131b8:	f7ee fdd2 	bl	8001d60 <__aeabi_dmul>
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	2000      	movs	r0, #0
 80131c2:	495c      	ldr	r1, [pc, #368]	; (8013334 <__ieee754_log+0x3bc>)
 80131c4:	f7ee fb40 	bl	8001848 <__aeabi_dsub>
 80131c8:	4652      	mov	r2, sl
 80131ca:	4604      	mov	r4, r0
 80131cc:	460d      	mov	r5, r1
 80131ce:	465b      	mov	r3, fp
 80131d0:	4650      	mov	r0, sl
 80131d2:	4659      	mov	r1, fp
 80131d4:	f7ee fdc4 	bl	8001d60 <__aeabi_dmul>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f7ee fdbe 	bl	8001d60 <__aeabi_dmul>
 80131e4:	4604      	mov	r4, r0
 80131e6:	460d      	mov	r5, r1
 80131e8:	2e00      	cmp	r6, #0
 80131ea:	d159      	bne.n	80132a0 <__ieee754_log+0x328>
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4650      	mov	r0, sl
 80131f2:	4659      	mov	r1, fp
 80131f4:	f7ee fb28 	bl	8001848 <__aeabi_dsub>
 80131f8:	ec41 0b10 	vmov	d0, r0, r1
 80131fc:	e72b      	b.n	8013056 <__ieee754_log+0xde>
 80131fe:	2e00      	cmp	r6, #0
 8013200:	f040 809c 	bne.w	801333c <__ieee754_log+0x3c4>
 8013204:	4602      	mov	r2, r0
 8013206:	460b      	mov	r3, r1
 8013208:	4650      	mov	r0, sl
 801320a:	4659      	mov	r1, fp
 801320c:	f7ee fb1c 	bl	8001848 <__aeabi_dsub>
 8013210:	ec53 2b18 	vmov	r2, r3, d8
 8013214:	f7ee fda4 	bl	8001d60 <__aeabi_dmul>
 8013218:	e7af      	b.n	801317a <__ieee754_log+0x202>
 801321a:	460b      	mov	r3, r1
 801321c:	f7ee fb14 	bl	8001848 <__aeabi_dsub>
 8013220:	2200      	movs	r2, #0
 8013222:	2300      	movs	r3, #0
 8013224:	f7ee fec6 	bl	8001fb4 <__aeabi_ddiv>
 8013228:	ec41 0b10 	vmov	d0, r0, r1
 801322c:	e713      	b.n	8013056 <__ieee754_log+0xde>
 801322e:	a328      	add	r3, pc, #160	; (adr r3, 80132d0 <__ieee754_log+0x358>)
 8013230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013238:	f7ee fd92 	bl	8001d60 <__aeabi_dmul>
 801323c:	4622      	mov	r2, r4
 801323e:	462b      	mov	r3, r5
 8013240:	4606      	mov	r6, r0
 8013242:	460f      	mov	r7, r1
 8013244:	4640      	mov	r0, r8
 8013246:	4649      	mov	r1, r9
 8013248:	f7ee fb00 	bl	800184c <__adddf3>
 801324c:	ec53 2b18 	vmov	r2, r3, d8
 8013250:	f7ee fd86 	bl	8001d60 <__aeabi_dmul>
 8013254:	a320      	add	r3, pc, #128	; (adr r3, 80132d8 <__ieee754_log+0x360>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	4680      	mov	r8, r0
 801325c:	4689      	mov	r9, r1
 801325e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013262:	f7ee fd7d 	bl	8001d60 <__aeabi_dmul>
 8013266:	4602      	mov	r2, r0
 8013268:	460b      	mov	r3, r1
 801326a:	4640      	mov	r0, r8
 801326c:	4649      	mov	r1, r9
 801326e:	f7ee faed 	bl	800184c <__adddf3>
 8013272:	4602      	mov	r2, r0
 8013274:	460b      	mov	r3, r1
 8013276:	4620      	mov	r0, r4
 8013278:	4629      	mov	r1, r5
 801327a:	f7ee fae5 	bl	8001848 <__aeabi_dsub>
 801327e:	4652      	mov	r2, sl
 8013280:	465b      	mov	r3, fp
 8013282:	f7ee fae1 	bl	8001848 <__aeabi_dsub>
 8013286:	4602      	mov	r2, r0
 8013288:	460b      	mov	r3, r1
 801328a:	4630      	mov	r0, r6
 801328c:	4639      	mov	r1, r7
 801328e:	f7ee fadb 	bl	8001848 <__aeabi_dsub>
 8013292:	ec41 0b10 	vmov	d0, r0, r1
 8013296:	b005      	add	sp, #20
 8013298:	ecbd 8b02 	vpop	{d8}
 801329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7ee fc1f 	bl	8001ae4 <__aeabi_i2d>
 80132a6:	a30a      	add	r3, pc, #40	; (adr r3, 80132d0 <__ieee754_log+0x358>)
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	4680      	mov	r8, r0
 80132ae:	4689      	mov	r9, r1
 80132b0:	f7ee fd56 	bl	8001d60 <__aeabi_dmul>
 80132b4:	a308      	add	r3, pc, #32	; (adr r3, 80132d8 <__ieee754_log+0x360>)
 80132b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ba:	4606      	mov	r6, r0
 80132bc:	460f      	mov	r7, r1
 80132be:	4640      	mov	r0, r8
 80132c0:	4649      	mov	r1, r9
 80132c2:	f7ee fd4d 	bl	8001d60 <__aeabi_dmul>
 80132c6:	e7d4      	b.n	8013272 <__ieee754_log+0x2fa>
 80132c8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8013320 <__ieee754_log+0x3a8>
 80132cc:	e6c3      	b.n	8013056 <__ieee754_log+0xde>
 80132ce:	bf00      	nop
 80132d0:	fee00000 	.word	0xfee00000
 80132d4:	3fe62e42 	.word	0x3fe62e42
 80132d8:	35793c76 	.word	0x35793c76
 80132dc:	3dea39ef 	.word	0x3dea39ef
 80132e0:	df3e5244 	.word	0xdf3e5244
 80132e4:	3fc2f112 	.word	0x3fc2f112
 80132e8:	96cb03de 	.word	0x96cb03de
 80132ec:	3fc74664 	.word	0x3fc74664
 80132f0:	94229359 	.word	0x94229359
 80132f4:	3fd24924 	.word	0x3fd24924
 80132f8:	55555593 	.word	0x55555593
 80132fc:	3fe55555 	.word	0x3fe55555
 8013300:	d078c69f 	.word	0xd078c69f
 8013304:	3fc39a09 	.word	0x3fc39a09
 8013308:	1d8e78af 	.word	0x1d8e78af
 801330c:	3fcc71c5 	.word	0x3fcc71c5
 8013310:	9997fa04 	.word	0x9997fa04
 8013314:	3fd99999 	.word	0x3fd99999
 8013318:	55555555 	.word	0x55555555
 801331c:	3fd55555 	.word	0x3fd55555
	...
 8013328:	43500000 	.word	0x43500000
 801332c:	7fefffff 	.word	0x7fefffff
 8013330:	3ff00000 	.word	0x3ff00000
 8013334:	3fe00000 	.word	0x3fe00000
 8013338:	c3500000 	.word	0xc3500000
 801333c:	a318      	add	r3, pc, #96	; (adr r3, 80133a0 <__ieee754_log+0x428>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013346:	f7ee fd0b 	bl	8001d60 <__aeabi_dmul>
 801334a:	4642      	mov	r2, r8
 801334c:	464b      	mov	r3, r9
 801334e:	4604      	mov	r4, r0
 8013350:	460d      	mov	r5, r1
 8013352:	4650      	mov	r0, sl
 8013354:	4659      	mov	r1, fp
 8013356:	f7ee fa77 	bl	8001848 <__aeabi_dsub>
 801335a:	ec53 2b18 	vmov	r2, r3, d8
 801335e:	f7ee fcff 	bl	8001d60 <__aeabi_dmul>
 8013362:	a311      	add	r3, pc, #68	; (adr r3, 80133a8 <__ieee754_log+0x430>)
 8013364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013368:	4606      	mov	r6, r0
 801336a:	460f      	mov	r7, r1
 801336c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013370:	f7ee fcf6 	bl	8001d60 <__aeabi_dmul>
 8013374:	4602      	mov	r2, r0
 8013376:	460b      	mov	r3, r1
 8013378:	4630      	mov	r0, r6
 801337a:	4639      	mov	r1, r7
 801337c:	f7ee fa64 	bl	8001848 <__aeabi_dsub>
 8013380:	4652      	mov	r2, sl
 8013382:	465b      	mov	r3, fp
 8013384:	f7ee fa60 	bl	8001848 <__aeabi_dsub>
 8013388:	4602      	mov	r2, r0
 801338a:	460b      	mov	r3, r1
 801338c:	4620      	mov	r0, r4
 801338e:	4629      	mov	r1, r5
 8013390:	f7ee fa5a 	bl	8001848 <__aeabi_dsub>
 8013394:	ec41 0b10 	vmov	d0, r0, r1
 8013398:	e65d      	b.n	8013056 <__ieee754_log+0xde>
 801339a:	bf00      	nop
 801339c:	f3af 8000 	nop.w
 80133a0:	fee00000 	.word	0xfee00000
 80133a4:	3fe62e42 	.word	0x3fe62e42
 80133a8:	35793c76 	.word	0x35793c76
 80133ac:	3dea39ef 	.word	0x3dea39ef

080133b0 <nan>:
 80133b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80133b8 <nan+0x8>
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	00000000 	.word	0x00000000
 80133bc:	7ff80000 	.word	0x7ff80000

080133c0 <_init>:
 80133c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133c2:	bf00      	nop
 80133c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133c6:	bc08      	pop	{r3}
 80133c8:	469e      	mov	lr, r3
 80133ca:	4770      	bx	lr

080133cc <_fini>:
 80133cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ce:	bf00      	nop
 80133d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133d2:	bc08      	pop	{r3}
 80133d4:	469e      	mov	lr, r3
 80133d6:	4770      	bx	lr
